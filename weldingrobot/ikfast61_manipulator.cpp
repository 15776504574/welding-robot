/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2020-03-09 19:01:56.461551
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKsin(j[2]);
x3=IKcos(j[2]);
x4=IKsin(j[1]);
x5=IKcos(j[3]);
x6=IKsin(j[3]);
x7=IKcos(j[5]);
x8=IKsin(j[5]);
x9=IKcos(j[4]);
x10=IKsin(j[4]);
x11=IKsin(j[0]);
x12=((0.3093)*x9);
x13=((0.39225)*x0);
x14=((0.09465)*x0);
x15=((0.09465)*x11);
x16=((1.0)*x9);
x17=((0.39225)*x11);
x18=((1.0)*x5);
x19=((0.425)*x1);
x20=((1.0)*x11);
x21=((0.048)*x5);
x22=((0.048)*x6);
x23=((0.048)*x9);
x24=((1.0)*x0);
x25=(x1*x3);
x26=(x8*x9);
x27=(x10*x11);
x28=(x2*x4);
x29=(x1*x2);
x30=(x3*x4);
x31=(x0*x10);
x32=((-0.3093)*x5);
x33=(x10*x20);
x34=(x24*x25);
x35=(x20*x25);
x36=(x30+x29);
x37=((((-1.0)*x28))+(((1.0)*x25)));
x38=((((-1.0)*x30))+(((-1.0)*x29)));
x39=(x36*x5);
x40=(x37*x6);
x41=((((-1.0)*x34))+((x0*x28)));
x42=((((-1.0)*x35))+((x11*x28)));
x43=((((-1.0)*x24*x28))+x34);
x44=(x35+(((-1.0)*x20*x28)));
x45=(x24*((x30+x29)));
x46=(x20*((x30+x29)));
x47=(x41*x5);
x48=(x42*x5);
x49=(x46*x5);
x50=(x45*x6);
x51=(x46*x6);
x52=(((x38*x6))+((x37*x5)));
x53=(x47+x50);
x54=(x48+x51);
x55=(((x43*x6))+((x45*x5)));
x56=(x49+((x44*x6)));
x57=(x54*x9);
x58=(x53*x9);
eerot[0]=(((x7*(((((-1.0)*x33))+x58))))+((x55*x8)));
eerot[1]=(((x8*((x33+(((-1.0)*x16*x53))))))+((x55*x7)));
eerot[2]=(((x10*(((((-1.0)*x18*x41))+(((-1.0)*x50))))))+(((-1.0)*x11*x16)));
IkReal x59=((1.0)*x14);
eetrans[0]=(((x7*((((x22*x43))+((x21*x45))))))+((x10*((((x32*x41))+(((-0.3093)*x50))))))+((x0*x19))+(((-1.0)*x13*x28))+(((-1.0)*x11*x12))+((x5*(((((-1.0)*x30*x59))+(((-1.0)*x29*x59))))))+(((-0.10915)*x11))+((x13*x25))+((x8*(((((0.048)*x27))+(((-1.0)*x23*x53))))))+((x6*(((((-1.0)*x25*x59))+((x14*x28)))))));
eerot[3]=(((x56*x8))+((x7*((x31+x57)))));
eerot[4]=(((x56*x7))+((x8*(((((-1.0)*x10*x24))+(((-1.0)*x16*x54)))))));
eerot[5]=(((x0*x9))+((x10*(((((-1.0)*x18*x42))+(((-1.0)*x51)))))));
IkReal x60=((1.0)*x15);
eetrans[1]=(((x0*x12))+((x5*(((((-1.0)*x30*x60))+(((-1.0)*x29*x60))))))+((x10*((((x32*x42))+(((-0.3093)*x51))))))+(((0.10915)*x0))+((x6*(((((-1.0)*x25*x60))+((x15*x28))))))+((x7*((((x22*x44))+((x21*x46))))))+(((-1.0)*x17*x28))+((x8*(((((-1.0)*x23*x54))+(((-0.048)*x31))))))+((x17*x25))+((x11*x19)));
eerot[6]=(((x7*x9*((x39+x40))))+((x52*x8)));
eerot[7]=(((x26*(((((-1.0)*x39))+(((-1.0)*x40))))))+((x52*x7)));
eerot[8]=(x10*(((((-1.0)*x18*x36))+(((-1.0)*x40)))));
eetrans[2]=((0.08916)+(((-0.39225)*x30))+((x6*(((((0.09465)*x29))+(((0.09465)*x30))))))+((x10*(((((-0.3093)*x40))+(((-0.3093)*x39))))))+((x26*(((((-0.048)*x40))+(((-0.048)*x39))))))+(((-0.425)*x4))+((x5*(((((-0.09465)*x25))+(((0.09465)*x28))))))+(((-0.39225)*x29))+((x7*((((x21*x37))+((x22*x38)))))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j0mul,j1,cj1,sj1,htj1,j1mul,j2,cj2,sj2,htj2,j2mul,j3,cj3,sj3,htj3,j3mul,j4,cj4,sj4,htj4,j4mul,j5,cj5,sj5,htj5,j5mul,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((((-0.3093)*r02))+px+(((-0.048)*r01)));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((-0.3093)*r12))+py+(((-0.048)*r11)));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((-0.08916)+pz+(((-0.3093)*r22))+(((-0.048)*r21)));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x61=((1.0)*px);
IkReal x62=((1.0)*pz);
IkReal x63=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x63))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x62)));
rxp0_2=((((-1.0)*r10*x61))+((py*r00)));
rxp1_0=((((-1.0)*r21*x63))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x62)));
rxp1_2=((((-1.0)*r11*x61))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x63)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x62)));
rxp2_2=((((-1.0)*r12*x61))+((py*r02)));
IkReal IKFAST_ALIGNED16(matrixinvcoeffs[256]);
IkReal x64=((0.1893)*npx);
IkReal x65=((0.1893)*npy);
IkReal x66=((0.09465)*r22);
IkReal x67=((0.09465)*r21);
IkReal x68=((-0.09465)*r20);
IkReal x69=((-1.0)*r20);
IkReal x70=((-1.0)*rxp0_2);
IkReal x71=((-0.09465)*r21);
IkReal x72=((-1.0)*r21);
IkReal x73=((-1.0)*rxp1_2);
IkReal x74=((-1.0)*npx);
IkReal x75=((-1.0)*r22);
IkReal x76=((-1.0)*npz);
matrixinvcoeffs[0]=x68;
matrixinvcoeffs[1]=x64;
matrixinvcoeffs[2]=0;
matrixinvcoeffs[3]=0;
matrixinvcoeffs[4]=0;
matrixinvcoeffs[5]=0;
matrixinvcoeffs[6]=0;
matrixinvcoeffs[7]=0;
matrixinvcoeffs[8]=0;
matrixinvcoeffs[9]=npx;
matrixinvcoeffs[10]=x69;
matrixinvcoeffs[11]=0;
matrixinvcoeffs[12]=0;
matrixinvcoeffs[13]=0;
matrixinvcoeffs[14]=0;
matrixinvcoeffs[15]=x70;
matrixinvcoeffs[16]=0;
matrixinvcoeffs[17]=0;
matrixinvcoeffs[18]=x68;
matrixinvcoeffs[19]=x64;
matrixinvcoeffs[20]=0;
matrixinvcoeffs[21]=0;
matrixinvcoeffs[22]=0;
matrixinvcoeffs[23]=0;
matrixinvcoeffs[24]=npx;
matrixinvcoeffs[25]=0;
matrixinvcoeffs[26]=0;
matrixinvcoeffs[27]=x69;
matrixinvcoeffs[28]=0;
matrixinvcoeffs[29]=0;
matrixinvcoeffs[30]=x70;
matrixinvcoeffs[31]=0;
matrixinvcoeffs[32]=x71;
matrixinvcoeffs[33]=x65;
matrixinvcoeffs[34]=0;
matrixinvcoeffs[35]=0;
matrixinvcoeffs[36]=0;
matrixinvcoeffs[37]=0;
matrixinvcoeffs[38]=0;
matrixinvcoeffs[39]=0;
matrixinvcoeffs[40]=0;
matrixinvcoeffs[41]=npy;
matrixinvcoeffs[42]=x72;
matrixinvcoeffs[43]=0;
matrixinvcoeffs[44]=0;
matrixinvcoeffs[45]=0;
matrixinvcoeffs[46]=0;
matrixinvcoeffs[47]=x73;
matrixinvcoeffs[48]=0;
matrixinvcoeffs[49]=0;
matrixinvcoeffs[50]=x71;
matrixinvcoeffs[51]=x65;
matrixinvcoeffs[52]=0;
matrixinvcoeffs[53]=0;
matrixinvcoeffs[54]=0;
matrixinvcoeffs[55]=0;
matrixinvcoeffs[56]=npy;
matrixinvcoeffs[57]=0;
matrixinvcoeffs[58]=0;
matrixinvcoeffs[59]=x72;
matrixinvcoeffs[60]=0;
matrixinvcoeffs[61]=0;
matrixinvcoeffs[62]=x73;
matrixinvcoeffs[63]=0;
matrixinvcoeffs[64]=0;
matrixinvcoeffs[65]=0;
matrixinvcoeffs[66]=0;
matrixinvcoeffs[67]=0;
matrixinvcoeffs[68]=0;
matrixinvcoeffs[69]=0;
matrixinvcoeffs[70]=0;
matrixinvcoeffs[71]=0;
matrixinvcoeffs[72]=npz;
matrixinvcoeffs[73]=0;
matrixinvcoeffs[74]=0;
matrixinvcoeffs[75]=x75;
matrixinvcoeffs[76]=x66;
matrixinvcoeffs[77]=0;
matrixinvcoeffs[78]=((-1.0)*rxp2_2);
matrixinvcoeffs[79]=0;
matrixinvcoeffs[80]=0;
matrixinvcoeffs[81]=0;
matrixinvcoeffs[82]=0;
matrixinvcoeffs[83]=0;
matrixinvcoeffs[84]=0;
matrixinvcoeffs[85]=0;
matrixinvcoeffs[86]=0;
matrixinvcoeffs[87]=0;
matrixinvcoeffs[88]=0;
matrixinvcoeffs[89]=x76;
matrixinvcoeffs[90]=r22;
matrixinvcoeffs[91]=0;
matrixinvcoeffs[92]=0;
matrixinvcoeffs[93]=x66;
matrixinvcoeffs[94]=0;
matrixinvcoeffs[95]=rxp2_2;
matrixinvcoeffs[96]=0;
matrixinvcoeffs[97]=0;
matrixinvcoeffs[98]=0;
matrixinvcoeffs[99]=0;
matrixinvcoeffs[100]=r21;
matrixinvcoeffs[101]=npy;
matrixinvcoeffs[102]=0;
matrixinvcoeffs[103]=0;
matrixinvcoeffs[104]=0;
matrixinvcoeffs[105]=0;
matrixinvcoeffs[106]=0;
matrixinvcoeffs[107]=0;
matrixinvcoeffs[108]=x73;
matrixinvcoeffs[109]=0;
matrixinvcoeffs[110]=x71;
matrixinvcoeffs[111]=0;
matrixinvcoeffs[112]=0;
matrixinvcoeffs[113]=0;
matrixinvcoeffs[114]=0;
matrixinvcoeffs[115]=0;
matrixinvcoeffs[116]=0;
matrixinvcoeffs[117]=0;
matrixinvcoeffs[118]=r21;
matrixinvcoeffs[119]=npy;
matrixinvcoeffs[120]=0;
matrixinvcoeffs[121]=0;
matrixinvcoeffs[122]=0;
matrixinvcoeffs[123]=0;
matrixinvcoeffs[124]=0;
matrixinvcoeffs[125]=x73;
matrixinvcoeffs[126]=0;
matrixinvcoeffs[127]=x67;
matrixinvcoeffs[128]=0;
matrixinvcoeffs[129]=0;
matrixinvcoeffs[130]=0;
matrixinvcoeffs[131]=0;
matrixinvcoeffs[132]=x69;
matrixinvcoeffs[133]=x74;
matrixinvcoeffs[134]=0;
matrixinvcoeffs[135]=0;
matrixinvcoeffs[136]=0;
matrixinvcoeffs[137]=0;
matrixinvcoeffs[138]=0;
matrixinvcoeffs[139]=0;
matrixinvcoeffs[140]=rxp0_2;
matrixinvcoeffs[141]=0;
matrixinvcoeffs[142]=((0.09465)*r20);
matrixinvcoeffs[143]=0;
matrixinvcoeffs[144]=0;
matrixinvcoeffs[145]=0;
matrixinvcoeffs[146]=0;
matrixinvcoeffs[147]=0;
matrixinvcoeffs[148]=0;
matrixinvcoeffs[149]=0;
matrixinvcoeffs[150]=x69;
matrixinvcoeffs[151]=x74;
matrixinvcoeffs[152]=0;
matrixinvcoeffs[153]=0;
matrixinvcoeffs[154]=0;
matrixinvcoeffs[155]=0;
matrixinvcoeffs[156]=0;
matrixinvcoeffs[157]=rxp0_2;
matrixinvcoeffs[158]=0;
matrixinvcoeffs[159]=x68;
matrixinvcoeffs[160]=0;
matrixinvcoeffs[161]=0;
matrixinvcoeffs[162]=0;
matrixinvcoeffs[163]=0;
matrixinvcoeffs[164]=x75;
matrixinvcoeffs[165]=x76;
matrixinvcoeffs[166]=0;
matrixinvcoeffs[167]=0;
matrixinvcoeffs[168]=0;
matrixinvcoeffs[169]=0;
matrixinvcoeffs[170]=0;
matrixinvcoeffs[171]=0;
matrixinvcoeffs[172]=rxp2_2;
matrixinvcoeffs[173]=0;
matrixinvcoeffs[174]=x66;
matrixinvcoeffs[175]=0;
matrixinvcoeffs[176]=0;
matrixinvcoeffs[177]=0;
matrixinvcoeffs[178]=0;
matrixinvcoeffs[179]=0;
matrixinvcoeffs[180]=0;
matrixinvcoeffs[181]=0;
matrixinvcoeffs[182]=x75;
matrixinvcoeffs[183]=x76;
matrixinvcoeffs[184]=0;
matrixinvcoeffs[185]=0;
matrixinvcoeffs[186]=0;
matrixinvcoeffs[187]=0;
matrixinvcoeffs[188]=0;
matrixinvcoeffs[189]=rxp2_2;
matrixinvcoeffs[190]=0;
matrixinvcoeffs[191]=((-0.09465)*r22);
matrixinvcoeffs[192]=0;
matrixinvcoeffs[193]=0;
matrixinvcoeffs[194]=0;
matrixinvcoeffs[195]=0;
matrixinvcoeffs[196]=0;
matrixinvcoeffs[197]=0;
matrixinvcoeffs[198]=0;
matrixinvcoeffs[199]=0;
matrixinvcoeffs[200]=npy;
matrixinvcoeffs[201]=0;
matrixinvcoeffs[202]=0;
matrixinvcoeffs[203]=x72;
matrixinvcoeffs[204]=x67;
matrixinvcoeffs[205]=0;
matrixinvcoeffs[206]=x73;
matrixinvcoeffs[207]=0;
matrixinvcoeffs[208]=0;
matrixinvcoeffs[209]=0;
matrixinvcoeffs[210]=0;
matrixinvcoeffs[211]=0;
matrixinvcoeffs[212]=0;
matrixinvcoeffs[213]=0;
matrixinvcoeffs[214]=0;
matrixinvcoeffs[215]=0;
matrixinvcoeffs[216]=0;
matrixinvcoeffs[217]=((-1.0)*npy);
matrixinvcoeffs[218]=r21;
matrixinvcoeffs[219]=0;
matrixinvcoeffs[220]=0;
matrixinvcoeffs[221]=x67;
matrixinvcoeffs[222]=0;
matrixinvcoeffs[223]=rxp1_2;
matrixinvcoeffs[224]=0;
matrixinvcoeffs[225]=0;
matrixinvcoeffs[226]=0;
matrixinvcoeffs[227]=0;
matrixinvcoeffs[228]=0;
matrixinvcoeffs[229]=0;
matrixinvcoeffs[230]=0;
matrixinvcoeffs[231]=0;
matrixinvcoeffs[232]=x74;
matrixinvcoeffs[233]=0;
matrixinvcoeffs[234]=0;
matrixinvcoeffs[235]=r20;
matrixinvcoeffs[236]=x68;
matrixinvcoeffs[237]=0;
matrixinvcoeffs[238]=rxp0_2;
matrixinvcoeffs[239]=0;
matrixinvcoeffs[240]=0;
matrixinvcoeffs[241]=0;
matrixinvcoeffs[242]=0;
matrixinvcoeffs[243]=0;
matrixinvcoeffs[244]=0;
matrixinvcoeffs[245]=0;
matrixinvcoeffs[246]=0;
matrixinvcoeffs[247]=0;
matrixinvcoeffs[248]=0;
matrixinvcoeffs[249]=npx;
matrixinvcoeffs[250]=x69;
matrixinvcoeffs[251]=0;
matrixinvcoeffs[252]=0;
matrixinvcoeffs[253]=x68;
matrixinvcoeffs[254]=0;
matrixinvcoeffs[255]=x70;
if( !matrixinverse<16>(matrixinvcoeffs) ) {
continue;
}
IkReal gclwh0_0=matrixinvcoeffs[0], gclwh0_1=matrixinvcoeffs[16], gclwh1_2=matrixinvcoeffs[33], gclwh1_3=matrixinvcoeffs[49], gclwh2_0=matrixinvcoeffs[2], gclwh2_1=matrixinvcoeffs[18], gclwh3_2=matrixinvcoeffs[35], gclwh3_3=matrixinvcoeffs[51], gclwh4_2=matrixinvcoeffs[36], gclwh4_3=matrixinvcoeffs[52], gclwh4_4=matrixinvcoeffs[68], gclwh4_8=matrixinvcoeffs[132], gclwh4_11=matrixinvcoeffs[180], gclwh4_14=matrixinvcoeffs[228], gclwh5_0=matrixinvcoeffs[5], gclwh5_1=matrixinvcoeffs[21], gclwh5_6=matrixinvcoeffs[101], gclwh5_9=matrixinvcoeffs[149], gclwh5_10=matrixinvcoeffs[165], gclwh5_15=matrixinvcoeffs[245], gclwh6_2=matrixinvcoeffs[38], gclwh6_4=matrixinvcoeffs[70], gclwh6_5=matrixinvcoeffs[86], gclwh6_11=matrixinvcoeffs[182], gclwh6_12=matrixinvcoeffs[198], gclwh7_0=matrixinvcoeffs[7], gclwh7_6=matrixinvcoeffs[103], gclwh7_7=matrixinvcoeffs[119], gclwh7_10=matrixinvcoeffs[167], gclwh7_13=matrixinvcoeffs[215], gclwh8_2=matrixinvcoeffs[40], gclwh8_4=matrixinvcoeffs[72], gclwh8_5=matrixinvcoeffs[88], gclwh8_11=matrixinvcoeffs[184], gclwh8_12=matrixinvcoeffs[200], gclwh9_0=matrixinvcoeffs[9], gclwh9_6=matrixinvcoeffs[105], gclwh9_7=matrixinvcoeffs[121], gclwh9_10=matrixinvcoeffs[169], gclwh9_13=matrixinvcoeffs[217], gclwh10_2=matrixinvcoeffs[42], gclwh10_4=matrixinvcoeffs[74], gclwh10_5=matrixinvcoeffs[90], gclwh10_11=matrixinvcoeffs[186], gclwh10_12=matrixinvcoeffs[202], gclwh11_0=matrixinvcoeffs[11], gclwh11_6=matrixinvcoeffs[107], gclwh11_7=matrixinvcoeffs[123], gclwh11_10=matrixinvcoeffs[171], gclwh11_13=matrixinvcoeffs[219], gclwh12_2=matrixinvcoeffs[44], gclwh12_3=matrixinvcoeffs[60], gclwh12_4=matrixinvcoeffs[76], gclwh12_8=matrixinvcoeffs[140], gclwh12_11=matrixinvcoeffs[188], gclwh12_14=matrixinvcoeffs[236], gclwh13_0=matrixinvcoeffs[13], gclwh13_1=matrixinvcoeffs[29], gclwh13_6=matrixinvcoeffs[109], gclwh13_9=matrixinvcoeffs[157], gclwh13_10=matrixinvcoeffs[173], gclwh13_15=matrixinvcoeffs[253], gclwh14_2=matrixinvcoeffs[46], gclwh14_3=matrixinvcoeffs[62], gclwh14_4=matrixinvcoeffs[78], gclwh14_8=matrixinvcoeffs[142], gclwh14_11=matrixinvcoeffs[190], gclwh14_14=matrixinvcoeffs[238], gclwh15_0=matrixinvcoeffs[15], gclwh15_1=matrixinvcoeffs[31], gclwh15_6=matrixinvcoeffs[111], gclwh15_9=matrixinvcoeffs[159], gclwh15_10=matrixinvcoeffs[175], gclwh15_15=matrixinvcoeffs[255];
IkReal op[72], zeror[48];
int numroots;;
IkReal x77=pz*pz;
IkReal x78=pp*pp;
IkReal x79=((0.1893)*pz);
IkReal x80=((1.7)*pz);
IkReal x81=(gclwh15_9*npx);
IkReal x82=(gclwh6_11*r21);
IkReal x83=(pp*r22);
IkReal x84=((0.00702803935125)*r21);
IkReal x85=(gclwh5_9*npz);
IkReal x86=(gclwh8_11*r20);
IkReal x87=(npy*pz);
IkReal x88=((3.60823078949063e-5)*r22);
IkReal x89=(gclwh14_3*rxp0_2);
IkReal x90=((0.000977833645875)*r20);
IkReal x91=(npz*pz);
IkReal x92=((0.000977833645875)*r21);
IkReal x93=(gclwh10_12*r22);
IkReal x94=(gclwh10_2*rxp2_2);
IkReal x95=((0.00076243651125)*rxp1_2);
IkReal x96=((0.00600991575645741)*r20);
IkReal x97=((0.154705425)*rxp1_2);
IkReal x98=((0.017917245)*r21);
IkReal x99=(gclwh6_11*rxp1_2);
IkReal x100=((0.3786)*rxp1_2);
IkReal x101=(gclwh7_0*rxp1_2);
IkReal x102=((0.7572)*rxp1_2);
IkReal x103=((0.154705425)*rxp2_2);
IkReal x104=((2.0)*gclwh11_10);
IkReal x105=(gclwh12_8*r21);
IkReal x106=((0.81725)*pp);
IkReal x107=(pp*pz);
IkReal x108=(gclwh14_2*r20);
IkReal x109=(pp*r21);
IkReal x110=((2.0)*gclwh4_11);
IkReal x111=(gclwh8_12*r20);
IkReal x112=(npx*pz);
IkReal x113=(gclwh14_8*rxp0_2);
IkReal x114=((0.1893)*rxp2_2);
IkReal x115=(gclwh5_9*rxp2_2);
IkReal x116=((0.020662095)*rxp1_2);
IkReal x117=((0.007321434238125)*r21);
IkReal x118=((1.6345)*pz);
IkReal x119=((0.0089586225)*pz);
IkReal x120=(gclwh13_0*r21);
IkReal x121=(gclwh5_9*r22);
IkReal x122=(gclwh11_10*r22);
IkReal x123=(gclwh11_13*r22);
IkReal x124=((1.0)*r21);
IkReal x125=((0.3786)*rxp0_2);
IkReal x126=(gclwh14_14*rxp0_2);
IkReal x127=(pp*r20);
IkReal x128=((0.00195566729175)*r22);
IkReal x129=(gclwh15_10*rxp0_2);
IkReal x130=(gclwh14_8*r20);
IkReal x131=(gclwh12_8*rxp1_2);
IkReal x132=((2.0)*gclwh9_10);
IkReal x133=((2.0)*gclwh15_10);
IkReal x134=(gclwh5_15*rxp2_2);
IkReal x135=((2.0)*gclwh13_10);
IkReal x136=((0.00702803935125)*r20);
IkReal x137=(gclwh13_9*r21);
IkReal x138=(gclwh5_0*r22);
IkReal x139=((0.01464286847625)*r20);
IkReal x140=(gclwh15_1*r20);
IkReal x141=((0.000977833645875)*r22);
IkReal x142=((0.0089586225)*r20);
IkReal x143=((2.0)*gclwh10_11);
IkReal x144=(gclwh5_10*r22);
IkReal x145=((2.0)*pp);
IkReal x146=(gclwh15_9*r20);
IkReal x147=(gclwh1_3*r20);
IkReal x148=((0.00195566729175)*r20);
IkReal x149=(gclwh4_3*rxp2_2);
IkReal x150=((0.2183)*gclwh13_15);
IkReal x151=((2.0)*gclwh7_10);
IkReal x152=(gclwh15_0*r20);
IkReal x153=(gclwh9_0*r20);
IkReal x154=(gclwh15_15*rxp0_2);
IkReal x155=(gclwh2_1*r21);
IkReal x156=((4.0)*gclwh11_10);
IkReal x157=((0.30941085)*rxp0_2);
IkReal x158=(gclwh9_0*rxp0_2);
IkReal x159=(gclwh5_10*rxp2_2);
IkReal x160=((0.2183)*gclwh12_14);
IkReal x161=((0.2183)*gclwh14_14);
IkReal x162=(gclwh4_2*rxp2_2);
IkReal x163=((0.03275)*pp);
IkReal x164=((0.006199575)*rxp1_2);
IkReal x165=(gclwh12_2*rxp1_2);
IkReal x166=(gclwh5_0*rxp2_2);
IkReal x167=((3.60823078949063e-5)*r21);
IkReal x168=(gclwh14_11*rxp0_2);
IkReal x169=((0.020662095)*rxp0_2);
IkReal x170=(gclwh14_8*npx);
IkReal x171=((4.0)*gclwh9_10);
IkReal x172=((0.00195566729175)*r21);
IkReal x173=(gclwh8_12*rxp0_2);
IkReal x174=((0.01464286847625)*r21);
IkReal x175=((0.3786)*rxp2_2);
IkReal x176=((0.01464286847625)*r22);
IkReal x177=(gclwh7_13*r21);
IkReal x178=((4.0)*gclwh7_10);
IkReal x179=(gclwh13_0*rxp1_2);
IkReal x180=((0.1893)*rxp1_2);
IkReal x181=(gclwh6_2*r21);
IkReal x182=(gclwh5_1*rxp2_2);
IkReal x183=(gclwh8_2*rxp0_2);
IkReal x184=(gclwh9_10*r20);
IkReal x185=((4.0)*pp);
IkReal x186=(gclwh15_1*rxp0_2);
IkReal x187=(gclwh9_13*r20);
IkReal x188=((0.0089586225)*r21);
IkReal x189=(gclwh0_0*r20);
IkReal x190=(gclwh10_11*r22);
IkReal x191=((2.0)*gclwh12_11);
IkReal x192=((0.0655)*pz);
IkReal x193=((0.006199575)*rxp2_2);
IkReal x194=(gclwh12_14*rxp1_2);
IkReal x195=(gclwh15_0*rxp0_2);
IkReal x196=((2.0)*npx);
IkReal x197=(gclwh9_13*rxp0_2);
IkReal x198=((1.0)*pp);
IkReal x199=((4.0)*gclwh10_11);
IkReal x200=(gclwh15_9*rxp0_2);
IkReal x201=((3.60823078949063e-5)*r20);
IkReal x202=((0.00702803935125)*r22);
IkReal x203=(gclwh8_2*r20);
IkReal x204=((0.2183)*gclwh5_15);
IkReal x205=(gclwh10_2*r22);
IkReal x206=(gclwh5_1*r22);
IkReal x207=(gclwh13_9*rxp1_2);
IkReal x208=((2.0)*gclwh5_10);
IkReal x209=((0.020662095)*rxp2_2);
IkReal x210=(gclwh4_8*r22);
IkReal x211=((0.017917245)*r20);
IkReal x212=(gclwh7_0*r21);
IkReal x213=((0.00600991575645741)*r21);
IkReal x214=(gclwh11_0*r22);
IkReal x215=(gclwh6_12*r21);
IkReal x216=((0.2183)*gclwh15_15);
IkReal x217=(gclwh11_0*rxp2_2);
IkReal x218=((0.2183)*gclwh4_14);
IkReal x219=(gclwh4_14*rxp2_2);
IkReal x220=(gclwh6_2*rxp1_2);
IkReal x221=((0.1893)*rxp0_2);
IkReal x222=(gclwh4_8*rxp2_2);
IkReal x223=((0.12699240901125)*rxp1_2);
IkReal x224=(gclwh14_2*rxp0_2);
IkReal x225=(gclwh4_3*r22);
IkReal x226=((0.1893)*pp);
IkReal x227=(gclwh13_15*rxp1_2);
IkReal x228=(gclwh1_2*r20);
IkReal x229=((2.0)*gclwh14_11);
IkReal x230=(gclwh4_11*r22);
IkReal x231=((0.020662095)*x126);
IkReal x232=(gclwh6_5*x92);
IkReal x233=(gclwh8_5*x90);
IkReal x234=(gclwh12_14*x116);
IkReal x235=(gclwh10_5*x141);
IkReal x236=(gclwh4_14*x209);
IkReal x237=((0.0089586225)*x82);
IkReal x238=(gclwh12_11*x180);
IkReal x239=((0.017917245)*x131);
IkReal x240=((0.017917245)*x222);
IkReal x241=(gclwh4_11*x114);
IkReal x242=((0.0089586225)*x86);
IkReal x243=((0.1893)*x168);
IkReal x244=((0.0089586225)*x190);
IkReal x245=((0.017917245)*x113);
IkReal x246=((0.017917245)*x115);
IkReal x247=((0.0089586225)*x122);
IkReal x248=((0.1893)*x129);
IkReal x249=((0.017917245)*x207);
IkReal x250=(gclwh9_10*x142);
IkReal x251=((0.017917245)*x200);
IkReal x252=(gclwh13_10*x180);
IkReal x253=(gclwh7_10*x188);
IkReal x254=(gclwh5_10*x114);
IkReal x255=((0.020662095)*x154);
IkReal x256=(gclwh7_7*x92);
IkReal x257=(gclwh9_7*x90);
IkReal x258=(gclwh13_15*x116);
IkReal x259=((0.020662095)*x134);
IkReal x260=(gclwh11_7*x141);
IkReal x261=(gclwh10_5*x209);
IkReal x262=(gclwh8_5*x169);
IkReal x263=(gclwh14_14*x90);
IkReal x264=(gclwh6_5*x116);
IkReal x265=(gclwh4_14*x141);
IkReal x266=(gclwh12_14*x92);
IkReal x267=(gclwh8_11*x221);
IkReal x268=((0.000847933619625)*x105);
IkReal x269=(gclwh12_11*x188);
IkReal x270=(gclwh10_11*x114);
IkReal x271=((0.0089586225)*x230);
IkReal x272=((0.000847933619625)*x210);
IkReal x273=((0.1893)*x99);
IkReal x274=(gclwh14_11*x142);
IkReal x275=((0.000847933619625)*x130);
IkReal x276=(gclwh9_10*x221);
IkReal x277=(gclwh13_10*x188);
IkReal x278=(gclwh11_10*x114);
IkReal x279=((0.000847933619625)*x146);
IkReal x280=((0.0089586225)*x144);
IkReal x281=((0.000847933619625)*x121);
IkReal x282=(gclwh7_10*x180);
IkReal x283=((0.000847933619625)*x137);
IkReal x284=(gclwh15_10*x142);
IkReal x285=(gclwh5_15*x141);
IkReal x286=(gclwh7_7*x116);
IkReal x287=(gclwh13_15*x92);
IkReal x288=(gclwh15_15*x90);
IkReal x289=(gclwh9_7*x169);
IkReal x290=(gclwh11_7*x209);
IkReal x291=((0.017917245)*x190);
IkReal x292=(gclwh14_11*x125);
IkReal x293=((0.017917245)*x86);
IkReal x294=((0.04132419)*x126);
IkReal x295=((0.04132419)*x194);
IkReal x296=((0.04132419)*x219);
IkReal x297=(gclwh4_11*x175);
IkReal x298=((0.017917245)*x82);
IkReal x299=(gclwh12_11*x100);
IkReal x300=((0.04132419)*x134);
IkReal x301=((0.04132419)*x227);
IkReal x302=((0.04132419)*x154);
IkReal x303=((0.017917245)*x184);
IkReal x304=(gclwh15_10*x125);
IkReal x305=((0.017917245)*x122);
IkReal x306=(gclwh7_10*x98);
IkReal x307=((0.3786)*x159);
IkReal x308=(gclwh13_10*x100);
IkReal x309=((0.3786)*x99);
IkReal x310=(gclwh14_11*x211);
IkReal x311=(gclwh14_14*x148);
IkReal x312=(gclwh4_14*x128);
IkReal x313=(gclwh12_14*x172);
IkReal x314=(gclwh14_8*x127);
IkReal x315=((2.0)*x77);
IkReal x316=((1.0)*x78);
IkReal x317=(r21*x78);
IkReal x318=((0.2183)*gclwh10_5*x91);
IkReal x319=((0.2183)*gclwh8_5*x112);
IkReal x320=((0.10915)*gclwh6_5*x109);
IkReal x321=((0.2183)*gclwh6_5*x87);
IkReal x322=((0.10915)*gclwh8_5*x127);
IkReal x323=((0.10915)*gclwh10_5*x83);
IkReal x324=(gclwh12_3*pp*x180);
IkReal x325=(x143*x91);
IkReal x326=(x119*x203);
IkReal x327=((2.0)*gclwh8_11*x112);
IkReal x328=(gclwh10_2*pz*x83);
IkReal x329=(x224*x79);
IkReal x330=(x107*x203);
IkReal x331=(gclwh4_3*pp*x114);
IkReal x332=(x119*x205);
IkReal x333=(x165*x79);
IkReal x334=((2.0)*gclwh6_11*x87);
IkReal x335=(x162*x79);
IkReal x336=(x226*x89);
IkReal x337=(x119*x181);
IkReal x338=(gclwh13_1*pp*x180);
IkReal x339=(x119*x214);
IkReal x340=(x119*x153);
IkReal x341=(gclwh5_1*pp*x114);
IkReal x342=(x195*x79);
IkReal x343=(gclwh11_0*pz*x83);
IkReal x344=(x151*x87);
IkReal x345=(x107*x153);
IkReal x346=(x104*x91);
IkReal x347=(x186*x226);
IkReal x348=(x112*x132);
IkReal x349=(x119*x212);
IkReal x350=(x179*x79);
IkReal x351=(x166*x79);
IkReal x352=((0.10915)*gclwh7_7*x109);
IkReal x353=((0.2183)*gclwh9_7*x112);
IkReal x354=((0.2183)*gclwh11_7*x91);
IkReal x355=((0.10915)*gclwh9_7*x127);
IkReal x356=((0.2183)*gclwh7_7*x87);
IkReal x357=((0.10915)*gclwh11_7*x83);
IkReal x358=((0.10915)*gclwh14_14*x127);
IkReal x359=(x218*x91);
IkReal x360=(x160*x87);
IkReal x361=((0.10915)*gclwh12_14*x109);
IkReal x362=(x112*x161);
IkReal x363=((0.10915)*gclwh4_14*x83);
IkReal x364=((0.09465)*gclwh4_8*x83);
IkReal x365=(x107*x108);
IkReal x366=(gclwh12_3*x317);
IkReal x367=(x220*x79);
IkReal x368=(gclwh3_3*x317);
IkReal x369=(x147*x78);
IkReal x370=(gclwh3_2*r21*x119);
IkReal x371=(x112*x229);
IkReal x372=(x170*x79);
IkReal x373=(x108*x119);
IkReal x374=((0.09465)*pp*x105);
IkReal x375=(x225*x78);
IkReal x376=(x119*x228);
IkReal x377=(x183*x79);
IkReal x378=(x110*x91);
IkReal x379=(gclwh4_2*r22*x119);
IkReal x380=(gclwh4_8*npz*x79);
IkReal x381=(gclwh12_2*r21*x119);
IkReal x382=(x79*x94);
IkReal x383=((0.09465)*x314);
IkReal x384=(x191*x87);
IkReal x385=(gclwh12_8*npy*x79);
IkReal x386=(x140*x78);
IkReal x387=(x79*x85);
IkReal x388=(gclwh5_0*pz*x83);
IkReal x389=(gclwh13_9*npy*x79);
IkReal x390=(x119*x138);
IkReal x391=(x107*x120);
IkReal x392=((0.09465)*gclwh15_9*x127);
IkReal x393=(x112*x133);
IkReal x394=(x119*x120);
IkReal x395=(x155*x78);
IkReal x396=(gclwh2_0*r21*x119);
IkReal x397=(x158*x79);
IkReal x398=(x217*x79);
IkReal x399=(gclwh0_1*r20*x78);
IkReal x400=(x119*x189);
IkReal x401=((0.09465)*gclwh5_9*x83);
IkReal x402=(x101*x79);
IkReal x403=((0.09465)*gclwh13_9*x109);
IkReal x404=(x119*x152);
IkReal x405=(x79*x81);
IkReal x406=(x208*x91);
IkReal x407=(x135*x87);
IkReal x408=((0.10915)*gclwh13_15*x109);
IkReal x409=((0.10915)*gclwh5_15*x83);
IkReal x410=(x112*x216);
IkReal x411=((0.10915)*gclwh15_15*x127);
IkReal x412=(x204*x91);
IkReal x413=(x150*x87);
IkReal x414=(x145*x86);
IkReal x415=(x143*x83);
IkReal x416=((4.0)*gclwh6_11*x87);
IkReal x417=((4.0)*gclwh8_11*x112);
IkReal x418=(x145*x82);
IkReal x419=(x199*x91);
IkReal x420=(x104*x83);
IkReal x421=(x178*x87);
IkReal x422=(x127*x132);
IkReal x423=(x109*x151);
IkReal x424=(x112*x171);
IkReal x425=(x156*x91);
IkReal x426=(x127*x229);
IkReal x427=((4.0)*gclwh12_11*x87);
IkReal x428=((4.0)*gclwh4_11*x91);
IkReal x429=(x127*x161);
IkReal x430=((0.4366)*gclwh12_14*x87);
IkReal x431=((0.4366)*gclwh4_14*x91);
IkReal x432=(x109*x160);
IkReal x433=((0.4366)*gclwh14_14*x112);
IkReal x434=(x218*x83);
IkReal x435=(gclwh6_2*npy*x315);
IkReal x436=(gclwh6_2*x107*x124);
IkReal x437=(gclwh10_2*npz*x315);
IkReal x438=(gclwh8_2*x196*x77);
IkReal x439=(gclwh7_0*npy*x315);
IkReal x440=(gclwh9_0*x196*x77);
IkReal x441=(gclwh11_0*npz*x315);
IkReal x442=(gclwh7_0*x107*x124);
IkReal x443=(gclwh12_2*npy*x315);
IkReal x444=(gclwh3_2*npy*x315);
IkReal x445=(gclwh1_2*x196*x77);
IkReal x446=(gclwh14_3*x107*x196);
IkReal x447=(gclwh4_2*npz*x315);
IkReal x448=(gclwh4_3*x145*x91);
IkReal x449=(gclwh12_2*x107*x124);
IkReal x450=((1.0)*x107*x228);
IkReal x451=(gclwh3_3*x145*x87);
IkReal x452=((1.0)*gclwh4_2*pz*x83);
IkReal x453=(gclwh1_3*x107*x196);
IkReal x454=(gclwh3_2*x107*x124);
IkReal x455=(gclwh12_3*x145*x87);
IkReal x456=(gclwh14_2*x196*x77);
IkReal x457=(gclwh14_3*r20*x316);
IkReal x458=(gclwh0_0*x196*x77);
IkReal x459=(gclwh2_0*npy*x315);
IkReal x460=(gclwh5_1*x145*x91);
IkReal x461=(gclwh13_1*x145*x87);
IkReal x462=(gclwh15_0*x196*x77);
IkReal x463=(gclwh2_1*x145*x87);
IkReal x464=(gclwh0_1*x107*x196);
IkReal x465=(gclwh5_0*npz*x315);
IkReal x466=(gclwh13_0*npy*x315);
IkReal x467=((1.0)*x107*x189);
IkReal x468=((1.0)*x107*x152);
IkReal x469=(gclwh2_0*x107*x124);
IkReal x470=(gclwh13_1*x124*x78);
IkReal x471=(x206*x316);
IkReal x472=(gclwh15_1*x107*x196);
IkReal x473=(x295+x296);
IkReal x474=(x300+x301);
IkReal x475=(x261+x262);
IkReal x476=(x236+x234);
IkReal x477=(x258+x259);
IkReal x478=(x290+x289);
IkReal x479=(x334+x243+x242+x244);
IkReal x480=(x344+x250+x247+x248);
IkReal x481=(x284+x282+x407+x406);
IkReal x482=(x384+x378+x274+x273);
IkReal x483=(x311+x429+x430+x431);
IkReal x484=(x320+x319+x318+x232);
IkReal x485=(x359+x358+x360+x263);
IkReal x486=(x288+x412+x413+x411);
IkReal x487=(x353+x352+x354+x256);
IkReal x488=(x393+x276+x277+x278+x280);
IkReal x489=(x371+x267+x269+x270+x271);
IkReal x490=(x325+x327+x238+x237+x241);
IkReal x491=(x346+x348+x254+x252+x253);
IkReal x492=(x361+x362+x363+x265+x266);
IkReal x493=(x287+x285+x409+x408+x410);
IkReal x494=(x355+x357+x356+x257+x260);
IkReal x495=(x313+x312+x432+x433+x434);
IkReal x496=(x309+x310+x428+x427+x426);
IkReal x497=(x321+x322+x323+x233+x235);
IkReal x498=(x298+x299+x297+x417+x418+x419);
IkReal x499=(x308+x306+x307+x425+x424+x423);
IkReal x500=(x304+x305+x303+x422+x421+x420);
IkReal x501=(x291+x292+x293+x416+x414+x415);
IkReal x502=(((x110*x83))+(((0.017917245)*x230))+((gclwh8_11*x125))+(((4.0)*gclwh14_11*x112))+((x109*x191))+((gclwh12_11*x98))+((gclwh10_11*x175)));
IkReal x503=(x333+x337+x336+x335+x245+x438+x436+x437);
IkReal x504=(x351+x350+x347+x349+x251+x441+x440+x442);
IkReal x505=(x332+x331+x330+x324+x326+x328+x329+x239+x240+x435);
IkReal x506=(x339+x338+x342+x343+x340+x341+x345+x246+x249+x439);
IkReal x507=(x283+x281+x401+x403+x402+x405+x404+x469+x468+x463+x467+x466+x465+x464+x470+x471+x472);
IkReal x508=(x376+x375+x374+x373+x372+x370+x368+x369+x364+x365+x366+x367+x268+x272+x445+x444+x447+x446+x443+x79);
IkReal x509=(x385+x382+x383+x380+x381+x379+x377+x275+x449+x448+x456+x457+x454+x455+x452+x453+x450+x451);
IkReal x510=(x386+x387+x388+x389+x395+x394+x397+x396+x391+x390+x392+x399+x398+x279+x400+x458+x459+x462+x461+x460+x79);
op[0]=((((1.6345)*gclwh8_12*x112))+(((-1.0)*x497))+(((-0.007321434238125)*x93))+((gclwh6_12*x117))+(((-0.81725)*gclwh10_12*x83))+(((-1.0)*gclwh4_8*x103))+((x106*x215))+(((-1.0)*x106*x111))+(((-1.0)*x231))+x484+x476+(((0.154705425)*x113))+(((1.6345)*gclwh10_12*x91))+(((-0.007321434238125)*x111))+(((-1.6345)*gclwh6_12*x87))+(((-1.0)*gclwh12_8*x97)));
op[1]=((((-1.0)*x490))+(((-1.0)*gclwh12_3*x223))+((pp*x86))+(((-1.0)*x503))+(((0.12699240901125)*x89))+x479+x505+(((-0.12699240901125)*x149))+(((-1.0)*x198*x82))+((gclwh10_11*x83)));
op[2]=((-0.17125635)+(((-1.0)*x498))+x501);
op[3]=((((-0.160905)*x113))+(((0.7845)*gclwh10_2*x83))+(((1.569)*gclwh6_2*x87))+(((-1.569)*gclwh8_2*x112))+(((0.160905)*x222))+((gclwh8_2*x136))+(((0.7845)*gclwh8_2*x127))+(((0.14850585)*x224))+(((-0.7845)*gclwh6_2*x109))+(((-1.0)*x473))+(((-0.14850585)*x162))+(((-0.14850585)*x165))+x294+(((0.160905)*x131))+(((-1.569)*gclwh10_2*x91))+((gclwh10_2*x202))+(((-1.0)*gclwh6_2*x84)));
op[4]=((((-0.03275)*gclwh10_12*x83))+(((0.0655)*gclwh8_12*x112))+(((-1.0)*x497))+(((0.0655)*gclwh10_12*x91))+(((0.000293394886875)*x215))+(((-1.0)*x476))+((gclwh4_8*x193))+(((-0.000293394886875)*x93))+x231+(((-0.000293394886875)*x111))+x484+(((-0.006199575)*x113))+(((0.006199575)*x131))+(((-0.0655)*gclwh6_12*x87))+(((0.03275)*gclwh6_12*x109))+(((-1.0)*x111*x163)));
op[5]=(((pp*x82))+(((-1.0)*x503))+(((-1.0)*gclwh10_11*x83))+(((0.00076243651125)*x89))+(((-1.0)*x479))+(((-1.0)*gclwh12_3*x95))+x490+x505+(((-0.00076243651125)*x149))+(((-1.0)*x198*x86)));
op[6]=(((gclwh7_10*x109))+(((-1.0)*x480))+(((-1.0)*x504))+(((0.12699240901125)*x186))+(((-1.0)*gclwh9_10*x127))+(((-1.0)*gclwh13_1*x223))+x491+x506+(((-0.12699240901125)*x182))+(((-1.0)*gclwh11_10*x83)));
op[7]=(((x106*x177))+(((-1.0)*gclwh13_9*x97))+(((1.6345)*gclwh9_13*x112))+(((1.6345)*gclwh11_13*x91))+((gclwh7_13*x117))+(((-1.0)*x494))+(((-1.6345)*gclwh7_13*x87))+(((0.154705425)*x200))+(((-1.0)*x106*x187))+(((-1.0)*gclwh5_9*x103))+(((-0.007321434238125)*x123))+x487+x477+(((-0.81725)*gclwh11_13*x83))+(((-0.007321434238125)*x187))+(((-1.0)*x255)));
op[8]=((((-1.569)*gclwh11_0*x91))+(((-0.160905)*x115))+(((1.569)*gclwh7_0*x87))+(((-0.160905)*x207))+(((0.14850585)*x195))+(((0.160905)*x200))+(((-0.7845)*gclwh7_0*x109))+(((-0.14850585)*x166))+(((-0.14850585)*x179))+(((-1.0)*gclwh7_0*x84))+(((0.7845)*gclwh11_0*x83))+x474+((gclwh9_0*x136))+((gclwh11_0*x202))+(((0.7845)*gclwh9_0*x127))+(((-1.569)*gclwh9_0*x112))+(((-1.0)*x302)));
op[9]=((-0.17125635)+(((-1.0)*x499))+x500);
op[10]=((((-1.0)*x491))+(((-1.0)*x504))+(((0.00076243651125)*x186))+x480+x506+((gclwh11_10*x83))+(((-1.0)*gclwh7_10*x109))+(((-0.00076243651125)*x182))+(((-1.0)*gclwh13_1*x95))+((gclwh9_10*x127)));
op[11]=((((-1.0)*x494))+(((0.000293394886875)*x177))+(((-0.006199575)*x200))+(((-0.03275)*gclwh9_13*x127))+(((0.0655)*gclwh11_13*x91))+(((-0.000293394886875)*x123))+(((-0.03275)*gclwh11_13*x83))+(((0.03275)*gclwh7_13*x109))+(((-1.0)*x477))+(((-0.0655)*gclwh7_13*x87))+(((-0.000293394886875)*x187))+x255+x487+((gclwh13_9*x164))+(((0.0655)*gclwh9_13*x112))+(((0.006199575)*x115)));
op[12]=((((-1.0)*x485))+((gclwh10_12*x103))+(((0.154705425)*x173))+((x106*x130))+(((-1.6345)*gclwh14_8*x112))+x492+x475+(((-0.007321434238125)*x105))+(((0.007321434238125)*x130))+(((-0.007321434238125)*x210))+(((1.6345)*gclwh12_8*x87))+(((-1.0)*x264))+(((-0.81725)*gclwh4_8*x83))+(((-1.0)*x105*x106))+(((-1.0)*gclwh6_12*x97))+(((1.6345)*gclwh4_8*x91)));
op[13]=((-0.679811285)+(((1.341705325)*gclwh3_3*x87))+(((-0.66189404)*gclwh4_3*x83))+(((-1.0)*x489))+(((-1.0)*gclwh4_11*x83))+(((-1.0)*x509))+(((1.341705325)*gclwh4_3*x91))+(((-1.341705325)*gclwh14_3*x112))+(((-1.0)*gclwh12_3*x213))+x482+(((-0.679811285)*gclwh3_3*x109))+(((-1.0)*gclwh12_11*x109))+x508+((gclwh14_11*x127))+(((-0.679811285)*gclwh1_3*x127))+((gclwh1_3*x96))+((gclwh3_3*x213))+((gclwh14_3*x96))+(((1.341705325)*gclwh1_3*x112))+(((-0.00600991575645741)*x225))+(((-0.66189404)*gclwh12_3*x109))+(((0.66189404)*gclwh14_3*x127))+(((1.341705325)*gclwh12_3*x87)));
op[14]=((-0.07735732)+(((-1.0)*x502))+x496);
op[15]=((((0.7845)*pp*x108))+(((0.85)*pp*x105))+(((-1.0)*x495))+(((-0.14850585)*x94))+(((1.569)*gclwh4_2*x91))+(((0.007614829125)*x105))+(((-0.007614829125)*x130))+(((-0.7845)*gclwh3_2*x109))+(((-1.0)*gclwh12_2*x84))+(((0.14850585)*x220))+(((-0.14850585)*x183))+(((0.85)*gclwh4_8*x83))+(((-1.0)*gclwh12_8*npy*x80))+(((-0.7845)*gclwh1_2*x127))+((gclwh3_2*x84))+(((-0.7845)*gclwh12_2*x109))+(((1.569)*gclwh12_2*x87))+x483+(((0.007614829125)*x210))+(((-1.0)*gclwh4_8*npz*x80))+((x170*x80))+(((-0.7845)*gclwh4_2*x83))+(((-1.0)*gclwh4_2*x202))+((gclwh1_2*x136))+(((-0.85)*x314))+(((-1.569)*gclwh14_2*x112))+(((1.569)*gclwh1_2*x112))+(((1.569)*gclwh3_2*x87))+(((0.00702803935125)*x108)));
op[16]=((((-1.0)*x492))+(((-0.0655)*gclwh4_8*x91))+((x105*x163))+(((-0.000293394886875)*x130))+(((0.000293394886875)*x210))+(((0.0655)*gclwh14_8*x112))+(((-0.0655)*gclwh12_8*x87))+(((0.006199575)*x173))+(((0.000293394886875)*x105))+(((-0.03275)*x314))+x485+x475+(((0.03275)*gclwh4_8*x83))+((gclwh10_12*x193))+(((-1.0)*x264))+(((-1.0)*gclwh6_12*x164)));
op[17]=((0.012986285)+(((0.008055325)*gclwh4_3*x91))+(((-1.0)*gclwh12_3*x167))+(((3.60823078949063e-5)*x147))+(((-1.0)*gclwh4_3*x88))+(((-0.008055325)*gclwh14_3*x112))+((gclwh12_11*x109))+(((-1.0)*x482))+(((-1.0)*x509))+(((0.00493096)*gclwh12_3*x109))+(((0.008055325)*gclwh3_3*x87))+((gclwh4_11*x83))+x489+((gclwh3_3*x167))+x508+(((0.008055325)*gclwh12_3*x87))+((gclwh14_3*x201))+(((-0.012986285)*gclwh1_3*x127))+(((-1.0)*gclwh14_11*x127))+(((-0.012986285)*gclwh3_3*x109))+(((0.008055325)*gclwh1_3*x112))+(((-0.00493096)*gclwh14_3*x127))+(((0.00493096)*gclwh4_3*x83)));
op[18]=((0.679811285)+(((-0.679811285)*gclwh0_1*x127))+(((1.341705325)*gclwh2_1*x87))+(((-1.0)*gclwh5_10*x83))+(((-1.0)*gclwh13_10*x109))+(((0.00600991575645741)*x206))+(((0.00600991575645741)*x155))+(((-1.0)*x488))+(((-1.341705325)*gclwh5_1*x91))+(((-1.0)*gclwh15_1*x96))+(((-1.0)*x507))+(((0.66189404)*gclwh5_1*x83))+(((1.341705325)*gclwh15_1*x112))+(((-0.66189404)*gclwh15_1*x127))+((gclwh0_1*x96))+(((1.341705325)*gclwh0_1*x112))+x481+((gclwh15_10*x127))+((gclwh13_1*x213))+x510+(((0.66189404)*gclwh13_1*x109))+(((-1.341705325)*gclwh13_1*x87))+(((-0.679811285)*gclwh2_1*x109)));
op[19]=((((-1.0)*x493))+(((-1.0)*x118*x85))+(((-1.0)*gclwh11_13*x103))+((x106*x137))+(((-1.0)*x478))+(((-0.154705425)*x197))+(((0.81725)*gclwh5_9*x83))+x286+(((-1.6345)*gclwh13_9*x87))+x486+(((0.007321434238125)*x121))+((x118*x81))+((gclwh7_13*x97))+(((-1.0)*x106*x146))+((gclwh13_9*x117))+(((-0.007321434238125)*x146)));
op[20]=((((-0.7845)*gclwh2_0*x109))+(((0.7845)*gclwh13_0*x109))+(((-1.569)*gclwh13_0*x87))+(((-1.0)*gclwh13_9*npy*x80))+(((-1.0)*x204*x83))+(((-1.0)*x80*x85))+(((-0.85)*gclwh15_9*x127))+((gclwh0_0*x136))+(((-0.7845)*gclwh15_0*x127))+(((1.569)*gclwh2_0*x87))+((gclwh2_0*x84))+(((0.007614829125)*x121))+(((-0.7845)*gclwh0_0*x127))+(((-1.0)*gclwh15_0*x136))+(((0.85)*gclwh5_9*x83))+(((0.007614829125)*x137))+((x127*x216))+(((1.569)*gclwh0_0*x112))+(((1.569)*gclwh15_0*x112))+(((0.14850585)*x158))+(((0.14850585)*x217))+(((0.85)*gclwh13_9*x109))+(((0.7845)*gclwh5_0*x83))+(((-0.14850585)*x101))+(((-1.0)*gclwh13_15*x172))+(((-1.569)*gclwh5_0*x91))+((gclwh15_15*x148))+((x80*x81))+(((0.00702803935125)*x138))+(((0.4366)*gclwh13_15*x87))+(((-1.0)*gclwh5_15*x128))+(((-1.0)*x109*x150))+(((0.4366)*gclwh5_15*x91))+((gclwh13_0*x84))+(((-0.4366)*gclwh15_15*x112))+(((-0.007614829125)*x146)));
op[21]=((-0.07735732)+(((-4.0)*gclwh5_10*x91))+((gclwh11_10*x175))+((x109*x135))+(((-1.0)*gclwh7_10*x100))+(((0.017917245)*x144))+(((-1.0)*gclwh15_10*x211))+(((4.0)*gclwh15_10*x112))+((gclwh13_10*x98))+(((-1.0)*x127*x133))+(((-4.0)*gclwh13_10*x87))+((x208*x83))+((gclwh9_10*x125)));
op[22]=((-0.012986285)+(((-0.008055325)*gclwh5_1*x91))+(((-3.60823078949063e-5)*x140))+(((-1.0)*gclwh15_10*x127))+((gclwh13_1*x167))+((gclwh5_10*x83))+(((3.60823078949063e-5)*x155))+(((-1.0)*x481))+((gclwh0_1*x201))+(((0.008055325)*gclwh0_1*x112))+(((-1.0)*x507))+((gclwh5_1*x88))+((gclwh13_10*x109))+(((0.008055325)*gclwh2_1*x87))+x488+x510+(((-0.00493096)*gclwh5_1*x83))+(((-0.008055325)*gclwh13_1*x87))+(((-0.012986285)*gclwh0_1*x127))+(((-0.00493096)*gclwh13_1*x109))+(((0.00493096)*gclwh15_1*x127))+(((-0.012986285)*gclwh2_1*x109))+(((0.008055325)*gclwh15_1*x112)));
op[23]=((((0.0655)*gclwh13_9*x87))+(((0.000293394886875)*x146))+(((0.03275)*gclwh15_9*x127))+(((-1.0)*x486))+(((-0.006199575)*x197))+(((-0.000293394886875)*x121))+(((-0.000293394886875)*x137))+(((-1.0)*x478))+((gclwh7_13*x164))+(((-1.0)*x192*x81))+x286+(((-0.03275)*gclwh13_9*x109))+((x192*x85))+(((-0.03275)*gclwh5_9*x83))+(((-1.0)*gclwh11_13*x193))+x493);
op[24]=((-0.35681135)+(((-1.0)*x498))+x501);
op[25]=((((-3.269)*gclwh8_2*x112))+((gclwh8_2*x139))+(((1.6345)*gclwh10_2*x83))+(((3.269)*gclwh6_2*x87))+(((-3.269)*gclwh10_2*x91))+(((-1.0)*gclwh6_2*x174))+((gclwh10_2*x176))+(((-1.0)*x473))+(((-1.6345)*gclwh6_2*x109))+(((-0.30941085)*x162))+(((-0.30941085)*x165))+x294+(((1.6345)*gclwh8_2*x127))+((gclwh14_2*x157)));
op[26]=((((-0.0140560787025)*x215))+(((1.569)*gclwh10_12*x83))+(((1.569)*pp*x111))+(((0.0140560787025)*x111))+(((-0.08264838)*x219))+(((0.08264838)*x126))+(((-3.138)*gclwh8_12*x112))+(((-3.138)*gclwh10_12*x91))+(((3.138)*gclwh6_12*x87))+(((0.0140560787025)*x93))+(((-0.08264838)*x194))+(((-1.569)*gclwh6_12*x109)));
op[27]=(((x185*x82))+(((8.0)*gclwh8_11*x112))+(((0.03583449)*x82))+((gclwh12_11*x102))+(((0.7572)*gclwh4_11*rxp2_2))+(((-8.0)*gclwh6_11*x87))+(((-0.03583449)*x190))+(((-0.03583449)*x86))+(((-1.0)*x199*x83))+(((8.0)*gclwh10_11*x91))+(((-1.0)*x185*x86))+(((-0.7572)*x168)));
op[28]=((-0.01429865)+(((-1.0)*x501))+x498);
op[29]=((((-0.00058678977375)*x181))+(((0.0655)*gclwh10_2*x83))+(((0.01239915)*x224))+(((-1.0)*x294))+(((0.131)*gclwh6_2*x87))+(((0.0655)*gclwh8_2*x127))+(((-0.131)*gclwh10_2*x91))+x473+(((-0.131)*gclwh8_2*x112))+(((0.00058678977375)*x203))+(((0.00058678977375)*x205))+(((-0.01239915)*x165))+(((-0.01239915)*x162))+(((-0.0655)*gclwh6_2*x109)));
op[30]=((((-3.269)*gclwh9_0*x112))+(((-1.6345)*gclwh7_0*x109))+(((-0.30941085)*x179))+(((-0.30941085)*x166))+(((-1.0)*gclwh7_0*x174))+x474+((gclwh9_0*x139))+((gclwh15_0*x157))+(((3.269)*gclwh7_0*x87))+(((1.6345)*gclwh9_0*x127))+(((-3.269)*gclwh11_0*x91))+((gclwh11_0*x176))+(((-1.0)*x302))+(((1.6345)*gclwh11_0*x83)));
op[31]=((-0.35681135)+(((-1.0)*x499))+x500);
op[32]=((((-1.0)*x109*x178))+(((-8.0)*gclwh9_10*x112))+(((0.03583449)*x184))+(((-0.03583449)*gclwh7_10*r21))+(((-1.0)*gclwh13_10*x102))+(((8.0)*gclwh7_10*x87))+(((0.03583449)*x122))+(((-0.7572)*x159))+(((0.7572)*x129))+((x127*x171))+((x156*x83))+(((-8.0)*gclwh11_10*x91)));
op[33]=((((0.0140560787025)*x187))+(((-0.0140560787025)*x177))+(((0.0140560787025)*x123))+(((1.569)*gclwh9_13*x127))+(((0.08264838)*x154))+(((-3.138)*gclwh9_13*x112))+(((-1.569)*gclwh7_13*x109))+(((-0.08264838)*x227))+(((1.569)*gclwh11_13*x83))+(((3.138)*gclwh7_13*x87))+(((-3.138)*gclwh11_13*x91))+(((-0.08264838)*x134)));
op[34]=((((0.01239915)*x195))+(((-0.131)*gclwh11_0*x91))+(((-0.00058678977375)*x212))+(((0.00058678977375)*x214))+(((-0.131)*gclwh9_0*x112))+(((0.00058678977375)*x153))+(((0.0655)*gclwh11_0*x83))+(((-1.0)*x474))+x302+(((0.0655)*gclwh9_0*x127))+(((0.131)*gclwh7_0*x87))+(((-0.0655)*gclwh7_0*x109))+(((-0.01239915)*x179))+(((-0.01239915)*x166)));
op[35]=((-0.01429865)+(((-1.0)*x500))+x499);
op[36]=((1.31196768)+(((-1.0)*x502))+x496);
op[37]=((((-1.0)*gclwh12_2*x174))+(((-1.6345)*gclwh4_2*x83))+(((0.30941085)*x220))+(((-3.269)*gclwh14_2*x112))+(((-1.0)*x495))+(((1.6345)*pp*x108))+(((-1.6345)*gclwh12_2*x109))+(((3.269)*gclwh3_2*x87))+(((-1.6345)*gclwh3_2*x109))+(((-1.0)*gclwh4_2*x176))+(((3.269)*gclwh12_2*x87))+(((3.269)*gclwh1_2*x112))+x483+(((-1.6345)*gclwh1_2*x127))+((gclwh3_2*x174))+((gclwh1_2*x139))+(((-0.30941085)*x94))+(((-1.0)*gclwh8_2*x157))+(((3.269)*gclwh4_2*x91))+(((0.01464286847625)*x108)));
IkReal x511=pz*pz;
IkReal x512=pp*pp;
IkReal x513=((0.1893)*pz);
IkReal x514=((1.7)*pz);
IkReal x515=(gclwh15_9*npx);
IkReal x516=(pp*r21);
IkReal x517=(pp*r22);
IkReal x518=((0.00702803935125)*r21);
IkReal x519=(gclwh5_9*npz);
IkReal x520=(pp*r20);
IkReal x521=(npy*pz);
IkReal x522=((4.0)*gclwh12_11);
IkReal x523=((3.60823078949063e-5)*r22);
IkReal x524=(gclwh14_3*rxp0_2);
IkReal x525=((0.000977833645875)*r20);
IkReal x526=(npz*pz);
IkReal x527=((0.000977833645875)*r21);
IkReal x528=(gclwh10_2*rxp2_2);
IkReal x529=((0.00076243651125)*rxp1_2);
IkReal x530=((0.00600991575645741)*r20);
IkReal x531=((0.154705425)*rxp1_2);
IkReal x532=((0.4366)*gclwh5_15);
IkReal x533=(gclwh6_11*rxp1_2);
IkReal x534=(gclwh7_0*rxp1_2);
IkReal x535=((0.154705425)*rxp2_2);
IkReal x536=((2.0)*gclwh11_10);
IkReal x537=((0.2970117)*rxp1_2);
IkReal x538=((0.017917245)*r21);
IkReal x539=(gclwh14_2*pz);
IkReal x540=(gclwh12_8*r21);
IkReal x541=(gclwh14_2*rxp0_2);
IkReal x542=((2.0)*gclwh4_11);
IkReal x543=((0.007321434238125)*r20);
IkReal x544=(npx*pz);
IkReal x545=((0.4366)*gclwh15_15);
IkReal x546=(gclwh10_11*rxp2_2);
IkReal x547=(gclwh5_9*rxp2_2);
IkReal x548=((0.020662095)*rxp1_2);
IkReal x549=((0.007321434238125)*r21);
IkReal x550=(gclwh0_0*r20);
IkReal x551=((0.0089586225)*r21);
IkReal x552=(gclwh13_0*pz);
IkReal x553=((1.6345)*pz);
IkReal x554=((0.007321434238125)*r22);
IkReal x555=((1.0)*pz);
IkReal x556=(gclwh14_14*rxp0_2);
IkReal x557=(gclwh4_14*r22);
IkReal x558=((0.1893)*rxp0_2);
IkReal x559=((0.00058678977375)*r22);
IkReal x560=(gclwh12_8*rxp1_2);
IkReal x561=((2.0)*gclwh9_10);
IkReal x562=((0.1893)*rxp2_2);
IkReal x563=((2.0)*gclwh15_10);
IkReal x564=((4.0)*gclwh14_11);
IkReal x565=(gclwh5_15*rxp2_2);
IkReal x566=((0.020662095)*rxp0_2);
IkReal x567=((2.0)*gclwh13_10);
IkReal x568=((0.3786)*rxp1_2);
IkReal x569=(gclwh9_0*r20);
IkReal x570=(gclwh13_9*r21);
IkReal x571=(gclwh15_1*r20);
IkReal x572=((0.000977833645875)*r22);
IkReal x573=((0.006199575)*rxp0_2);
IkReal x574=(gclwh6_2*rxp1_2);
IkReal x575=((0.0089586225)*r20);
IkReal x576=((2.0)*gclwh10_11);
IkReal x577=((2.0)*pp);
IkReal x578=((0.00058678977375)*r21);
IkReal x579=(gclwh1_3*r20);
IkReal x580=(gclwh14_14*r20);
IkReal x581=(gclwh9_0*rxp0_2);
IkReal x582=(gclwh4_3*rxp2_2);
IkReal x583=(gclwh5_0*r22);
IkReal x584=((0.03583449)*r20);
IkReal x585=((0.00058678977375)*r20);
IkReal x586=((0.2183)*gclwh13_15);
IkReal x587=((2.0)*gclwh7_10);
IkReal x588=(gclwh2_1*r21);
IkReal x589=((4.0)*gclwh15_10);
IkReal x590=((0.0089586225)*pz);
IkReal x591=((0.2183)*gclwh12_14);
IkReal x592=((0.2183)*gclwh14_14);
IkReal x593=(gclwh11_0*rxp2_2);
IkReal x594=(gclwh8_2*rxp0_2);
IkReal x595=((0.3786)*rxp2_2);
IkReal x596=(gclwh12_2*rxp1_2);
IkReal x597=(gclwh5_0*rxp2_2);
IkReal x598=((3.60823078949063e-5)*r21);
IkReal x599=(gclwh15_9*r20);
IkReal x600=((0.3786)*rxp0_2);
IkReal x601=((0.006199575)*rxp1_2);
IkReal x602=(gclwh14_8*npx);
IkReal x603=(gclwh13_15*r21);
IkReal x604=((0.017917245)*r20);
IkReal x605=(gclwh5_15*r22);
IkReal x606=((0.000293394886875)*r21);
IkReal x607=(gclwh13_0*rxp1_2);
IkReal x608=(gclwh7_10*rxp1_2);
IkReal x609=((0.000293394886875)*r22);
IkReal x610=(gclwh5_1*rxp2_2);
IkReal x611=((0.154705425)*rxp0_2);
IkReal x612=((0.4366)*gclwh13_15);
IkReal x613=((0.0089586225)*r22);
IkReal x614=((0.2970117)*rxp2_2);
IkReal x615=(gclwh5_9*r22);
IkReal x616=((0.7572)*rxp0_2);
IkReal x617=((4.0)*gclwh4_11);
IkReal x618=(gclwh15_1*rxp0_2);
IkReal x619=((0.000293394886875)*r20);
IkReal x620=((2.0)*gclwh6_11);
IkReal x621=((0.4366)*gclwh12_14);
IkReal x622=((0.017917245)*r22);
IkReal x623=(gclwh15_0*r20);
IkReal x624=(gclwh15_15*r20);
IkReal x625=((2.0)*gclwh12_11);
IkReal x626=(gclwh14_8*rxp0_2);
IkReal x627=((0.0655)*pz);
IkReal x628=((0.006199575)*rxp2_2);
IkReal x629=((0.04132419)*rxp1_2);
IkReal x630=((0.4366)*gclwh4_14);
IkReal x631=(gclwh15_0*rxp0_2);
IkReal x632=(gclwh14_8*r20);
IkReal x633=((0.03583449)*r22);
IkReal x634=((2.0)*gclwh8_11);
IkReal x635=((4.0)*gclwh13_10);
IkReal x636=(gclwh15_9*rxp0_2);
IkReal x637=((3.60823078949063e-5)*r20);
IkReal x638=((0.00702803935125)*r22);
IkReal x639=((0.2183)*gclwh5_15);
IkReal x640=(gclwh5_1*r22);
IkReal x641=((4.0)*gclwh5_10);
IkReal x642=(gclwh13_9*rxp1_2);
IkReal x643=((2.0)*gclwh5_10);
IkReal x644=((0.4366)*gclwh14_14);
IkReal x645=((0.020662095)*rxp2_2);
IkReal x646=(gclwh4_8*r22);
IkReal x647=(gclwh4_2*rxp2_2);
IkReal x648=((0.00600991575645741)*r21);
IkReal x649=((0.2183)*gclwh15_15);
IkReal x650=((0.2183)*gclwh4_14);
IkReal x651=((0.00702803935125)*r20);
IkReal x652=(gclwh12_14*r21);
IkReal x653=(gclwh4_8*rxp2_2);
IkReal x654=((0.2970117)*rxp0_2);
IkReal x655=(gclwh8_2*pz);
IkReal x656=(gclwh13_1*rxp1_2);
IkReal x657=((0.1893)*pp);
IkReal x658=(gclwh12_3*rxp1_2);
IkReal x659=((0.01464286847625)*r21);
IkReal x660=((0.1893)*rxp1_2);
IkReal x661=(gclwh4_3*r22);
IkReal x662=((2.0)*gclwh14_11);
IkReal x663=((0.03583449)*r21);
IkReal x664=((0.00195566729175)*x603);
IkReal x665=((0.00195566729175)*x605);
IkReal x666=((0.00195566729175)*x624);
IkReal x667=(gclwh15_10*x604);
IkReal x668=(gclwh7_10*x568);
IkReal x669=(gclwh5_10*x622);
IkReal x670=(gclwh9_10*x600);
IkReal x671=(gclwh13_10*x538);
IkReal x672=(gclwh11_10*x595);
IkReal x673=(gclwh12_14*x548);
IkReal x674=(gclwh6_5*x527);
IkReal x675=(gclwh4_14*x645);
IkReal x676=(gclwh8_5*x525);
IkReal x677=((0.020662095)*x556);
IkReal x678=(gclwh10_5*x572);
IkReal x679=((0.017917245)*x560);
IkReal x680=(gclwh8_11*x575);
IkReal x681=(gclwh14_11*x558);
IkReal x682=((0.017917245)*x653);
IkReal x683=(gclwh10_11*x613);
IkReal x684=(gclwh6_11*x551);
IkReal x685=(gclwh12_11*x660);
IkReal x686=(gclwh4_11*x562);
IkReal x687=((0.017917245)*x626);
IkReal x688=((0.017917245)*x547);
IkReal x689=(gclwh13_10*x660);
IkReal x690=(gclwh7_10*x551);
IkReal x691=(gclwh5_10*x562);
IkReal x692=((0.017917245)*x642);
IkReal x693=((0.017917245)*x636);
IkReal x694=(gclwh11_10*x613);
IkReal x695=(gclwh15_10*x558);
IkReal x696=(gclwh9_10*x575);
IkReal x697=(gclwh13_15*x548);
IkReal x698=((0.020662095)*x565);
IkReal x699=(gclwh7_7*x527);
IkReal x700=(gclwh9_7*x525);
IkReal x701=(gclwh15_15*x566);
IkReal x702=(gclwh11_7*x572);
IkReal x703=(gclwh12_11*x538);
IkReal x704=((0.3786)*x546);
IkReal x705=(gclwh4_11*x622);
IkReal x706=(gclwh8_11*x600);
IkReal x707=((0.00195566729175)*x557);
IkReal x708=((0.00195566729175)*x652);
IkReal x709=((0.00195566729175)*x580);
IkReal x710=((0.000977833645875)*x557);
IkReal x711=(gclwh10_5*x645);
IkReal x712=(gclwh12_14*x527);
IkReal x713=(gclwh8_5*x566);
IkReal x714=(gclwh6_5*x548);
IkReal x715=(gclwh14_14*x525);
IkReal x716=((0.000847933619625)*x540);
IkReal x717=((0.1893)*x533);
IkReal x718=(gclwh14_11*x575);
IkReal x719=((0.000847933619625)*x646);
IkReal x720=(gclwh8_11*x558);
IkReal x721=(gclwh12_11*x551);
IkReal x722=((0.1893)*x546);
IkReal x723=(gclwh4_11*x613);
IkReal x724=((0.000847933619625)*x632);
IkReal x725=((0.1893)*x608);
IkReal x726=(gclwh15_10*x575);
IkReal x727=((0.000847933619625)*x599);
IkReal x728=((0.000847933619625)*x615);
IkReal x729=(gclwh9_10*x558);
IkReal x730=(gclwh13_10*x551);
IkReal x731=((0.000847933619625)*x570);
IkReal x732=(gclwh11_10*x562);
IkReal x733=(gclwh5_10*x613);
IkReal x734=(gclwh15_15*x525);
IkReal x735=(gclwh7_7*x548);
IkReal x736=(gclwh5_15*x572);
IkReal x737=(gclwh9_7*x566);
IkReal x738=(gclwh11_7*x645);
IkReal x739=(gclwh13_15*x527);
IkReal x740=((2.0)*x511);
IkReal x741=(r21*x512);
IkReal x742=((1.0)*x512);
IkReal x743=(x516*x586);
IkReal x744=(x544*x545);
IkReal x745=(x517*x639);
IkReal x746=(x521*x612);
IkReal x747=(x520*x649);
IkReal x748=(x526*x532);
IkReal x749=(x520*x563);
IkReal x750=(x526*x641);
IkReal x751=(x521*x635);
IkReal x752=(x516*x567);
IkReal x753=(x544*x589);
IkReal x754=(x517*x643);
IkReal x755=((0.2183)*gclwh10_5*x526);
IkReal x756=((0.2183)*gclwh8_5*x544);
IkReal x757=((0.10915)*gclwh6_5*x516);
IkReal x758=((0.2183)*gclwh6_5*x521);
IkReal x759=((0.10915)*gclwh8_5*x520);
IkReal x760=((0.10915)*gclwh10_5*x517);
IkReal x761=(x657*x658);
IkReal x762=(x521*x620);
IkReal x763=(x575*x655);
IkReal x764=(gclwh10_2*pz*x517);
IkReal x765=(x513*x541);
IkReal x766=(x520*x655);
IkReal x767=(gclwh4_3*pp*x562);
IkReal x768=(gclwh10_2*r22*x590);
IkReal x769=(x513*x596);
IkReal x770=(x526*x576);
IkReal x771=(x513*x647);
IkReal x772=(x524*x657);
IkReal x773=(x544*x634);
IkReal x774=(gclwh6_2*pz*x551);
IkReal x775=(x656*x657);
IkReal x776=(x526*x536);
IkReal x777=(x544*x561);
IkReal x778=(gclwh11_0*r22*x590);
IkReal x779=(x569*x590);
IkReal x780=(gclwh5_1*pp*x562);
IkReal x781=(x513*x631);
IkReal x782=(gclwh11_0*pz*x517);
IkReal x783=(gclwh9_0*pz*x520);
IkReal x784=(gclwh15_1*pp*x558);
IkReal x785=(gclwh7_0*pz*x551);
IkReal x786=(x513*x607);
IkReal x787=(x513*x597);
IkReal x788=(x521*x587);
IkReal x789=((0.10915)*gclwh7_7*x516);
IkReal x790=((0.2183)*gclwh9_7*x544);
IkReal x791=((0.2183)*gclwh11_7*x526);
IkReal x792=((0.10915)*gclwh9_7*x520);
IkReal x793=((0.2183)*gclwh7_7*x521);
IkReal x794=((0.10915)*gclwh11_7*x517);
IkReal x795=(x517*x542);
IkReal x796=(x516*x625);
IkReal x797=(x544*x564);
IkReal x798=(x516*x591);
IkReal x799=(x544*x644);
IkReal x800=(x517*x650);
IkReal x801=(x520*x592);
IkReal x802=(x521*x621);
IkReal x803=(x526*x630);
IkReal x804=((0.10915)*gclwh12_14*x516);
IkReal x805=(x544*x592);
IkReal x806=((0.10915)*gclwh4_14*x517);
IkReal x807=((0.10915)*gclwh14_14*x520);
IkReal x808=(x526*x650);
IkReal x809=(x521*x591);
IkReal x810=((0.09465)*gclwh4_8*x517);
IkReal x811=(x520*x539);
IkReal x812=(gclwh12_3*x741);
IkReal x813=(x526*x542);
IkReal x814=(x513*x574);
IkReal x815=(gclwh3_3*x741);
IkReal x816=(x512*x579);
IkReal x817=(gclwh3_2*pz*x551);
IkReal x818=(x513*x602);
IkReal x819=(x539*x575);
IkReal x820=((0.09465)*gclwh12_8*x516);
IkReal x821=(x512*x661);
IkReal x822=(gclwh1_2*pz*x575);
IkReal x823=(x521*x625);
IkReal x824=(x513*x594);
IkReal x825=(gclwh4_2*r22*x590);
IkReal x826=(gclwh4_8*npz*x513);
IkReal x827=(gclwh12_2*pz*x551);
IkReal x828=(x513*x528);
IkReal x829=(x544*x662);
IkReal x830=((0.09465)*gclwh14_8*x520);
IkReal x831=(gclwh12_8*npy*x513);
IkReal x832=(x512*x571);
IkReal x833=(x513*x519);
IkReal x834=(gclwh5_0*pz*x517);
IkReal x835=(gclwh13_9*npy*x513);
IkReal x836=(x583*x590);
IkReal x837=(x516*x552);
IkReal x838=((0.09465)*gclwh15_9*x520);
IkReal x839=(x551*x552);
IkReal x840=(x512*x588);
IkReal x841=(x526*x643);
IkReal x842=(gclwh2_0*pz*x551);
IkReal x843=(x513*x581);
IkReal x844=(x521*x567);
IkReal x845=(x513*x593);
IkReal x846=(gclwh0_1*r20*x512);
IkReal x847=(x550*x590);
IkReal x848=((0.09465)*gclwh5_9*x517);
IkReal x849=(x513*x534);
IkReal x850=((0.09465)*gclwh13_9*x516);
IkReal x851=(gclwh15_0*pz*x575);
IkReal x852=(x513*x515);
IkReal x853=(x544*x563);
IkReal x854=((0.10915)*gclwh15_15*x520);
IkReal x855=(x526*x639);
IkReal x856=(x521*x586);
IkReal x857=((0.10915)*gclwh13_15*x516);
IkReal x858=((0.10915)*gclwh5_15*x517);
IkReal x859=(x544*x649);
IkReal x860=(gclwh6_2*npy*x740);
IkReal x861=(gclwh6_2*x516*x555);
IkReal x862=(gclwh10_2*npz*x740);
IkReal x863=(gclwh8_2*npx*x740);
IkReal x864=(gclwh7_0*npy*x740);
IkReal x865=(gclwh9_0*npx*x740);
IkReal x866=(gclwh11_0*npz*x740);
IkReal x867=(gclwh7_0*x516*x555);
IkReal x868=(gclwh12_2*npy*x740);
IkReal x869=(gclwh3_2*npy*x740);
IkReal x870=(gclwh1_2*npx*x740);
IkReal x871=(gclwh14_3*x544*x577);
IkReal x872=(gclwh4_2*npz*x740);
IkReal x873=(gclwh4_3*x526*x577);
IkReal x874=(gclwh12_2*x516*x555);
IkReal x875=(gclwh1_2*x520*x555);
IkReal x876=(gclwh3_3*x521*x577);
IkReal x877=(gclwh4_2*x517*x555);
IkReal x878=(gclwh1_3*x544*x577);
IkReal x879=(gclwh3_2*x516*x555);
IkReal x880=(gclwh12_3*x521*x577);
IkReal x881=(gclwh14_2*npx*x740);
IkReal x882=(gclwh14_3*r20*x742);
IkReal x883=(gclwh0_0*npx*x740);
IkReal x884=(gclwh2_0*npy*x740);
IkReal x885=(gclwh5_1*x526*x577);
IkReal x886=(gclwh13_1*x521*x577);
IkReal x887=(gclwh15_0*npx*x740);
IkReal x888=(gclwh2_1*x521*x577);
IkReal x889=(gclwh0_1*x544*x577);
IkReal x890=(gclwh5_0*npz*x740);
IkReal x891=(gclwh13_0*npy*x740);
IkReal x892=(gclwh0_0*x520*x555);
IkReal x893=(gclwh15_0*x520*x555);
IkReal x894=(gclwh2_0*x516*x555);
IkReal x895=((1.0)*gclwh13_1*x741);
IkReal x896=(x640*x742);
IkReal x897=(gclwh15_1*x544*x577);
IkReal x898=(x673+x675);
IkReal x899=(x711+x713);
IkReal x900=(x697+x698);
IkReal x901=(x737+x738);
IkReal x902=(x694+x695+x696+x788);
IkReal x903=(x683+x681+x680+x762);
IkReal x904=(x718+x717+x813+x823);
IkReal x905=(x725+x726+x841+x844);
IkReal x906=(x666+x746+x747+x748);
IkReal x907=(x674+x755+x757+x756);
IkReal x908=(x715+x809+x808+x807);
IkReal x909=(x709+x801+x803+x802);
IkReal x910=(x699+x791+x790+x789);
IkReal x911=(x734+x856+x854+x855);
IkReal x912=(x733+x732+x730+x729+x853);
IkReal x913=(x720+x721+x722+x723+x829);
IkReal x914=(x689+x690+x691+x777+x776);
IkReal x915=(x686+x685+x684+x773+x770);
IkReal x916=(((x526*x617))+((x521*x522))+((x520*x662))+(((0.3786)*x533))+((gclwh14_11*x604)));
IkReal x917=(x708+x707+x799+x798+x800);
IkReal x918=(x668+x667+x751+x750+x749);
IkReal x919=(x710+x712+x805+x804+x806);
IkReal x920=(x736+x739+x857+x858+x859);
IkReal x921=(x678+x676+x759+x758+x760);
IkReal x922=(x665+x664+x744+x745+x743);
IkReal x923=(x702+x700+x793+x792+x794);
IkReal x924=(x669+x672+x670+x671+x754+x753+x752);
IkReal x925=(x703+x706+x704+x705+x795+x797+x796);
IkReal x926=(x693+x786+x787+x784+x785+x867+x866+x865);
IkReal x927=(x687+x772+x771+x774+x769+x863+x862+x861);
IkReal x928=(x688+x692+x775+x779+x778+x782+x783+x780+x781+x864);
IkReal x929=(x679+x682+x768+x764+x765+x766+x767+x761+x763+x860);
IkReal x930=(x731+x728+x852+x850+x851+x889+x888+x896+x897+x894+x895+x892+x893+x890+x891+x849+x848);
IkReal x931=(x513+x719+x716+x869+x868+x870+x871+x872+x818+x819+x816+x817+x814+x815+x812+x810+x811+x822+x821+x820);
IkReal x932=(x724+x878+x879+x873+x874+x875+x876+x877+x881+x880+x882+x828+x827+x826+x825+x824+x830+x831);
IkReal x933=(x513+x727+x885+x884+x887+x886+x883+x834+x835+x836+x837+x832+x833+x838+x839+x840+x843+x842+x845+x847+x846);
op[38]=((((-1.0)*gclwh8_12*x654))+(((0.8732)*gclwh12_14*x521))+(((0.8732)*gclwh4_14*x526))+(((-1.0)*x517*x630))+(((-0.0039113345835)*x557))+(((-1.0)*x516*x621))+(((-0.8732)*gclwh14_14*x544))+(((0.0039113345835)*x580))+((x520*x644))+(((-1.0)*gclwh10_12*x614))+(((-0.0039113345835)*x652))+((gclwh6_12*x537)));
op[39]=((-0.05940486)+(((8.0)*gclwh14_11*x544))+(((-8.0)*gclwh12_11*x521))+((gclwh12_11*x663))+((x517*x617))+((x516*x522))+((gclwh4_11*x633))+(((0.7572)*x546))+(((-1.0)*gclwh14_11*x584))+(((-8.0)*gclwh4_11*x526))+(((-0.7572)*x533))+((gclwh8_11*x616))+(((-1.0)*x520*x564)));
op[40]=((0.02168232)+(((-1.0)*x916))+x925);
op[41]=((((-1.0)*gclwh12_2*x578))+(((0.131)*gclwh12_2*x521))+(((-0.131)*npx*x539))+(((-1.0)*x909))+(((-0.01239915)*x528))+(((-0.0655)*gclwh3_2*x516))+(((0.131)*gclwh3_2*x521))+(((-0.0655)*gclwh1_2*x520))+(((0.131)*gclwh4_2*x526))+(((-0.0655)*gclwh4_2*x517))+(((0.01239915)*x574))+((gclwh1_2*x585))+(((0.0655)*gclwh14_2*x520))+((gclwh3_2*x578))+(((-1.0)*gclwh4_2*x559))+(((0.131)*gclwh1_2*x544))+((gclwh14_2*x585))+x917+(((-0.0655)*gclwh12_2*x516))+(((-0.01239915)*x594)));
op[42]=((((-1.0)*x922))+(((-0.30941085)*x534))+(((3.269)*gclwh0_0*x544))+(((3.269)*gclwh2_0*x521))+(((0.30941085)*x581))+(((-3.269)*gclwh5_0*x526))+(((-0.01464286847625)*x623))+((gclwh13_0*x659))+(((-3.269)*gclwh13_0*x521))+(((1.6345)*gclwh5_0*x517))+(((-1.6345)*gclwh2_0*x516))+(((-1.6345)*gclwh0_0*x520))+(((0.01464286847625)*x583))+(((1.6345)*gclwh13_0*x516))+(((-1.6345)*gclwh15_0*x520))+x906+((gclwh2_0*x659))+(((0.30941085)*x593))+(((0.01464286847625)*x550))+(((3.269)*gclwh15_0*x544)));
op[43]=((1.31196768)+(((-1.0)*x918))+x924);
op[44]=((0.05940486)+((x517*x641))+((x516*x635))+(((0.7572)*gclwh11_10*rxp2_2))+(((-1.0)*gclwh15_10*x584))+(((-1.0)*x520*x589))+(((-8.0)*gclwh5_10*x526))+(((-8.0)*gclwh13_10*x521))+(((8.0)*gclwh15_10*x544))+((gclwh9_10*x616))+((gclwh13_10*x663))+(((-0.7572)*x608))+((gclwh5_10*x633)));
op[45]=((((-0.8732)*gclwh13_15*x521))+((gclwh9_13*x654))+((x516*x612))+(((-0.0039113345835)*x624))+((gclwh11_13*x614))+(((0.8732)*gclwh15_15*x544))+(((-1.0)*x520*x545))+(((-0.8732)*gclwh5_15*x526))+(((-1.0)*gclwh7_13*x537))+((x517*x532))+(((0.0039113345835)*x603))+(((0.0039113345835)*x605)));
op[46]=((((0.01239915)*x593))+(((-0.131)*gclwh13_0*x521))+(((0.00058678977375)*x550))+(((0.0655)*gclwh13_0*x516))+((gclwh2_0*x578))+(((0.131)*gclwh0_0*x544))+(((0.0655)*gclwh5_0*x517))+((gclwh13_0*x578))+(((-0.0655)*gclwh2_0*x516))+(((-1.0)*x906))+(((-0.131)*gclwh5_0*x526))+(((-0.01239915)*x534))+((gclwh5_0*x559))+(((0.01239915)*x581))+(((-0.0655)*gclwh0_0*x520))+(((-1.0)*gclwh15_0*x585))+(((-0.0655)*gclwh15_0*x520))+x922+(((0.131)*gclwh2_0*x521))+(((0.131)*gclwh15_0*x544)));
op[47]=((0.02168232)+(((-1.0)*x924))+x918);
op[48]=((((-1.0)*x921))+(((-1.0)*gclwh4_8*x535))+(((0.81725)*gclwh8_12*x520))+(((1.6345)*gclwh6_12*x521))+((gclwh10_12*x554))+((gclwh14_8*x611))+(((0.81725)*gclwh10_12*x517))+((gclwh8_12*x543))+(((-1.0)*gclwh12_8*x531))+(((-1.6345)*gclwh10_12*x526))+(((-1.0)*x898))+(((-0.81725)*gclwh6_12*x516))+(((-1.6345)*gclwh8_12*x544))+x677+x907+(((-1.0)*gclwh6_12*x549)));
op[49]=((((-1.0)*x927))+(((-0.12699240901125)*x582))+((gclwh6_11*x516))+(((0.12699240901125)*x524))+(((-1.0)*x903))+(((-1.0)*gclwh8_11*x520))+(((-1.0)*gclwh10_11*x517))+(((-0.12699240901125)*x658))+x929+x915);
op[50]=((0.17125635)+((x516*x620))+((gclwh6_11*x538))+(((-4.0)*gclwh6_11*x521))+(((-1.0)*gclwh10_11*x622))+(((4.0)*gclwh8_11*x544))+(((-1.0)*x517*x576))+(((-1.0)*x520*x634))+(((-1.0)*gclwh14_11*x600))+((gclwh4_11*x595))+((gclwh12_11*x568))+(((4.0)*gclwh10_11*x526))+(((-1.0)*gclwh8_11*x604)));
op[51]=((((-0.04132419)*x556))+((gclwh12_14*x629))+(((0.160905)*x560))+(((-0.14850585)*x541))+(((-1.569)*gclwh6_2*x521))+(((-0.160905)*x626))+(((-1.0)*gclwh10_2*x638))+(((0.14850585)*x596))+(((0.160905)*x653))+(((0.14850585)*x647))+(((-1.0)*gclwh8_2*x651))+(((0.04132419)*gclwh4_14*rxp2_2))+(((-0.7845)*gclwh10_2*x517))+(((-0.7845)*gclwh8_2*x520))+(((1.569)*gclwh10_2*x526))+(((1.569)*gclwh8_2*x544))+((gclwh6_2*x518))+(((0.7845)*gclwh6_2*x516)));
op[52]=((((-1.0)*x921))+(((-0.0655)*gclwh8_12*x544))+((gclwh10_12*x609))+(((-0.0655)*gclwh10_12*x526))+(((0.03275)*gclwh10_12*x517))+((gclwh8_12*x619))+(((-1.0)*gclwh6_12*x606))+(((0.0655)*gclwh6_12*x521))+(((-1.0)*gclwh14_8*x573))+(((-0.03275)*gclwh6_12*x516))+x898+x907+((gclwh4_8*x628))+(((0.03275)*gclwh8_12*x520))+(((-1.0)*x677))+(((0.006199575)*x560)));
op[53]=((((-1.0)*x927))+((gclwh10_11*x517))+((gclwh8_11*x520))+(((-1.0)*x915))+(((0.00076243651125)*x524))+(((-0.00076243651125)*x582))+(((-1.0)*gclwh6_11*x516))+(((-1.0)*gclwh12_3*x529))+x929+x903);
op[54]=((((-1.0)*x926))+(((-1.0)*gclwh7_10*x516))+(((-1.0)*x914))+(((0.12699240901125)*x618))+((gclwh11_10*x517))+(((-0.12699240901125)*x610))+((gclwh9_10*x520))+(((-0.12699240901125)*x656))+x928+x902);
op[55]=((((-1.0)*x923))+((gclwh9_13*x543))+(((-1.6345)*gclwh9_13*x544))+(((-0.81725)*gclwh7_13*x516))+(((1.6345)*gclwh7_13*x521))+(((-1.0)*gclwh5_9*x535))+(((-1.0)*x900))+(((-1.6345)*gclwh11_13*x526))+(((-1.0)*gclwh7_13*x549))+((gclwh11_13*x554))+(((-1.0)*gclwh13_9*x531))+(((0.81725)*gclwh9_13*x520))+x701+(((0.81725)*gclwh11_13*x517))+x910+((gclwh15_9*x611)));
op[56]=((((0.7845)*gclwh7_0*x516))+(((-0.7845)*gclwh9_0*x520))+(((-1.0)*gclwh11_0*x638))+(((0.160905)*x636))+(((-0.160905)*x642))+(((-1.569)*gclwh7_0*x521))+(((0.14850585)*x607))+(((-0.7845)*gclwh11_0*x517))+(((1.569)*gclwh11_0*x526))+(((0.04132419)*gclwh15_15*rxp0_2))+(((1.569)*gclwh9_0*x544))+(((0.14850585)*x597))+(((-0.160905)*x547))+(((-0.00702803935125)*x569))+((gclwh7_0*x518))+(((-1.0)*gclwh13_15*x629))+(((-0.04132419)*x565))+(((-0.14850585)*x631)));
op[57]=((0.17125635)+(((-1.0)*gclwh15_10*x600))+(((-1.0)*gclwh9_10*x604))+(((-4.0)*gclwh7_10*x521))+(((4.0)*gclwh11_10*x526))+((gclwh5_10*x595))+(((-1.0)*gclwh11_10*x622))+(((-1.0)*x517*x536))+((x516*x587))+((gclwh13_10*x568))+((gclwh7_10*x538))+(((4.0)*gclwh9_10*x544))+(((-1.0)*x520*x561)));
op[58]=((((-1.0)*x926))+(((-0.00076243651125)*x610))+(((-1.0)*x902))+(((-1.0)*gclwh9_10*x520))+(((-1.0)*gclwh11_10*x517))+((gclwh7_10*x516))+(((0.00076243651125)*x618))+(((-1.0)*gclwh13_1*x529))+x928+x914);
op[59]=(((gclwh11_13*x609))+(((-1.0)*x923))+((gclwh13_9*x601))+(((0.03275)*gclwh9_13*x520))+(((-0.0655)*gclwh11_13*x526))+(((-1.0)*gclwh7_13*x606))+(((0.03275)*gclwh11_13*x517))+(((0.0655)*gclwh7_13*x521))+(((0.006199575)*x547))+(((-1.0)*x701))+(((-1.0)*gclwh15_9*x573))+(((-0.03275)*gclwh7_13*x516))+((gclwh9_13*x619))+x910+x900+(((-0.0655)*gclwh9_13*x544)));
op[60]=((((1.6345)*gclwh4_8*x526))+(((0.81725)*gclwh14_8*x520))+(((-1.0)*gclwh4_8*x554))+(((-0.81725)*gclwh12_8*x516))+(((-1.0)*x919))+(((-0.007321434238125)*x540))+(((-1.0)*x714))+((gclwh14_8*x543))+(((1.6345)*gclwh12_8*x521))+x899+(((-0.81725)*gclwh4_8*x517))+(((-1.0)*gclwh10_12*x535))+x908+((gclwh6_12*x531))+(((-1.0)*gclwh8_12*x611))+(((-1.6345)*gclwh14_8*x544)));
op[61]=((0.679811285)+((gclwh1_3*x530))+(((-0.66189404)*gclwh4_3*x517))+(((1.341705325)*gclwh3_3*x521))+(((-0.00600991575645741)*x661))+(((-1.0)*x904))+((gclwh12_11*x516))+(((0.66189404)*gclwh14_3*x520))+(((-0.679811285)*gclwh1_3*x520))+((gclwh4_11*x517))+(((-1.0)*gclwh12_3*x648))+(((-0.679811285)*gclwh3_3*x516))+((gclwh14_3*x530))+(((1.341705325)*gclwh12_3*x521))+(((-0.66189404)*gclwh12_3*x516))+(((1.341705325)*gclwh4_3*x526))+(((-1.0)*gclwh14_11*x520))+(((1.341705325)*gclwh1_3*x544))+((gclwh3_3*x648))+x931+x913+(((-1.341705325)*gclwh14_3*x544))+(((-1.0)*x932)));
op[62]=((0.07735732)+(((-1.0)*x916))+x925);
op[63]=(((x514*x602))+(((0.85)*gclwh12_8*x516))+(((0.7845)*gclwh1_2*x520))+(((-1.569)*gclwh3_2*x521))+((gclwh12_2*x518))+(((-1.0)*gclwh3_2*x518))+(((-1.0)*x909))+(((-1.0)*gclwh14_2*x651))+(((1.569)*npx*x539))+(((0.14850585)*x594))+(((-1.569)*gclwh12_2*x521))+(((0.7845)*gclwh12_2*x516))+(((0.7845)*gclwh4_2*x517))+(((-0.85)*gclwh14_8*x520))+(((0.007614829125)*x540))+(((-0.14850585)*x574))+(((-1.0)*gclwh12_8*npy*x514))+(((-0.7845)*gclwh14_2*x520))+(((0.14850585)*x528))+(((0.007614829125)*x646))+(((-1.0)*gclwh4_8*npz*x514))+(((-1.569)*gclwh4_2*x526))+(((0.7845)*gclwh3_2*x516))+(((-1.0)*gclwh1_2*x651))+(((0.85)*gclwh4_8*x517))+x917+(((-0.007614829125)*x632))+((gclwh4_2*x638))+(((-1.569)*gclwh1_2*x544)));
op[64]=((((-1.0)*gclwh14_8*x619))+(((-1.0)*gclwh10_12*x628))+(((0.0655)*gclwh14_8*x544))+(((0.000293394886875)*x540))+(((-1.0)*x908))+(((-0.0655)*gclwh12_8*x521))+(((-1.0)*gclwh8_12*x573))+((gclwh6_12*x601))+((gclwh4_8*x609))+(((-1.0)*x714))+(((0.03275)*gclwh4_8*x517))+(((-0.0655)*gclwh4_8*x526))+x899+(((0.03275)*gclwh12_8*x516))+x919+(((-0.03275)*gclwh14_8*x520)));
op[65]=((-0.012986285)+(((-1.0)*gclwh12_3*x598))+((gclwh14_11*x520))+(((0.008055325)*gclwh4_3*x526))+(((0.00493096)*gclwh4_3*x517))+(((-1.0)*gclwh4_11*x517))+(((-0.012986285)*gclwh3_3*x516))+(((-1.0)*x913))+(((3.60823078949063e-5)*x579))+(((-0.008055325)*gclwh14_3*x544))+(((0.008055325)*gclwh3_3*x521))+(((0.00493096)*gclwh12_3*x516))+(((-0.00493096)*gclwh14_3*x520))+(((0.008055325)*gclwh1_3*x544))+(((-1.0)*gclwh4_3*x523))+((gclwh3_3*x598))+(((-1.0)*gclwh12_11*x516))+(((0.008055325)*gclwh12_3*x521))+(((-0.012986285)*gclwh1_3*x520))+x931+x904+((gclwh14_3*x637))+(((-1.0)*x932)));
op[66]=((-0.679811285)+((gclwh5_10*x517))+(((-0.66189404)*gclwh15_1*x520))+(((-0.679811285)*gclwh2_1*x516))+(((-1.0)*gclwh15_10*x520))+(((1.341705325)*gclwh0_1*x544))+(((1.341705325)*gclwh15_1*x544))+(((0.66189404)*gclwh5_1*x517))+(((-1.0)*x905))+(((-0.679811285)*gclwh0_1*x520))+(((-1.341705325)*gclwh5_1*x526))+(((-1.0)*gclwh15_1*x530))+(((0.66189404)*gclwh13_1*x516))+((gclwh13_10*x516))+((gclwh13_1*x648))+(((1.341705325)*gclwh2_1*x521))+(((0.00600991575645741)*x640))+(((0.00600991575645741)*x588))+x933+x912+(((-1.341705325)*gclwh13_1*x521))+((gclwh0_1*x530))+(((-1.0)*x930)));
op[67]=((((0.81725)*gclwh5_9*x517))+(((-1.0)*x519*x553))+(((-0.81725)*gclwh15_9*x520))+(((-1.0)*x901))+(((-1.0)*x911))+((gclwh13_9*x549))+(((-1.0)*gclwh7_13*x531))+(((-1.6345)*gclwh13_9*x521))+((x515*x553))+((gclwh5_9*x554))+((gclwh11_13*x535))+(((-1.0)*gclwh15_9*x543))+(((0.81725)*gclwh13_9*x516))+x735+((gclwh9_13*x611))+x920);
op[68]=((((0.00702803935125)*x623))+(((-0.00702803935125)*x583))+(((1.569)*gclwh5_0*x526))+(((-0.14850585)*x593))+(((0.7845)*gclwh15_0*x520))+(((-0.00702803935125)*x550))+(((-1.0)*x514*x519))+(((-0.007614829125)*x599))+(((1.569)*gclwh13_0*x521))+(((0.007614829125)*x570))+(((-1.0)*x906))+(((-1.569)*gclwh0_0*x544))+((x514*x515))+(((-1.0)*gclwh2_0*x518))+(((-0.7845)*gclwh13_0*x516))+(((0.7845)*gclwh0_0*x520))+(((0.007614829125)*x615))+(((0.85)*gclwh13_9*x516))+(((-0.85)*gclwh15_9*x520))+(((-1.0)*gclwh13_0*x518))+(((0.14850585)*x534))+(((-1.569)*gclwh15_0*x544))+(((-0.7845)*gclwh5_0*x517))+(((-1.569)*gclwh2_0*x521))+(((-0.14850585)*x581))+(((-1.0)*gclwh13_9*npy*x514))+x922+(((0.85)*gclwh5_9*x517))+(((0.7845)*gclwh2_0*x516)));
op[69]=((0.07735732)+(((-1.0)*x924))+x918);
op[70]=((0.012986285)+(((0.00493096)*gclwh15_1*x520))+((gclwh15_10*x520))+(((3.60823078949063e-5)*x588))+(((0.008055325)*gclwh2_1*x521))+((gclwh0_1*x637))+(((0.008055325)*gclwh0_1*x544))+(((-0.012986285)*gclwh0_1*x520))+(((-0.00493096)*gclwh5_1*x517))+(((-0.012986285)*gclwh2_1*x516))+(((-3.60823078949063e-5)*x571))+(((-1.0)*x912))+(((-1.0)*gclwh13_10*x516))+(((-1.0)*gclwh5_10*x517))+(((-0.008055325)*gclwh5_1*x526))+((gclwh5_1*x523))+(((0.008055325)*gclwh15_1*x544))+((gclwh13_1*x598))+x933+x905+(((-0.00493096)*gclwh13_1*x516))+(((-0.008055325)*gclwh13_1*x521))+(((-1.0)*x930)));
op[71]=((((-1.0)*x920))+(((0.03275)*gclwh15_9*x520))+(((0.000293394886875)*x599))+(((-0.03275)*gclwh13_9*x516))+(((-1.0)*x901))+((gclwh11_13*x628))+(((0.0655)*gclwh13_9*x521))+(((-0.03275)*gclwh5_9*x517))+(((-1.0)*gclwh7_13*x601))+(((-1.0)*x515*x627))+(((-1.0)*gclwh5_9*x609))+((gclwh9_13*x573))+((x519*x627))+x735+(((-0.000293394886875)*x570))+x911);
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j1array[16], cj1array[16], sj1array[16], j2array[16], cj2array[16], sj2array[16], j3array[16], cj3array[16], sj3array[16];
int numsolutions = 0;
for(int ij1 = 0; ij1 < numroots; ij1 += 3)
{
IkReal htj1 = zeror[ij1+0], htj2 = zeror[ij1+1], htj3 = zeror[ij1+2];
if(isnan(htj1)||isnan(htj2)||isnan(htj3)){
continue;
}
j1array[numsolutions]=((2.0)*(atan(htj1)));
j2array[numsolutions]=((2.0)*(atan(htj2)));
j3array[numsolutions]=((2.0)*(atan(htj3)));
if(isinf(htj1)){
cj1array[numsolutions] = IKcos(j1array[numsolutions]);
sj1array[numsolutions] = IKsin(j1array[numsolutions]);
}
else{
IkReal x934=htj1*htj1;
CheckValue<IkReal> x935=IKPowWithIntegerCheck(((1.0)+x934),-1);
if(!x935.valid){
continue;
}
cj1array[numsolutions]=((x935.value)*(((1.0)+(((-1.0)*x934)))));
CheckValue<IkReal> x936=IKPowWithIntegerCheck(((1.0)+(htj1*htj1)),-1);
if(!x936.valid){
continue;
}
sj1array[numsolutions]=((2.0)*htj1*(x936.value));
}
if(isinf(htj2)){
cj2array[numsolutions] = IKcos(j2array[numsolutions]);
sj2array[numsolutions] = IKsin(j2array[numsolutions]);
}
else{
IkReal x937=htj2*htj2;
CheckValue<IkReal> x938=IKPowWithIntegerCheck(((1.0)+x937),-1);
if(!x938.valid){
continue;
}
cj2array[numsolutions]=((x938.value)*(((1.0)+(((-1.0)*x937)))));
CheckValue<IkReal> x939=IKPowWithIntegerCheck(((1.0)+(htj2*htj2)),-1);
if(!x939.valid){
continue;
}
sj2array[numsolutions]=((2.0)*htj2*(x939.value));
}
if(isinf(htj3)){
cj3array[numsolutions] = IKcos(j3array[numsolutions]);
sj3array[numsolutions] = IKsin(j3array[numsolutions]);
}
else{
IkReal x940=htj3*htj3;
CheckValue<IkReal> x941=IKPowWithIntegerCheck(((1.0)+x940),-1);
if(!x941.valid){
continue;
}
cj3array[numsolutions]=((x941.value)*(((1.0)+(((-1.0)*x940)))));
CheckValue<IkReal> x942=IKPowWithIntegerCheck(((1.0)+(htj3*htj3)),-1);
if(!x942.valid){
continue;
}
sj3array[numsolutions]=((2.0)*htj3*(x942.value));
}
if( j1array[numsolutions] > IKPI )
{
    j1array[numsolutions]-=IK2PI;
}
else if( j1array[numsolutions] < -IKPI )
{
    j1array[numsolutions]+=IK2PI;
}
if( j2array[numsolutions] > IKPI )
{
    j2array[numsolutions]-=IK2PI;
}
else if( j2array[numsolutions] < -IKPI )
{
    j2array[numsolutions]+=IK2PI;
}
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j1valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj1 = 16;
_nj2 = 1;
_nj3 = 1;
for(int ij1 = 0; ij1 < numsolutions; ++ij1)
    {
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
_ij2[0] = 0; _ij2[1] = -1;
_ij3[0] = 0; _ij3[1] = -1;
for(int iij1 = ij1+1; iij1 < numsolutions; ++iij1)
{
if( !j1valid[iij1] ) { continue; }
if( IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj2array[ij1]-cj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij1]-sj2array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(cj3array[ij1]-cj3array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij1]-sj3array[iij1]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j1valid[iij1]=false; _ij1[1] = iij1; _ij2[1] = 0; _ij3[1] = 0;  break; 
}
}
    j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

    j2 = j2array[ij1]; cj2 = cj2array[ij1]; sj2 = sj2array[ij1];

    j3 = j3array[ij1]; cj3 = cj3array[ij1]; sj3 = sj3array[ij1];

innerfn(solutions);
    }
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots5(IkReal rawcoeffs[5+1], IkReal rawroots[5], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots4(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[5];
    const int maxsteps = 110;
    for(int i = 0; i < 5; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[5];
    IkReal err[5];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 5; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 5; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 5; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 5; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[5] = {false};
    for(int i = 0; i < 5; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 5; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots5(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
inline void innerfn(IkSolutionListBase<IkReal>& solutions) {
for(int fniter = 0; fniter < 1; ++fniter) {
{
IkReal j5eval[2];
j5eval[0]=((r20*r20)+(r21*r21));
j5eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j5eval[0]) < 0.0000010000000000  || IKabs(j5eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((r20*r20)+(r21*r21));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x943=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x943);
rxp1_0=(pz*r11);
rxp1_1=(r01*x943);
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x944=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x944);
rxp1_0=(pz*r11);
rxp1_1=(r01*x944);
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x945=IKPowWithIntegerCheck(r22,-1);
if(!x945.valid){
continue;
}
CheckValue<IkReal> x946=IKPowWithIntegerCheck(sj3,-1);
if(!x946.valid){
continue;
}
sj4array[0]=((x945.value)*(x946.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x947=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x947);
rxp1_0=(pz*r11);
rxp1_1=(r01*x947);
IkReal x948=((16.0)*sj4);
IkReal x949=(cj1*cj2);
IkReal x950=((4.0)*sj3);
IkReal x951=((8.0)*sj4);
IkReal x952=((4.0)*cj4);
IkReal x953=(sj1*sj2);
IkReal x954=((4.0)*sj4);
IkReal x955=(cj3*r02);
IkReal x956=((16.0)*sj3);
IkReal x957=((8.0)*sj3);
IkReal x958=((12.0)*cj4);
IkReal x959=((12.0)*sj4);
IkReal x960=(cj3*r12);
IkReal x961=(r11*x950);
IkReal x962=(r01*x950);
IkReal x963=(r01*x953);
IkReal x964=(cj3*cj4*r01);
IkReal x965=(cj3*cj4*r11);
IkReal x966=(cj3*r10*x952);
IkReal x967=(x959*x960);
IkReal x968=(cj3*r00*x952);
IkReal x969=(x955*x959);
IkReal x970=(r00*x953*x954);
IkReal x971=(r02*x953*x958);
IkReal x972=(r00*x949*x954);
IkReal x973=(r02*x949*x958);
IkReal x974=(r10*x953*x954);
IkReal x975=(r12*x949*x958);
IkReal x976=(r12*x953*x958);
IkReal x977=(r10*x949*x954);
IkReal x978=(x972+x961);
IkReal x979=(x974+x962);
IkReal x980=(x970+x966);
IkReal x981=(x973+x967);
IkReal x982=(x977+x968);
IkReal x983=(x976+x969);
j5eval[0]=((IKabs((((r11*x951*x953))+(((-1.0)*r00*x957))+(((-8.0)*x964))+(((-1.0)*r11*x949*x951)))))+(((0.5)*(IKabs(((((-1.0)*x980))+(((-1.0)*r02*x949*x952))+((r02*x952*x953))+x978+(((-1.0)*x954*x960)))))))+(((0.5)*(IKabs(((((-1.0)*x981))+x980+x971+(((-1.0)*x978)))))))+(((0.5)*(IKabs(((((-1.0)*x981))+(((-1.0)*x980))+x971+x978)))))+(IKabs(((((-1.0)*r10*x957))+(((-8.0)*x965))+((r01*x949*x951))+(((-1.0)*x951*x963)))))+(((0.5)*(IKabs(((((-1.0)*x983))+(((-1.0)*x982))+x975+x979)))))+(((0.5)*(IKabs(((((-1.0)*r00*x956))+(((-16.0)*x964))+((r11*x948*x953))+(((-1.0)*r11*x948*x949)))))))+(((0.5)*(IKabs(((((-1.0)*x983))+x982+x975+(((-1.0)*x979)))))))+(((0.5)*(IKabs(((((-1.0)*x982))+((r12*x949*x952))+(((-1.0)*r12*x952*x953))+(((-1.0)*x954*x955))+x979)))))+(((0.5)*(IKabs(((((-1.0)*r10*x956))+(((-16.0)*x965))+((r01*x948*x949))+(((-1.0)*x948*x963))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x984=(r10*sj3);
IkReal x985=(r01*sj4);
IkReal x986=(cj1*cj2);
IkReal x987=(cj3*cj4);
IkReal x988=(sj1*sj2);
IkReal x989=(cj4*r02);
IkReal x990=((4.0)*r11*sj3);
IkReal x991=(cj3*r12*sj4);
IkReal x992=((4.0)*r00*sj4);
IkReal x993=((4.0)*r10*x987);
IkReal x994=((12.0)*x991);
IkReal x995=((4.0)*x991);
IkReal x996=(x986*x992);
IkReal x997=(x988*x992);
IkReal x998=((12.0)*x988*x989);
IkReal x999=((12.0)*x986*x989);
IkReal x1000=((4.0)*x988*x989);
IkReal x1001=((4.0)*x986*x989);
IkReal x1002=(x990+x996);
IkReal x1003=(x993+x997);
IkReal x1004=(x1001+x995);
IkReal x1005=(x994+x999);
IkReal x1006=((((8.0)*x985*x986))+(((-8.0)*x985*x988))+(((-8.0)*x984))+(((-8.0)*r11*x987)));
op[0]=(x1002+x1000+(((-1.0)*x1003))+(((-1.0)*x1004)));
op[1]=x1006;
op[2]=(x1002+(((-1.0)*x1003))+(((-1.0)*x1005))+x998);
op[3]=((((16.0)*x985*x986))+(((-16.0)*r11*x987))+(((-16.0)*x984))+(((-16.0)*x985*x988)));
op[4]=(x1003+(((-1.0)*x1002))+(((-1.0)*x1005))+x998);
op[5]=x1006;
op[6]=(x1003+x1000+(((-1.0)*x1002))+(((-1.0)*x1004)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1007=(cj1*cj2);
IkReal x1008=((4.0)*cj4);
IkReal x1009=(sj1*sj2);
IkReal x1010=((4.0)*sj4);
IkReal x1011=(r00*sj3);
IkReal x1012=(cj3*r02);
IkReal x1013=((4.0)*r01*sj3);
IkReal x1014=((16.0)*r11*sj4);
IkReal x1015=(cj3*cj4*r01);
IkReal x1016=((12.0)*cj4*r12);
IkReal x1017=((8.0)*r11*sj4);
IkReal x1018=(cj3*r00*x1008);
IkReal x1019=((12.0)*sj4*x1012);
IkReal x1020=(x1010*x1012);
IkReal x1021=(r10*x1007*x1010);
IkReal x1022=(r10*x1009*x1010);
IkReal x1023=(x1007*x1016);
IkReal x1024=(x1009*x1016);
IkReal x1025=(r12*x1007*x1008);
IkReal x1026=(r12*x1008*x1009);
IkReal x1027=(x1013+x1022);
IkReal x1028=(x1018+x1021);
IkReal x1029=(x1026+x1020);
IkReal x1030=(x1019+x1024);
IkReal x1031=(((x1009*x1017))+(((-8.0)*x1011))+(((-8.0)*x1015))+(((-1.0)*x1007*x1017)));
j5evalpoly[0]=((((htj5*htj5*htj5)*(((((-16.0)*x1011))+(((-16.0)*x1015))+((x1009*x1014))+(((-1.0)*x1007*x1014))))))+x1025+x1028+(((-1.0)*x1027))+(((-1.0)*x1029))+((x1031*(htj5*htj5*htj5*htj5*htj5)))+(((htj5*htj5)*(((((-1.0)*x1030))+x1023+x1028+(((-1.0)*x1027))))))+((htj5*x1031))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1025+x1027+(((-1.0)*x1028))+(((-1.0)*x1029))))))+(((htj5*htj5*htj5*htj5)*(((((-1.0)*x1030))+x1027+x1023+(((-1.0)*x1028)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1032=(cj5*sj4);
IkReal x1033=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1032))+((r01*x1033)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1032))+(((-1.0)*r11*x1033))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1032))+((r01*x1033))))+IKsqr((((r10*x1032))+(((-1.0)*r11*x1033))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x1032))+((r01*x1033))), (((r10*x1032))+(((-1.0)*r11*x1033))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1034=IKcos(j0);
IkReal x1035=IKsin(j0);
IkReal x1036=(r02*sj4);
IkReal x1037=((1.0)*sj3);
IkReal x1038=(r12*sj4);
IkReal x1039=(cj3*cj4);
IkReal x1040=((1.0)*cj5);
IkReal x1041=(r11*sj5);
IkReal x1042=((1.0)*cj1);
IkReal x1043=((0.39225)*sj1);
IkReal x1044=(cj5*r01);
IkReal x1045=(r01*sj5);
IkReal x1046=(r00*sj5);
IkReal x1047=((1.0)*sj1);
IkReal x1048=((0.39225)*cj2);
IkReal x1049=(cj5*r11);
IkReal x1050=(r10*sj5);
IkReal x1051=((1.0)*cj4);
IkReal x1052=(sj2*x1034);
IkReal x1053=(sj2*x1035);
IkReal x1054=(cj4*cj5*sj3);
IkReal x1055=(cj1*x1034);
IkReal x1056=(cj2*x1034);
IkReal x1057=(cj1*x1035);
IkReal x1058=(cj2*x1035);
evalcond[0]=(x1034+(((-1.0)*r10*sj4*x1040))+(((-1.0)*r12*x1051))+((sj4*x1041)));
evalcond[1]=((((-1.0)*r02*x1051))+(((-1.0)*x1035))+(((-1.0)*r00*sj4*x1040))+((sj4*x1045)));
evalcond[2]=((((0.425)*x1055))+(((-0.10915)*x1035))+(((-1.0)*x1043*x1052))+(((-0.09465)*x1046))+(((-0.09465)*x1044))+((x1048*x1055))+(((-1.0)*px)));
evalcond[3]=((((0.425)*x1057))+(((0.10915)*x1034))+(((-0.09465)*x1050))+(((-1.0)*x1043*x1053))+(((-0.09465)*x1049))+((x1048*x1057))+(((-1.0)*py)));
evalcond[4]=(((cj3*x1036))+((x1039*x1045))+((sj3*x1044))+((sj3*x1046))+((sj1*x1052))+(((-1.0)*x1042*x1056))+(((-1.0)*r00*x1039*x1040)));
evalcond[5]=(((cj3*x1038))+((x1039*x1041))+((sj3*x1050))+((sj3*x1049))+((sj1*x1053))+(((-1.0)*x1042*x1058))+(((-1.0)*r10*x1039*x1040)));
evalcond[6]=((((-1.0)*cj4*x1037*x1045))+(((-1.0)*x1036*x1037))+(((-1.0)*x1042*x1052))+((r00*x1054))+((cj3*x1046))+((cj3*x1044))+(((-1.0)*x1047*x1056)));
evalcond[7]=((((-1.0)*x1037*x1038))+(((-1.0)*cj4*x1037*x1041))+((cj3*x1050))+(((-1.0)*x1042*x1053))+((cj3*x1049))+((r10*x1054))+(((-1.0)*x1047*x1058)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1059=IKPowWithIntegerCheck(cj3,-1);
if(!x1059.valid){
continue;
}
CheckValue<IkReal> x1060=IKPowWithIntegerCheck(r22,-1);
if(!x1060.valid){
continue;
}
sj4array[0]=((-1.0)*(x1059.value)*(x1060.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1061=((-1.0)*pz);
r20=0;
r21=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
rxp0_0=(pz*r10);
rxp0_1=(r00*x1061);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1061);
IkReal x1062=((16.0)*sj4);
IkReal x1063=(cj1*cj2);
IkReal x1064=((4.0)*sj3);
IkReal x1065=((8.0)*sj4);
IkReal x1066=((4.0)*cj4);
IkReal x1067=(sj1*sj2);
IkReal x1068=((4.0)*sj4);
IkReal x1069=(cj3*r02);
IkReal x1070=((16.0)*sj3);
IkReal x1071=((8.0)*sj3);
IkReal x1072=((12.0)*cj4);
IkReal x1073=((12.0)*sj4);
IkReal x1074=(cj3*r12);
IkReal x1075=(r11*x1064);
IkReal x1076=(r01*x1064);
IkReal x1077=(r01*x1067);
IkReal x1078=(cj3*cj4*r01);
IkReal x1079=(cj3*cj4*r11);
IkReal x1080=(cj3*r10*x1066);
IkReal x1081=(x1073*x1074);
IkReal x1082=(cj3*r00*x1066);
IkReal x1083=(x1069*x1073);
IkReal x1084=(r00*x1067*x1068);
IkReal x1085=(r02*x1067*x1072);
IkReal x1086=(r00*x1063*x1068);
IkReal x1087=(r02*x1063*x1072);
IkReal x1088=(r10*x1067*x1068);
IkReal x1089=(r12*x1063*x1072);
IkReal x1090=(r12*x1067*x1072);
IkReal x1091=(r10*x1063*x1068);
IkReal x1092=(x1075+x1086);
IkReal x1093=(x1076+x1088);
IkReal x1094=(x1084+x1080);
IkReal x1095=(x1087+x1081);
IkReal x1096=(x1091+x1082);
IkReal x1097=(x1090+x1083);
j5eval[0]=((((0.5)*(IKabs(((((-1.0)*r10*x1070))+(((-1.0)*x1062*x1077))+((r01*x1062*x1063))+(((-16.0)*x1079)))))))+(IKabs(((((-8.0)*x1078))+(((-1.0)*r00*x1071))+((r11*x1065*x1067))+(((-1.0)*r11*x1063*x1065)))))+(((0.5)*(IKabs((x1093+((r12*x1063*x1066))+(((-1.0)*r12*x1066*x1067))+(((-1.0)*x1096))+(((-1.0)*x1068*x1069)))))))+(((0.5)*(IKabs((x1093+x1089+(((-1.0)*x1097))+(((-1.0)*x1096)))))))+(((0.5)*(IKabs((x1092+((r02*x1066*x1067))+(((-1.0)*x1094))+(((-1.0)*x1068*x1074))+(((-1.0)*r02*x1063*x1066)))))))+(((0.5)*(IKabs((x1092+x1085+(((-1.0)*x1095))+(((-1.0)*x1094)))))))+(((0.5)*(IKabs((x1094+x1085+(((-1.0)*x1095))+(((-1.0)*x1092)))))))+(((0.5)*(IKabs((x1096+x1089+(((-1.0)*x1097))+(((-1.0)*x1093)))))))+(IKabs(((((-8.0)*x1079))+(((-1.0)*r10*x1071))+(((-1.0)*x1065*x1077))+((r01*x1063*x1065)))))+(((0.5)*(IKabs(((((-1.0)*r00*x1070))+(((-1.0)*r11*x1062*x1063))+((r11*x1062*x1067))+(((-16.0)*x1078))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // 3 cases reached

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1098=(r10*sj3);
IkReal x1099=(r01*sj4);
IkReal x1100=(cj1*cj2);
IkReal x1101=(cj3*cj4);
IkReal x1102=(sj1*sj2);
IkReal x1103=(cj4*r02);
IkReal x1104=((4.0)*r11*sj3);
IkReal x1105=(cj3*r12*sj4);
IkReal x1106=((4.0)*r00*sj4);
IkReal x1107=((4.0)*r10*x1101);
IkReal x1108=((12.0)*x1105);
IkReal x1109=((4.0)*x1105);
IkReal x1110=(x1100*x1106);
IkReal x1111=(x1102*x1106);
IkReal x1112=((12.0)*x1102*x1103);
IkReal x1113=((12.0)*x1100*x1103);
IkReal x1114=((4.0)*x1102*x1103);
IkReal x1115=((4.0)*x1100*x1103);
IkReal x1116=(x1104+x1110);
IkReal x1117=(x1107+x1111);
IkReal x1118=(x1109+x1115);
IkReal x1119=(x1108+x1113);
IkReal x1120=((((8.0)*x1099*x1100))+(((-8.0)*r11*x1101))+(((-8.0)*x1098))+(((-8.0)*x1099*x1102)));
op[0]=(x1114+x1116+(((-1.0)*x1118))+(((-1.0)*x1117)));
op[1]=x1120;
op[2]=(x1112+x1116+(((-1.0)*x1119))+(((-1.0)*x1117)));
op[3]=((((-16.0)*x1099*x1102))+(((-16.0)*x1098))+(((16.0)*x1099*x1100))+(((-16.0)*r11*x1101)));
op[4]=(x1112+x1117+(((-1.0)*x1119))+(((-1.0)*x1116)));
op[5]=x1120;
op[6]=(x1114+x1117+(((-1.0)*x1118))+(((-1.0)*x1116)));
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

IkReal x1121=(cj1*cj2);
IkReal x1122=((4.0)*cj4);
IkReal x1123=(sj1*sj2);
IkReal x1124=((4.0)*sj4);
IkReal x1125=(r00*sj3);
IkReal x1126=(cj3*r02);
IkReal x1127=((4.0)*r01*sj3);
IkReal x1128=((16.0)*r11*sj4);
IkReal x1129=(cj3*cj4*r01);
IkReal x1130=((12.0)*cj4*r12);
IkReal x1131=((8.0)*r11*sj4);
IkReal x1132=(cj3*r00*x1122);
IkReal x1133=((12.0)*sj4*x1126);
IkReal x1134=(x1124*x1126);
IkReal x1135=(r10*x1121*x1124);
IkReal x1136=(r10*x1123*x1124);
IkReal x1137=(x1121*x1130);
IkReal x1138=(x1123*x1130);
IkReal x1139=(r12*x1121*x1122);
IkReal x1140=(r12*x1122*x1123);
IkReal x1141=(x1127+x1136);
IkReal x1142=(x1132+x1135);
IkReal x1143=(x1140+x1134);
IkReal x1144=(x1138+x1133);
IkReal x1145=((((-8.0)*x1125))+(((-8.0)*x1129))+(((-1.0)*x1121*x1131))+((x1123*x1131)));
j5evalpoly[0]=(x1142+x1139+(((htj5*htj5)*((x1142+x1137+(((-1.0)*x1144))+(((-1.0)*x1141))))))+(((htj5*htj5*htj5)*(((((-1.0)*x1121*x1128))+((x1123*x1128))+(((-16.0)*x1125))+(((-16.0)*x1129))))))+(((-1.0)*x1141))+(((-1.0)*x1143))+((x1145*(htj5*htj5*htj5*htj5*htj5)))+((htj5*x1145))+(((htj5*htj5*htj5*htj5*htj5*htj5)*((x1141+x1139+(((-1.0)*x1142))+(((-1.0)*x1143))))))+(((htj5*htj5*htj5*htj5)*((x1141+x1137+(((-1.0)*x1142))+(((-1.0)*x1144)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1146=(cj5*sj4);
IkReal x1147=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1146))+(((-1.0)*cj4*r02))+((r01*x1147)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1147))+((r10*x1146))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1146))+(((-1.0)*cj4*r02))+((r01*x1147))))+IKsqr(((((-1.0)*r11*x1147))+((r10*x1146))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1146))+(((-1.0)*cj4*r02))+((r01*x1147))), ((((-1.0)*r11*x1147))+((r10*x1146))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1148=IKcos(j0);
IkReal x1149=IKsin(j0);
IkReal x1150=(r02*sj4);
IkReal x1151=((1.0)*sj3);
IkReal x1152=(r12*sj4);
IkReal x1153=(cj3*cj4);
IkReal x1154=((1.0)*cj5);
IkReal x1155=(r11*sj5);
IkReal x1156=((1.0)*cj1);
IkReal x1157=((0.39225)*sj1);
IkReal x1158=(cj5*r01);
IkReal x1159=(r01*sj5);
IkReal x1160=(r00*sj5);
IkReal x1161=((1.0)*sj1);
IkReal x1162=((0.39225)*cj2);
IkReal x1163=(cj5*r11);
IkReal x1164=(r10*sj5);
IkReal x1165=((1.0)*cj4);
IkReal x1166=(sj2*x1148);
IkReal x1167=(sj2*x1149);
IkReal x1168=(cj4*cj5*sj3);
IkReal x1169=(cj1*x1148);
IkReal x1170=(cj2*x1148);
IkReal x1171=(cj1*x1149);
IkReal x1172=(cj2*x1149);
evalcond[0]=(x1148+(((-1.0)*r12*x1165))+(((-1.0)*r10*sj4*x1154))+((sj4*x1155)));
evalcond[1]=((((-1.0)*r02*x1165))+(((-1.0)*x1149))+(((-1.0)*r00*sj4*x1154))+((sj4*x1159)));
evalcond[2]=(((x1162*x1169))+(((-0.09465)*x1160))+(((-1.0)*px))+(((-0.10915)*x1149))+(((-1.0)*x1157*x1166))+(((0.425)*x1169))+(((-0.09465)*x1158)));
evalcond[3]=((((0.10915)*x1148))+(((-0.09465)*x1164))+(((-0.09465)*x1163))+((x1162*x1171))+(((-1.0)*py))+(((0.425)*x1171))+(((-1.0)*x1157*x1167)));
evalcond[4]=(((sj1*x1166))+((cj3*x1150))+((sj3*x1158))+((x1153*x1159))+(((-1.0)*r00*x1153*x1154))+(((-1.0)*x1156*x1170))+((sj3*x1160)));
evalcond[5]=(((sj1*x1167))+((cj3*x1152))+((x1153*x1155))+(((-1.0)*r10*x1153*x1154))+(((-1.0)*x1156*x1172))+((sj3*x1164))+((sj3*x1163)));
evalcond[6]=((((-1.0)*x1156*x1166))+((cj3*x1158))+((r00*x1168))+(((-1.0)*cj4*x1151*x1159))+((cj3*x1160))+(((-1.0)*x1161*x1170))+(((-1.0)*x1150*x1151)));
evalcond[7]=((((-1.0)*x1156*x1167))+((r10*x1168))+(((-1.0)*cj4*x1151*x1155))+((cj3*x1164))+((cj3*x1163))+(((-1.0)*x1161*x1172))+(((-1.0)*x1151*x1152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x1173=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1173);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1173);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1174=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1174);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1174);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1175=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1175);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1175);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1176=IKPowWithIntegerCheck(r22,-1);
if(!x1176.valid){
continue;
}
sj4array[0]=((-1.0)*(x1176.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1177=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1177);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1177);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1179 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1179.valid){
continue;
}
IkReal x1178=x1179.value;
j5array[0]=((-1.0)*x1178);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1178)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1180=(cj5*sj4);
IkReal x1181=(sj4*sj5);
if( IKabs((((r01*x1181))+(((-1.0)*r00*x1180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1180))+(((-1.0)*r11*x1181)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1181))+(((-1.0)*r00*x1180))))+IKsqr((((r10*x1180))+(((-1.0)*r11*x1181))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1181))+(((-1.0)*r00*x1180))), (((r10*x1180))+(((-1.0)*r11*x1181))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1182=IKcos(j0);
IkReal x1183=IKsin(j0);
IkReal x1184=(cj5*r01);
IkReal x1185=(sj4*sj5);
IkReal x1186=(cj5*r11);
IkReal x1187=((0.425)*cj1);
IkReal x1188=(r00*sj5);
IkReal x1189=(r10*sj5);
IkReal x1190=((1.0)*cj1*sj2);
IkReal x1191=((1.0)*cj2*sj1);
IkReal x1192=((1.0)*cj5*sj4);
evalcond[0]=(x1182+(((-1.0)*r10*x1192))+((r11*x1185)));
evalcond[1]=((((-1.0)*r00*x1192))+((r01*x1185))+(((-1.0)*x1183)));
evalcond[2]=(x1188+x1184+(((-1.0)*x1182*x1191))+(((-1.0)*x1182*x1190)));
evalcond[3]=(x1189+x1186+(((-1.0)*x1183*x1191))+(((-1.0)*x1183*x1190)));
evalcond[4]=((((-0.09465)*x1188))+(((-0.09465)*x1184))+((x1182*x1187))+(((-0.10915)*x1183))+(((-1.0)*px)));
evalcond[5]=((((-0.09465)*x1189))+(((-0.09465)*x1186))+((x1183*x1187))+(((0.10915)*x1182))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1193=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1193);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1193);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1194=IKPowWithIntegerCheck(r22,-1);
if(!x1194.valid){
continue;
}
sj4array[0]=((x1194.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1195=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1195);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1195);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
IkReal x1196=x1197.value;
j5array[0]=((-1.0)*x1196);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1196)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1198=(cj5*sj4);
IkReal x1199=(sj4*sj5);
if( IKabs((((r01*x1199))+(((-1.0)*r00*x1198)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1198))+(((-1.0)*r11*x1199)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1199))+(((-1.0)*r00*x1198))))+IKsqr((((r10*x1198))+(((-1.0)*r11*x1199))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1199))+(((-1.0)*r00*x1198))), (((r10*x1198))+(((-1.0)*r11*x1199))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1200=IKcos(j0);
IkReal x1201=IKsin(j0);
IkReal x1202=(sj4*sj5);
IkReal x1203=(cj5*r11);
IkReal x1204=((1.0)*sj5);
IkReal x1205=((0.425)*cj1);
IkReal x1206=((0.09465)*sj5);
IkReal x1207=((1.0)*cj5);
IkReal x1208=((1.0)*cj1*sj2);
IkReal x1209=((1.0)*cj2*sj1);
evalcond[0]=(x1200+(((-1.0)*r10*sj4*x1207))+((r11*x1202)));
evalcond[1]=((((-1.0)*r00*sj4*x1207))+(((-1.0)*x1201))+((r01*x1202)));
evalcond[2]=((((-0.09465)*cj5*r01))+(((-0.10915)*x1201))+(((-1.0)*px))+(((-1.0)*r00*x1206))+((x1200*x1205)));
evalcond[3]=((((-1.0)*r10*x1206))+(((0.10915)*x1200))+(((-1.0)*py))+((x1201*x1205))+(((-0.09465)*x1203)));
evalcond[4]=((((-1.0)*r01*x1207))+(((-1.0)*r00*x1204))+(((-1.0)*x1200*x1209))+(((-1.0)*x1200*x1208)));
evalcond[5]=((((-1.0)*r10*x1204))+(((-1.0)*x1203))+(((-1.0)*x1201*x1208))+(((-1.0)*x1201*x1209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1210=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1210);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1210);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1211=IKPowWithIntegerCheck(r22,-1);
if(!x1211.valid){
continue;
}
sj4array[0]=((x1211.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1212=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1212);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1212);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1214 = IKatan2WithCheck(IkReal((cj4*r00)),IkReal(((-1.0)*cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1214.valid){
continue;
}
IkReal x1213=x1214.value;
j5array[0]=((-1.0)*x1213);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1213)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r10*(IKcos(j5))))+(((-1.0)*cj4*r11*(IKsin(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1215=(cj5*sj4);
IkReal x1216=(sj4*sj5);
if( IKabs((((r01*x1216))+(((-1.0)*r00*x1215)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1215))+(((-1.0)*r11*x1216)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1216))+(((-1.0)*r00*x1215))))+IKsqr((((r10*x1215))+(((-1.0)*r11*x1216))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1216))+(((-1.0)*r00*x1215))), (((r10*x1215))+(((-1.0)*r11*x1216))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1217=IKcos(j0);
IkReal x1218=IKsin(j0);
IkReal x1219=(cj5*r01);
IkReal x1220=(sj4*sj5);
IkReal x1221=(r00*sj5);
IkReal x1222=(sj1*sj2);
IkReal x1223=(cj5*r11);
IkReal x1224=((0.39225)*cj2);
IkReal x1225=(r10*sj5);
IkReal x1226=((0.39225)*x1222);
IkReal x1227=(cj1*x1217);
IkReal x1228=((1.0)*x1218);
IkReal x1229=((1.0)*cj5*sj4);
IkReal x1230=(cj1*x1218);
evalcond[0]=(x1217+(((-1.0)*r10*x1229))+((r11*x1220)));
evalcond[1]=((((-1.0)*r00*x1229))+((r01*x1220))+(((-1.0)*x1228)));
evalcond[2]=(x1221+x1219+((x1217*x1222))+(((-1.0)*cj2*x1227)));
evalcond[3]=(x1225+x1223+((x1218*x1222))+(((-1.0)*cj1*cj2*x1228)));
evalcond[4]=((((-0.10915)*x1218))+(((-0.09465)*x1219))+((x1224*x1227))+(((-1.0)*px))+(((-0.09465)*x1221))+(((0.425)*x1227))+(((-1.0)*x1217*x1226)));
evalcond[5]=((((-1.0)*x1218*x1226))+((x1224*x1230))+(((-1.0)*py))+(((-0.09465)*x1225))+(((-0.09465)*x1223))+(((0.10915)*x1217))+(((0.425)*x1230)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1231=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1231);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1231);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r22;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1232=IKPowWithIntegerCheck(r22,-1);
if(!x1232.valid){
continue;
}
sj4array[0]=((-1.0)*(x1232.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1233=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1233);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1233);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j5eval[0]=cj4;
if( IKabs(j5eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1235 = IKatan2WithCheck(IkReal(((-1.0)*cj4*r00)),IkReal((cj4*r01)),IKFAST_ATAN2_MAGTHRESH);
if(!x1235.valid){
continue;
}
IkReal x1234=x1235.value;
j5array[0]=((-1.0)*x1234);
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((-1.0)*x1234)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[1];
evalcond[0]=(((cj4*r11*(IKsin(j5))))+(((-1.0)*cj4*r10*(IKcos(j5)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1236=(cj5*sj4);
IkReal x1237=(sj4*sj5);
if( IKabs((((r01*x1237))+(((-1.0)*r00*x1236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1237))+((r10*x1236)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1237))+(((-1.0)*r00*x1236))))+IKsqr(((((-1.0)*r11*x1237))+((r10*x1236))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1237))+(((-1.0)*r00*x1236))), ((((-1.0)*r11*x1237))+((r10*x1236))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x1238=IKcos(j0);
IkReal x1239=IKsin(j0);
IkReal x1240=(sj4*sj5);
IkReal x1241=(cj5*r11);
IkReal x1242=(cj5*r01);
IkReal x1243=((1.0)*sj5);
IkReal x1244=((0.09465)*sj5);
IkReal x1245=(sj1*sj2);
IkReal x1246=((0.39225)*cj2);
IkReal x1247=((0.39225)*x1245);
IkReal x1248=((1.0)*x1239);
IkReal x1249=(cj1*x1238);
IkReal x1250=((1.0)*cj5*sj4);
IkReal x1251=(cj1*x1239);
evalcond[0]=(x1238+((r11*x1240))+(((-1.0)*r10*x1250)));
evalcond[1]=((((-1.0)*r00*x1250))+((r01*x1240))+(((-1.0)*x1248)));
evalcond[2]=((((-1.0)*x1242))+((x1238*x1245))+(((-1.0)*r00*x1243))+(((-1.0)*cj2*x1249)));
evalcond[3]=(((x1239*x1245))+(((-1.0)*x1241))+(((-1.0)*cj1*cj2*x1248))+(((-1.0)*r10*x1243)));
evalcond[4]=((((-1.0)*px))+(((-1.0)*x1238*x1247))+((x1246*x1249))+(((-0.09465)*x1242))+(((0.425)*x1249))+(((-0.10915)*x1239))+(((-1.0)*r00*x1244)));
evalcond[5]=(((x1246*x1251))+(((-1.0)*x1239*x1247))+(((0.425)*x1251))+(((-1.0)*py))+(((-1.0)*r10*x1244))+(((0.10915)*x1238))+(((-0.09465)*x1241)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1252=IKPowWithIntegerCheck(r22,-1);
if(!x1252.valid){
continue;
}
CheckValue<IkReal> x1253=IKPowWithIntegerCheck(sj3,-1);
if(!x1253.valid){
continue;
}
sj4array[0]=((x1252.value)*(x1253.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((cj3*r22*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1254=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1254);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1254);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1255=((4.0)*r01);
IkReal x1256=((16.0)*r00);
IkReal x1257=(cj3*sj2);
IkReal x1258=((8.0)*r00);
IkReal x1259=(cj2*cj3);
IkReal x1260=(cj4*r01);
IkReal x1261=((16.0)*cj1);
IkReal x1262=((8.0)*sj1);
IkReal x1263=((16.0)*sj1);
IkReal x1264=((8.0)*cj1);
IkReal x1265=(sj2*sj3);
IkReal x1266=(cj2*sj3);
IkReal x1267=(sj1*x1266);
IkReal x1268=((4.0)*cj4*r00);
IkReal x1269=(((sj1*x1265*x1268))+((cj1*x1255*x1265))+((x1255*x1267))+((sj1*x1255*x1257)));
IkReal x1270=(((cj1*x1266*x1268))+((cj1*x1255*x1259))+((sj1*x1259*x1268))+((cj1*x1257*x1268)));
IkReal x1271=(x1270+(((-1.0)*x1269)));
IkReal x1272=(((x1259*x1260*x1262))+((x1257*x1260*x1264))+((x1258*x1267))+((cj1*x1258*x1265))+(((-1.0)*x1260*x1262*x1265))+((sj1*x1257*x1258))+(((-1.0)*cj1*x1258*x1259))+((x1260*x1264*x1266)));
IkReal x1273=(x1269+(((-1.0)*x1270)));
op[0]=x1271;
op[1]=x1272;
op[2]=x1271;
op[3]=(((x1259*x1260*x1263))+((x1257*x1260*x1261))+((cj1*x1256*x1265))+((sj1*x1256*x1257))+((x1256*x1267))+(((-1.0)*x1260*x1263*x1265))+((x1260*x1261*x1266))+(((-1.0)*cj1*x1256*x1259)));
op[4]=x1273;
op[5]=x1272;
op[6]=x1273;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1274=(cj5*sj4);
IkReal x1275=(sj4*sj5);
if( IKabs(((((-1.0)*r00*x1274))+((r01*x1275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x1274))+(((-1.0)*r11*x1275)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r00*x1274))+((r01*x1275))))+IKsqr((((r10*x1274))+(((-1.0)*r11*x1275))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r00*x1274))+((r01*x1275))), (((r10*x1274))+(((-1.0)*r11*x1275))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1276=IKcos(j0);
IkReal x1277=IKsin(j0);
IkReal x1278=((0.39225)*sj1);
IkReal x1279=((1.0)*cj3);
IkReal x1280=((1.0)*cj1);
IkReal x1281=(r11*sj5);
IkReal x1282=(cj5*r01);
IkReal x1283=(cj5*r11);
IkReal x1284=(r01*sj5);
IkReal x1285=(cj3*cj4);
IkReal x1286=(r00*sj5);
IkReal x1287=((0.39225)*cj2);
IkReal x1288=((1.0)*sj1);
IkReal x1289=(r10*sj5);
IkReal x1290=(sj2*x1276);
IkReal x1291=(cj4*cj5*r00);
IkReal x1292=(cj1*x1277);
IkReal x1293=(sj2*x1277);
IkReal x1294=(cj4*cj5*r10);
IkReal x1295=((1.0)*cj4*sj3);
IkReal x1296=(cj1*x1276);
IkReal x1297=(cj2*x1276);
IkReal x1298=((1.0)*cj5*sj4);
evalcond[0]=(x1276+((sj4*x1281))+(((-1.0)*r10*x1298)));
evalcond[1]=((((-1.0)*r00*x1298))+((sj4*x1284))+(((-1.0)*x1277)));
evalcond[2]=(((x1284*x1285))+(((-1.0)*x1280*x1297))+((sj1*x1290))+(((-1.0)*x1279*x1291))+((sj3*x1286))+((sj3*x1282)));
evalcond[3]=(((sj1*x1293))+(((-1.0)*x1279*x1294))+(((-1.0)*cj2*x1277*x1280))+((sj3*x1283))+((sj3*x1289))+((x1281*x1285)));
evalcond[4]=((((-1.0)*x1284*x1295))+((sj3*x1291))+(((-1.0)*x1288*x1297))+(((-1.0)*x1280*x1290))+((cj3*x1286))+((cj3*x1282)));
evalcond[5]=(((sj3*x1294))+(((-1.0)*x1280*x1293))+(((-1.0)*x1281*x1295))+(((-1.0)*cj2*x1277*x1288))+((cj3*x1283))+((cj3*x1289)));
evalcond[6]=((((-1.0)*x1278*x1290))+((x1287*x1296))+(((-0.10915)*x1277))+(((-0.09465)*x1286))+(((-0.09465)*x1282))+(((-1.0)*px))+(((0.425)*x1296)));
evalcond[7]=((((-1.0)*x1278*x1293))+((x1287*x1292))+(((0.10915)*x1276))+(((-0.09465)*x1283))+(((-0.09465)*x1289))+(((-1.0)*py))+(((0.425)*x1292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x1299=IKPowWithIntegerCheck(cj3,-1);
if(!x1299.valid){
continue;
}
CheckValue<IkReal> x1300=IKPowWithIntegerCheck(r22,-1);
if(!x1300.valid){
continue;
}
sj4array[0]=((-1.0)*(x1299.value)*(x1300.value)*((((cj2*sj1))+((cj1*sj2)))));
if( sj4array[0] >= -1-IKFAST_SINCOS_THRESH && sj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKasin(sj4array[0]);
    cj4array[0] = IKcos(j4array[0]);
    sj4array[1] = sj4array[0];
    j4array[1] = j4array[0] > 0 ? (IKPI-j4array[0]) : (-IKPI-j4array[0]);
    cj4array[1] = -cj4array[0];
}
else if( isnan(sj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
evalcond[0]=((-1.0)*r22*(IKcos(j4)));
evalcond[1]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*sj3*(IKsin(j4)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j5eval[1];
IkReal x1301=((-1.0)*pz);
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x1301);
rxp1_0=(pz*r11);
rxp1_1=(r01*x1301);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j5eval[0]=((IKabs(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))+(IKabs(((((4.0)*cj2*cj3*cj4*r00*sj1))+(((4.0)*cj1*cj2*cj3*r01))+(((-4.0)*cj3*r01*sj1*sj2))+(((4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*r01*sj2*sj3))+(((-4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r00*sj3)))))+(IKabs(((((8.0)*cj2*cj3*cj4*r01*sj1))+(((8.0)*cj1*r00*sj2*sj3))+(((8.0)*cj2*r00*sj1*sj3))+(((8.0)*cj3*r00*sj1*sj2))+(((-8.0)*cj4*r01*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r01*sj3))+(((8.0)*cj1*cj3*cj4*r01*sj2))+(((-8.0)*cj1*cj2*cj3*r00)))))+(((0.5)*(IKabs(((((-4.0)*cj1*cj3*cj4*r00*sj2))+(((-4.0)*cj1*cj2*cj4*r00*sj3))+(((4.0)*cj1*r01*sj2*sj3))+(((4.0)*cj3*r01*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r01))+(((4.0)*cj2*r01*sj1*sj3))+(((4.0)*cj4*r00*sj1*sj2*sj3))+(((-4.0)*cj2*cj3*cj4*r00*sj1)))))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3)))))))+(((0.5)*(IKabs(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3)))))))+(IKabs(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3)))))+(((0.5)*(IKabs(((((16.0)*cj2*cj3*cj4*r01*sj1))+(((16.0)*cj1*r00*sj2*sj3))+(((16.0)*cj2*r00*sj1*sj3))+(((16.0)*cj1*cj3*cj4*r01*sj2))+(((-16.0)*cj1*cj2*cj3*r00))+(((16.0)*cj1*cj2*cj4*r01*sj3))+(((-16.0)*cj4*r01*sj1*sj2*sj3))+(((16.0)*cj3*r00*sj1*sj2))))))));
if( IKabs(j5eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j0, j5]

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal j5evalpoly[1];
IkReal x1302=((4.0)*r01);
IkReal x1303=((16.0)*r00);
IkReal x1304=(cj3*sj2);
IkReal x1305=((8.0)*r00);
IkReal x1306=(cj2*cj3);
IkReal x1307=(cj4*r01);
IkReal x1308=((16.0)*cj1);
IkReal x1309=((8.0)*sj1);
IkReal x1310=((16.0)*sj1);
IkReal x1311=((8.0)*cj1);
IkReal x1312=(sj2*sj3);
IkReal x1313=(cj2*sj3);
IkReal x1314=(sj1*x1313);
IkReal x1315=((4.0)*cj4*r00);
IkReal x1316=(((cj1*x1302*x1312))+((sj1*x1312*x1315))+((sj1*x1302*x1304))+((x1302*x1314)));
IkReal x1317=(((sj1*x1306*x1315))+((cj1*x1304*x1315))+((cj1*x1302*x1306))+((cj1*x1313*x1315)));
IkReal x1318=(x1317+(((-1.0)*x1316)));
IkReal x1319=(((x1306*x1307*x1309))+(((-1.0)*x1307*x1309*x1312))+((x1307*x1311*x1313))+((x1305*x1314))+((sj1*x1304*x1305))+((cj1*x1305*x1312))+(((-1.0)*cj1*x1305*x1306))+((x1304*x1307*x1311)));
IkReal x1320=(x1316+(((-1.0)*x1317)));
op[0]=x1318;
op[1]=x1319;
op[2]=x1318;
op[3]=(((cj1*x1303*x1312))+((x1306*x1307*x1310))+(((-1.0)*x1307*x1310*x1312))+((x1307*x1308*x1313))+((sj1*x1303*x1304))+(((-1.0)*cj1*x1303*x1306))+((x1303*x1314))+((x1304*x1307*x1308)));
op[4]=x1320;
op[5]=x1319;
op[6]=x1320;
polyroots6(op,zeror,numroots);
IkReal j5array[6], cj5array[6], sj5array[6], tempj5array[1];
int numsolutions = 0;
for(int ij5 = 0; ij5 < numroots; ++ij5)
{
IkReal htj5 = zeror[ij5];
tempj5array[0]=((2.0)*(atan(htj5)));
for(int kj5 = 0; kj5 < 1; ++kj5)
{
j5array[numsolutions] = tempj5array[kj5];
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
sj5array[numsolutions] = IKsin(j5array[numsolutions]);
cj5array[numsolutions] = IKcos(j5array[numsolutions]);
numsolutions++;
}
}
bool j5valid[6]={true,true,true,true,true,true};
_nj5 = 6;
for(int ij5 = 0; ij5 < numsolutions; ++ij5)
    {
if( !j5valid[ij5] )
{
    continue;
}
    j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
htj5 = IKtan(j5/2);

j5evalpoly[0]=((((htj5*htj5*htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((htj5*htj5*htj5*htj5*htj5)*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5)*(((((16.0)*cj2*cj3*cj4*r11*sj1))+(((-16.0)*cj4*r11*sj1*sj2*sj3))+(((16.0)*cj1*r10*sj2*sj3))+(((-16.0)*cj1*cj2*cj3*r10))+(((16.0)*cj1*cj3*cj4*r11*sj2))+(((16.0)*cj3*r10*sj1*sj2))+(((16.0)*cj2*r10*sj1*sj3))+(((16.0)*cj1*cj2*cj4*r11*sj3))))))+(((htj5*htj5*htj5*htj5)*(((((-4.0)*cj4*r10*sj1*sj2*sj3))+(((-4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*cj3*cj4*r10*sj1))+(((4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj1*cj2*cj3*r11))+(((-4.0)*cj2*r11*sj1*sj3))+(((4.0)*cj1*cj2*cj4*r10*sj3))))))+(((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((htj5*htj5)*(((((-4.0)*cj2*cj3*cj4*r10*sj1))+(((-4.0)*cj1*cj3*cj4*r10*sj2))+(((4.0)*cj3*r11*sj1*sj2))+(((-4.0)*cj1*cj2*cj3*r11))+(((4.0)*cj4*r10*sj1*sj2*sj3))+(((4.0)*cj1*r11*sj2*sj3))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))))))+(((4.0)*cj2*r11*sj1*sj3))+(((-4.0)*cj1*cj2*cj4*r10*sj3))+((htj5*(((((8.0)*cj1*r10*sj2*sj3))+(((-8.0)*cj1*cj2*cj3*r10))+(((8.0)*cj3*r10*sj1*sj2))+(((8.0)*cj1*cj3*cj4*r11*sj2))+(((8.0)*cj2*r10*sj1*sj3))+(((8.0)*cj2*cj3*cj4*r11*sj1))+(((-8.0)*cj4*r11*sj1*sj2*sj3))+(((8.0)*cj1*cj2*cj4*r11*sj3)))))));
if( IKabs(j5evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < numsolutions; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1321=(cj5*sj4);
IkReal x1322=(sj4*sj5);
if( IKabs((((r01*x1322))+(((-1.0)*r00*x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x1322))+((r10*x1321)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((r01*x1322))+(((-1.0)*r00*x1321))))+IKsqr(((((-1.0)*r11*x1322))+((r10*x1321))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((r01*x1322))+(((-1.0)*r00*x1321))), ((((-1.0)*r11*x1322))+((r10*x1321))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x1323=IKcos(j0);
IkReal x1324=IKsin(j0);
IkReal x1325=((0.39225)*sj1);
IkReal x1326=((1.0)*cj3);
IkReal x1327=((1.0)*cj1);
IkReal x1328=(r11*sj5);
IkReal x1329=(cj5*r01);
IkReal x1330=(cj5*r11);
IkReal x1331=(r01*sj5);
IkReal x1332=(cj3*cj4);
IkReal x1333=(r00*sj5);
IkReal x1334=((0.39225)*cj2);
IkReal x1335=((1.0)*sj1);
IkReal x1336=(r10*sj5);
IkReal x1337=(sj2*x1323);
IkReal x1338=(cj4*cj5*r00);
IkReal x1339=(cj1*x1324);
IkReal x1340=(sj2*x1324);
IkReal x1341=(cj4*cj5*r10);
IkReal x1342=((1.0)*cj4*sj3);
IkReal x1343=(cj1*x1323);
IkReal x1344=(cj2*x1323);
IkReal x1345=((1.0)*cj5*sj4);
evalcond[0]=(x1323+((sj4*x1328))+(((-1.0)*r10*x1345)));
evalcond[1]=(((sj4*x1331))+(((-1.0)*x1324))+(((-1.0)*r00*x1345)));
evalcond[2]=((((-1.0)*x1326*x1338))+((sj3*x1329))+((x1331*x1332))+((sj3*x1333))+((sj1*x1337))+(((-1.0)*x1327*x1344)));
evalcond[3]=(((sj1*x1340))+(((-1.0)*cj2*x1324*x1327))+((sj3*x1336))+((sj3*x1330))+((x1328*x1332))+(((-1.0)*x1326*x1341)));
evalcond[4]=((((-1.0)*x1327*x1337))+(((-1.0)*x1331*x1342))+(((-1.0)*x1335*x1344))+((sj3*x1338))+((cj3*x1329))+((cj3*x1333)));
evalcond[5]=((((-1.0)*cj2*x1324*x1335))+((cj3*x1336))+((cj3*x1330))+(((-1.0)*x1328*x1342))+(((-1.0)*x1327*x1340))+((sj3*x1341)));
evalcond[6]=((((-1.0)*x1325*x1337))+(((-0.10915)*x1324))+(((-1.0)*px))+((x1334*x1343))+(((-0.09465)*x1329))+(((0.425)*x1343))+(((-0.09465)*x1333)));
evalcond[7]=((((0.10915)*x1323))+(((0.425)*x1339))+(((-1.0)*py))+(((-1.0)*x1325*x1340))+(((-0.09465)*x1336))+(((-0.09465)*x1330))+((x1334*x1339)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4, j5]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
CheckValue<IkReal> x1348 = IKatan2WithCheck(IkReal(((-0.09465)*r21)),IkReal(((-0.09465)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1348.valid){
continue;
}
IkReal x1346=((1.0)*(x1348.value));
if((((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20))))) < -0.00001)
continue;
CheckValue<IkReal> x1349=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.0089586225)*(r21*r21)))+(((0.0089586225)*(r20*r20)))))),-1);
if(!x1349.valid){
continue;
}
if( (((-1.0)*(x1349.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) < -1-IKFAST_SINCOS_THRESH || (((-1.0)*(x1349.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2)))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1347=((-1.0)*(IKasin(((-1.0)*(x1349.value)*(((((-0.39225)*cj2*sj1))+(((-1.0)*pz))+(((-0.425)*sj1))+(((-0.39225)*cj1*sj2))))))));
j5array[0]=((((-1.0)*x1347))+(((-1.0)*x1346)));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((3.14159265358979)+(((1.0)*x1347))+(((-1.0)*x1346)));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal j4eval[2];
IkReal x1350=cj5*cj5;
IkReal x1351=r21*r21;
IkReal x1352=(sj3*x1350);
IkReal x1353=(((sj3*(r22*r22)))+(((-1.0)*x1351*x1352))+(((-2.0)*cj5*r20*r21*sj3*sj5))+((sj3*x1351))+((x1352*(r20*r20))));
j4eval[0]=x1353;
j4eval[1]=IKsign(x1353);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1354=cj5*cj5;
IkReal x1355=r21*r21;
IkReal x1356=((1.0)*cj3);
IkReal x1357=(cj3*x1354);
IkReal x1358=((((-1.0)*x1356*(r22*r22)))+((x1355*x1357))+(((-1.0)*x1355*x1356))+(((-1.0)*x1354*x1356*(r20*r20)))+(((2.0)*cj3*cj5*r20*r21*sj5)));
j4eval[0]=x1358;
j4eval[1]=IKsign(x1358);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
IkReal x1359=cj1*cj1;
IkReal x1360=cj2*cj2;
IkReal x1361=(cj1*sj1*sj2);
IkReal x1362=(cj2*x1359);
IkReal x1363=(x1359*x1360);
j0eval[0]=((6.19369221392727)+x1359+(((-12.4570625281677)*x1361))+(((-11.4971359451148)*cj2*x1361))+(((12.4570625281677)*x1362))+(((-5.74856797255738)*x1360))+(((11.4971359451148)*x1363)));
j0eval[1]=IKsign(((66309514.0)+(((10705975.0)*x1359))+(((123088050.0)*x1363))+(((133365000.0)*x1362))+(((-123088050.0)*cj2*x1361))+(((-133365000.0)*x1361))+(((-61544025.0)*x1360))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1364=((1.0)*cj5);
IkReal x1365=((1.0)*sj5);
IkReal x1366=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x1366;
j0eval[1]=((IKabs(((((-1.0)*r11*x1364))+(((-1.0)*r10*x1365)))))+(IKabs(((((-1.0)*r01*x1364))+(((-1.0)*r00*x1365))))));
j0eval[2]=IKsign(x1366);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1367=cj5*cj5;
IkReal x1368=r21*r21;
IkReal x1369=(sj1*sj2);
IkReal x1370=(r21*sj5);
IkReal x1371=(cj5*r20);
IkReal x1372=(cj1*cj2);
IkReal x1373=(x1368+(r22*r22)+((x1367*(r20*r20)))+(((-2.0)*x1370*x1371))+(((-1.0)*x1367*x1368)));
j4eval[0]=x1373;
j4eval[1]=IKsign(x1373);
j4eval[2]=((IKabs(((((-1.0)*x1370*x1372))+((x1371*x1372))+((x1369*x1370))+(((-1.0)*x1369*x1371)))))+(IKabs((((r22*x1369))+(((-1.0)*r22*x1372))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1374=IKsin(j0);
IkReal x1375=IKcos(j0);
evalcond[0]=((((0.425)*x1375))+(((-0.10915)*x1374))+(((-1.0)*px)));
evalcond[1]=((((0.425)*x1374))+(((0.10915)*x1375))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1376=((1.0)*cj5);
IkReal x1377=((((-1.0)*r01*x1376))+(((-1.0)*r00*sj5)));
j4eval[0]=x1377;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1376)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1377);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1378=((1.0)*cj5);
IkReal x1379=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1378)));
j4eval[0]=x1379;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1378))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1379);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1380=cj5*cj5;
IkReal x1381=((1.0)*sj5);
IkReal x1382=(cj5*r20);
IkReal x1383=(r11*r21);
IkReal x1384=(x1383+(((-1.0)*x1380*x1383))+(((-1.0)*r11*x1381*x1382))+(((-1.0)*cj5*r10*r21*x1381))+((r12*r22))+((r10*r20*x1380)));
j4eval[0]=x1384;
j4eval[1]=IKsign(x1384);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1381))+((cj0*x1382)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1385=cj5*cj5;
IkReal x1386=((1.0)*sj5);
IkReal x1387=(cj5*r20);
IkReal x1388=(r11*r21);
CheckValue<IkReal> x1389=IKPowWithIntegerCheck(IKsign((x1388+(((-1.0)*x1385*x1388))+(((-1.0)*r11*x1386*x1387))+(((-1.0)*cj5*r10*r21*x1386))+((r12*r22))+((r10*r20*x1385)))),-1);
if(!x1389.valid){
continue;
}
CheckValue<IkReal> x1390 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1386))+((cj0*x1387)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1389.value)))+(x1390.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1391=IKsin(j4);
IkReal x1392=IKcos(j4);
IkReal x1393=((1.0)*sj0);
IkReal x1394=(cj5*r00);
IkReal x1395=(r11*sj5);
IkReal x1396=(cj5*r10);
IkReal x1397=(r21*sj5);
IkReal x1398=(cj5*r20);
IkReal x1399=(r01*sj5);
IkReal x1400=((1.0)*x1392);
IkReal x1401=((1.0)*x1391);
evalcond[0]=((((-1.0)*x1398*x1401))+(((-1.0)*r22*x1400))+((x1391*x1397)));
evalcond[1]=((((-1.0)*r22*x1401))+((x1392*x1398))+(((-1.0)*x1397*x1400)));
evalcond[2]=((((-1.0)*r12*x1400))+cj0+((x1391*x1395))+(((-1.0)*x1396*x1401)));
evalcond[3]=((((-1.0)*r02*x1400))+((x1391*x1399))+(((-1.0)*x1394*x1401))+(((-1.0)*x1393)));
evalcond[4]=((((-1.0)*x1399*x1400))+(((-1.0)*r02*x1401))+((x1392*x1394))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1401))+((x1392*x1396))+(((-1.0)*x1395*x1400))+(((-1.0)*x1393)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1402=((1.0)*cj5);
CheckValue<IkReal> x1403=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1402))+(((-1.0)*r10*sj5)))),-1);
if(!x1403.valid){
continue;
}
CheckValue<IkReal> x1404 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1402)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1403.value)))+(x1404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1405=IKsin(j4);
IkReal x1406=IKcos(j4);
IkReal x1407=((1.0)*sj0);
IkReal x1408=(cj5*r00);
IkReal x1409=(r11*sj5);
IkReal x1410=(cj5*r10);
IkReal x1411=(r21*sj5);
IkReal x1412=(cj5*r20);
IkReal x1413=(r01*sj5);
IkReal x1414=((1.0)*x1406);
IkReal x1415=((1.0)*x1405);
evalcond[0]=((((-1.0)*x1412*x1415))+(((-1.0)*r22*x1414))+((x1405*x1411)));
evalcond[1]=((((-1.0)*r22*x1415))+(((-1.0)*x1411*x1414))+((x1406*x1412)));
evalcond[2]=(cj0+((x1405*x1409))+(((-1.0)*x1410*x1415))+(((-1.0)*r12*x1414)));
evalcond[3]=((((-1.0)*r02*x1414))+(((-1.0)*x1407))+((x1405*x1413))+(((-1.0)*x1408*x1415)));
evalcond[4]=((((-1.0)*x1413*x1414))+(((-1.0)*r02*x1415))+((x1406*x1408))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1407))+((x1406*x1410))+(((-1.0)*r12*x1415))+(((-1.0)*x1409*x1414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1416=((1.0)*cj5);
CheckValue<IkReal> x1417=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1416)))),-1);
if(!x1417.valid){
continue;
}
CheckValue<IkReal> x1418 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1416)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1418.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1417.value)))+(x1418.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1419=IKsin(j4);
IkReal x1420=IKcos(j4);
IkReal x1421=((1.0)*sj0);
IkReal x1422=(cj5*r00);
IkReal x1423=(r11*sj5);
IkReal x1424=(cj5*r10);
IkReal x1425=(r21*sj5);
IkReal x1426=(cj5*r20);
IkReal x1427=(r01*sj5);
IkReal x1428=((1.0)*x1420);
IkReal x1429=((1.0)*x1419);
evalcond[0]=((((-1.0)*x1426*x1429))+((x1419*x1425))+(((-1.0)*r22*x1428)));
evalcond[1]=(((x1420*x1426))+(((-1.0)*x1425*x1428))+(((-1.0)*r22*x1429)));
evalcond[2]=(cj0+(((-1.0)*x1424*x1429))+(((-1.0)*r12*x1428))+((x1419*x1423)));
evalcond[3]=((((-1.0)*x1422*x1429))+((x1419*x1427))+(((-1.0)*r02*x1428))+(((-1.0)*x1421)));
evalcond[4]=(((x1420*x1422))+(((-1.0)*x1427*x1428))+(((-1.0)*r02*x1429))+(((-1.0)*cj0)));
evalcond[5]=(((x1420*x1424))+(((-1.0)*x1423*x1428))+(((-1.0)*r12*x1429))+(((-1.0)*x1421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1430=IKsin(j0);
IkReal x1431=IKcos(j0);
evalcond[0]=((((-0.10915)*x1430))+(((-1.0)*px))+(((0.425)*x1431)));
evalcond[1]=((((0.10915)*x1431))+(((-1.0)*py))+(((0.425)*x1430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1432=((1.0)*cj5);
IkReal x1433=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1432)));
j4eval[0]=x1433;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1432)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1433);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1434=cj5*cj5;
IkReal x1435=((1.0)*r21);
IkReal x1436=(cj5*sj5);
IkReal x1437=((1.0)*r20);
IkReal x1438=((((-1.0)*r00*x1435*x1436))+((r01*r21))+(((-1.0)*r01*x1436*x1437))+((r00*r20*x1434))+((r02*r22))+(((-1.0)*r01*x1434*x1435)));
j4eval[0]=x1438;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1437)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1438);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1439=cj5*cj5;
IkReal x1440=(r21*sj5);
IkReal x1441=(r11*r21);
IkReal x1442=((1.0)*cj5*r20);
IkReal x1443=(((r10*r20*x1439))+((r12*r22))+(((-1.0)*x1439*x1441))+x1441+(((-1.0)*cj5*r10*x1440))+(((-1.0)*r11*sj5*x1442)));
j4eval[0]=x1443;
j4eval[1]=((IKabs((((sj0*x1440))+(((-1.0)*sj0*x1442)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1443);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1444=cj5*cj5;
IkReal x1445=(r21*sj5);
IkReal x1446=(r11*r21);
IkReal x1447=((1.0)*cj5*r20);
CheckValue<IkReal> x1448 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1445))+(((-1.0)*sj0*x1447)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1448.valid){
continue;
}
CheckValue<IkReal> x1449=IKPowWithIntegerCheck(IKsign((((r12*r22))+x1446+(((-1.0)*cj5*r10*x1445))+(((-1.0)*x1444*x1446))+((r10*r20*x1444))+(((-1.0)*r11*sj5*x1447)))),-1);
if(!x1449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1448.value)+(((1.5707963267949)*(x1449.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1450=IKsin(j4);
IkReal x1451=IKcos(j4);
IkReal x1452=(r11*sj5);
IkReal x1453=(cj5*r00);
IkReal x1454=(cj5*r10);
IkReal x1455=(r21*sj5);
IkReal x1456=(cj5*r20);
IkReal x1457=(r01*sj5);
IkReal x1458=((1.0)*x1451);
IkReal x1459=((1.0)*x1450);
evalcond[0]=((((-1.0)*r22*x1458))+((x1450*x1455))+(((-1.0)*x1456*x1459)));
evalcond[1]=((((-1.0)*r22*x1459))+(((-1.0)*x1455*x1458))+((x1451*x1456)));
evalcond[2]=(cj0+((x1450*x1452))+(((-1.0)*x1454*x1459))+(((-1.0)*r12*x1458)));
evalcond[3]=((((-1.0)*x1457*x1458))+cj0+(((-1.0)*r02*x1459))+((x1451*x1453)));
evalcond[4]=(sj0+(((-1.0)*x1452*x1458))+((x1451*x1454))+(((-1.0)*r12*x1459)));
evalcond[5]=((((-1.0)*sj0))+((x1450*x1457))+(((-1.0)*r02*x1458))+(((-1.0)*x1453*x1459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1460=cj5*cj5;
IkReal x1461=((1.0)*r21);
IkReal x1462=(cj5*sj5);
IkReal x1463=((1.0)*r20);
CheckValue<IkReal> x1464=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1460*x1461))+(((-1.0)*r01*x1462*x1463))+((r01*r21))+(((-1.0)*r00*x1461*x1462))+((r00*r20*x1460))+((r02*r22)))),-1);
if(!x1464.valid){
continue;
}
CheckValue<IkReal> x1465 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1463)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1465.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1464.value)))+(x1465.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1466=IKsin(j4);
IkReal x1467=IKcos(j4);
IkReal x1468=(r11*sj5);
IkReal x1469=(cj5*r00);
IkReal x1470=(cj5*r10);
IkReal x1471=(r21*sj5);
IkReal x1472=(cj5*r20);
IkReal x1473=(r01*sj5);
IkReal x1474=((1.0)*x1467);
IkReal x1475=((1.0)*x1466);
evalcond[0]=((((-1.0)*r22*x1474))+((x1466*x1471))+(((-1.0)*x1472*x1475)));
evalcond[1]=((((-1.0)*r22*x1475))+(((-1.0)*x1471*x1474))+((x1467*x1472)));
evalcond[2]=((((-1.0)*x1470*x1475))+cj0+(((-1.0)*r12*x1474))+((x1466*x1468)));
evalcond[3]=(cj0+(((-1.0)*r02*x1475))+((x1467*x1469))+(((-1.0)*x1473*x1474)));
evalcond[4]=(sj0+((x1467*x1470))+(((-1.0)*r12*x1475))+(((-1.0)*x1468*x1474)));
evalcond[5]=(((x1466*x1473))+(((-1.0)*sj0))+(((-1.0)*x1469*x1475))+(((-1.0)*r02*x1474)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1476=((1.0)*cj5);
CheckValue<IkReal> x1477=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1476))+(((-1.0)*r00*sj5)))),-1);
if(!x1477.valid){
continue;
}
CheckValue<IkReal> x1478 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1476)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1478.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1477.value)))+(x1478.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1479=IKsin(j4);
IkReal x1480=IKcos(j4);
IkReal x1481=(r11*sj5);
IkReal x1482=(cj5*r00);
IkReal x1483=(cj5*r10);
IkReal x1484=(r21*sj5);
IkReal x1485=(cj5*r20);
IkReal x1486=(r01*sj5);
IkReal x1487=((1.0)*x1480);
IkReal x1488=((1.0)*x1479);
evalcond[0]=((((-1.0)*x1485*x1488))+(((-1.0)*r22*x1487))+((x1479*x1484)));
evalcond[1]=(((x1480*x1485))+(((-1.0)*x1484*x1487))+(((-1.0)*r22*x1488)));
evalcond[2]=(cj0+(((-1.0)*r12*x1487))+(((-1.0)*x1483*x1488))+((x1479*x1481)));
evalcond[3]=(cj0+((x1480*x1482))+(((-1.0)*x1486*x1487))+(((-1.0)*r02*x1488)));
evalcond[4]=(sj0+(((-1.0)*r12*x1488))+(((-1.0)*x1481*x1487))+((x1480*x1483)));
evalcond[5]=((((-1.0)*x1482*x1488))+(((-1.0)*sj0))+(((-1.0)*r02*x1487))+((x1479*x1486)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1489=((1.0)*cj5);
IkReal x1490=((((-1.0)*r01*x1489))+(((-1.0)*r00*sj5)));
j4eval[0]=x1490;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1489)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1490);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1491=((1.0)*cj5);
IkReal x1492=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1491)));
j4eval[0]=x1492;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1491))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1492);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1493=cj5*cj5;
IkReal x1494=((1.0)*sj5);
IkReal x1495=(cj5*r20);
IkReal x1496=(r11*r21);
IkReal x1497=(((r10*r20*x1493))+(((-1.0)*x1493*x1496))+(((-1.0)*cj5*r10*r21*x1494))+((r12*r22))+x1496+(((-1.0)*r11*x1494*x1495)));
j4eval[0]=x1497;
j4eval[1]=IKsign(x1497);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1494))+((cj0*x1495)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1498=cj5*cj5;
IkReal x1499=((1.0)*sj5);
IkReal x1500=(cj5*r20);
IkReal x1501=(r11*r21);
CheckValue<IkReal> x1502 = IKatan2WithCheck(IkReal((((cj0*x1500))+(((-1.0)*cj0*r21*x1499)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1502.valid){
continue;
}
CheckValue<IkReal> x1503=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1498*x1501))+((r10*r20*x1498))+(((-1.0)*cj5*r10*r21*x1499))+(((-1.0)*r11*x1499*x1500))+((r12*r22))+x1501)),-1);
if(!x1503.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1502.value)+(((1.5707963267949)*(x1503.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1504=IKsin(j4);
IkReal x1505=IKcos(j4);
IkReal x1506=((1.0)*sj0);
IkReal x1507=(cj5*r00);
IkReal x1508=(r11*sj5);
IkReal x1509=(cj5*r10);
IkReal x1510=(r21*sj5);
IkReal x1511=(cj5*r20);
IkReal x1512=(r01*sj5);
IkReal x1513=((1.0)*x1505);
IkReal x1514=((1.0)*x1504);
evalcond[0]=((((-1.0)*r22*x1513))+((x1504*x1510))+(((-1.0)*x1511*x1514)));
evalcond[1]=((((-1.0)*r22*x1514))+(((-1.0)*x1510*x1513))+((x1505*x1511)));
evalcond[2]=(cj0+((x1504*x1508))+(((-1.0)*x1509*x1514))+(((-1.0)*r12*x1513)));
evalcond[3]=((((-1.0)*x1506))+((x1504*x1512))+(((-1.0)*x1507*x1514))+(((-1.0)*r02*x1513)));
evalcond[4]=((((-1.0)*r02*x1514))+(((-1.0)*x1512*x1513))+((x1505*x1507))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1506))+((x1505*x1509))+(((-1.0)*x1508*x1513))+(((-1.0)*r12*x1514)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1515=((1.0)*cj5);
CheckValue<IkReal> x1516 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1516.valid){
continue;
}
CheckValue<IkReal> x1517=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1515)))),-1);
if(!x1517.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1516.value)+(((1.5707963267949)*(x1517.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1518=IKsin(j4);
IkReal x1519=IKcos(j4);
IkReal x1520=((1.0)*sj0);
IkReal x1521=(cj5*r00);
IkReal x1522=(r11*sj5);
IkReal x1523=(cj5*r10);
IkReal x1524=(r21*sj5);
IkReal x1525=(cj5*r20);
IkReal x1526=(r01*sj5);
IkReal x1527=((1.0)*x1519);
IkReal x1528=((1.0)*x1518);
evalcond[0]=((((-1.0)*x1525*x1528))+((x1518*x1524))+(((-1.0)*r22*x1527)));
evalcond[1]=((((-1.0)*x1524*x1527))+((x1519*x1525))+(((-1.0)*r22*x1528)));
evalcond[2]=((((-1.0)*r12*x1527))+cj0+((x1518*x1522))+(((-1.0)*x1523*x1528)));
evalcond[3]=(((x1518*x1526))+(((-1.0)*x1520))+(((-1.0)*r02*x1527))+(((-1.0)*x1521*x1528)));
evalcond[4]=(((x1519*x1521))+(((-1.0)*r02*x1528))+(((-1.0)*x1526*x1527))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x1528))+((x1519*x1523))+(((-1.0)*x1520))+(((-1.0)*x1522*x1527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1529=((1.0)*cj5);
CheckValue<IkReal> x1530 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1529))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1530.valid){
continue;
}
CheckValue<IkReal> x1531=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1529))+(((-1.0)*r00*sj5)))),-1);
if(!x1531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1530.value)+(((1.5707963267949)*(x1531.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1532=IKsin(j4);
IkReal x1533=IKcos(j4);
IkReal x1534=((1.0)*sj0);
IkReal x1535=(cj5*r00);
IkReal x1536=(r11*sj5);
IkReal x1537=(cj5*r10);
IkReal x1538=(r21*sj5);
IkReal x1539=(cj5*r20);
IkReal x1540=(r01*sj5);
IkReal x1541=((1.0)*x1533);
IkReal x1542=((1.0)*x1532);
evalcond[0]=((((-1.0)*r22*x1541))+((x1532*x1538))+(((-1.0)*x1539*x1542)));
evalcond[1]=((((-1.0)*r22*x1542))+((x1533*x1539))+(((-1.0)*x1538*x1541)));
evalcond[2]=(cj0+((x1532*x1536))+(((-1.0)*x1537*x1542))+(((-1.0)*r12*x1541)));
evalcond[3]=((((-1.0)*x1535*x1542))+(((-1.0)*r02*x1541))+((x1532*x1540))+(((-1.0)*x1534)));
evalcond[4]=((((-1.0)*r02*x1542))+(((-1.0)*x1540*x1541))+((x1533*x1535))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1534))+(((-1.0)*x1536*x1541))+((x1533*x1537))+(((-1.0)*r12*x1542)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1543=((1.0)*cj5);
IkReal x1544=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1543)));
j4eval[0]=x1544;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1543)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1544);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1545=cj5*cj5;
IkReal x1546=((1.0)*r21);
IkReal x1547=(cj5*sj5);
IkReal x1548=((1.0)*r20);
IkReal x1549=(((r01*r21))+(((-1.0)*r00*x1546*x1547))+((r00*r20*x1545))+(((-1.0)*r01*x1545*x1546))+((r02*r22))+(((-1.0)*r01*x1547*x1548)));
j4eval[0]=x1549;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1548)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1549);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1550=cj5*cj5;
IkReal x1551=(r21*sj5);
IkReal x1552=(r11*r21);
IkReal x1553=((1.0)*cj5*r20);
IkReal x1554=((((-1.0)*r11*sj5*x1553))+(((-1.0)*x1550*x1552))+(((-1.0)*cj5*r10*x1551))+((r12*r22))+x1552+((r10*r20*x1550)));
j4eval[0]=x1554;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x1551))+(((-1.0)*sj0*x1553))))));
j4eval[2]=IKsign(x1554);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1555=cj5*cj5;
IkReal x1556=(r21*sj5);
IkReal x1557=(r11*r21);
IkReal x1558=((1.0)*cj5*r20);
CheckValue<IkReal> x1559 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x1556))+(((-1.0)*sj0*x1558)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1559.valid){
continue;
}
CheckValue<IkReal> x1560=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*sj5*x1558))+(((-1.0)*x1555*x1557))+(((-1.0)*cj5*r10*x1556))+((r12*r22))+x1557+((r10*r20*x1555)))),-1);
if(!x1560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1559.value)+(((1.5707963267949)*(x1560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1561=IKsin(j4);
IkReal x1562=IKcos(j4);
IkReal x1563=(r11*sj5);
IkReal x1564=(cj5*r00);
IkReal x1565=(cj5*r10);
IkReal x1566=(r21*sj5);
IkReal x1567=(cj5*r20);
IkReal x1568=(r01*sj5);
IkReal x1569=((1.0)*x1562);
IkReal x1570=((1.0)*x1561);
evalcond[0]=((((-1.0)*x1567*x1570))+(((-1.0)*r22*x1569))+((x1561*x1566)));
evalcond[1]=((((-1.0)*x1566*x1569))+(((-1.0)*r22*x1570))+((x1562*x1567)));
evalcond[2]=((((-1.0)*x1565*x1570))+cj0+((x1561*x1563))+(((-1.0)*r12*x1569)));
evalcond[3]=((((-1.0)*r02*x1570))+cj0+(((-1.0)*x1568*x1569))+((x1562*x1564)));
evalcond[4]=(sj0+(((-1.0)*x1563*x1569))+((x1562*x1565))+(((-1.0)*r12*x1570)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1569))+(((-1.0)*x1564*x1570))+((x1561*x1568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1571=cj5*cj5;
IkReal x1572=((1.0)*r21);
IkReal x1573=(cj5*sj5);
IkReal x1574=((1.0)*r20);
CheckValue<IkReal> x1575=IKPowWithIntegerCheck(IKsign((((r01*r21))+((r00*r20*x1571))+(((-1.0)*r00*x1572*x1573))+(((-1.0)*r01*x1573*x1574))+((r02*r22))+(((-1.0)*r01*x1571*x1572)))),-1);
if(!x1575.valid){
continue;
}
CheckValue<IkReal> x1576 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1574)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1576.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1575.value)))+(x1576.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1577=IKsin(j4);
IkReal x1578=IKcos(j4);
IkReal x1579=(r11*sj5);
IkReal x1580=(cj5*r00);
IkReal x1581=(cj5*r10);
IkReal x1582=(r21*sj5);
IkReal x1583=(cj5*r20);
IkReal x1584=(r01*sj5);
IkReal x1585=((1.0)*x1578);
IkReal x1586=((1.0)*x1577);
evalcond[0]=((((-1.0)*r22*x1585))+((x1577*x1582))+(((-1.0)*x1583*x1586)));
evalcond[1]=((((-1.0)*r22*x1586))+((x1578*x1583))+(((-1.0)*x1582*x1585)));
evalcond[2]=(cj0+((x1577*x1579))+(((-1.0)*x1581*x1586))+(((-1.0)*r12*x1585)));
evalcond[3]=(cj0+(((-1.0)*r02*x1586))+(((-1.0)*x1584*x1585))+((x1578*x1580)));
evalcond[4]=(sj0+(((-1.0)*x1579*x1585))+((x1578*x1581))+(((-1.0)*r12*x1586)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1580*x1586))+(((-1.0)*r02*x1585))+((x1577*x1584)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1587=((1.0)*cj5);
CheckValue<IkReal> x1588 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1587))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1588.valid){
continue;
}
CheckValue<IkReal> x1589=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1587)))),-1);
if(!x1589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1588.value)+(((1.5707963267949)*(x1589.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1590=IKsin(j4);
IkReal x1591=IKcos(j4);
IkReal x1592=(r11*sj5);
IkReal x1593=(cj5*r00);
IkReal x1594=(cj5*r10);
IkReal x1595=(r21*sj5);
IkReal x1596=(cj5*r20);
IkReal x1597=(r01*sj5);
IkReal x1598=((1.0)*x1591);
IkReal x1599=((1.0)*x1590);
evalcond[0]=(((x1590*x1595))+(((-1.0)*r22*x1598))+(((-1.0)*x1596*x1599)));
evalcond[1]=((((-1.0)*x1595*x1598))+((x1591*x1596))+(((-1.0)*r22*x1599)));
evalcond[2]=(((x1590*x1592))+cj0+(((-1.0)*x1594*x1599))+(((-1.0)*r12*x1598)));
evalcond[3]=(cj0+(((-1.0)*r02*x1599))+((x1591*x1593))+(((-1.0)*x1597*x1598)));
evalcond[4]=(sj0+(((-1.0)*x1592*x1598))+((x1591*x1594))+(((-1.0)*r12*x1599)));
evalcond[5]=((((-1.0)*sj0))+((x1590*x1597))+(((-1.0)*x1593*x1599))+(((-1.0)*r02*x1598)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1600=IKcos(j0);
IkReal x1601=IKsin(j0);
evalcond[0]=((((-0.10915)*x1601))+(((-1.0)*px))+(((-0.425)*x1600)));
evalcond[1]=((((0.10915)*x1600))+(((-1.0)*py))+(((-0.425)*x1601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1602=((1.0)*cj5);
IkReal x1603=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1602)));
j4eval[0]=x1603;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x1602))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1603);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1604=cj5*cj5;
IkReal x1605=((1.0)*r21);
IkReal x1606=(cj5*sj5);
IkReal x1607=((1.0)*r20);
IkReal x1608=(((r00*r20*x1604))+((r01*r21))+((r02*r22))+(((-1.0)*r00*x1605*x1606))+(((-1.0)*r01*x1606*x1607))+(((-1.0)*r01*x1604*x1605)));
j4eval[0]=x1608;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1607)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1608);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x1609=cj5*cj5;
IkReal x1610=(r21*sj5);
IkReal x1611=(r11*r21);
IkReal x1612=((1.0)*cj5*r20);
IkReal x1613=(((r10*r20*x1609))+(((-1.0)*x1609*x1611))+x1611+((r12*r22))+(((-1.0)*r11*sj5*x1612))+(((-1.0)*cj5*r10*x1610)));
j4eval[0]=x1613;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x1612))+((sj0*x1610))))));
j4eval[2]=IKsign(x1613);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1614=cj5*cj5;
IkReal x1615=(r21*sj5);
IkReal x1616=(r11*r21);
IkReal x1617=((1.0)*cj5*r20);
CheckValue<IkReal> x1618=IKPowWithIntegerCheck(IKsign((((r10*r20*x1614))+(((-1.0)*x1614*x1616))+x1616+((r12*r22))+(((-1.0)*r11*sj5*x1617))+(((-1.0)*cj5*r10*x1615)))),-1);
if(!x1618.valid){
continue;
}
CheckValue<IkReal> x1619 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1617))+((sj0*x1615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1619.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1618.value)))+(x1619.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1620=IKsin(j4);
IkReal x1621=IKcos(j4);
IkReal x1622=(r11*sj5);
IkReal x1623=(cj5*r00);
IkReal x1624=(cj5*r10);
IkReal x1625=(r21*sj5);
IkReal x1626=(cj5*r20);
IkReal x1627=(r01*sj5);
IkReal x1628=((1.0)*x1621);
IkReal x1629=((1.0)*x1620);
evalcond[0]=(((x1620*x1625))+(((-1.0)*r22*x1628))+(((-1.0)*x1626*x1629)));
evalcond[1]=((((-1.0)*x1625*x1628))+(((-1.0)*r22*x1629))+((x1621*x1626)));
evalcond[2]=((((-1.0)*r12*x1628))+((x1620*x1622))+cj0+(((-1.0)*x1624*x1629)));
evalcond[3]=(cj0+(((-1.0)*r02*x1629))+(((-1.0)*x1627*x1628))+((x1621*x1623)));
evalcond[4]=((((-1.0)*r12*x1629))+sj0+(((-1.0)*x1622*x1628))+((x1621*x1624)));
evalcond[5]=(((x1620*x1627))+(((-1.0)*sj0))+(((-1.0)*r02*x1628))+(((-1.0)*x1623*x1629)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1630=cj5*cj5;
IkReal x1631=((1.0)*r21);
IkReal x1632=(cj5*sj5);
IkReal x1633=((1.0)*r20);
CheckValue<IkReal> x1634=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1632*x1633))+(((-1.0)*r00*x1631*x1632))+(((-1.0)*r01*x1630*x1631))+((r00*r20*x1630))+((r01*r21))+((r02*r22)))),-1);
if(!x1634.valid){
continue;
}
CheckValue<IkReal> x1635 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1633)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1634.value)))+(x1635.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1636=IKsin(j4);
IkReal x1637=IKcos(j4);
IkReal x1638=(r11*sj5);
IkReal x1639=(cj5*r00);
IkReal x1640=(cj5*r10);
IkReal x1641=(r21*sj5);
IkReal x1642=(cj5*r20);
IkReal x1643=(r01*sj5);
IkReal x1644=((1.0)*x1637);
IkReal x1645=((1.0)*x1636);
evalcond[0]=(((x1636*x1641))+(((-1.0)*r22*x1644))+(((-1.0)*x1642*x1645)));
evalcond[1]=((((-1.0)*x1641*x1644))+((x1637*x1642))+(((-1.0)*r22*x1645)));
evalcond[2]=(((x1636*x1638))+cj0+(((-1.0)*r12*x1644))+(((-1.0)*x1640*x1645)));
evalcond[3]=(((x1637*x1639))+cj0+(((-1.0)*x1643*x1644))+(((-1.0)*r02*x1645)));
evalcond[4]=(sj0+((x1637*x1640))+(((-1.0)*r12*x1645))+(((-1.0)*x1638*x1644)));
evalcond[5]=(((x1636*x1643))+(((-1.0)*sj0))+(((-1.0)*x1639*x1645))+(((-1.0)*r02*x1644)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1646=((1.0)*cj5);
CheckValue<IkReal> x1647 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1646)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1647.valid){
continue;
}
CheckValue<IkReal> x1648=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x1646))+(((-1.0)*r00*sj5)))),-1);
if(!x1648.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1647.value)+(((1.5707963267949)*(x1648.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1649=IKsin(j4);
IkReal x1650=IKcos(j4);
IkReal x1651=(r11*sj5);
IkReal x1652=(cj5*r00);
IkReal x1653=(cj5*r10);
IkReal x1654=(r21*sj5);
IkReal x1655=(cj5*r20);
IkReal x1656=(r01*sj5);
IkReal x1657=((1.0)*x1650);
IkReal x1658=((1.0)*x1649);
evalcond[0]=((((-1.0)*r22*x1657))+(((-1.0)*x1655*x1658))+((x1649*x1654)));
evalcond[1]=(((x1650*x1655))+(((-1.0)*x1654*x1657))+(((-1.0)*r22*x1658)));
evalcond[2]=(cj0+(((-1.0)*x1653*x1658))+(((-1.0)*r12*x1657))+((x1649*x1651)));
evalcond[3]=((((-1.0)*x1656*x1657))+((x1650*x1652))+cj0+(((-1.0)*r02*x1658)));
evalcond[4]=(((x1650*x1653))+sj0+(((-1.0)*r12*x1658))+(((-1.0)*x1651*x1657)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1652*x1658))+((x1649*x1656))+(((-1.0)*r02*x1657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x1659=IKcos(j0);
IkReal x1660=IKsin(j0);
evalcond[0]=((((-0.10915)*x1660))+(((-0.425)*x1659))+(((-1.0)*px)));
evalcond[1]=((((-0.425)*x1660))+(((-1.0)*py))+(((0.10915)*x1659)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1661=((1.0)*cj5);
IkReal x1662=((((-1.0)*r01*x1661))+(((-1.0)*r00*sj5)));
j4eval[0]=x1662;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1661)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1663=((1.0)*cj5);
IkReal x1664=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1663)));
j4eval[0]=x1664;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x1663))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1664);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x1665=cj5*cj5;
IkReal x1666=((1.0)*sj5);
IkReal x1667=(cj5*r20);
IkReal x1668=(r11*r21);
IkReal x1669=((((-1.0)*cj5*r10*r21*x1666))+x1668+((r12*r22))+(((-1.0)*x1665*x1668))+(((-1.0)*r11*x1666*x1667))+((r10*r20*x1665)));
j4eval[0]=x1669;
j4eval[1]=IKsign(x1669);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1666))+((cj0*x1667)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1670=cj5*cj5;
IkReal x1671=((1.0)*sj5);
IkReal x1672=(cj5*r20);
IkReal x1673=(r11*r21);
CheckValue<IkReal> x1674 = IKatan2WithCheck(IkReal((((cj0*x1672))+(((-1.0)*cj0*r21*x1671)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1674.valid){
continue;
}
CheckValue<IkReal> x1675=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1671*x1672))+x1673+((r12*r22))+(((-1.0)*x1670*x1673))+(((-1.0)*cj5*r10*r21*x1671))+((r10*r20*x1670)))),-1);
if(!x1675.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1674.value)+(((1.5707963267949)*(x1675.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1676=IKsin(j4);
IkReal x1677=IKcos(j4);
IkReal x1678=((1.0)*sj0);
IkReal x1679=(cj5*r00);
IkReal x1680=(r11*sj5);
IkReal x1681=(cj5*r10);
IkReal x1682=(r21*sj5);
IkReal x1683=(cj5*r20);
IkReal x1684=(r01*sj5);
IkReal x1685=((1.0)*x1677);
IkReal x1686=((1.0)*x1676);
evalcond[0]=((((-1.0)*x1683*x1686))+((x1676*x1682))+(((-1.0)*r22*x1685)));
evalcond[1]=(((x1677*x1683))+(((-1.0)*x1682*x1685))+(((-1.0)*r22*x1686)));
evalcond[2]=((((-1.0)*r12*x1685))+(((-1.0)*x1681*x1686))+cj0+((x1676*x1680)));
evalcond[3]=(((x1676*x1684))+(((-1.0)*x1679*x1686))+(((-1.0)*r02*x1685))+(((-1.0)*x1678)));
evalcond[4]=((((-1.0)*r02*x1686))+(((-1.0)*cj0))+((x1677*x1679))+(((-1.0)*x1684*x1685)));
evalcond[5]=((((-1.0)*r12*x1686))+((x1677*x1681))+(((-1.0)*x1680*x1685))+(((-1.0)*x1678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1687=((1.0)*cj5);
CheckValue<IkReal> x1688=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1687))+(((-1.0)*r10*sj5)))),-1);
if(!x1688.valid){
continue;
}
CheckValue<IkReal> x1689 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x1687))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1689.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1688.value)))+(x1689.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1690=IKsin(j4);
IkReal x1691=IKcos(j4);
IkReal x1692=((1.0)*sj0);
IkReal x1693=(cj5*r00);
IkReal x1694=(r11*sj5);
IkReal x1695=(cj5*r10);
IkReal x1696=(r21*sj5);
IkReal x1697=(cj5*r20);
IkReal x1698=(r01*sj5);
IkReal x1699=((1.0)*x1691);
IkReal x1700=((1.0)*x1690);
evalcond[0]=(((x1690*x1696))+(((-1.0)*r22*x1699))+(((-1.0)*x1697*x1700)));
evalcond[1]=((((-1.0)*x1696*x1699))+((x1691*x1697))+(((-1.0)*r22*x1700)));
evalcond[2]=(((x1690*x1694))+cj0+(((-1.0)*r12*x1699))+(((-1.0)*x1695*x1700)));
evalcond[3]=(((x1690*x1698))+(((-1.0)*x1692))+(((-1.0)*r02*x1699))+(((-1.0)*x1693*x1700)));
evalcond[4]=((((-1.0)*x1698*x1699))+((x1691*x1693))+(((-1.0)*r02*x1700))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1692))+(((-1.0)*x1694*x1699))+((x1691*x1695))+(((-1.0)*r12*x1700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1701=((1.0)*cj5);
CheckValue<IkReal> x1702 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1701)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1702.valid){
continue;
}
CheckValue<IkReal> x1703=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1701)))),-1);
if(!x1703.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1702.value)+(((1.5707963267949)*(x1703.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1704=IKsin(j4);
IkReal x1705=IKcos(j4);
IkReal x1706=((1.0)*sj0);
IkReal x1707=(cj5*r00);
IkReal x1708=(r11*sj5);
IkReal x1709=(cj5*r10);
IkReal x1710=(r21*sj5);
IkReal x1711=(cj5*r20);
IkReal x1712=(r01*sj5);
IkReal x1713=((1.0)*x1705);
IkReal x1714=((1.0)*x1704);
evalcond[0]=((((-1.0)*x1711*x1714))+(((-1.0)*r22*x1713))+((x1704*x1710)));
evalcond[1]=((((-1.0)*x1710*x1713))+(((-1.0)*r22*x1714))+((x1705*x1711)));
evalcond[2]=(cj0+(((-1.0)*x1709*x1714))+((x1704*x1708))+(((-1.0)*r12*x1713)));
evalcond[3]=((((-1.0)*x1707*x1714))+(((-1.0)*x1706))+(((-1.0)*r02*x1713))+((x1704*x1712)));
evalcond[4]=((((-1.0)*x1712*x1713))+((x1705*x1707))+(((-1.0)*r02*x1714))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1708*x1713))+(((-1.0)*x1706))+((x1705*x1709))+(((-1.0)*r12*x1714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1715=((1.0)*cj5);
IkReal x1716=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1715)));
j4eval[0]=x1716;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1715)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1717=cj5*cj5;
IkReal x1718=((1.0)*r21);
IkReal x1719=(cj5*sj5);
IkReal x1720=((1.0)*r20);
IkReal x1721=((((-1.0)*r00*x1718*x1719))+((r00*r20*x1717))+((r01*r21))+(((-1.0)*r01*x1717*x1718))+(((-1.0)*r01*x1719*x1720))+((r02*r22)));
j4eval[0]=x1721;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1720)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1721);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x1722=cj5*cj5;
IkReal x1723=(r21*sj5);
IkReal x1724=(r11*r21);
IkReal x1725=((1.0)*cj5*r20);
IkReal x1726=(x1724+(((-1.0)*cj5*r10*x1723))+((r12*r22))+(((-1.0)*x1722*x1724))+(((-1.0)*r11*sj5*x1725))+((r10*r20*x1722)));
j4eval[0]=x1726;
j4eval[1]=((IKabs(((((-1.0)*sj0*x1725))+((sj0*x1723)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x1726);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1727=cj5*cj5;
IkReal x1728=(r21*sj5);
IkReal x1729=(r11*r21);
IkReal x1730=((1.0)*cj5*r20);
CheckValue<IkReal> x1731 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*sj0*x1730))+((sj0*x1728)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1731.valid){
continue;
}
CheckValue<IkReal> x1732=IKPowWithIntegerCheck(IKsign((x1729+(((-1.0)*cj5*r10*x1728))+((r12*r22))+(((-1.0)*r11*sj5*x1730))+((r10*r20*x1727))+(((-1.0)*x1727*x1729)))),-1);
if(!x1732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1731.value)+(((1.5707963267949)*(x1732.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1733=IKsin(j4);
IkReal x1734=IKcos(j4);
IkReal x1735=(r11*sj5);
IkReal x1736=(cj5*r00);
IkReal x1737=(cj5*r10);
IkReal x1738=(r21*sj5);
IkReal x1739=(cj5*r20);
IkReal x1740=(r01*sj5);
IkReal x1741=((1.0)*x1734);
IkReal x1742=((1.0)*x1733);
evalcond[0]=((((-1.0)*r22*x1741))+(((-1.0)*x1739*x1742))+((x1733*x1738)));
evalcond[1]=((((-1.0)*x1738*x1741))+(((-1.0)*r22*x1742))+((x1734*x1739)));
evalcond[2]=((((-1.0)*r12*x1741))+cj0+(((-1.0)*x1737*x1742))+((x1733*x1735)));
evalcond[3]=(cj0+(((-1.0)*x1740*x1741))+((x1734*x1736))+(((-1.0)*r02*x1742)));
evalcond[4]=((((-1.0)*r12*x1742))+sj0+(((-1.0)*x1735*x1741))+((x1734*x1737)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x1736*x1742))+((x1733*x1740))+(((-1.0)*r02*x1741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1743=cj5*cj5;
IkReal x1744=((1.0)*r21);
IkReal x1745=(cj5*sj5);
IkReal x1746=((1.0)*r20);
CheckValue<IkReal> x1747 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x1746)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1747.valid){
continue;
}
CheckValue<IkReal> x1748=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x1744*x1745))+((r01*r21))+(((-1.0)*r01*x1745*x1746))+((r00*r20*x1743))+((r02*r22))+(((-1.0)*r01*x1743*x1744)))),-1);
if(!x1748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1747.value)+(((1.5707963267949)*(x1748.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1749=IKsin(j4);
IkReal x1750=IKcos(j4);
IkReal x1751=(r11*sj5);
IkReal x1752=(cj5*r00);
IkReal x1753=(cj5*r10);
IkReal x1754=(r21*sj5);
IkReal x1755=(cj5*r20);
IkReal x1756=(r01*sj5);
IkReal x1757=((1.0)*x1750);
IkReal x1758=((1.0)*x1749);
evalcond[0]=(((x1749*x1754))+(((-1.0)*r22*x1757))+(((-1.0)*x1755*x1758)));
evalcond[1]=((((-1.0)*r22*x1758))+((x1750*x1755))+(((-1.0)*x1754*x1757)));
evalcond[2]=((((-1.0)*r12*x1757))+((x1749*x1751))+cj0+(((-1.0)*x1753*x1758)));
evalcond[3]=((((-1.0)*x1756*x1757))+cj0+((x1750*x1752))+(((-1.0)*r02*x1758)));
evalcond[4]=(sj0+(((-1.0)*r12*x1758))+((x1750*x1753))+(((-1.0)*x1751*x1757)));
evalcond[5]=((((-1.0)*sj0))+((x1749*x1756))+(((-1.0)*x1752*x1758))+(((-1.0)*r02*x1757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1759=((1.0)*cj5);
CheckValue<IkReal> x1760 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1759)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1760.valid){
continue;
}
CheckValue<IkReal> x1761=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1759)))),-1);
if(!x1761.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1760.value)+(((1.5707963267949)*(x1761.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1762=IKsin(j4);
IkReal x1763=IKcos(j4);
IkReal x1764=(r11*sj5);
IkReal x1765=(cj5*r00);
IkReal x1766=(cj5*r10);
IkReal x1767=(r21*sj5);
IkReal x1768=(cj5*r20);
IkReal x1769=(r01*sj5);
IkReal x1770=((1.0)*x1763);
IkReal x1771=((1.0)*x1762);
evalcond[0]=(((x1762*x1767))+(((-1.0)*r22*x1770))+(((-1.0)*x1768*x1771)));
evalcond[1]=((((-1.0)*x1767*x1770))+(((-1.0)*r22*x1771))+((x1763*x1768)));
evalcond[2]=(cj0+((x1762*x1764))+(((-1.0)*x1766*x1771))+(((-1.0)*r12*x1770)));
evalcond[3]=(cj0+(((-1.0)*r02*x1771))+(((-1.0)*x1769*x1770))+((x1763*x1765)));
evalcond[4]=(sj0+(((-1.0)*x1764*x1770))+(((-1.0)*r12*x1771))+((x1763*x1766)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x1770))+((x1762*x1769))+(((-1.0)*x1765*x1771)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1772=((1.0)*cj5);
IkReal x1773=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1772)));
j4eval[0]=x1773;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x1772)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x1773);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1774=((1.0)*cj5);
IkReal x1775=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1774)));
j4eval[0]=x1775;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1774))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1775);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x1776=cj5*cj5;
IkReal x1777=((1.0)*sj5);
IkReal x1778=(cj5*r20);
IkReal x1779=(r11*r21);
IkReal x1780=(x1779+((r12*r22))+((r10*r20*x1776))+(((-1.0)*cj5*r10*r21*x1777))+(((-1.0)*r11*x1777*x1778))+(((-1.0)*x1776*x1779)));
j4eval[0]=x1780;
j4eval[1]=IKsign(x1780);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x1777))+((cj0*x1778)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1781=cj5*cj5;
IkReal x1782=((1.0)*sj5);
IkReal x1783=(cj5*r20);
IkReal x1784=(r11*r21);
CheckValue<IkReal> x1785=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1782*x1783))+x1784+((r10*r20*x1781))+((r12*r22))+(((-1.0)*x1781*x1784))+(((-1.0)*cj5*r10*r21*x1782)))),-1);
if(!x1785.valid){
continue;
}
CheckValue<IkReal> x1786 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x1782))+((cj0*x1783)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x1786.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1785.value)))+(x1786.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1787=IKsin(j4);
IkReal x1788=IKcos(j4);
IkReal x1789=((1.0)*sj0);
IkReal x1790=(cj5*r00);
IkReal x1791=(r11*sj5);
IkReal x1792=(cj5*r10);
IkReal x1793=(r21*sj5);
IkReal x1794=(cj5*r20);
IkReal x1795=(r01*sj5);
IkReal x1796=((1.0)*x1788);
IkReal x1797=((1.0)*x1787);
evalcond[0]=((((-1.0)*r22*x1796))+((x1787*x1793))+(((-1.0)*x1794*x1797)));
evalcond[1]=((((-1.0)*r22*x1797))+(((-1.0)*x1793*x1796))+((x1788*x1794)));
evalcond[2]=((((-1.0)*x1792*x1797))+cj0+(((-1.0)*r12*x1796))+((x1787*x1791)));
evalcond[3]=((((-1.0)*x1789))+(((-1.0)*x1790*x1797))+((x1787*x1795))+(((-1.0)*r02*x1796)));
evalcond[4]=((((-1.0)*x1795*x1796))+(((-1.0)*r02*x1797))+((x1788*x1790))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1789))+(((-1.0)*r12*x1797))+((x1788*x1792))+(((-1.0)*x1791*x1796)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1798=((1.0)*cj5);
CheckValue<IkReal> x1799 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x1798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1799.valid){
continue;
}
CheckValue<IkReal> x1800=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x1798)))),-1);
if(!x1800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1799.value)+(((1.5707963267949)*(x1800.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1801=IKsin(j4);
IkReal x1802=IKcos(j4);
IkReal x1803=((1.0)*sj0);
IkReal x1804=(cj5*r00);
IkReal x1805=(r11*sj5);
IkReal x1806=(cj5*r10);
IkReal x1807=(r21*sj5);
IkReal x1808=(cj5*r20);
IkReal x1809=(r01*sj5);
IkReal x1810=((1.0)*x1802);
IkReal x1811=((1.0)*x1801);
evalcond[0]=(((x1801*x1807))+(((-1.0)*x1808*x1811))+(((-1.0)*r22*x1810)));
evalcond[1]=(((x1802*x1808))+(((-1.0)*x1807*x1810))+(((-1.0)*r22*x1811)));
evalcond[2]=(((x1801*x1805))+cj0+(((-1.0)*r12*x1810))+(((-1.0)*x1806*x1811)));
evalcond[3]=(((x1801*x1809))+(((-1.0)*x1804*x1811))+(((-1.0)*r02*x1810))+(((-1.0)*x1803)));
evalcond[4]=(((x1802*x1804))+(((-1.0)*x1809*x1810))+(((-1.0)*r02*x1811))+(((-1.0)*cj0)));
evalcond[5]=(((x1802*x1806))+(((-1.0)*x1805*x1810))+(((-1.0)*x1803))+(((-1.0)*r12*x1811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1812=((1.0)*cj5);
CheckValue<IkReal> x1813=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x1812)))),-1);
if(!x1813.valid){
continue;
}
CheckValue<IkReal> x1814 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x1812))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1813.value)))+(x1814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1815=IKsin(j4);
IkReal x1816=IKcos(j4);
IkReal x1817=((1.0)*sj0);
IkReal x1818=(cj5*r00);
IkReal x1819=(r11*sj5);
IkReal x1820=(cj5*r10);
IkReal x1821=(r21*sj5);
IkReal x1822=(cj5*r20);
IkReal x1823=(r01*sj5);
IkReal x1824=((1.0)*x1816);
IkReal x1825=((1.0)*x1815);
evalcond[0]=((((-1.0)*r22*x1824))+(((-1.0)*x1822*x1825))+((x1815*x1821)));
evalcond[1]=((((-1.0)*x1821*x1824))+(((-1.0)*r22*x1825))+((x1816*x1822)));
evalcond[2]=(cj0+(((-1.0)*r12*x1824))+((x1815*x1819))+(((-1.0)*x1820*x1825)));
evalcond[3]=((((-1.0)*x1817))+(((-1.0)*x1818*x1825))+(((-1.0)*r02*x1824))+((x1815*x1823)));
evalcond[4]=(((x1816*x1818))+(((-1.0)*x1823*x1824))+(((-1.0)*r02*x1825))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x1817))+(((-1.0)*x1819*x1824))+(((-1.0)*r12*x1825))+((x1816*x1820)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x1826=(sj1*sj2);
IkReal x1827=(cj5*r01);
IkReal x1828=(cj1*cj2);
IkReal x1829=(r00*sj5);
IkReal x1830=((20000.0)*px);
IkReal x1831=((8500.0)*cj1);
CheckValue<IkReal> x1832=IKPowWithIntegerCheck(((((2183.0)*x1826))+(((-2183.0)*x1828))),-1);
if(!x1832.valid){
continue;
}
CheckValue<IkReal> x1833=IKPowWithIntegerCheck(((((-1.0)*x1828))+x1826),-1);
if(!x1833.valid){
continue;
}
if( IKabs(((x1832.value)*(((((-5952.0)*x1827*x1828))+(((5952.0)*x1826*x1829))+(((5952.0)*x1826*x1827))+(((-1.0)*x1826*x1830))+(((-1.0)*x1827*x1831))+((x1828*x1830))+(((-1.0)*x1829*x1831))+(((-5952.0)*x1828*x1829)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x1833.value)*(((((-1.0)*x1829))+(((-1.0)*x1827)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x1832.value)*(((((-5952.0)*x1827*x1828))+(((5952.0)*x1826*x1829))+(((5952.0)*x1826*x1827))+(((-1.0)*x1826*x1830))+(((-1.0)*x1827*x1831))+((x1828*x1830))+(((-1.0)*x1829*x1831))+(((-5952.0)*x1828*x1829))))))+IKsqr(((x1833.value)*(((((-1.0)*x1829))+(((-1.0)*x1827))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x1832.value)*(((((-5952.0)*x1827*x1828))+(((5952.0)*x1826*x1829))+(((5952.0)*x1826*x1827))+(((-1.0)*x1826*x1830))+(((-1.0)*x1827*x1831))+((x1828*x1830))+(((-1.0)*x1829*x1831))+(((-5952.0)*x1828*x1829))))), ((x1833.value)*(((((-1.0)*x1829))+(((-1.0)*x1827))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x1834=IKcos(j0);
IkReal x1835=IKsin(j0);
IkReal x1836=(cj5*r01);
IkReal x1837=(cj5*r11);
IkReal x1838=(r00*sj5);
IkReal x1839=(sj1*sj2);
IkReal x1840=((0.39225)*cj2);
IkReal x1841=((1.0)*cj2);
IkReal x1842=(r10*sj5);
IkReal x1843=((0.39225)*x1839);
IkReal x1844=(cj1*x1834);
IkReal x1845=(cj1*x1835);
evalcond[0]=((((-1.0)*x1841*x1844))+x1836+x1838+((x1834*x1839)));
evalcond[1]=((((-1.0)*x1841*x1845))+((x1835*x1839))+x1842+x1837);
evalcond[2]=(((x1840*x1844))+(((-0.10915)*x1835))+(((-1.0)*px))+(((-0.09465)*x1838))+(((-0.09465)*x1836))+(((0.425)*x1844))+(((-1.0)*x1834*x1843)));
evalcond[3]=(((x1840*x1845))+(((-0.09465)*x1842))+(((-1.0)*py))+(((-1.0)*x1835*x1843))+(((-0.09465)*x1837))+(((0.425)*x1845))+(((0.10915)*x1834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1846=((1.0)*cj5);
IkReal x1847=((((-1.0)*r00*sj5))+(((-1.0)*r01*x1846)));
j4eval[0]=x1847;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x1846))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x1847);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1848=((1.0)*cj5);
IkReal x1849=((((-1.0)*r10*sj5))+(((-1.0)*r11*x1848)));
j4eval[0]=x1849;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x1848))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x1849);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x1850=((1.0)*sj0);
IkReal x1851=((1.0)*cj0);
IkReal x1852=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x1852;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x1850))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x1851)))))+(IKabs(((((-1.0)*r02*x1851))+(((-1.0)*r12*x1850))))));
j4eval[2]=IKsign(x1852);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x1853=((-1.0)*r20);
IkReal x1855 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1855)==0){
continue;
}
IkReal x1854=pow(x1855,-0.5);
CheckValue<IkReal> x1856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1853),IKFAST_ATAN2_MAGTHRESH);
if(!x1856.valid){
continue;
}
IkReal gconst78=((-1.0)*(x1856.value));
IkReal gconst79=(r21*x1854);
IkReal gconst80=(x1853*x1854);
CheckValue<IkReal> x1857 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1857.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x1857.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1858=((-1.0)*r20);
IkReal x1859=x1854;
CheckValue<IkReal> x1861 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1858),IKFAST_ATAN2_MAGTHRESH);
if(!x1861.valid){
continue;
}
IkReal x1860=((-1.0)*(x1861.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1860;
IkReal gconst78=x1860;
IkReal gconst79=(r21*x1859);
IkReal gconst80=(x1858*x1859);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1862=((-1.0)*r20);
IkReal x1863=x1854;
CheckValue<IkReal> x1865 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1862),IKFAST_ATAN2_MAGTHRESH);
if(!x1865.valid){
continue;
}
IkReal x1864=((-1.0)*(x1865.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1864;
IkReal gconst78=x1864;
IkReal gconst79=(r21*x1863);
IkReal gconst80=(x1862*x1863);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x1866=((-1.0)*r20);
IkReal x1867=x1854;
CheckValue<IkReal> x1869 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x1866),IKFAST_ATAN2_MAGTHRESH);
if(!x1869.valid){
continue;
}
IkReal x1868=((-1.0)*(x1869.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x1868;
IkReal gconst78=x1868;
IkReal gconst79=(r21*x1867);
IkReal gconst80=(x1866*x1867);
IkReal x1870=r22*r22;
CheckValue<IkReal> x1873=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x1870))),-1);
if(!x1873.valid){
continue;
}
IkReal x1871=x1873.value;
IkReal x1872=(((x1871*(r21*r21*r21*r21)))+((x1871*(r20*r20*r20*r20)))+(((2.0)*x1871*(r20*r20)*(r21*r21)))+x1870);
j4eval[0]=x1872;
j4eval[1]=IKsign(x1872);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1874=(sj1*sj2);
IkReal x1875=(gconst80*r20);
IkReal x1876=(gconst79*r21);
IkReal x1877=(cj1*cj2);
CheckValue<IkReal> x1878 = IKatan2WithCheck(IkReal((((r22*x1874))+(((-1.0)*r22*x1877)))),IkReal((((x1874*x1876))+(((-1.0)*x1876*x1877))+(((-1.0)*x1874*x1875))+((x1875*x1877)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1878.valid){
continue;
}
CheckValue<IkReal> x1879=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x1875*x1876))+(x1875*x1875)+(x1876*x1876))),-1);
if(!x1879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1878.value)+(((1.5707963267949)*(x1879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1880=IKsin(j4);
IkReal x1881=IKcos(j4);
IkReal x1882=(gconst79*r01);
IkReal x1883=(gconst79*r21);
IkReal x1884=((1.0)*cj2);
IkReal x1885=(gconst79*r11);
IkReal x1886=((1.0)*sj0);
IkReal x1887=(cj1*sj2);
IkReal x1888=((1.0)*x1881);
IkReal x1889=(gconst80*x1881);
IkReal x1890=((1.0)*x1880);
IkReal x1891=(gconst80*x1890);
evalcond[0]=(((x1880*x1883))+(((-1.0)*r22*x1888))+(((-1.0)*r20*x1891)));
evalcond[1]=(cj0+((x1880*x1885))+(((-1.0)*r12*x1888))+(((-1.0)*r10*x1891)));
evalcond[2]=(((x1880*x1882))+(((-1.0)*r02*x1888))+(((-1.0)*r00*x1891))+(((-1.0)*x1886)));
evalcond[3]=(((r20*x1889))+(((-1.0)*x1883*x1888))+(((-1.0)*cj1*x1884))+((sj1*sj2))+(((-1.0)*r22*x1890)));
evalcond[4]=((((-1.0)*r02*x1890))+(((-1.0)*x1882*x1888))+(((-1.0)*cj0*sj1*x1884))+(((-1.0)*cj0*x1887))+((r00*x1889)));
evalcond[5]=((((-1.0)*sj0*sj1*x1884))+((r10*x1889))+(((-1.0)*r12*x1890))+(((-1.0)*x1885*x1888))+(((-1.0)*x1886*x1887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1892=((1.0)*gconst80);
CheckValue<IkReal> x1893=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x1892))+(((-1.0)*gconst79*r10)))),-1);
if(!x1893.valid){
continue;
}
CheckValue<IkReal> x1894 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst79*r21*sj0))+(((-1.0)*r20*sj0*x1892)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1894.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1893.value)))+(x1894.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1895=IKsin(j4);
IkReal x1896=IKcos(j4);
IkReal x1897=(gconst79*r01);
IkReal x1898=(gconst79*r21);
IkReal x1899=((1.0)*cj2);
IkReal x1900=(gconst79*r11);
IkReal x1901=((1.0)*sj0);
IkReal x1902=(cj1*sj2);
IkReal x1903=((1.0)*x1896);
IkReal x1904=(gconst80*x1896);
IkReal x1905=((1.0)*x1895);
IkReal x1906=(gconst80*x1905);
evalcond[0]=((((-1.0)*r22*x1903))+(((-1.0)*r20*x1906))+((x1895*x1898)));
evalcond[1]=(cj0+(((-1.0)*r10*x1906))+((x1895*x1900))+(((-1.0)*r12*x1903)));
evalcond[2]=(((x1895*x1897))+(((-1.0)*r02*x1903))+(((-1.0)*x1901))+(((-1.0)*r00*x1906)));
evalcond[3]=((((-1.0)*cj1*x1899))+(((-1.0)*r22*x1905))+((sj1*sj2))+(((-1.0)*x1898*x1903))+((r20*x1904)));
evalcond[4]=(((r00*x1904))+(((-1.0)*cj0*sj1*x1899))+(((-1.0)*cj0*x1902))+(((-1.0)*x1897*x1903))+(((-1.0)*r02*x1905)));
evalcond[5]=((((-1.0)*x1901*x1902))+(((-1.0)*x1900*x1903))+(((-1.0)*sj0*sj1*x1899))+(((-1.0)*r12*x1905))+((r10*x1904)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1907=((1.0)*gconst80);
CheckValue<IkReal> x1908 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x1907)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1908.valid){
continue;
}
CheckValue<IkReal> x1909=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r00))+(((-1.0)*r01*x1907)))),-1);
if(!x1909.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x1908.value)+(((1.5707963267949)*(x1909.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1910=IKsin(j4);
IkReal x1911=IKcos(j4);
IkReal x1912=(gconst79*r01);
IkReal x1913=(gconst79*r21);
IkReal x1914=((1.0)*cj2);
IkReal x1915=(gconst79*r11);
IkReal x1916=((1.0)*sj0);
IkReal x1917=(cj1*sj2);
IkReal x1918=((1.0)*x1911);
IkReal x1919=(gconst80*x1911);
IkReal x1920=((1.0)*x1910);
IkReal x1921=(gconst80*x1920);
evalcond[0]=((((-1.0)*r22*x1918))+((x1910*x1913))+(((-1.0)*r20*x1921)));
evalcond[1]=(cj0+(((-1.0)*r12*x1918))+((x1910*x1915))+(((-1.0)*r10*x1921)));
evalcond[2]=((((-1.0)*r02*x1918))+((x1910*x1912))+(((-1.0)*r00*x1921))+(((-1.0)*x1916)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x1914))+(((-1.0)*r22*x1920))+(((-1.0)*x1913*x1918))+((r20*x1919)));
evalcond[4]=(((r00*x1919))+(((-1.0)*cj0*sj1*x1914))+(((-1.0)*r02*x1920))+(((-1.0)*cj0*x1917))+(((-1.0)*x1912*x1918)));
evalcond[5]=(((r10*x1919))+(((-1.0)*r12*x1920))+(((-1.0)*x1915*x1918))+(((-1.0)*sj0*sj1*x1914))+(((-1.0)*x1916*x1917)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1922=((-1.0)*r21);
IkReal x1924 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x1924)==0){
continue;
}
IkReal x1923=pow(x1924,-0.5);
CheckValue<IkReal> x1925 = IKatan2WithCheck(IkReal(x1922),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1925.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x1925.value))));
IkReal gconst82=(x1922*x1923);
IkReal gconst83=((1.0)*r20*x1923);
CheckValue<IkReal> x1926 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1926.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x1926.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x1927=((-1.0)*r21);
CheckValue<IkReal> x1930 = IKatan2WithCheck(IkReal(x1927),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1930.valid){
continue;
}
IkReal x1928=((1.0)*(x1930.value));
IkReal x1929=x1923;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1928)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1928)));
IkReal gconst82=(x1927*x1929);
IkReal gconst83=((1.0)*r20*x1929);
IkReal x1931=r22*r22;
IkReal x1932=((1.0)*x1931);
CheckValue<IkReal> x1936=IKPowWithIntegerCheck(((-1.0)+x1931),-1);
if(!x1936.valid){
continue;
}
IkReal x1933=x1936.value;
if((((1.0)+(((-1.0)*x1932)))) < -0.00001)
continue;
IkReal x1934=IKsqrt(((1.0)+(((-1.0)*x1932))));
IkReal x1935=(cj0*x1933*x1934);
j4eval[0]=((IKabs(((((-1.0)*x1932*x1935))+x1935)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x1937=((-1.0)*r21);
CheckValue<IkReal> x1940 = IKatan2WithCheck(IkReal(x1937),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1940.valid){
continue;
}
IkReal x1938=((1.0)*(x1940.value));
IkReal x1939=x1923;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1938)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1938)));
IkReal gconst82=(x1937*x1939);
IkReal gconst83=((1.0)*r20*x1939);
IkReal x1941=r22*r22;
IkReal x1942=((1.0)*x1941);
CheckValue<IkReal> x1946=IKPowWithIntegerCheck(((-1.0)+x1941),-1);
if(!x1946.valid){
continue;
}
IkReal x1943=x1946.value;
if((((1.0)+(((-1.0)*x1942)))) < -0.00001)
continue;
IkReal x1944=IKsqrt(((1.0)+(((-1.0)*x1942))));
IkReal x1945=(sj0*x1943*x1944);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x1942*x1945))+x1945))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x1947=((-1.0)*r21);
CheckValue<IkReal> x1950 = IKatan2WithCheck(IkReal(x1947),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x1950.valid){
continue;
}
IkReal x1948=((1.0)*(x1950.value));
IkReal x1949=x1923;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x1948)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x1948)));
IkReal gconst82=(x1947*x1949);
IkReal gconst83=((1.0)*r20*x1949);
IkReal x1951=r22*r22;
IkReal x1952=(r12*sj0);
IkReal x1953=(cj0*r02);
CheckValue<IkReal> x1957=IKPowWithIntegerCheck(((-1.0)+x1951),-1);
if(!x1957.valid){
continue;
}
IkReal x1954=x1957.value;
if((((1.0)+(((-1.0)*x1951)))) < -0.00001)
continue;
IkReal x1955=IKsqrt(((1.0)+(((-1.0)*x1951))));
IkReal x1956=(r22*x1954*x1955);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs((((x1952*x1956))+((x1953*x1956)))))+(IKabs(((((-1.0)*x1953))+(((-1.0)*x1952))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1958=((1.0)*sj0);
IkReal x1959=((1.0)*cj0);
CheckValue<IkReal> x1960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x1960.valid){
continue;
}
CheckValue<IkReal> x1961 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x1959))+(((-1.0)*r12*x1958)))),IkReal(((((-1.0)*gconst82*r01*x1959))+((gconst83*r10*sj0))+(((-1.0)*gconst82*r11*x1958))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1960.value)))+(x1961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1962=IKsin(j4);
IkReal x1963=IKcos(j4);
IkReal x1964=(gconst82*r11);
IkReal x1965=((1.0)*cj2);
IkReal x1966=((1.0)*sj0);
IkReal x1967=(cj1*sj2);
IkReal x1968=((1.0)*x1963);
IkReal x1969=(gconst83*x1963);
IkReal x1970=(gconst82*x1962);
IkReal x1971=((1.0)*x1962);
evalcond[0]=((((-1.0)*r22*x1968))+((r21*x1970))+(((-1.0)*gconst83*r20*x1971)));
evalcond[1]=(cj0+(((-1.0)*gconst83*r10*x1971))+((x1962*x1964))+(((-1.0)*r12*x1968)));
evalcond[2]=((((-1.0)*r02*x1968))+(((-1.0)*x1966))+((r01*x1970))+(((-1.0)*gconst83*r00*x1971)));
evalcond[3]=((((-1.0)*r22*x1971))+((r20*x1969))+((sj1*sj2))+(((-1.0)*gconst82*r21*x1968))+(((-1.0)*cj1*x1965)));
evalcond[4]=((((-1.0)*cj0*x1967))+(((-1.0)*cj0*sj1*x1965))+(((-1.0)*r02*x1971))+((r00*x1969))+(((-1.0)*gconst82*r01*x1968)));
evalcond[5]=((((-1.0)*x1964*x1968))+(((-1.0)*sj0*sj1*x1965))+((r10*x1969))+(((-1.0)*x1966*x1967))+(((-1.0)*r12*x1971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1972=((1.0)*gconst83);
CheckValue<IkReal> x1973=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r10))+(((-1.0)*r11*x1972)))),-1);
if(!x1973.valid){
continue;
}
CheckValue<IkReal> x1974 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x1972)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1973.value)))+(x1974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1975=IKsin(j4);
IkReal x1976=IKcos(j4);
IkReal x1977=(gconst82*r11);
IkReal x1978=((1.0)*cj2);
IkReal x1979=((1.0)*sj0);
IkReal x1980=(cj1*sj2);
IkReal x1981=((1.0)*x1976);
IkReal x1982=(gconst83*x1976);
IkReal x1983=(gconst82*x1975);
IkReal x1984=((1.0)*x1975);
evalcond[0]=(((r21*x1983))+(((-1.0)*gconst83*r20*x1984))+(((-1.0)*r22*x1981)));
evalcond[1]=(cj0+((x1975*x1977))+(((-1.0)*r12*x1981))+(((-1.0)*gconst83*r10*x1984)));
evalcond[2]=((((-1.0)*r02*x1981))+(((-1.0)*gconst83*r00*x1984))+(((-1.0)*x1979))+((r01*x1983)));
evalcond[3]=((((-1.0)*gconst82*r21*x1981))+((sj1*sj2))+(((-1.0)*cj1*x1978))+(((-1.0)*r22*x1984))+((r20*x1982)));
evalcond[4]=((((-1.0)*cj0*sj1*x1978))+(((-1.0)*r02*x1984))+(((-1.0)*gconst82*r01*x1981))+((r00*x1982))+(((-1.0)*cj0*x1980)));
evalcond[5]=((((-1.0)*sj0*sj1*x1978))+(((-1.0)*x1979*x1980))+((r10*x1982))+(((-1.0)*r12*x1984))+(((-1.0)*x1977*x1981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1985=((1.0)*gconst83);
CheckValue<IkReal> x1986=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r00))+(((-1.0)*r01*x1985)))),-1);
if(!x1986.valid){
continue;
}
CheckValue<IkReal> x1987 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x1985)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1987.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1986.value)))+(x1987.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1988=IKsin(j4);
IkReal x1989=IKcos(j4);
IkReal x1990=(gconst82*r11);
IkReal x1991=((1.0)*cj2);
IkReal x1992=((1.0)*sj0);
IkReal x1993=(cj1*sj2);
IkReal x1994=((1.0)*x1989);
IkReal x1995=(gconst83*x1989);
IkReal x1996=(gconst82*x1988);
IkReal x1997=((1.0)*x1988);
evalcond[0]=(((r21*x1996))+(((-1.0)*gconst83*r20*x1997))+(((-1.0)*r22*x1994)));
evalcond[1]=((((-1.0)*gconst83*r10*x1997))+((x1988*x1990))+cj0+(((-1.0)*r12*x1994)));
evalcond[2]=((((-1.0)*r02*x1994))+(((-1.0)*x1992))+(((-1.0)*gconst83*r00*x1997))+((r01*x1996)));
evalcond[3]=(((sj1*sj2))+((r20*x1995))+(((-1.0)*r22*x1997))+(((-1.0)*cj1*x1991))+(((-1.0)*gconst82*r21*x1994)));
evalcond[4]=((((-1.0)*gconst82*r01*x1994))+(((-1.0)*cj0*x1993))+(((-1.0)*cj0*sj1*x1991))+(((-1.0)*r02*x1997))+((r00*x1995)));
evalcond[5]=((((-1.0)*sj0*sj1*x1991))+((r10*x1995))+(((-1.0)*x1992*x1993))+(((-1.0)*x1990*x1994))+(((-1.0)*r12*x1997)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x1998=((-1.0)*r10);
IkReal x2000 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2000)==0){
continue;
}
IkReal x1999=pow(x2000,-0.5);
CheckValue<IkReal> x2001 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x1998),IKFAST_ATAN2_MAGTHRESH);
if(!x2001.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2001.value));
IkReal gconst85=(r11*x1999);
IkReal gconst86=(x1998*x1999);
CheckValue<IkReal> x2002 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2002.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2002.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2003=((-1.0)*r10);
IkReal x2004=x1999;
CheckValue<IkReal> x2006 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2003),IKFAST_ATAN2_MAGTHRESH);
if(!x2006.valid){
continue;
}
IkReal x2005=((-1.0)*(x2006.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2005;
IkReal gconst84=x2005;
IkReal gconst85=(r11*x2004);
IkReal gconst86=(x2003*x2004);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2007=((1.0)*sj0);
IkReal x2008=((1.0)*gconst85);
CheckValue<IkReal> x2009=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2008)))),-1);
if(!x2009.valid){
continue;
}
CheckValue<IkReal> x2010 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2007))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*cj0*r01*x2008))+(((-1.0)*gconst85*r11*x2007))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2009.value)))+(x2010.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2011=IKsin(j4);
IkReal x2012=IKcos(j4);
IkReal x2013=(gconst85*r21);
IkReal x2014=(gconst86*r00);
IkReal x2015=(gconst86*r10);
IkReal x2016=((1.0)*cj2);
IkReal x2017=(gconst85*r11);
IkReal x2018=(gconst85*r01);
IkReal x2019=((1.0)*sj0);
IkReal x2020=(gconst86*r20);
IkReal x2021=(cj1*sj2);
IkReal x2022=((1.0)*x2012);
IkReal x2023=((1.0)*x2011);
evalcond[0]=((((-1.0)*r22*x2022))+((x2011*x2013))+(((-1.0)*x2020*x2023)));
evalcond[1]=(cj0+(((-1.0)*r12*x2022))+((x2011*x2017))+(((-1.0)*x2015*x2023)));
evalcond[2]=((((-1.0)*x2019))+(((-1.0)*r02*x2022))+((x2011*x2018))+(((-1.0)*x2014*x2023)));
evalcond[3]=((((-1.0)*r22*x2023))+((sj1*sj2))+(((-1.0)*x2013*x2022))+((x2012*x2020))+(((-1.0)*cj1*x2016)));
evalcond[4]=((((-1.0)*cj0*sj1*x2016))+(((-1.0)*r02*x2023))+(((-1.0)*cj0*x2021))+((x2012*x2014))+(((-1.0)*x2018*x2022)));
evalcond[5]=((((-1.0)*r12*x2023))+(((-1.0)*x2017*x2022))+(((-1.0)*x2019*x2021))+((x2012*x2015))+(((-1.0)*sj0*sj1*x2016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2024=((1.0)*gconst86);
CheckValue<IkReal> x2025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2024))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2025.valid){
continue;
}
CheckValue<IkReal> x2026=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2024))+(((-1.0)*gconst85*r00)))),-1);
if(!x2026.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2025.value)+(((1.5707963267949)*(x2026.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2027=IKsin(j4);
IkReal x2028=IKcos(j4);
IkReal x2029=(gconst85*r21);
IkReal x2030=(gconst86*r00);
IkReal x2031=(gconst86*r10);
IkReal x2032=((1.0)*cj2);
IkReal x2033=(gconst85*r11);
IkReal x2034=(gconst85*r01);
IkReal x2035=((1.0)*sj0);
IkReal x2036=(gconst86*r20);
IkReal x2037=(cj1*sj2);
IkReal x2038=((1.0)*x2028);
IkReal x2039=((1.0)*x2027);
evalcond[0]=((((-1.0)*x2036*x2039))+(((-1.0)*r22*x2038))+((x2027*x2029)));
evalcond[1]=(((x2027*x2033))+cj0+(((-1.0)*r12*x2038))+(((-1.0)*x2031*x2039)));
evalcond[2]=(((x2027*x2034))+(((-1.0)*r02*x2038))+(((-1.0)*x2030*x2039))+(((-1.0)*x2035)));
evalcond[3]=((((-1.0)*r22*x2039))+(((-1.0)*cj1*x2032))+((sj1*sj2))+(((-1.0)*x2029*x2038))+((x2028*x2036)));
evalcond[4]=(((x2028*x2030))+(((-1.0)*r02*x2039))+(((-1.0)*cj0*x2037))+(((-1.0)*cj0*sj1*x2032))+(((-1.0)*x2034*x2038)));
evalcond[5]=((((-1.0)*x2035*x2037))+(((-1.0)*r12*x2039))+(((-1.0)*sj0*sj1*x2032))+((x2028*x2031))+(((-1.0)*x2033*x2038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2040=((-1.0)*r11);
IkReal x2042 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2042)==0){
continue;
}
IkReal x2041=pow(x2042,-0.5);
CheckValue<IkReal> x2043 = IKatan2WithCheck(IkReal(x2040),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2043.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2043.value))));
IkReal gconst88=(x2040*x2041);
IkReal gconst89=((1.0)*r10*x2041);
CheckValue<IkReal> x2044 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2044.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2044.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2045=((-1.0)*r11);
CheckValue<IkReal> x2048 = IKatan2WithCheck(IkReal(x2045),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2048.valid){
continue;
}
IkReal x2046=((1.0)*(x2048.value));
IkReal x2047=x2041;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2046)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2046)));
IkReal gconst88=(x2045*x2047);
IkReal gconst89=((1.0)*r10*x2047);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2049=((-1.0)*r11);
CheckValue<IkReal> x2052 = IKatan2WithCheck(IkReal(x2049),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2052.valid){
continue;
}
IkReal x2050=((1.0)*(x2052.value));
IkReal x2051=x2041;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2050)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2050)));
IkReal gconst88=(x2049*x2051);
IkReal gconst89=((1.0)*r10*x2051);
IkReal x2053=r12*r12;
IkReal x2054=((1.0)*sj0);
IkReal x2055=(cj0*r02);
IkReal x2056=x2041;
j4eval[0]=((IKabs(((((-1.0)*x2054*x2056))+((sj0*x2053*x2056))+((r12*x2055*x2056)))))+(IKabs(((((-1.0)*r12*x2054))+(((-1.0)*x2055))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2057=((-1.0)*r11);
CheckValue<IkReal> x2060 = IKatan2WithCheck(IkReal(x2057),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2060.valid){
continue;
}
IkReal x2058=((1.0)*(x2060.value));
IkReal x2059=x2041;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2058)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2058)));
IkReal gconst88=(x2057*x2059);
IkReal gconst89=((1.0)*r10*x2059);
IkReal x2061=r12*r12;
IkReal x2062=(cj1*cj2*r22);
IkReal x2063=(r22*sj1*sj2);
CheckValue<IkReal> x2067=IKPowWithIntegerCheck(((-1.0)+x2061),-1);
if(!x2067.valid){
continue;
}
IkReal x2064=x2067.value;
if((((1.0)+(((-1.0)*x2061)))) < -0.00001)
continue;
IkReal x2065=IKsqrt(((1.0)+(((-1.0)*x2061))));
IkReal x2066=(r12*x2064*x2065);
j4eval[0]=((IKabs(((((-1.0)*x2063*x2066))+((x2062*x2066)))))+(IKabs((x2063+(((-1.0)*x2062))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2068=(cj1*cj2);
IkReal x2069=(gconst89*r20);
IkReal x2070=(gconst88*r21);
IkReal x2071=(sj1*sj2);
CheckValue<IkReal> x2072 = IKatan2WithCheck(IkReal((((r22*x2071))+(((-1.0)*r22*x2068)))),IkReal((((x2068*x2069))+((x2070*x2071))+(((-1.0)*x2069*x2071))+(((-1.0)*x2068*x2070)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2072.valid){
continue;
}
CheckValue<IkReal> x2073=IKPowWithIntegerCheck(IKsign(((r22*r22)+(x2070*x2070)+(x2069*x2069)+(((-2.0)*x2069*x2070)))),-1);
if(!x2073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2072.value)+(((1.5707963267949)*(x2073.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2074=IKsin(j4);
IkReal x2075=IKcos(j4);
IkReal x2076=((1.0)*sj0);
IkReal x2077=((1.0)*cj2);
IkReal x2078=(gconst89*r20);
IkReal x2079=(gconst89*r10);
IkReal x2080=(gconst89*r00);
IkReal x2081=(cj1*sj2);
IkReal x2082=((1.0)*x2075);
IkReal x2083=((1.0)*x2074);
IkReal x2084=(gconst88*x2074);
evalcond[0]=((((-1.0)*x2078*x2083))+(((-1.0)*r22*x2082))+((r21*x2084)));
evalcond[1]=(cj0+(((-1.0)*r12*x2082))+(((-1.0)*x2079*x2083))+((r11*x2084)));
evalcond[2]=((((-1.0)*r02*x2082))+(((-1.0)*x2076))+((r01*x2084))+(((-1.0)*x2080*x2083)));
evalcond[3]=(((x2075*x2078))+(((-1.0)*r22*x2083))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2082))+(((-1.0)*cj1*x2077)));
evalcond[4]=((((-1.0)*r02*x2083))+(((-1.0)*gconst88*r01*x2082))+(((-1.0)*cj0*x2081))+(((-1.0)*cj0*sj1*x2077))+((x2075*x2080)));
evalcond[5]=(((x2075*x2079))+(((-1.0)*gconst88*r11*x2082))+(((-1.0)*x2076*x2081))+(((-1.0)*r12*x2083))+(((-1.0)*cj2*sj1*x2076)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2085=((1.0)*sj0);
IkReal x2086=((1.0)*cj0);
CheckValue<IkReal> x2087=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2087.valid){
continue;
}
CheckValue<IkReal> x2088 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2086))+(((-1.0)*r12*x2085)))),IkReal(((((-1.0)*gconst88*r11*x2085))+(((-1.0)*gconst88*r01*x2086))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2088.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2087.value)))+(x2088.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2089=IKsin(j4);
IkReal x2090=IKcos(j4);
IkReal x2091=((1.0)*sj0);
IkReal x2092=((1.0)*cj2);
IkReal x2093=(gconst89*r20);
IkReal x2094=(gconst89*r10);
IkReal x2095=(gconst89*r00);
IkReal x2096=(cj1*sj2);
IkReal x2097=((1.0)*x2090);
IkReal x2098=((1.0)*x2089);
IkReal x2099=(gconst88*x2089);
evalcond[0]=((((-1.0)*x2093*x2098))+((r21*x2099))+(((-1.0)*r22*x2097)));
evalcond[1]=(cj0+(((-1.0)*x2094*x2098))+(((-1.0)*r12*x2097))+((r11*x2099)));
evalcond[2]=((((-1.0)*x2091))+((r01*x2099))+(((-1.0)*x2095*x2098))+(((-1.0)*r02*x2097)));
evalcond[3]=((((-1.0)*gconst88*r21*x2097))+((sj1*sj2))+((x2090*x2093))+(((-1.0)*cj1*x2092))+(((-1.0)*r22*x2098)));
evalcond[4]=((((-1.0)*gconst88*r01*x2097))+(((-1.0)*cj0*sj1*x2092))+((x2090*x2095))+(((-1.0)*r02*x2098))+(((-1.0)*cj0*x2096)));
evalcond[5]=((((-1.0)*cj2*sj1*x2091))+(((-1.0)*gconst88*r11*x2097))+(((-1.0)*x2091*x2096))+((x2090*x2094))+(((-1.0)*r12*x2098)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2100=((1.0)*gconst89);
CheckValue<IkReal> x2101 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2100))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2101.valid){
continue;
}
CheckValue<IkReal> x2102=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2100))+(((-1.0)*gconst88*r00)))),-1);
if(!x2102.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2101.value)+(((1.5707963267949)*(x2102.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2103=IKsin(j4);
IkReal x2104=IKcos(j4);
IkReal x2105=((1.0)*sj0);
IkReal x2106=((1.0)*cj2);
IkReal x2107=(gconst89*r20);
IkReal x2108=(gconst89*r10);
IkReal x2109=(gconst89*r00);
IkReal x2110=(cj1*sj2);
IkReal x2111=((1.0)*x2104);
IkReal x2112=((1.0)*x2103);
IkReal x2113=(gconst88*x2103);
evalcond[0]=((((-1.0)*x2107*x2112))+((r21*x2113))+(((-1.0)*r22*x2111)));
evalcond[1]=(cj0+(((-1.0)*x2108*x2112))+(((-1.0)*r12*x2111))+((r11*x2113)));
evalcond[2]=(((r01*x2113))+(((-1.0)*x2105))+(((-1.0)*x2109*x2112))+(((-1.0)*r02*x2111)));
evalcond[3]=(((x2104*x2107))+(((-1.0)*cj1*x2106))+((sj1*sj2))+(((-1.0)*gconst88*r21*x2111))+(((-1.0)*r22*x2112)));
evalcond[4]=(((x2104*x2109))+(((-1.0)*r02*x2112))+(((-1.0)*cj0*x2110))+(((-1.0)*cj0*sj1*x2106))+(((-1.0)*gconst88*r01*x2111)));
evalcond[5]=(((x2104*x2108))+(((-1.0)*gconst88*r11*x2111))+(((-1.0)*r12*x2112))+(((-1.0)*cj2*sj1*x2105))+(((-1.0)*x2105*x2110)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2114=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2114;
j4eval[1]=IKsign(x2114);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2115=((1.0)*cj5);
IkReal x2116=((((-1.0)*r01*x2115))+(((-1.0)*r00*sj5)));
j4eval[0]=x2116;
j4eval[1]=((IKabs(((((-1.0)*r20*x2115))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2116);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2117=cj5*cj5;
IkReal x2118=r11*r11;
IkReal x2119=(r11*sj5);
IkReal x2120=(cj5*r10);
IkReal x2121=(((x2117*(r10*r10)))+(r12*r12)+x2118+(((-1.0)*x2117*x2118))+(((-2.0)*x2119*x2120)));
j4eval[0]=x2121;
j4eval[1]=IKsign(x2121);
j4eval[2]=((IKabs(r12))+(IKabs((x2120+(((-1.0)*x2119))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2122=cj5*cj5;
IkReal x2123=r11*r11;
IkReal x2124=(cj5*r10);
IkReal x2125=(r11*sj5);
CheckValue<IkReal> x2126=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x2122*(r10*r10)))+x2123+(((-1.0)*x2122*x2123))+(((-2.0)*x2124*x2125)))),-1);
if(!x2126.valid){
continue;
}
CheckValue<IkReal> x2127 = IKatan2WithCheck(IkReal((x2124+(((-1.0)*x2125)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2127.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2126.value)))+(x2127.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2128=IKsin(j4);
IkReal x2129=IKcos(j4);
IkReal x2130=(cj5*r10);
IkReal x2131=(r01*sj5);
IkReal x2132=((1.0)*cj2);
IkReal x2133=(cj5*r00);
IkReal x2134=(cj5*r20);
IkReal x2135=((1.0)*x2129);
IkReal x2136=((1.0)*x2128);
IkReal x2137=(sj5*x2128);
evalcond[0]=((((-1.0)*r22*x2135))+((r21*x2137))+(((-1.0)*x2134*x2136)));
evalcond[1]=(((x2128*x2131))+(((-1.0)*x2133*x2136))+(((-1.0)*r02*x2135)));
evalcond[2]=((((-1.0)*r12*x2136))+(((-1.0)*r11*sj5*x2135))+((x2129*x2130)));
evalcond[3]=((1.0)+(((-1.0)*r12*x2135))+((r11*x2137))+(((-1.0)*x2130*x2136)));
evalcond[4]=((((-1.0)*r22*x2136))+((sj1*sj2))+(((-1.0)*cj1*x2132))+(((-1.0)*r21*sj5*x2135))+((x2129*x2134)));
evalcond[5]=((((-1.0)*sj1*x2132))+(((-1.0)*cj1*sj2))+((x2129*x2133))+(((-1.0)*x2131*x2135))+(((-1.0)*r02*x2136)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2138=((1.0)*cj5);
CheckValue<IkReal> x2139 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2139.valid){
continue;
}
CheckValue<IkReal> x2140=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2138))+(((-1.0)*r00*sj5)))),-1);
if(!x2140.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2139.value)+(((1.5707963267949)*(x2140.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2141=IKsin(j4);
IkReal x2142=IKcos(j4);
IkReal x2143=(cj5*r10);
IkReal x2144=(r01*sj5);
IkReal x2145=((1.0)*cj2);
IkReal x2146=(cj5*r00);
IkReal x2147=(cj5*r20);
IkReal x2148=((1.0)*x2142);
IkReal x2149=((1.0)*x2141);
IkReal x2150=(sj5*x2141);
evalcond[0]=((((-1.0)*r22*x2148))+((r21*x2150))+(((-1.0)*x2147*x2149)));
evalcond[1]=((((-1.0)*r02*x2148))+((x2141*x2144))+(((-1.0)*x2146*x2149)));
evalcond[2]=((((-1.0)*r11*sj5*x2148))+((x2142*x2143))+(((-1.0)*r12*x2149)));
evalcond[3]=((1.0)+(((-1.0)*x2143*x2149))+(((-1.0)*r12*x2148))+((r11*x2150)));
evalcond[4]=(((sj1*sj2))+((x2142*x2147))+(((-1.0)*r22*x2149))+(((-1.0)*cj1*x2145))+(((-1.0)*r21*sj5*x2148)));
evalcond[5]=((((-1.0)*x2144*x2148))+(((-1.0)*r02*x2149))+(((-1.0)*sj1*x2145))+(((-1.0)*cj1*sj2))+((x2142*x2146)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2151=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2151.valid){
continue;
}
CheckValue<IkReal> x2152 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2152.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2151.value)))+(x2152.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2153=IKsin(j4);
IkReal x2154=IKcos(j4);
IkReal x2155=(cj5*r10);
IkReal x2156=(r01*sj5);
IkReal x2157=((1.0)*cj2);
IkReal x2158=(cj5*r00);
IkReal x2159=(cj5*r20);
IkReal x2160=((1.0)*x2154);
IkReal x2161=((1.0)*x2153);
IkReal x2162=(sj5*x2153);
evalcond[0]=(((r21*x2162))+(((-1.0)*x2159*x2161))+(((-1.0)*r22*x2160)));
evalcond[1]=((((-1.0)*x2158*x2161))+((x2153*x2156))+(((-1.0)*r02*x2160)));
evalcond[2]=((((-1.0)*r11*sj5*x2160))+((x2154*x2155))+(((-1.0)*r12*x2161)));
evalcond[3]=((1.0)+(((-1.0)*x2155*x2161))+(((-1.0)*r12*x2160))+((r11*x2162)));
evalcond[4]=((((-1.0)*r21*sj5*x2160))+((x2154*x2159))+((sj1*sj2))+(((-1.0)*cj1*x2157))+(((-1.0)*r22*x2161)));
evalcond[5]=(((x2154*x2158))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2157))+(((-1.0)*x2156*x2160))+(((-1.0)*r02*x2161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2163=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2163;
j4eval[1]=IKsign(x2163);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2164=((1.0)*cj5);
IkReal x2165=((((-1.0)*r21*x2164))+(((-1.0)*r20*sj5)));
j4eval[0]=x2165;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2164))))));
j4eval[2]=IKsign(x2165);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2166=cj5*cj5;
IkReal x2167=r11*r11;
IkReal x2168=(cj5*r10);
IkReal x2169=(r11*sj5);
IkReal x2170=((((-1.0)*x2166*(r10*r10)))+((x2166*x2167))+(((-1.0)*(r12*r12)))+(((-1.0)*x2167))+(((2.0)*x2168*x2169)));
j4eval[0]=x2170;
j4eval[1]=((IKabs(r12))+(IKabs((x2168+(((-1.0)*x2169))))));
j4eval[2]=IKsign(x2170);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2171=cj5*cj5;
IkReal x2172=r11*r11;
IkReal x2173=(cj5*r10);
IkReal x2174=(r11*sj5);
CheckValue<IkReal> x2175 = IKatan2WithCheck(IkReal((x2173+(((-1.0)*x2174)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2175.valid){
continue;
}
CheckValue<IkReal> x2176=IKPowWithIntegerCheck(IKsign(((((2.0)*x2173*x2174))+((x2171*x2172))+(((-1.0)*(r12*r12)))+(((-1.0)*x2172))+(((-1.0)*x2171*(r10*r10))))),-1);
if(!x2176.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2175.value)+(((1.5707963267949)*(x2176.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2177=IKsin(j4);
IkReal x2178=IKcos(j4);
IkReal x2179=(cj5*r10);
IkReal x2180=(r01*sj5);
IkReal x2181=(cj5*r00);
IkReal x2182=(cj5*r20);
IkReal x2183=((1.0)*x2178);
IkReal x2184=((1.0)*x2177);
IkReal x2185=(sj5*x2177);
evalcond[0]=(((r21*x2185))+(((-1.0)*r22*x2183))+(((-1.0)*x2182*x2184)));
evalcond[1]=(((x2177*x2180))+(((-1.0)*r02*x2183))+(((-1.0)*x2181*x2184)));
evalcond[2]=((((-1.0)*r11*sj5*x2183))+((x2178*x2179))+(((-1.0)*r12*x2184)));
evalcond[3]=((-1.0)+((r11*x2185))+(((-1.0)*x2179*x2184))+(((-1.0)*r12*x2183)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2180*x2183))+((cj1*sj2))+((x2178*x2181))+(((-1.0)*r02*x2184)));
evalcond[5]=((((-1.0)*r21*sj5*x2183))+((x2178*x2182))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2186=((1.0)*cj5);
CheckValue<IkReal> x2187 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2186)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2187.valid){
continue;
}
CheckValue<IkReal> x2188=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2186))+(((-1.0)*r20*sj5)))),-1);
if(!x2188.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2187.value)+(((1.5707963267949)*(x2188.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2189=IKsin(j4);
IkReal x2190=IKcos(j4);
IkReal x2191=(cj5*r10);
IkReal x2192=(r01*sj5);
IkReal x2193=(cj5*r00);
IkReal x2194=(cj5*r20);
IkReal x2195=((1.0)*x2190);
IkReal x2196=((1.0)*x2189);
IkReal x2197=(sj5*x2189);
evalcond[0]=((((-1.0)*x2194*x2196))+((r21*x2197))+(((-1.0)*r22*x2195)));
evalcond[1]=((((-1.0)*x2193*x2196))+((x2189*x2192))+(((-1.0)*r02*x2195)));
evalcond[2]=(((x2190*x2191))+(((-1.0)*r12*x2196))+(((-1.0)*r11*sj5*x2195)));
evalcond[3]=((-1.0)+(((-1.0)*x2191*x2196))+((r11*x2197))+(((-1.0)*r12*x2195)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2192*x2195))+((cj1*sj2))+((x2190*x2193))+(((-1.0)*r02*x2196)));
evalcond[5]=((((-1.0)*r21*sj5*x2195))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2190*x2194))+(((-1.0)*r22*x2196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2198 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2198.valid){
continue;
}
CheckValue<IkReal> x2199=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2199.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2198.value)+(((1.5707963267949)*(x2199.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2200=IKsin(j4);
IkReal x2201=IKcos(j4);
IkReal x2202=(cj5*r10);
IkReal x2203=(r01*sj5);
IkReal x2204=(cj5*r00);
IkReal x2205=(cj5*r20);
IkReal x2206=((1.0)*x2201);
IkReal x2207=((1.0)*x2200);
IkReal x2208=(sj5*x2200);
evalcond[0]=((((-1.0)*x2205*x2207))+(((-1.0)*r22*x2206))+((r21*x2208)));
evalcond[1]=((((-1.0)*x2204*x2207))+((x2200*x2203))+(((-1.0)*r02*x2206)));
evalcond[2]=((((-1.0)*r12*x2207))+((x2201*x2202))+(((-1.0)*r11*sj5*x2206)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x2206))+((r11*x2208))+(((-1.0)*x2202*x2207)));
evalcond[4]=((((-1.0)*x2203*x2206))+((cj2*sj1))+((cj1*sj2))+((x2201*x2204))+(((-1.0)*r02*x2207)));
evalcond[5]=((((-1.0)*r22*x2207))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2201*x2205))+(((-1.0)*r21*sj5*x2206)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2209=((-1.0)*r00);
IkReal x2211 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2211)==0){
continue;
}
IkReal x2210=pow(x2211,-0.5);
CheckValue<IkReal> x2212 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2209),IKFAST_ATAN2_MAGTHRESH);
if(!x2212.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2212.value));
IkReal gconst91=(r01*x2210);
IkReal gconst92=(x2209*x2210);
CheckValue<IkReal> x2213 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2213.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2213.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2214=((-1.0)*r00);
IkReal x2215=x2210;
CheckValue<IkReal> x2217 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2214),IKFAST_ATAN2_MAGTHRESH);
if(!x2217.valid){
continue;
}
IkReal x2216=((-1.0)*(x2217.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2216;
IkReal gconst90=x2216;
IkReal gconst91=(r01*x2215);
IkReal gconst92=(x2214*x2215);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2218=((1.0)*sj0);
IkReal x2219=((1.0)*cj0);
CheckValue<IkReal> x2220 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2218))+(((-1.0)*r02*x2219)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r01*x2219))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r11*x2218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2220.valid){
continue;
}
CheckValue<IkReal> x2221=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2220.value)+(((1.5707963267949)*(x2221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2222=IKsin(j4);
IkReal x2223=IKcos(j4);
IkReal x2224=((1.0)*cj2);
IkReal x2225=(gconst92*r00);
IkReal x2226=(gconst92*r20);
IkReal x2227=((1.0)*sj0);
IkReal x2228=(gconst92*r10);
IkReal x2229=(cj1*sj2);
IkReal x2230=((1.0)*x2223);
IkReal x2231=(gconst91*x2222);
IkReal x2232=((1.0)*x2222);
evalcond[0]=((((-1.0)*x2226*x2232))+((r21*x2231))+(((-1.0)*r22*x2230)));
evalcond[1]=(cj0+(((-1.0)*x2228*x2232))+(((-1.0)*r12*x2230))+((r11*x2231)));
evalcond[2]=((((-1.0)*x2225*x2232))+(((-1.0)*r02*x2230))+(((-1.0)*x2227))+((r01*x2231)));
evalcond[3]=((((-1.0)*gconst91*r21*x2230))+((sj1*sj2))+(((-1.0)*r22*x2232))+((x2223*x2226))+(((-1.0)*cj1*x2224)));
evalcond[4]=((((-1.0)*r02*x2232))+(((-1.0)*gconst91*r01*x2230))+(((-1.0)*cj0*x2229))+(((-1.0)*cj0*sj1*x2224))+((x2223*x2225)));
evalcond[5]=((((-1.0)*x2227*x2229))+(((-1.0)*sj0*sj1*x2224))+(((-1.0)*r12*x2232))+(((-1.0)*gconst91*r11*x2230))+((x2223*x2228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2233=((1.0)*gconst92);
CheckValue<IkReal> x2234=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2233)))),-1);
if(!x2234.valid){
continue;
}
CheckValue<IkReal> x2235 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2233))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2235.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2234.value)))+(x2235.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2236=IKsin(j4);
IkReal x2237=IKcos(j4);
IkReal x2238=((1.0)*cj2);
IkReal x2239=(gconst92*r00);
IkReal x2240=(gconst92*r20);
IkReal x2241=((1.0)*sj0);
IkReal x2242=(gconst92*r10);
IkReal x2243=(cj1*sj2);
IkReal x2244=((1.0)*x2237);
IkReal x2245=(gconst91*x2236);
IkReal x2246=((1.0)*x2236);
evalcond[0]=((((-1.0)*r22*x2244))+(((-1.0)*x2240*x2246))+((r21*x2245)));
evalcond[1]=(cj0+((r11*x2245))+(((-1.0)*r12*x2244))+(((-1.0)*x2242*x2246)));
evalcond[2]=((((-1.0)*r02*x2244))+((r01*x2245))+(((-1.0)*x2241))+(((-1.0)*x2239*x2246)));
evalcond[3]=((((-1.0)*cj1*x2238))+(((-1.0)*r22*x2246))+((sj1*sj2))+(((-1.0)*gconst91*r21*x2244))+((x2237*x2240)));
evalcond[4]=((((-1.0)*r02*x2246))+((x2237*x2239))+(((-1.0)*cj0*x2243))+(((-1.0)*cj0*sj1*x2238))+(((-1.0)*gconst91*r01*x2244)));
evalcond[5]=((((-1.0)*sj0*sj1*x2238))+(((-1.0)*gconst91*r11*x2244))+(((-1.0)*x2241*x2243))+(((-1.0)*r12*x2246))+((x2237*x2242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2247=((-1.0)*r01);
IkReal x2249 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2249)==0){
continue;
}
IkReal x2248=pow(x2249,-0.5);
CheckValue<IkReal> x2250 = IKatan2WithCheck(IkReal(x2247),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2250.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2250.value))));
IkReal gconst94=(x2247*x2248);
IkReal gconst95=((1.0)*r00*x2248);
CheckValue<IkReal> x2251 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2251.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2251.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2252=((-1.0)*r01);
CheckValue<IkReal> x2255 = IKatan2WithCheck(IkReal(x2252),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2255.valid){
continue;
}
IkReal x2253=((1.0)*(x2255.value));
IkReal x2254=x2248;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2253)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2253)));
IkReal gconst94=(x2252*x2254);
IkReal gconst95=((1.0)*r00*x2254);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2256=((-1.0)*r01);
CheckValue<IkReal> x2259 = IKatan2WithCheck(IkReal(x2256),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2259.valid){
continue;
}
IkReal x2257=((1.0)*(x2259.value));
IkReal x2258=x2248;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2257)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2257)));
IkReal gconst94=(x2256*x2258);
IkReal gconst95=((1.0)*r00*x2258);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2260=((-1.0)*r01);
CheckValue<IkReal> x2263 = IKatan2WithCheck(IkReal(x2260),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2263.valid){
continue;
}
IkReal x2261=((1.0)*(x2263.value));
IkReal x2262=x2248;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2261)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2261)));
IkReal gconst94=(x2260*x2262);
IkReal gconst95=((1.0)*r00*x2262);
IkReal x2264=r02*r02;
IkReal x2265=(r12*sj0);
IkReal x2266=((1.0)*cj0);
IkReal x2267=x2248;
j4eval[0]=((IKabs(((((-1.0)*r02*x2266))+(((-1.0)*x2265)))))+(IKabs((((r02*x2265*x2267))+((cj0*x2264*x2267))+(((-1.0)*x2266*x2267))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2268=((1.0)*sj0);
IkReal x2269=((1.0)*cj0);
CheckValue<IkReal> x2270=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2270.valid){
continue;
}
CheckValue<IkReal> x2271 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2269))+(((-1.0)*r12*x2268)))),IkReal(((((-1.0)*gconst94*r01*x2269))+((gconst95*r10*sj0))+(((-1.0)*gconst94*r11*x2268))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2271.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2270.value)))+(x2271.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2272=IKsin(j4);
IkReal x2273=IKcos(j4);
IkReal x2274=(gconst94*r11);
IkReal x2275=((1.0)*cj2);
IkReal x2276=(gconst94*r21);
IkReal x2277=((1.0)*sj0);
IkReal x2278=(gconst94*r01);
IkReal x2279=(cj1*sj2);
IkReal x2280=((1.0)*x2273);
IkReal x2281=(gconst95*x2273);
IkReal x2282=((1.0)*x2272);
IkReal x2283=(gconst95*x2282);
evalcond[0]=(((x2272*x2276))+(((-1.0)*r20*x2283))+(((-1.0)*r22*x2280)));
evalcond[1]=(cj0+(((-1.0)*r12*x2280))+(((-1.0)*r10*x2283))+((x2272*x2274)));
evalcond[2]=((((-1.0)*r02*x2280))+((x2272*x2278))+(((-1.0)*x2277))+(((-1.0)*r00*x2283)));
evalcond[3]=((((-1.0)*x2276*x2280))+(((-1.0)*cj1*x2275))+((r20*x2281))+((sj1*sj2))+(((-1.0)*r22*x2282)));
evalcond[4]=((((-1.0)*r02*x2282))+(((-1.0)*cj0*sj1*x2275))+(((-1.0)*x2278*x2280))+((r00*x2281))+(((-1.0)*cj0*x2279)));
evalcond[5]=(((r10*x2281))+(((-1.0)*r12*x2282))+(((-1.0)*sj0*sj1*x2275))+(((-1.0)*x2274*x2280))+(((-1.0)*x2277*x2279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2284=((1.0)*gconst95);
CheckValue<IkReal> x2285=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r10))+(((-1.0)*r11*x2284)))),-1);
if(!x2285.valid){
continue;
}
CheckValue<IkReal> x2286 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2284)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2285.value)))+(x2286.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2287=IKsin(j4);
IkReal x2288=IKcos(j4);
IkReal x2289=(gconst94*r11);
IkReal x2290=((1.0)*cj2);
IkReal x2291=(gconst94*r21);
IkReal x2292=((1.0)*sj0);
IkReal x2293=(gconst94*r01);
IkReal x2294=(cj1*sj2);
IkReal x2295=((1.0)*x2288);
IkReal x2296=(gconst95*x2288);
IkReal x2297=((1.0)*x2287);
IkReal x2298=(gconst95*x2297);
evalcond[0]=(((x2287*x2291))+(((-1.0)*r22*x2295))+(((-1.0)*r20*x2298)));
evalcond[1]=(cj0+((x2287*x2289))+(((-1.0)*r12*x2295))+(((-1.0)*r10*x2298)));
evalcond[2]=((((-1.0)*r00*x2298))+(((-1.0)*r02*x2295))+((x2287*x2293))+(((-1.0)*x2292)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*x2291*x2295))+((r20*x2296))+(((-1.0)*cj1*x2290))+(((-1.0)*r22*x2297)));
evalcond[4]=((((-1.0)*x2293*x2295))+(((-1.0)*r02*x2297))+(((-1.0)*cj0*x2294))+((r00*x2296))+(((-1.0)*cj0*sj1*x2290)));
evalcond[5]=((((-1.0)*x2289*x2295))+((r10*x2296))+(((-1.0)*x2292*x2294))+(((-1.0)*sj0*sj1*x2290))+(((-1.0)*r12*x2297)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2299=((1.0)*gconst95);
CheckValue<IkReal> x2300=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2299)))),-1);
if(!x2300.valid){
continue;
}
CheckValue<IkReal> x2301 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2299))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2301.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2300.value)))+(x2301.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2302=IKsin(j4);
IkReal x2303=IKcos(j4);
IkReal x2304=(gconst94*r11);
IkReal x2305=((1.0)*cj2);
IkReal x2306=(gconst94*r21);
IkReal x2307=((1.0)*sj0);
IkReal x2308=(gconst94*r01);
IkReal x2309=(cj1*sj2);
IkReal x2310=((1.0)*x2303);
IkReal x2311=(gconst95*x2303);
IkReal x2312=((1.0)*x2302);
IkReal x2313=(gconst95*x2312);
evalcond[0]=((((-1.0)*r20*x2313))+(((-1.0)*r22*x2310))+((x2302*x2306)));
evalcond[1]=(cj0+(((-1.0)*r10*x2313))+(((-1.0)*r12*x2310))+((x2302*x2304)));
evalcond[2]=((((-1.0)*x2307))+(((-1.0)*r02*x2310))+(((-1.0)*r00*x2313))+((x2302*x2308)));
evalcond[3]=((((-1.0)*r22*x2312))+((sj1*sj2))+(((-1.0)*cj1*x2305))+((r20*x2311))+(((-1.0)*x2306*x2310)));
evalcond[4]=((((-1.0)*cj0*x2309))+(((-1.0)*cj0*sj1*x2305))+(((-1.0)*x2308*x2310))+((r00*x2311))+(((-1.0)*r02*x2312)));
evalcond[5]=(((r10*x2311))+(((-1.0)*sj0*sj1*x2305))+(((-1.0)*x2304*x2310))+(((-1.0)*r12*x2312))+(((-1.0)*x2307*x2309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2314=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2314;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x2314);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2315=((1.0)*cj5);
IkReal x2316=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2315)));
j4eval[0]=x2316;
j4eval[1]=((IKabs(((((-1.0)*r20*x2315))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2316);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x2317=cj5*cj5;
IkReal x2318=r01*r01;
IkReal x2319=(r01*sj5);
IkReal x2320=(cj5*r00);
IkReal x2321=((((-1.0)*x2318))+((x2317*x2318))+(((-1.0)*(r02*r02)))+(((2.0)*x2319*x2320))+(((-1.0)*x2317*(r00*r00))));
j4eval[0]=x2321;
j4eval[1]=IKsign(x2321);
j4eval[2]=((IKabs(((((-1.0)*x2319))+x2320)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2322=cj5*cj5;
IkReal x2323=r01*r01;
IkReal x2324=(r01*sj5);
IkReal x2325=(cj5*r00);
CheckValue<IkReal> x2326=IKPowWithIntegerCheck(IKsign(((((2.0)*x2324*x2325))+((x2322*x2323))+(((-1.0)*(r02*r02)))+(((-1.0)*x2322*(r00*r00)))+(((-1.0)*x2323)))),-1);
if(!x2326.valid){
continue;
}
CheckValue<IkReal> x2327 = IKatan2WithCheck(IkReal((x2325+(((-1.0)*x2324)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2327.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2326.value)))+(x2327.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2328=IKsin(j4);
IkReal x2329=IKcos(j4);
IkReal x2330=(cj5*r10);
IkReal x2331=(r01*sj5);
IkReal x2332=((1.0)*cj2);
IkReal x2333=(cj5*r00);
IkReal x2334=(cj5*r20);
IkReal x2335=((1.0)*x2329);
IkReal x2336=((1.0)*x2328);
IkReal x2337=(sj5*x2328);
evalcond[0]=(((r21*x2337))+(((-1.0)*r22*x2335))+(((-1.0)*x2334*x2336)));
evalcond[1]=(((r11*x2337))+(((-1.0)*r12*x2335))+(((-1.0)*x2330*x2336)));
evalcond[2]=((((-1.0)*x2331*x2335))+((x2329*x2333))+(((-1.0)*r02*x2336)));
evalcond[3]=((-1.0)+(((-1.0)*x2333*x2336))+(((-1.0)*r02*x2335))+((x2328*x2331)));
evalcond[4]=((((-1.0)*r22*x2336))+((x2329*x2334))+((sj1*sj2))+(((-1.0)*cj1*x2332))+(((-1.0)*r21*sj5*x2335)));
evalcond[5]=(((x2329*x2330))+(((-1.0)*cj1*sj2))+(((-1.0)*r11*sj5*x2335))+(((-1.0)*sj1*x2332))+(((-1.0)*r12*x2336)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2338=((1.0)*cj5);
CheckValue<IkReal> x2339 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2339.valid){
continue;
}
CheckValue<IkReal> x2340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2338)))),-1);
if(!x2340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2339.value)+(((1.5707963267949)*(x2340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2341=IKsin(j4);
IkReal x2342=IKcos(j4);
IkReal x2343=(cj5*r10);
IkReal x2344=(r01*sj5);
IkReal x2345=((1.0)*cj2);
IkReal x2346=(cj5*r00);
IkReal x2347=(cj5*r20);
IkReal x2348=((1.0)*x2342);
IkReal x2349=((1.0)*x2341);
IkReal x2350=(sj5*x2341);
evalcond[0]=((((-1.0)*r22*x2348))+((r21*x2350))+(((-1.0)*x2347*x2349)));
evalcond[1]=(((r11*x2350))+(((-1.0)*x2343*x2349))+(((-1.0)*r12*x2348)));
evalcond[2]=((((-1.0)*x2344*x2348))+(((-1.0)*r02*x2349))+((x2342*x2346)));
evalcond[3]=((-1.0)+(((-1.0)*x2346*x2349))+((x2341*x2344))+(((-1.0)*r02*x2348)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x2345))+(((-1.0)*r22*x2349))+(((-1.0)*r21*sj5*x2348))+((x2342*x2347)));
evalcond[5]=((((-1.0)*r11*sj5*x2348))+(((-1.0)*sj1*x2345))+(((-1.0)*cj1*sj2))+((x2342*x2343))+(((-1.0)*r12*x2349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2351=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2351.valid){
continue;
}
CheckValue<IkReal> x2352 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2352.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2351.value)))+(x2352.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2353=IKsin(j4);
IkReal x2354=IKcos(j4);
IkReal x2355=(cj5*r10);
IkReal x2356=(r01*sj5);
IkReal x2357=((1.0)*cj2);
IkReal x2358=(cj5*r00);
IkReal x2359=(cj5*r20);
IkReal x2360=((1.0)*x2354);
IkReal x2361=((1.0)*x2353);
IkReal x2362=(sj5*x2353);
evalcond[0]=((((-1.0)*x2359*x2361))+(((-1.0)*r22*x2360))+((r21*x2362)));
evalcond[1]=(((r11*x2362))+(((-1.0)*x2355*x2361))+(((-1.0)*r12*x2360)));
evalcond[2]=(((x2354*x2358))+(((-1.0)*x2356*x2360))+(((-1.0)*r02*x2361)));
evalcond[3]=((-1.0)+((x2353*x2356))+(((-1.0)*x2358*x2361))+(((-1.0)*r02*x2360)));
evalcond[4]=((((-1.0)*r21*sj5*x2360))+((x2354*x2359))+((sj1*sj2))+(((-1.0)*cj1*x2357))+(((-1.0)*r22*x2361)));
evalcond[5]=((((-1.0)*r11*sj5*x2360))+((x2354*x2355))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x2357))+(((-1.0)*r12*x2361)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2363=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x2363;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x2363);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2364=((1.0)*cj5);
IkReal x2365=((((-1.0)*r21*x2364))+(((-1.0)*r20*sj5)));
j4eval[0]=x2365;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x2364))+((r11*sj5))))));
j4eval[2]=IKsign(x2365);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x2366=cj5*cj5;
IkReal x2367=r01*r01;
IkReal x2368=(cj5*r00);
IkReal x2369=(r01*sj5);
IkReal x2370=(x2367+(((-1.0)*x2366*x2367))+((x2366*(r00*r00)))+(r02*r02)+(((-2.0)*x2368*x2369)));
j4eval[0]=x2370;
j4eval[1]=((IKabs(r02))+(IKabs((x2368+(((-1.0)*x2369))))));
j4eval[2]=IKsign(x2370);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2371=cj5*cj5;
IkReal x2372=r01*r01;
IkReal x2373=(r01*sj5);
IkReal x2374=(cj5*r00);
CheckValue<IkReal> x2375 = IKatan2WithCheck(IkReal((x2374+(((-1.0)*x2373)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x2375.valid){
continue;
}
CheckValue<IkReal> x2376=IKPowWithIntegerCheck(IKsign((x2372+((x2371*(r00*r00)))+(((-2.0)*x2373*x2374))+(r02*r02)+(((-1.0)*x2371*x2372)))),-1);
if(!x2376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2375.value)+(((1.5707963267949)*(x2376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2377=IKsin(j4);
IkReal x2378=IKcos(j4);
IkReal x2379=(cj5*r10);
IkReal x2380=(r01*sj5);
IkReal x2381=(cj5*r00);
IkReal x2382=(cj5*r20);
IkReal x2383=((1.0)*x2378);
IkReal x2384=((1.0)*x2377);
IkReal x2385=(sj5*x2377);
evalcond[0]=((((-1.0)*x2382*x2384))+(((-1.0)*r22*x2383))+((r21*x2385)));
evalcond[1]=((((-1.0)*r12*x2383))+(((-1.0)*x2379*x2384))+((r11*x2385)));
evalcond[2]=((((-1.0)*x2380*x2383))+(((-1.0)*r02*x2384))+((x2378*x2381)));
evalcond[3]=((1.0)+(((-1.0)*x2381*x2384))+(((-1.0)*r02*x2383))+((x2377*x2380)));
evalcond[4]=((((-1.0)*r12*x2384))+(((-1.0)*r11*sj5*x2383))+((cj2*sj1))+((x2378*x2379))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r21*sj5*x2383))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2384))+((x2378*x2382)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2386=((1.0)*cj5);
CheckValue<IkReal> x2387=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2386))+(((-1.0)*r20*sj5)))),-1);
if(!x2387.valid){
continue;
}
CheckValue<IkReal> x2388 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x2386))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2387.value)))+(x2388.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2389=IKsin(j4);
IkReal x2390=IKcos(j4);
IkReal x2391=(cj5*r10);
IkReal x2392=(r01*sj5);
IkReal x2393=(cj5*r00);
IkReal x2394=(cj5*r20);
IkReal x2395=((1.0)*x2390);
IkReal x2396=((1.0)*x2389);
IkReal x2397=(sj5*x2389);
evalcond[0]=((((-1.0)*r22*x2395))+(((-1.0)*x2394*x2396))+((r21*x2397)));
evalcond[1]=((((-1.0)*x2391*x2396))+((r11*x2397))+(((-1.0)*r12*x2395)));
evalcond[2]=((((-1.0)*r02*x2396))+((x2390*x2393))+(((-1.0)*x2392*x2395)));
evalcond[3]=((1.0)+(((-1.0)*r02*x2395))+((x2389*x2392))+(((-1.0)*x2393*x2396)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2390*x2391))+(((-1.0)*r11*sj5*x2395))+(((-1.0)*r12*x2396)));
evalcond[5]=((((-1.0)*r21*sj5*x2395))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x2390*x2394))+(((-1.0)*r22*x2396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2398 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2398.valid){
continue;
}
CheckValue<IkReal> x2399=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x2399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2398.value)+(((1.5707963267949)*(x2399.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2400=IKsin(j4);
IkReal x2401=IKcos(j4);
IkReal x2402=(cj5*r10);
IkReal x2403=(r01*sj5);
IkReal x2404=(cj5*r00);
IkReal x2405=(cj5*r20);
IkReal x2406=((1.0)*x2401);
IkReal x2407=((1.0)*x2400);
IkReal x2408=(sj5*x2400);
evalcond[0]=((((-1.0)*x2405*x2407))+((r21*x2408))+(((-1.0)*r22*x2406)));
evalcond[1]=(((r11*x2408))+(((-1.0)*x2402*x2407))+(((-1.0)*r12*x2406)));
evalcond[2]=((((-1.0)*x2403*x2406))+((x2401*x2404))+(((-1.0)*r02*x2407)));
evalcond[3]=((1.0)+(((-1.0)*x2404*x2407))+(((-1.0)*r02*x2406))+((x2400*x2403)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x2401*x2402))+(((-1.0)*r11*sj5*x2406))+(((-1.0)*r12*x2407)));
evalcond[5]=((((-1.0)*r21*sj5*x2406))+(((-1.0)*cj1*cj2))+((x2401*x2405))+((sj1*sj2))+(((-1.0)*r22*x2407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2409=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2409);
rxp1_1=(px*r21);
rxp1_2=(r11*x2409);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2410=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2410);
rxp1_1=(px*r21);
rxp1_2=(r11*x2410);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2411=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x2411);
rxp1_1=(px*r21);
rxp1_2=(r11*x2411);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2414=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x2414.valid){
continue;
}
IkReal x2412=x2414.value;
IkReal x2413=(sj0*x2412);
cj4array[0]=(((cj1*sj2*x2413))+((cj2*sj1*x2413)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2415=IKsin(j4);
IkReal x2416=IKcos(j4);
IkReal x2417=(cj5*r20);
IkReal x2418=(r21*sj5);
IkReal x2419=((1.0)*x2415);
IkReal x2420=((1.0)*x2416);
evalcond[0]=((-1.0)*r02*x2415);
evalcond[1]=((((-1.0)*r02*x2420))+(((-1.0)*sj0)));
evalcond[2]=((((-1.0)*x2417*x2419))+((x2415*x2418)));
evalcond[3]=((((-1.0)*cj5*r10*x2419))+((r11*sj5*x2415)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x2416*x2417))+(((-1.0)*x2418*x2420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2422=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x2422.valid){
continue;
}
IkReal x2421=x2422.value;
cj4array[0]=(((cj1*cj2*x2421))+(((-1.0)*sj1*sj2*x2421)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2423=IKsin(j4);
IkReal x2424=IKcos(j4);
IkReal x2425=(r11*sj5);
IkReal x2426=((1.0)*sj0);
IkReal x2427=((1.0)*x2424);
IkReal x2428=((1.0)*cj5*x2423);
evalcond[0]=((-1.0)*r02*x2423);
evalcond[1]=((((-1.0)*r02*x2427))+(((-1.0)*x2426)));
evalcond[2]=((((-1.0)*r20*x2428))+((r21*sj5*x2423)));
evalcond[3]=(((x2423*x2425))+(((-1.0)*r10*x2428)));
evalcond[4]=((((-1.0)*cj1*sj2*x2426))+((cj5*r10*x2424))+(((-1.0)*x2425*x2427))+(((-1.0)*cj2*sj1*x2426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x2429=IKPowWithIntegerCheck(r02,-1);
if(!x2429.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x2429.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x2430=IKsin(j4);
IkReal x2431=IKcos(j4);
IkReal x2432=((1.0)*sj0);
IkReal x2433=(cj5*x2431);
IkReal x2434=(sj5*x2430);
IkReal x2435=((1.0)*sj5*x2431);
IkReal x2436=((1.0)*cj5*x2430);
evalcond[0]=((-1.0)*r02*x2430);
evalcond[1]=(((r21*x2434))+(((-1.0)*r20*x2436)));
evalcond[2]=(((r11*x2434))+(((-1.0)*r10*x2436)));
evalcond[3]=(((r20*x2433))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x2435)));
evalcond[4]=((((-1.0)*cj1*sj2*x2432))+(((-1.0)*r11*x2435))+((r10*x2433))+(((-1.0)*cj2*sj1*x2432)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2437=((1.0)*sj0);
IkReal x2438=((1.0)*cj0);
CheckValue<IkReal> x2439 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2438))+(((-1.0)*r12*x2437)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2438))+(((-1.0)*r11*sj5*x2437)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2439.valid){
continue;
}
CheckValue<IkReal> x2440=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x2440.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2439.value)+(((1.5707963267949)*(x2440.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2441=IKsin(j4);
IkReal x2442=IKcos(j4);
IkReal x2443=(cj5*r10);
IkReal x2444=(r01*sj5);
IkReal x2445=((1.0)*cj2);
IkReal x2446=(cj5*r00);
IkReal x2447=((1.0)*sj0);
IkReal x2448=(cj5*r20);
IkReal x2449=(cj1*sj2);
IkReal x2450=((1.0)*x2442);
IkReal x2451=((1.0)*x2441);
IkReal x2452=(sj5*x2441);
evalcond[0]=((((-1.0)*x2448*x2451))+(((-1.0)*r22*x2450))+((r21*x2452)));
evalcond[1]=(cj0+(((-1.0)*r12*x2450))+((r11*x2452))+(((-1.0)*x2443*x2451)));
evalcond[2]=((((-1.0)*x2446*x2451))+(((-1.0)*x2447))+(((-1.0)*r02*x2450))+((x2441*x2444)));
evalcond[3]=(((x2442*x2448))+((sj1*sj2))+(((-1.0)*r22*x2451))+(((-1.0)*cj1*x2445))+(((-1.0)*r21*sj5*x2450)));
evalcond[4]=(((x2442*x2446))+(((-1.0)*cj0*x2449))+(((-1.0)*x2444*x2450))+(((-1.0)*cj0*sj1*x2445))+(((-1.0)*r02*x2451)));
evalcond[5]=(((x2442*x2443))+(((-1.0)*r11*sj5*x2450))+(((-1.0)*r12*x2451))+(((-1.0)*x2447*x2449))+(((-1.0)*sj0*sj1*x2445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2453=((1.0)*cj5);
CheckValue<IkReal> x2454=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x2453)))),-1);
if(!x2454.valid){
continue;
}
CheckValue<IkReal> x2455 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x2453)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2455.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2454.value)))+(x2455.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2456=IKsin(j4);
IkReal x2457=IKcos(j4);
IkReal x2458=(cj5*r10);
IkReal x2459=(r01*sj5);
IkReal x2460=((1.0)*cj2);
IkReal x2461=(cj5*r00);
IkReal x2462=((1.0)*sj0);
IkReal x2463=(cj5*r20);
IkReal x2464=(cj1*sj2);
IkReal x2465=((1.0)*x2457);
IkReal x2466=((1.0)*x2456);
IkReal x2467=(sj5*x2456);
evalcond[0]=((((-1.0)*r22*x2465))+(((-1.0)*x2463*x2466))+((r21*x2467)));
evalcond[1]=(cj0+(((-1.0)*r12*x2465))+((r11*x2467))+(((-1.0)*x2458*x2466)));
evalcond[2]=(((x2456*x2459))+(((-1.0)*x2462))+(((-1.0)*r02*x2465))+(((-1.0)*x2461*x2466)));
evalcond[3]=((((-1.0)*r22*x2466))+((sj1*sj2))+(((-1.0)*cj1*x2460))+((x2457*x2463))+(((-1.0)*r21*sj5*x2465)));
evalcond[4]=((((-1.0)*cj0*sj1*x2460))+(((-1.0)*cj0*x2464))+((x2457*x2461))+(((-1.0)*r02*x2466))+(((-1.0)*x2459*x2465)));
evalcond[5]=((((-1.0)*sj0*sj1*x2460))+(((-1.0)*r11*sj5*x2465))+(((-1.0)*r12*x2466))+((x2457*x2458))+(((-1.0)*x2462*x2464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2468=((1.0)*cj5);
CheckValue<IkReal> x2469 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2469.valid){
continue;
}
CheckValue<IkReal> x2470=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2468))+(((-1.0)*r00*sj5)))),-1);
if(!x2470.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2469.value)+(((1.5707963267949)*(x2470.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2471=IKsin(j4);
IkReal x2472=IKcos(j4);
IkReal x2473=(cj5*r10);
IkReal x2474=(r01*sj5);
IkReal x2475=((1.0)*cj2);
IkReal x2476=(cj5*r00);
IkReal x2477=((1.0)*sj0);
IkReal x2478=(cj5*r20);
IkReal x2479=(cj1*sj2);
IkReal x2480=((1.0)*x2472);
IkReal x2481=((1.0)*x2471);
IkReal x2482=(sj5*x2471);
evalcond[0]=((((-1.0)*r22*x2480))+((r21*x2482))+(((-1.0)*x2478*x2481)));
evalcond[1]=(cj0+((r11*x2482))+(((-1.0)*x2473*x2481))+(((-1.0)*r12*x2480)));
evalcond[2]=(((x2471*x2474))+(((-1.0)*x2476*x2481))+(((-1.0)*x2477))+(((-1.0)*r02*x2480)));
evalcond[3]=((((-1.0)*r22*x2481))+(((-1.0)*r21*sj5*x2480))+((sj1*sj2))+((x2472*x2478))+(((-1.0)*cj1*x2475)));
evalcond[4]=((((-1.0)*cj0*sj1*x2475))+(((-1.0)*cj0*x2479))+(((-1.0)*r02*x2481))+(((-1.0)*x2474*x2480))+((x2472*x2476)));
evalcond[5]=((((-1.0)*x2477*x2479))+(((-1.0)*r11*sj5*x2480))+(((-1.0)*sj0*sj1*x2475))+((x2472*x2473))+(((-1.0)*r12*x2481)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2483=cj5*cj5;
IkReal x2484=r21*r21;
IkReal x2485=(sj1*sj2);
IkReal x2486=(r21*sj5);
IkReal x2487=(cj1*cj2);
IkReal x2488=(cj5*r20);
CheckValue<IkReal> x2489=IKPowWithIntegerCheck(IKsign((x2484+(r22*r22)+(((-1.0)*x2483*x2484))+(((-2.0)*x2486*x2488))+((x2483*(r20*r20))))),-1);
if(!x2489.valid){
continue;
}
CheckValue<IkReal> x2490 = IKatan2WithCheck(IkReal((((r22*x2485))+(((-1.0)*r22*x2487)))),IkReal((((x2485*x2486))+((x2487*x2488))+(((-1.0)*x2485*x2488))+(((-1.0)*x2486*x2487)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2490.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2489.value)))+(x2490.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x2491=IKsin(j4);
IkReal x2492=IKcos(j4);
IkReal x2493=(r21*sj5);
IkReal x2494=(cj5*r20);
IkReal x2495=((1.0)*x2492);
IkReal x2496=((1.0)*x2491);
evalcond[0]=((((-1.0)*x2494*x2496))+((x2491*x2493))+(((-1.0)*r22*x2495)));
evalcond[1]=(((x2492*x2494))+(((-1.0)*x2493*x2495))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x2496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2497=(cj5*sj4);
IkReal x2498=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2497))+((r01*x2498)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x2498))+((cj4*r12))+((r10*x2497)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2497))+((r01*x2498))))+IKsqr(((((-1.0)*r11*x2498))+((cj4*r12))+((r10*x2497))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+(((-1.0)*r00*x2497))+((r01*x2498))), ((((-1.0)*r11*x2498))+((cj4*r12))+((r10*x2497))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x2499=IKcos(j0);
IkReal x2500=IKsin(j0);
IkReal x2501=(cj4*cj5);
IkReal x2502=(cj5*r01);
IkReal x2503=((1.0)*cj1);
IkReal x2504=((0.39225)*sj1);
IkReal x2505=(r11*sj5);
IkReal x2506=((1.0)*sj4);
IkReal x2507=((0.39225)*cj2);
IkReal x2508=((1.0)*sj1);
IkReal x2509=(r00*sj5);
IkReal x2510=(cj5*r11);
IkReal x2511=((1.0)*cj4);
IkReal x2512=(r01*sj5);
IkReal x2513=(r10*sj5);
IkReal x2514=(sj2*x2499);
IkReal x2515=(sj2*x2500);
IkReal x2516=(cj1*x2499);
IkReal x2517=(cj1*x2500);
IkReal x2518=(cj2*x2499);
IkReal x2519=(cj2*x2500);
evalcond[0]=(x2499+(((-1.0)*cj5*r10*x2506))+((sj4*x2505))+(((-1.0)*r12*x2511)));
evalcond[1]=(((sj4*x2512))+(((-1.0)*x2500))+(((-1.0)*r02*x2511))+(((-1.0)*cj5*r00*x2506)));
evalcond[2]=(x2509+x2502+(((-1.0)*x2503*x2518))+((sj1*x2514)));
evalcond[3]=(x2510+x2513+(((-1.0)*x2503*x2519))+((sj1*x2515)));
evalcond[4]=((((-1.0)*x2508*x2518))+(((-1.0)*r02*x2506))+(((-1.0)*x2503*x2514))+(((-1.0)*x2511*x2512))+((r00*x2501)));
evalcond[5]=((((-1.0)*x2508*x2519))+(((-1.0)*x2503*x2515))+((r10*x2501))+(((-1.0)*r12*x2506))+(((-1.0)*x2505*x2511)));
evalcond[6]=((((-0.10915)*x2500))+(((0.425)*x2516))+(((-1.0)*x2504*x2514))+(((-1.0)*px))+(((-0.09465)*x2509))+(((-0.09465)*x2502))+((x2507*x2516)));
evalcond[7]=((((0.10915)*x2499))+(((0.425)*x2517))+(((-1.0)*x2504*x2515))+(((-1.0)*py))+(((-0.09465)*x2510))+(((-0.09465)*x2513))+((x2507*x2517)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x2520=((1.0)*cj5);
IkReal x2521=((1.0)*sj5);
CheckValue<IkReal> x2522=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x2522.valid){
continue;
}
CheckValue<IkReal> x2523 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x2520))+(((-1.0)*r10*x2521)))),IkReal(((((-1.0)*r00*x2521))+(((-1.0)*r01*x2520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2523.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2522.value)))+(x2523.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x2524=IKcos(j0);
IkReal x2525=IKsin(j0);
IkReal x2526=(cj5*r01);
IkReal x2527=(cj5*r11);
IkReal x2528=(r00*sj5);
IkReal x2529=(sj1*sj2);
IkReal x2530=((0.39225)*cj2);
IkReal x2531=((1.0)*cj2);
IkReal x2532=(r10*sj5);
IkReal x2533=((0.39225)*x2529);
IkReal x2534=(cj1*x2524);
IkReal x2535=(cj1*x2525);
evalcond[0]=(x2526+x2528+(((-1.0)*x2531*x2534))+((x2524*x2529)));
evalcond[1]=(x2527+x2532+(((-1.0)*x2531*x2535))+((x2525*x2529)));
evalcond[2]=(((x2530*x2534))+(((-0.09465)*x2526))+(((-0.09465)*x2528))+(((-1.0)*x2524*x2533))+(((-1.0)*px))+(((0.425)*x2534))+(((-0.10915)*x2525)));
evalcond[3]=(((x2530*x2535))+(((-1.0)*x2525*x2533))+(((-0.09465)*x2527))+(((0.10915)*x2524))+(((-1.0)*py))+(((0.425)*x2535))+(((-0.09465)*x2532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2536=((1.0)*cj5);
IkReal x2537=((((-1.0)*r01*x2536))+(((-1.0)*r00*sj5)));
j4eval[0]=x2537;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x2536)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x2537);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2538=((1.0)*cj5);
IkReal x2539=((((-1.0)*r10*sj5))+(((-1.0)*r11*x2538)));
j4eval[0]=x2539;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x2538))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x2539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x2540=((1.0)*sj0);
IkReal x2541=((1.0)*cj0);
IkReal x2542=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x2542;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x2541))+(((-1.0)*r11*sj5*x2540)))))+(IKabs(((((-1.0)*r12*x2540))+(((-1.0)*r02*x2541))))));
j4eval[2]=IKsign(x2542);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x2543=((-1.0)*r20);
IkReal x2545 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2545)==0){
continue;
}
IkReal x2544=pow(x2545,-0.5);
CheckValue<IkReal> x2546 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2543),IKFAST_ATAN2_MAGTHRESH);
if(!x2546.valid){
continue;
}
IkReal gconst78=((-1.0)*(x2546.value));
IkReal gconst79=(r21*x2544);
IkReal gconst80=(x2543*x2544);
CheckValue<IkReal> x2547 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2547.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2547.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2548=((-1.0)*r20);
IkReal x2549=x2544;
CheckValue<IkReal> x2551 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2548),IKFAST_ATAN2_MAGTHRESH);
if(!x2551.valid){
continue;
}
IkReal x2550=((-1.0)*(x2551.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2550;
IkReal gconst78=x2550;
IkReal gconst79=(r21*x2549);
IkReal gconst80=(x2548*x2549);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2552=((-1.0)*r20);
IkReal x2553=x2544;
CheckValue<IkReal> x2555 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2552),IKFAST_ATAN2_MAGTHRESH);
if(!x2555.valid){
continue;
}
IkReal x2554=((-1.0)*(x2555.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2554;
IkReal gconst78=x2554;
IkReal gconst79=(r21*x2553);
IkReal gconst80=(x2552*x2553);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x2556=((-1.0)*r20);
IkReal x2557=x2544;
CheckValue<IkReal> x2559 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x2556),IKFAST_ATAN2_MAGTHRESH);
if(!x2559.valid){
continue;
}
IkReal x2558=((-1.0)*(x2559.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst79;
cj5=gconst80;
j5=x2558;
IkReal gconst78=x2558;
IkReal gconst79=(r21*x2557);
IkReal gconst80=(x2556*x2557);
IkReal x2560=r22*r22;
CheckValue<IkReal> x2563=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x2560))),-1);
if(!x2563.valid){
continue;
}
IkReal x2561=x2563.value;
IkReal x2562=(x2560+((x2561*(r21*r21*r21*r21)))+(((2.0)*x2561*(r20*r20)*(r21*r21)))+((x2561*(r20*r20*r20*r20))));
j4eval[0]=x2562;
j4eval[1]=IKsign(x2562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2564=(sj1*sj2);
IkReal x2565=(gconst80*r20);
IkReal x2566=(gconst79*r21);
IkReal x2567=(cj1*cj2);
CheckValue<IkReal> x2568=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x2565*x2566))+(x2566*x2566)+(x2565*x2565))),-1);
if(!x2568.valid){
continue;
}
CheckValue<IkReal> x2569 = IKatan2WithCheck(IkReal((((r22*x2564))+(((-1.0)*r22*x2567)))),IkReal(((((-1.0)*x2564*x2565))+((x2565*x2567))+(((-1.0)*x2566*x2567))+((x2564*x2566)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2568.value)))+(x2569.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2570=IKsin(j4);
IkReal x2571=IKcos(j4);
IkReal x2572=(gconst79*r01);
IkReal x2573=(gconst79*r21);
IkReal x2574=((1.0)*cj2);
IkReal x2575=(gconst79*r11);
IkReal x2576=((1.0)*sj0);
IkReal x2577=(cj1*sj2);
IkReal x2578=((1.0)*x2571);
IkReal x2579=(gconst80*x2571);
IkReal x2580=((1.0)*x2570);
IkReal x2581=(gconst80*x2580);
evalcond[0]=((((-1.0)*r20*x2581))+(((-1.0)*r22*x2578))+((x2570*x2573)));
evalcond[1]=((((-1.0)*r12*x2578))+cj0+(((-1.0)*r10*x2581))+((x2570*x2575)));
evalcond[2]=((((-1.0)*r00*x2581))+(((-1.0)*x2576))+(((-1.0)*r02*x2578))+((x2570*x2572)));
evalcond[3]=(((sj1*sj2))+((r20*x2579))+(((-1.0)*x2573*x2578))+(((-1.0)*cj1*x2574))+(((-1.0)*r22*x2580)));
evalcond[4]=((((-1.0)*r02*x2580))+(((-1.0)*cj0*x2577))+((r00*x2579))+(((-1.0)*x2572*x2578))+(((-1.0)*cj0*sj1*x2574)));
evalcond[5]=((((-1.0)*x2575*x2578))+((r10*x2579))+(((-1.0)*sj0*sj1*x2574))+(((-1.0)*r12*x2580))+(((-1.0)*x2576*x2577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2582=((1.0)*gconst80);
CheckValue<IkReal> x2583 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2582))+((gconst79*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2583.valid){
continue;
}
CheckValue<IkReal> x2584=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst79*r10))+(((-1.0)*r11*x2582)))),-1);
if(!x2584.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2583.value)+(((1.5707963267949)*(x2584.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2585=IKsin(j4);
IkReal x2586=IKcos(j4);
IkReal x2587=(gconst79*r01);
IkReal x2588=(gconst79*r21);
IkReal x2589=((1.0)*cj2);
IkReal x2590=(gconst79*r11);
IkReal x2591=((1.0)*sj0);
IkReal x2592=(cj1*sj2);
IkReal x2593=((1.0)*x2586);
IkReal x2594=(gconst80*x2586);
IkReal x2595=((1.0)*x2585);
IkReal x2596=(gconst80*x2595);
evalcond[0]=((((-1.0)*r22*x2593))+(((-1.0)*r20*x2596))+((x2585*x2588)));
evalcond[1]=(cj0+(((-1.0)*r12*x2593))+((x2585*x2590))+(((-1.0)*r10*x2596)));
evalcond[2]=((((-1.0)*r00*x2596))+(((-1.0)*r02*x2593))+(((-1.0)*x2591))+((x2585*x2587)));
evalcond[3]=((((-1.0)*cj1*x2589))+(((-1.0)*r22*x2595))+((sj1*sj2))+((r20*x2594))+(((-1.0)*x2588*x2593)));
evalcond[4]=(((r00*x2594))+(((-1.0)*cj0*x2592))+(((-1.0)*r02*x2595))+(((-1.0)*x2587*x2593))+(((-1.0)*cj0*sj1*x2589)));
evalcond[5]=((((-1.0)*x2590*x2593))+(((-1.0)*sj0*sj1*x2589))+((r10*x2594))+(((-1.0)*x2591*x2592))+(((-1.0)*r12*x2595)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2597=((1.0)*gconst80);
CheckValue<IkReal> x2598 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst79*r21))+(((-1.0)*cj0*r20*x2597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2598.valid){
continue;
}
CheckValue<IkReal> x2599=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2597))+(((-1.0)*gconst79*r00)))),-1);
if(!x2599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2598.value)+(((1.5707963267949)*(x2599.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2600=IKsin(j4);
IkReal x2601=IKcos(j4);
IkReal x2602=(gconst79*r01);
IkReal x2603=(gconst79*r21);
IkReal x2604=((1.0)*cj2);
IkReal x2605=(gconst79*r11);
IkReal x2606=((1.0)*sj0);
IkReal x2607=(cj1*sj2);
IkReal x2608=((1.0)*x2601);
IkReal x2609=(gconst80*x2601);
IkReal x2610=((1.0)*x2600);
IkReal x2611=(gconst80*x2610);
evalcond[0]=(((x2600*x2603))+(((-1.0)*r22*x2608))+(((-1.0)*r20*x2611)));
evalcond[1]=(cj0+((x2600*x2605))+(((-1.0)*r12*x2608))+(((-1.0)*r10*x2611)));
evalcond[2]=((((-1.0)*r00*x2611))+((x2600*x2602))+(((-1.0)*r02*x2608))+(((-1.0)*x2606)));
evalcond[3]=(((r20*x2609))+((sj1*sj2))+(((-1.0)*r22*x2610))+(((-1.0)*cj1*x2604))+(((-1.0)*x2603*x2608)));
evalcond[4]=((((-1.0)*cj0*x2607))+(((-1.0)*x2602*x2608))+(((-1.0)*r02*x2610))+(((-1.0)*cj0*sj1*x2604))+((r00*x2609)));
evalcond[5]=((((-1.0)*r12*x2610))+((r10*x2609))+(((-1.0)*sj0*sj1*x2604))+(((-1.0)*x2605*x2608))+(((-1.0)*x2606*x2607)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2612=((-1.0)*r21);
IkReal x2614 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x2614)==0){
continue;
}
IkReal x2613=pow(x2614,-0.5);
CheckValue<IkReal> x2615 = IKatan2WithCheck(IkReal(x2612),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2615.valid){
continue;
}
IkReal gconst81=((3.14159265358979)+(((-1.0)*(x2615.value))));
IkReal gconst82=(x2612*x2613);
IkReal gconst83=((1.0)*r20*x2613);
CheckValue<IkReal> x2616 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2616.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2616.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x2617=((-1.0)*r21);
CheckValue<IkReal> x2620 = IKatan2WithCheck(IkReal(x2617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2620.valid){
continue;
}
IkReal x2618=((1.0)*(x2620.value));
IkReal x2619=x2613;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2618)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2618)));
IkReal gconst82=(x2617*x2619);
IkReal gconst83=((1.0)*r20*x2619);
IkReal x2621=r22*r22;
IkReal x2622=((1.0)*x2621);
CheckValue<IkReal> x2626=IKPowWithIntegerCheck(((-1.0)+x2621),-1);
if(!x2626.valid){
continue;
}
IkReal x2623=x2626.value;
if((((1.0)+(((-1.0)*x2622)))) < -0.00001)
continue;
IkReal x2624=IKsqrt(((1.0)+(((-1.0)*x2622))));
IkReal x2625=(cj0*x2623*x2624);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x2622*x2625))+x2625))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2627=((-1.0)*r21);
CheckValue<IkReal> x2630 = IKatan2WithCheck(IkReal(x2627),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2630.valid){
continue;
}
IkReal x2628=((1.0)*(x2630.value));
IkReal x2629=x2613;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2628)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2628)));
IkReal gconst82=(x2627*x2629);
IkReal gconst83=((1.0)*r20*x2629);
IkReal x2631=r22*r22;
IkReal x2632=((1.0)*x2631);
CheckValue<IkReal> x2636=IKPowWithIntegerCheck(((-1.0)+x2631),-1);
if(!x2636.valid){
continue;
}
IkReal x2633=x2636.value;
if((((1.0)+(((-1.0)*x2632)))) < -0.00001)
continue;
IkReal x2634=IKsqrt(((1.0)+(((-1.0)*x2632))));
IkReal x2635=(sj0*x2633*x2634);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x2632*x2635))+x2635))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2637=((-1.0)*r21);
CheckValue<IkReal> x2640 = IKatan2WithCheck(IkReal(x2637),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x2640.valid){
continue;
}
IkReal x2638=((1.0)*(x2640.value));
IkReal x2639=x2613;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst82;
cj5=gconst83;
j5=((3.14159265)+(((-1.0)*x2638)));
IkReal gconst81=((3.14159265358979)+(((-1.0)*x2638)));
IkReal gconst82=(x2637*x2639);
IkReal gconst83=((1.0)*r20*x2639);
IkReal x2641=r22*r22;
IkReal x2642=(r12*sj0);
IkReal x2643=(cj0*r02);
CheckValue<IkReal> x2647=IKPowWithIntegerCheck(((-1.0)+x2641),-1);
if(!x2647.valid){
continue;
}
IkReal x2644=x2647.value;
if((((1.0)+(((-1.0)*x2641)))) < -0.00001)
continue;
IkReal x2645=IKsqrt(((1.0)+(((-1.0)*x2641))));
IkReal x2646=(r22*x2644*x2645);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x2642))+(((-1.0)*x2643)))))+(IKabs((((x2642*x2646))+((x2643*x2646))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2648=((1.0)*sj0);
IkReal x2649=((1.0)*cj0);
CheckValue<IkReal> x2650=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst82*r20))+(((-1.0)*gconst83*r21)))),-1);
if(!x2650.valid){
continue;
}
CheckValue<IkReal> x2651 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x2648))+(((-1.0)*r02*x2649)))),IkReal(((((-1.0)*gconst82*r11*x2648))+(((-1.0)*gconst82*r01*x2649))+((gconst83*r10*sj0))+((cj0*gconst83*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2651.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2650.value)))+(x2651.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2652=IKsin(j4);
IkReal x2653=IKcos(j4);
IkReal x2654=(gconst82*r11);
IkReal x2655=((1.0)*cj2);
IkReal x2656=((1.0)*sj0);
IkReal x2657=(cj1*sj2);
IkReal x2658=((1.0)*x2653);
IkReal x2659=(gconst83*x2653);
IkReal x2660=(gconst82*x2652);
IkReal x2661=((1.0)*x2652);
evalcond[0]=((((-1.0)*r22*x2658))+((r21*x2660))+(((-1.0)*gconst83*r20*x2661)));
evalcond[1]=(cj0+(((-1.0)*r12*x2658))+(((-1.0)*gconst83*r10*x2661))+((x2652*x2654)));
evalcond[2]=((((-1.0)*r02*x2658))+(((-1.0)*x2656))+((r01*x2660))+(((-1.0)*gconst83*r00*x2661)));
evalcond[3]=((((-1.0)*cj1*x2655))+((sj1*sj2))+(((-1.0)*gconst82*r21*x2658))+(((-1.0)*r22*x2661))+((r20*x2659)));
evalcond[4]=((((-1.0)*r02*x2661))+(((-1.0)*cj0*sj1*x2655))+(((-1.0)*gconst82*r01*x2658))+((r00*x2659))+(((-1.0)*cj0*x2657)));
evalcond[5]=((((-1.0)*r12*x2661))+((r10*x2659))+(((-1.0)*sj0*sj1*x2655))+(((-1.0)*x2656*x2657))+(((-1.0)*x2654*x2658)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2662=((1.0)*gconst83);
CheckValue<IkReal> x2663 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst82*r21*sj0))+(((-1.0)*r20*sj0*x2662)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2663.valid){
continue;
}
CheckValue<IkReal> x2664=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2662))+(((-1.0)*gconst82*r10)))),-1);
if(!x2664.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2663.value)+(((1.5707963267949)*(x2664.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2665=IKsin(j4);
IkReal x2666=IKcos(j4);
IkReal x2667=(gconst82*r11);
IkReal x2668=((1.0)*cj2);
IkReal x2669=((1.0)*sj0);
IkReal x2670=(cj1*sj2);
IkReal x2671=((1.0)*x2666);
IkReal x2672=(gconst83*x2666);
IkReal x2673=(gconst82*x2665);
IkReal x2674=((1.0)*x2665);
evalcond[0]=(((r21*x2673))+(((-1.0)*r22*x2671))+(((-1.0)*gconst83*r20*x2674)));
evalcond[1]=((((-1.0)*r12*x2671))+cj0+(((-1.0)*gconst83*r10*x2674))+((x2665*x2667)));
evalcond[2]=((((-1.0)*r02*x2671))+(((-1.0)*x2669))+((r01*x2673))+(((-1.0)*gconst83*r00*x2674)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2668))+(((-1.0)*gconst82*r21*x2671))+((r20*x2672))+(((-1.0)*r22*x2674)));
evalcond[4]=((((-1.0)*cj0*x2670))+(((-1.0)*cj0*sj1*x2668))+(((-1.0)*gconst82*r01*x2671))+(((-1.0)*r02*x2674))+((r00*x2672)));
evalcond[5]=((((-1.0)*r12*x2674))+(((-1.0)*sj0*sj1*x2668))+((r10*x2672))+(((-1.0)*x2667*x2671))+(((-1.0)*x2669*x2670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2675=((1.0)*gconst83);
CheckValue<IkReal> x2676=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2675))+(((-1.0)*gconst82*r00)))),-1);
if(!x2676.valid){
continue;
}
CheckValue<IkReal> x2677 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst82*r21))+(((-1.0)*cj0*r20*x2675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2676.value)))+(x2677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2678=IKsin(j4);
IkReal x2679=IKcos(j4);
IkReal x2680=(gconst82*r11);
IkReal x2681=((1.0)*cj2);
IkReal x2682=((1.0)*sj0);
IkReal x2683=(cj1*sj2);
IkReal x2684=((1.0)*x2679);
IkReal x2685=(gconst83*x2679);
IkReal x2686=(gconst82*x2678);
IkReal x2687=((1.0)*x2678);
evalcond[0]=((((-1.0)*gconst83*r20*x2687))+((r21*x2686))+(((-1.0)*r22*x2684)));
evalcond[1]=((((-1.0)*r12*x2684))+cj0+((x2678*x2680))+(((-1.0)*gconst83*r10*x2687)));
evalcond[2]=((((-1.0)*r02*x2684))+((r01*x2686))+(((-1.0)*gconst83*r00*x2687))+(((-1.0)*x2682)));
evalcond[3]=((((-1.0)*cj1*x2681))+((sj1*sj2))+(((-1.0)*r22*x2687))+((r20*x2685))+(((-1.0)*gconst82*r21*x2684)));
evalcond[4]=((((-1.0)*cj0*x2683))+(((-1.0)*r02*x2687))+(((-1.0)*gconst82*r01*x2684))+((r00*x2685))+(((-1.0)*cj0*sj1*x2681)));
evalcond[5]=((((-1.0)*r12*x2687))+((r10*x2685))+(((-1.0)*x2680*x2684))+(((-1.0)*x2682*x2683))+(((-1.0)*sj0*sj1*x2681)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2688=((-1.0)*r10);
IkReal x2690 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2690)==0){
continue;
}
IkReal x2689=pow(x2690,-0.5);
CheckValue<IkReal> x2691 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2688),IKFAST_ATAN2_MAGTHRESH);
if(!x2691.valid){
continue;
}
IkReal gconst84=((-1.0)*(x2691.value));
IkReal gconst85=(r11*x2689);
IkReal gconst86=(x2688*x2689);
CheckValue<IkReal> x2692 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2692.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2692.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2693=((-1.0)*r10);
IkReal x2694=x2689;
CheckValue<IkReal> x2696 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x2693),IKFAST_ATAN2_MAGTHRESH);
if(!x2696.valid){
continue;
}
IkReal x2695=((-1.0)*(x2696.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst85;
cj5=gconst86;
j5=x2695;
IkReal gconst84=x2695;
IkReal gconst85=(r11*x2694);
IkReal gconst86=(x2693*x2694);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2697=((1.0)*sj0);
IkReal x2698=((1.0)*gconst85);
CheckValue<IkReal> x2699 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x2697)))),IkReal((((cj0*gconst86*r00))+(((-1.0)*gconst85*r11*x2697))+(((-1.0)*cj0*r01*x2698))+((gconst86*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2699.valid){
continue;
}
CheckValue<IkReal> x2700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst86*r21))+(((-1.0)*r20*x2698)))),-1);
if(!x2700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2699.value)+(((1.5707963267949)*(x2700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2701=IKsin(j4);
IkReal x2702=IKcos(j4);
IkReal x2703=(gconst85*r21);
IkReal x2704=(gconst86*r00);
IkReal x2705=(gconst86*r10);
IkReal x2706=((1.0)*cj2);
IkReal x2707=(gconst85*r11);
IkReal x2708=(gconst85*r01);
IkReal x2709=((1.0)*sj0);
IkReal x2710=(gconst86*r20);
IkReal x2711=(cj1*sj2);
IkReal x2712=((1.0)*x2702);
IkReal x2713=((1.0)*x2701);
evalcond[0]=((((-1.0)*r22*x2712))+(((-1.0)*x2710*x2713))+((x2701*x2703)));
evalcond[1]=(cj0+(((-1.0)*r12*x2712))+((x2701*x2707))+(((-1.0)*x2705*x2713)));
evalcond[2]=((((-1.0)*x2704*x2713))+(((-1.0)*r02*x2712))+(((-1.0)*x2709))+((x2701*x2708)));
evalcond[3]=(((x2702*x2710))+((sj1*sj2))+(((-1.0)*x2703*x2712))+(((-1.0)*cj1*x2706))+(((-1.0)*r22*x2713)));
evalcond[4]=((((-1.0)*r02*x2713))+(((-1.0)*x2708*x2712))+(((-1.0)*cj0*sj1*x2706))+((x2702*x2704))+(((-1.0)*cj0*x2711)));
evalcond[5]=((((-1.0)*x2709*x2711))+(((-1.0)*sj0*sj1*x2706))+((x2702*x2705))+(((-1.0)*r12*x2713))+(((-1.0)*x2707*x2712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2714=((1.0)*gconst86);
CheckValue<IkReal> x2715=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst85*r00))+(((-1.0)*r01*x2714)))),-1);
if(!x2715.valid){
continue;
}
CheckValue<IkReal> x2716 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2714))+((cj0*gconst85*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2715.value)))+(x2716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2717=IKsin(j4);
IkReal x2718=IKcos(j4);
IkReal x2719=(gconst85*r21);
IkReal x2720=(gconst86*r00);
IkReal x2721=(gconst86*r10);
IkReal x2722=((1.0)*cj2);
IkReal x2723=(gconst85*r11);
IkReal x2724=(gconst85*r01);
IkReal x2725=((1.0)*sj0);
IkReal x2726=(gconst86*r20);
IkReal x2727=(cj1*sj2);
IkReal x2728=((1.0)*x2718);
IkReal x2729=((1.0)*x2717);
evalcond[0]=((((-1.0)*x2726*x2729))+(((-1.0)*r22*x2728))+((x2717*x2719)));
evalcond[1]=(cj0+((x2717*x2723))+(((-1.0)*r12*x2728))+(((-1.0)*x2721*x2729)));
evalcond[2]=(((x2717*x2724))+(((-1.0)*x2720*x2729))+(((-1.0)*x2725))+(((-1.0)*r02*x2728)));
evalcond[3]=((((-1.0)*x2719*x2728))+((sj1*sj2))+(((-1.0)*r22*x2729))+((x2718*x2726))+(((-1.0)*cj1*x2722)));
evalcond[4]=((((-1.0)*x2724*x2728))+((x2718*x2720))+(((-1.0)*cj0*x2727))+(((-1.0)*r02*x2729))+(((-1.0)*cj0*sj1*x2722)));
evalcond[5]=((((-1.0)*x2725*x2727))+(((-1.0)*r12*x2729))+(((-1.0)*x2723*x2728))+((x2718*x2721))+(((-1.0)*sj0*sj1*x2722)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2730=((-1.0)*r11);
IkReal x2732 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x2732)==0){
continue;
}
IkReal x2731=pow(x2732,-0.5);
CheckValue<IkReal> x2733 = IKatan2WithCheck(IkReal(x2730),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2733.valid){
continue;
}
IkReal gconst87=((3.14159265358979)+(((-1.0)*(x2733.value))));
IkReal gconst88=(x2730*x2731);
IkReal gconst89=((1.0)*r10*x2731);
CheckValue<IkReal> x2734 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2734.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2734.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2735=((-1.0)*r11);
CheckValue<IkReal> x2738 = IKatan2WithCheck(IkReal(x2735),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2738.valid){
continue;
}
IkReal x2736=((1.0)*(x2738.value));
IkReal x2737=x2731;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2736)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2736)));
IkReal gconst88=(x2735*x2737);
IkReal gconst89=((1.0)*r10*x2737);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2739=((-1.0)*r11);
CheckValue<IkReal> x2742 = IKatan2WithCheck(IkReal(x2739),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2742.valid){
continue;
}
IkReal x2740=((1.0)*(x2742.value));
IkReal x2741=x2731;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2740)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2740)));
IkReal gconst88=(x2739*x2741);
IkReal gconst89=((1.0)*r10*x2741);
IkReal x2743=r12*r12;
IkReal x2744=((1.0)*sj0);
IkReal x2745=(cj0*r02);
IkReal x2746=x2731;
j4eval[0]=((IKabs(((((-1.0)*r12*x2744))+(((-1.0)*x2745)))))+(IKabs(((((-1.0)*x2744*x2746))+((sj0*x2743*x2746))+((r12*x2745*x2746))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2747=((-1.0)*r11);
CheckValue<IkReal> x2750 = IKatan2WithCheck(IkReal(x2747),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x2750.valid){
continue;
}
IkReal x2748=((1.0)*(x2750.value));
IkReal x2749=x2731;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst88;
cj5=gconst89;
j5=((3.14159265)+(((-1.0)*x2748)));
IkReal gconst87=((3.14159265358979)+(((-1.0)*x2748)));
IkReal gconst88=(x2747*x2749);
IkReal gconst89=((1.0)*r10*x2749);
IkReal x2751=r12*r12;
IkReal x2752=(cj1*cj2*r22);
IkReal x2753=(r22*sj1*sj2);
CheckValue<IkReal> x2757=IKPowWithIntegerCheck(((-1.0)+x2751),-1);
if(!x2757.valid){
continue;
}
IkReal x2754=x2757.value;
if((((1.0)+(((-1.0)*x2751)))) < -0.00001)
continue;
IkReal x2755=IKsqrt(((1.0)+(((-1.0)*x2751))));
IkReal x2756=(r12*x2754*x2755);
j4eval[0]=((IKabs((x2753+(((-1.0)*x2752)))))+(IKabs((((x2752*x2756))+(((-1.0)*x2753*x2756))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2758=(cj1*cj2);
IkReal x2759=(gconst89*r20);
IkReal x2760=(gconst88*r21);
IkReal x2761=(sj1*sj2);
CheckValue<IkReal> x2762 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x2758))+((r22*x2761)))),IkReal(((((-1.0)*x2759*x2761))+((x2758*x2759))+(((-1.0)*x2758*x2760))+((x2760*x2761)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2762.valid){
continue;
}
CheckValue<IkReal> x2763=IKPowWithIntegerCheck(IKsign(((x2760*x2760)+(r22*r22)+(x2759*x2759)+(((-2.0)*x2759*x2760)))),-1);
if(!x2763.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2762.value)+(((1.5707963267949)*(x2763.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2764=IKsin(j4);
IkReal x2765=IKcos(j4);
IkReal x2766=((1.0)*sj0);
IkReal x2767=((1.0)*cj2);
IkReal x2768=(gconst89*r20);
IkReal x2769=(gconst89*r10);
IkReal x2770=(gconst89*r00);
IkReal x2771=(cj1*sj2);
IkReal x2772=((1.0)*x2765);
IkReal x2773=((1.0)*x2764);
IkReal x2774=(gconst88*x2764);
evalcond[0]=((((-1.0)*x2768*x2773))+((r21*x2774))+(((-1.0)*r22*x2772)));
evalcond[1]=(((r11*x2774))+cj0+(((-1.0)*x2769*x2773))+(((-1.0)*r12*x2772)));
evalcond[2]=(((r01*x2774))+(((-1.0)*r02*x2772))+(((-1.0)*x2770*x2773))+(((-1.0)*x2766)));
evalcond[3]=(((sj1*sj2))+((x2765*x2768))+(((-1.0)*gconst88*r21*x2772))+(((-1.0)*cj1*x2767))+(((-1.0)*r22*x2773)));
evalcond[4]=((((-1.0)*cj0*x2771))+(((-1.0)*r02*x2773))+(((-1.0)*gconst88*r01*x2772))+(((-1.0)*cj0*sj1*x2767))+((x2765*x2770)));
evalcond[5]=((((-1.0)*x2766*x2771))+(((-1.0)*gconst88*r11*x2772))+(((-1.0)*r12*x2773))+(((-1.0)*cj2*sj1*x2766))+((x2765*x2769)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2775=((1.0)*sj0);
IkReal x2776=((1.0)*cj0);
CheckValue<IkReal> x2777 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2776))+(((-1.0)*r12*x2775)))),IkReal(((((-1.0)*gconst88*r11*x2775))+(((-1.0)*gconst88*r01*x2776))+((cj0*gconst89*r00))+((gconst89*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2777.valid){
continue;
}
CheckValue<IkReal> x2778=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst88*r20))+(((-1.0)*gconst89*r21)))),-1);
if(!x2778.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2777.value)+(((1.5707963267949)*(x2778.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2779=IKsin(j4);
IkReal x2780=IKcos(j4);
IkReal x2781=((1.0)*sj0);
IkReal x2782=((1.0)*cj2);
IkReal x2783=(gconst89*r20);
IkReal x2784=(gconst89*r10);
IkReal x2785=(gconst89*r00);
IkReal x2786=(cj1*sj2);
IkReal x2787=((1.0)*x2780);
IkReal x2788=((1.0)*x2779);
IkReal x2789=(gconst88*x2779);
evalcond[0]=(((r21*x2789))+(((-1.0)*x2783*x2788))+(((-1.0)*r22*x2787)));
evalcond[1]=((((-1.0)*r12*x2787))+(((-1.0)*x2784*x2788))+cj0+((r11*x2789)));
evalcond[2]=((((-1.0)*x2781))+(((-1.0)*x2785*x2788))+((r01*x2789))+(((-1.0)*r02*x2787)));
evalcond[3]=((((-1.0)*cj1*x2782))+((x2780*x2783))+(((-1.0)*gconst88*r21*x2787))+((sj1*sj2))+(((-1.0)*r22*x2788)));
evalcond[4]=(((x2780*x2785))+(((-1.0)*cj0*sj1*x2782))+(((-1.0)*cj0*x2786))+(((-1.0)*gconst88*r01*x2787))+(((-1.0)*r02*x2788)));
evalcond[5]=((((-1.0)*cj2*sj1*x2781))+((x2780*x2784))+(((-1.0)*r12*x2788))+(((-1.0)*x2781*x2786))+(((-1.0)*gconst88*r11*x2787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2790=((1.0)*gconst89);
CheckValue<IkReal> x2791 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2790))+((cj0*gconst88*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2791.valid){
continue;
}
CheckValue<IkReal> x2792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x2790))+(((-1.0)*gconst88*r00)))),-1);
if(!x2792.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2791.value)+(((1.5707963267949)*(x2792.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2793=IKsin(j4);
IkReal x2794=IKcos(j4);
IkReal x2795=((1.0)*sj0);
IkReal x2796=((1.0)*cj2);
IkReal x2797=(gconst89*r20);
IkReal x2798=(gconst89*r10);
IkReal x2799=(gconst89*r00);
IkReal x2800=(cj1*sj2);
IkReal x2801=((1.0)*x2794);
IkReal x2802=((1.0)*x2793);
IkReal x2803=(gconst88*x2793);
evalcond[0]=((((-1.0)*r22*x2801))+(((-1.0)*x2797*x2802))+((r21*x2803)));
evalcond[1]=(cj0+(((-1.0)*r12*x2801))+(((-1.0)*x2798*x2802))+((r11*x2803)));
evalcond[2]=((((-1.0)*x2795))+(((-1.0)*x2799*x2802))+(((-1.0)*r02*x2801))+((r01*x2803)));
evalcond[3]=(((x2794*x2797))+((sj1*sj2))+(((-1.0)*r22*x2802))+(((-1.0)*gconst88*r21*x2801))+(((-1.0)*cj1*x2796)));
evalcond[4]=(((x2794*x2799))+(((-1.0)*cj0*sj1*x2796))+(((-1.0)*gconst88*r01*x2801))+(((-1.0)*r02*x2802))+(((-1.0)*cj0*x2800)));
evalcond[5]=((((-1.0)*gconst88*r11*x2801))+((x2794*x2798))+(((-1.0)*r12*x2802))+(((-1.0)*x2795*x2800))+(((-1.0)*cj2*sj1*x2795)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2804=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x2804;
j4eval[1]=IKsign(x2804);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2805=((1.0)*cj5);
IkReal x2806=((((-1.0)*r01*x2805))+(((-1.0)*r00*sj5)));
j4eval[0]=x2806;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x2805))))));
j4eval[2]=IKsign(x2806);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x2807=cj5*cj5;
IkReal x2808=r11*r11;
IkReal x2809=(r11*sj5);
IkReal x2810=(cj5*r10);
IkReal x2811=((r12*r12)+(((-2.0)*x2809*x2810))+(((-1.0)*x2807*x2808))+((x2807*(r10*r10)))+x2808);
j4eval[0]=x2811;
j4eval[1]=IKsign(x2811);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x2809))+x2810))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2812=cj5*cj5;
IkReal x2813=r11*r11;
IkReal x2814=(cj5*r10);
IkReal x2815=(r11*sj5);
CheckValue<IkReal> x2816 = IKatan2WithCheck(IkReal(((((-1.0)*x2815))+x2814)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2816.valid){
continue;
}
CheckValue<IkReal> x2817=IKPowWithIntegerCheck(IKsign((((x2812*(r10*r10)))+(((-2.0)*x2814*x2815))+(r12*r12)+x2813+(((-1.0)*x2812*x2813)))),-1);
if(!x2817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2816.value)+(((1.5707963267949)*(x2817.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2818=IKsin(j4);
IkReal x2819=IKcos(j4);
IkReal x2820=(cj5*r10);
IkReal x2821=(r01*sj5);
IkReal x2822=((1.0)*cj2);
IkReal x2823=(cj5*r00);
IkReal x2824=(cj5*r20);
IkReal x2825=((1.0)*x2819);
IkReal x2826=((1.0)*x2818);
IkReal x2827=(sj5*x2818);
evalcond[0]=((((-1.0)*x2824*x2826))+((r21*x2827))+(((-1.0)*r22*x2825)));
evalcond[1]=(((x2818*x2821))+(((-1.0)*r02*x2825))+(((-1.0)*x2823*x2826)));
evalcond[2]=((((-1.0)*r12*x2826))+((x2819*x2820))+(((-1.0)*r11*sj5*x2825)));
evalcond[3]=((1.0)+(((-1.0)*x2820*x2826))+(((-1.0)*r12*x2825))+((r11*x2827)));
evalcond[4]=((((-1.0)*cj1*x2822))+((x2819*x2824))+((sj1*sj2))+(((-1.0)*r22*x2826))+(((-1.0)*r21*sj5*x2825)));
evalcond[5]=(((x2819*x2823))+(((-1.0)*x2821*x2825))+(((-1.0)*sj1*x2822))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2828=((1.0)*cj5);
CheckValue<IkReal> x2829=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x2828)))),-1);
if(!x2829.valid){
continue;
}
CheckValue<IkReal> x2830 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x2828)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2830.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2829.value)))+(x2830.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2831=IKsin(j4);
IkReal x2832=IKcos(j4);
IkReal x2833=(cj5*r10);
IkReal x2834=(r01*sj5);
IkReal x2835=((1.0)*cj2);
IkReal x2836=(cj5*r00);
IkReal x2837=(cj5*r20);
IkReal x2838=((1.0)*x2832);
IkReal x2839=((1.0)*x2831);
IkReal x2840=(sj5*x2831);
evalcond[0]=(((r21*x2840))+(((-1.0)*r22*x2838))+(((-1.0)*x2837*x2839)));
evalcond[1]=(((x2831*x2834))+(((-1.0)*x2836*x2839))+(((-1.0)*r02*x2838)));
evalcond[2]=((((-1.0)*r12*x2839))+(((-1.0)*r11*sj5*x2838))+((x2832*x2833)));
evalcond[3]=((1.0)+((r11*x2840))+(((-1.0)*r12*x2838))+(((-1.0)*x2833*x2839)));
evalcond[4]=((((-1.0)*cj1*x2835))+(((-1.0)*r21*sj5*x2838))+((sj1*sj2))+(((-1.0)*r22*x2839))+((x2832*x2837)));
evalcond[5]=((((-1.0)*sj1*x2835))+(((-1.0)*x2834*x2838))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2839))+((x2832*x2836)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2841=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x2841.valid){
continue;
}
CheckValue<IkReal> x2842 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2842.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2841.value)))+(x2842.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2843=IKsin(j4);
IkReal x2844=IKcos(j4);
IkReal x2845=(cj5*r10);
IkReal x2846=(r01*sj5);
IkReal x2847=((1.0)*cj2);
IkReal x2848=(cj5*r00);
IkReal x2849=(cj5*r20);
IkReal x2850=((1.0)*x2844);
IkReal x2851=((1.0)*x2843);
IkReal x2852=(sj5*x2843);
evalcond[0]=(((r21*x2852))+(((-1.0)*x2849*x2851))+(((-1.0)*r22*x2850)));
evalcond[1]=(((x2843*x2846))+(((-1.0)*r02*x2850))+(((-1.0)*x2848*x2851)));
evalcond[2]=((((-1.0)*r11*sj5*x2850))+((x2844*x2845))+(((-1.0)*r12*x2851)));
evalcond[3]=((1.0)+(((-1.0)*x2845*x2851))+((r11*x2852))+(((-1.0)*r12*x2850)));
evalcond[4]=(((x2844*x2849))+((sj1*sj2))+(((-1.0)*r22*x2851))+(((-1.0)*r21*sj5*x2850))+(((-1.0)*cj1*x2847)));
evalcond[5]=((((-1.0)*sj1*x2847))+((x2844*x2848))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x2851))+(((-1.0)*x2846*x2850)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2853=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x2853;
j4eval[1]=IKsign(x2853);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2854=((1.0)*cj5);
IkReal x2855=((((-1.0)*r21*x2854))+(((-1.0)*r20*sj5)));
j4eval[0]=x2855;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x2854))))));
j4eval[2]=IKsign(x2855);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x2856=cj5*cj5;
IkReal x2857=r11*r11;
IkReal x2858=(cj5*r10);
IkReal x2859=(r11*sj5);
IkReal x2860=((((2.0)*x2858*x2859))+(((-1.0)*(r12*r12)))+((x2856*x2857))+(((-1.0)*x2857))+(((-1.0)*x2856*(r10*r10))));
j4eval[0]=x2860;
j4eval[1]=((IKabs(((((-1.0)*x2859))+x2858)))+(IKabs(r12)));
j4eval[2]=IKsign(x2860);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2861=cj5*cj5;
IkReal x2862=r11*r11;
IkReal x2863=(cj5*r10);
IkReal x2864=(r11*sj5);
CheckValue<IkReal> x2865 = IKatan2WithCheck(IkReal(((((-1.0)*x2864))+x2863)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x2865.valid){
continue;
}
CheckValue<IkReal> x2866=IKPowWithIntegerCheck(IKsign(((((2.0)*x2863*x2864))+(((-1.0)*x2862))+((x2861*x2862))+(((-1.0)*x2861*(r10*r10)))+(((-1.0)*(r12*r12))))),-1);
if(!x2866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2865.value)+(((1.5707963267949)*(x2866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2867=IKsin(j4);
IkReal x2868=IKcos(j4);
IkReal x2869=(cj5*r10);
IkReal x2870=(r01*sj5);
IkReal x2871=(cj5*r00);
IkReal x2872=(cj5*r20);
IkReal x2873=((1.0)*x2868);
IkReal x2874=((1.0)*x2867);
IkReal x2875=(sj5*x2867);
evalcond[0]=((((-1.0)*r22*x2873))+((r21*x2875))+(((-1.0)*x2872*x2874)));
evalcond[1]=((((-1.0)*r02*x2873))+(((-1.0)*x2871*x2874))+((x2867*x2870)));
evalcond[2]=((((-1.0)*r11*sj5*x2873))+((x2868*x2869))+(((-1.0)*r12*x2874)));
evalcond[3]=((-1.0)+(((-1.0)*x2869*x2874))+((r11*x2875))+(((-1.0)*r12*x2873)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r02*x2874))+((x2868*x2871))+((cj1*sj2))+(((-1.0)*x2870*x2873)));
evalcond[5]=(((x2868*x2872))+(((-1.0)*r22*x2874))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2873)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2876=((1.0)*cj5);
CheckValue<IkReal> x2877 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x2876)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2877.valid){
continue;
}
CheckValue<IkReal> x2878=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x2876))+(((-1.0)*r20*sj5)))),-1);
if(!x2878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2877.value)+(((1.5707963267949)*(x2878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2879=IKsin(j4);
IkReal x2880=IKcos(j4);
IkReal x2881=(cj5*r10);
IkReal x2882=(r01*sj5);
IkReal x2883=(cj5*r00);
IkReal x2884=(cj5*r20);
IkReal x2885=((1.0)*x2880);
IkReal x2886=((1.0)*x2879);
IkReal x2887=(sj5*x2879);
evalcond[0]=((((-1.0)*r22*x2885))+((r21*x2887))+(((-1.0)*x2884*x2886)));
evalcond[1]=((((-1.0)*x2883*x2886))+(((-1.0)*r02*x2885))+((x2879*x2882)));
evalcond[2]=((((-1.0)*r11*sj5*x2885))+((x2880*x2881))+(((-1.0)*r12*x2886)));
evalcond[3]=((-1.0)+((r11*x2887))+(((-1.0)*r12*x2885))+(((-1.0)*x2881*x2886)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x2882*x2885))+((x2880*x2883))+(((-1.0)*r02*x2886))+((cj1*sj2)));
evalcond[5]=((((-1.0)*r22*x2886))+((x2880*x2884))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2885)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x2888 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2888.valid){
continue;
}
CheckValue<IkReal> x2889=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x2889.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2888.value)+(((1.5707963267949)*(x2889.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2890=IKsin(j4);
IkReal x2891=IKcos(j4);
IkReal x2892=(cj5*r10);
IkReal x2893=(r01*sj5);
IkReal x2894=(cj5*r00);
IkReal x2895=(cj5*r20);
IkReal x2896=((1.0)*x2891);
IkReal x2897=((1.0)*x2890);
IkReal x2898=(sj5*x2890);
evalcond[0]=((((-1.0)*r22*x2896))+(((-1.0)*x2895*x2897))+((r21*x2898)));
evalcond[1]=(((x2890*x2893))+(((-1.0)*r02*x2896))+(((-1.0)*x2894*x2897)));
evalcond[2]=(((x2891*x2892))+(((-1.0)*r11*sj5*x2896))+(((-1.0)*r12*x2897)));
evalcond[3]=((-1.0)+(((-1.0)*x2892*x2897))+((r11*x2898))+(((-1.0)*r12*x2896)));
evalcond[4]=(((x2891*x2894))+((cj2*sj1))+(((-1.0)*r02*x2897))+((cj1*sj2))+(((-1.0)*x2893*x2896)));
evalcond[5]=(((x2891*x2895))+(((-1.0)*r22*x2897))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x2896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2899=((-1.0)*r00);
IkReal x2901 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2901)==0){
continue;
}
IkReal x2900=pow(x2901,-0.5);
CheckValue<IkReal> x2902 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2899),IKFAST_ATAN2_MAGTHRESH);
if(!x2902.valid){
continue;
}
IkReal gconst90=((-1.0)*(x2902.value));
IkReal gconst91=(r01*x2900);
IkReal gconst92=(x2899*x2900);
CheckValue<IkReal> x2903 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2903.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x2903.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x2904=((-1.0)*r00);
IkReal x2905=x2900;
CheckValue<IkReal> x2907 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x2904),IKFAST_ATAN2_MAGTHRESH);
if(!x2907.valid){
continue;
}
IkReal x2906=((-1.0)*(x2907.value));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst91;
cj5=gconst92;
j5=x2906;
IkReal gconst90=x2906;
IkReal gconst91=(r01*x2905);
IkReal gconst92=(x2904*x2905);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2908=((1.0)*sj0);
IkReal x2909=((1.0)*cj0);
CheckValue<IkReal> x2910=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r20))+(((-1.0)*gconst92*r21)))),-1);
if(!x2910.valid){
continue;
}
CheckValue<IkReal> x2911 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2909))+(((-1.0)*r12*x2908)))),IkReal((((cj0*gconst92*r00))+(((-1.0)*gconst91*r11*x2908))+((gconst92*r10*sj0))+(((-1.0)*gconst91*r01*x2909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2910.value)))+(x2911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2912=IKsin(j4);
IkReal x2913=IKcos(j4);
IkReal x2914=((1.0)*cj2);
IkReal x2915=(gconst92*r00);
IkReal x2916=(gconst92*r20);
IkReal x2917=((1.0)*sj0);
IkReal x2918=(gconst92*r10);
IkReal x2919=(cj1*sj2);
IkReal x2920=((1.0)*x2913);
IkReal x2921=(gconst91*x2912);
IkReal x2922=((1.0)*x2912);
evalcond[0]=((((-1.0)*x2916*x2922))+((r21*x2921))+(((-1.0)*r22*x2920)));
evalcond[1]=(cj0+(((-1.0)*x2918*x2922))+(((-1.0)*r12*x2920))+((r11*x2921)));
evalcond[2]=((((-1.0)*r02*x2920))+(((-1.0)*x2915*x2922))+((r01*x2921))+(((-1.0)*x2917)));
evalcond[3]=((((-1.0)*gconst91*r21*x2920))+((sj1*sj2))+(((-1.0)*cj1*x2914))+((x2913*x2916))+(((-1.0)*r22*x2922)));
evalcond[4]=((((-1.0)*cj0*sj1*x2914))+(((-1.0)*r02*x2922))+((x2913*x2915))+(((-1.0)*gconst91*r01*x2920))+(((-1.0)*cj0*x2919)));
evalcond[5]=((((-1.0)*x2917*x2919))+(((-1.0)*r12*x2922))+((x2913*x2918))+(((-1.0)*gconst91*r11*x2920))+(((-1.0)*sj0*sj1*x2914)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2923=((1.0)*gconst92);
CheckValue<IkReal> x2924 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x2923))+((gconst91*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2924.valid){
continue;
}
CheckValue<IkReal> x2925=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst91*r10))+(((-1.0)*r11*x2923)))),-1);
if(!x2925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x2924.value)+(((1.5707963267949)*(x2925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2926=IKsin(j4);
IkReal x2927=IKcos(j4);
IkReal x2928=((1.0)*cj2);
IkReal x2929=(gconst92*r00);
IkReal x2930=(gconst92*r20);
IkReal x2931=((1.0)*sj0);
IkReal x2932=(gconst92*r10);
IkReal x2933=(cj1*sj2);
IkReal x2934=((1.0)*x2927);
IkReal x2935=(gconst91*x2926);
IkReal x2936=((1.0)*x2926);
evalcond[0]=((((-1.0)*x2930*x2936))+((r21*x2935))+(((-1.0)*r22*x2934)));
evalcond[1]=(cj0+(((-1.0)*x2932*x2936))+(((-1.0)*r12*x2934))+((r11*x2935)));
evalcond[2]=(((r01*x2935))+(((-1.0)*x2931))+(((-1.0)*x2929*x2936))+(((-1.0)*r02*x2934)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj1*x2928))+(((-1.0)*r22*x2936))+((x2927*x2930))+(((-1.0)*gconst91*r21*x2934)));
evalcond[4]=((((-1.0)*cj0*x2933))+(((-1.0)*cj0*sj1*x2928))+(((-1.0)*r02*x2936))+((x2927*x2929))+(((-1.0)*gconst91*r01*x2934)));
evalcond[5]=((((-1.0)*x2931*x2933))+(((-1.0)*sj0*sj1*x2928))+(((-1.0)*gconst91*r11*x2934))+(((-1.0)*r12*x2936))+((x2927*x2932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x2937=((-1.0)*r01);
IkReal x2939 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x2939)==0){
continue;
}
IkReal x2938=pow(x2939,-0.5);
CheckValue<IkReal> x2940 = IKatan2WithCheck(IkReal(x2937),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2940.valid){
continue;
}
IkReal gconst93=((3.14159265358979)+(((-1.0)*(x2940.value))));
IkReal gconst94=(x2937*x2938);
IkReal gconst95=((1.0)*r00*x2938);
CheckValue<IkReal> x2941 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2941.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x2941.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x2942=((-1.0)*r01);
CheckValue<IkReal> x2945 = IKatan2WithCheck(IkReal(x2942),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2945.valid){
continue;
}
IkReal x2943=((1.0)*(x2945.value));
IkReal x2944=x2938;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2943)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2943)));
IkReal gconst94=(x2942*x2944);
IkReal gconst95=((1.0)*r00*x2944);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x2946=((-1.0)*r01);
CheckValue<IkReal> x2949 = IKatan2WithCheck(IkReal(x2946),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2949.valid){
continue;
}
IkReal x2947=((1.0)*(x2949.value));
IkReal x2948=x2938;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2947)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2947)));
IkReal gconst94=(x2946*x2948);
IkReal gconst95=((1.0)*r00*x2948);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x2950=((-1.0)*r01);
CheckValue<IkReal> x2953 = IKatan2WithCheck(IkReal(x2950),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x2953.valid){
continue;
}
IkReal x2951=((1.0)*(x2953.value));
IkReal x2952=x2938;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj5=gconst94;
cj5=gconst95;
j5=((3.14159265)+(((-1.0)*x2951)));
IkReal gconst93=((3.14159265358979)+(((-1.0)*x2951)));
IkReal gconst94=(x2950*x2952);
IkReal gconst95=((1.0)*r00*x2952);
IkReal x2954=r02*r02;
IkReal x2955=(r12*sj0);
IkReal x2956=((1.0)*cj0);
IkReal x2957=x2938;
j4eval[0]=((IKabs((((r02*x2955*x2957))+((cj0*x2954*x2957))+(((-1.0)*x2956*x2957)))))+(IKabs(((((-1.0)*x2955))+(((-1.0)*r02*x2956))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2958=((1.0)*sj0);
IkReal x2959=((1.0)*cj0);
CheckValue<IkReal> x2960=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst95*r21))+(((-1.0)*gconst94*r20)))),-1);
if(!x2960.valid){
continue;
}
CheckValue<IkReal> x2961 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x2959))+(((-1.0)*r12*x2958)))),IkReal(((((-1.0)*gconst94*r01*x2959))+(((-1.0)*gconst94*r11*x2958))+((gconst95*r10*sj0))+((cj0*gconst95*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2961.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2960.value)))+(x2961.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2962=IKsin(j4);
IkReal x2963=IKcos(j4);
IkReal x2964=(gconst94*r11);
IkReal x2965=((1.0)*cj2);
IkReal x2966=(gconst94*r21);
IkReal x2967=((1.0)*sj0);
IkReal x2968=(gconst94*r01);
IkReal x2969=(cj1*sj2);
IkReal x2970=((1.0)*x2963);
IkReal x2971=(gconst95*x2963);
IkReal x2972=((1.0)*x2962);
IkReal x2973=(gconst95*x2972);
evalcond[0]=((((-1.0)*r20*x2973))+((x2962*x2966))+(((-1.0)*r22*x2970)));
evalcond[1]=(cj0+(((-1.0)*r12*x2970))+((x2962*x2964))+(((-1.0)*r10*x2973)));
evalcond[2]=((((-1.0)*r02*x2970))+(((-1.0)*r00*x2973))+((x2962*x2968))+(((-1.0)*x2967)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*r22*x2972))+(((-1.0)*cj1*x2965))+((r20*x2971))+(((-1.0)*x2966*x2970)));
evalcond[4]=((((-1.0)*r02*x2972))+(((-1.0)*x2968*x2970))+(((-1.0)*cj0*x2969))+((r00*x2971))+(((-1.0)*cj0*sj1*x2965)));
evalcond[5]=((((-1.0)*r12*x2972))+((r10*x2971))+(((-1.0)*x2967*x2969))+(((-1.0)*x2964*x2970))+(((-1.0)*sj0*sj1*x2965)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2974=((1.0)*gconst95);
CheckValue<IkReal> x2975=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x2974))+(((-1.0)*gconst94*r10)))),-1);
if(!x2975.valid){
continue;
}
CheckValue<IkReal> x2976 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst94*r21*sj0))+(((-1.0)*r20*sj0*x2974)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2975.value)))+(x2976.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2977=IKsin(j4);
IkReal x2978=IKcos(j4);
IkReal x2979=(gconst94*r11);
IkReal x2980=((1.0)*cj2);
IkReal x2981=(gconst94*r21);
IkReal x2982=((1.0)*sj0);
IkReal x2983=(gconst94*r01);
IkReal x2984=(cj1*sj2);
IkReal x2985=((1.0)*x2978);
IkReal x2986=(gconst95*x2978);
IkReal x2987=((1.0)*x2977);
IkReal x2988=(gconst95*x2987);
evalcond[0]=(((x2977*x2981))+(((-1.0)*r20*x2988))+(((-1.0)*r22*x2985)));
evalcond[1]=(((x2977*x2979))+cj0+(((-1.0)*r10*x2988))+(((-1.0)*r12*x2985)));
evalcond[2]=((((-1.0)*r00*x2988))+(((-1.0)*x2982))+((x2977*x2983))+(((-1.0)*r02*x2985)));
evalcond[3]=((((-1.0)*x2981*x2985))+(((-1.0)*cj1*x2980))+((sj1*sj2))+((r20*x2986))+(((-1.0)*r22*x2987)));
evalcond[4]=((((-1.0)*cj0*x2984))+((r00*x2986))+(((-1.0)*cj0*sj1*x2980))+(((-1.0)*x2983*x2985))+(((-1.0)*r02*x2987)));
evalcond[5]=((((-1.0)*x2982*x2984))+(((-1.0)*x2979*x2985))+(((-1.0)*r12*x2987))+(((-1.0)*sj0*sj1*x2980))+((r10*x2986)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x2989=((1.0)*gconst95);
CheckValue<IkReal> x2990=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst94*r00))+(((-1.0)*r01*x2989)))),-1);
if(!x2990.valid){
continue;
}
CheckValue<IkReal> x2991 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x2989))+((cj0*gconst94*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x2991.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x2990.value)))+(x2991.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x2992=IKsin(j4);
IkReal x2993=IKcos(j4);
IkReal x2994=(gconst94*r11);
IkReal x2995=((1.0)*cj2);
IkReal x2996=(gconst94*r21);
IkReal x2997=((1.0)*sj0);
IkReal x2998=(gconst94*r01);
IkReal x2999=(cj1*sj2);
IkReal x3000=((1.0)*x2993);
IkReal x3001=(gconst95*x2993);
IkReal x3002=((1.0)*x2992);
IkReal x3003=(gconst95*x3002);
evalcond[0]=((((-1.0)*r22*x3000))+((x2992*x2996))+(((-1.0)*r20*x3003)));
evalcond[1]=((((-1.0)*r10*x3003))+cj0+((x2992*x2994))+(((-1.0)*r12*x3000)));
evalcond[2]=((((-1.0)*x2997))+(((-1.0)*r02*x3000))+((x2992*x2998))+(((-1.0)*r00*x3003)));
evalcond[3]=((((-1.0)*r22*x3002))+((sj1*sj2))+(((-1.0)*cj1*x2995))+(((-1.0)*x2996*x3000))+((r20*x3001)));
evalcond[4]=((((-1.0)*cj0*x2999))+((r00*x3001))+(((-1.0)*r02*x3002))+(((-1.0)*x2998*x3000))+(((-1.0)*cj0*sj1*x2995)));
evalcond[5]=((((-1.0)*sj0*sj1*x2995))+((r10*x3001))+(((-1.0)*x2994*x3000))+(((-1.0)*x2997*x2999))+(((-1.0)*r12*x3002)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3004=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3004;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x3004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3005=((1.0)*cj5);
IkReal x3006=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3005)));
j4eval[0]=x3006;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x3005))))));
j4eval[2]=IKsign(x3006);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x3007=cj5*cj5;
IkReal x3008=r01*r01;
IkReal x3009=(r01*sj5);
IkReal x3010=(cj5*r00);
IkReal x3011=((((-1.0)*x3008))+(((2.0)*x3009*x3010))+(((-1.0)*x3007*(r00*r00)))+(((-1.0)*(r02*r02)))+((x3007*x3008)));
j4eval[0]=x3011;
j4eval[1]=IKsign(x3011);
j4eval[2]=((IKabs(((((-1.0)*x3009))+x3010)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3012=cj5*cj5;
IkReal x3013=r01*r01;
IkReal x3014=(r01*sj5);
IkReal x3015=(cj5*r00);
CheckValue<IkReal> x3016 = IKatan2WithCheck(IkReal((x3015+(((-1.0)*x3014)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3016.valid){
continue;
}
CheckValue<IkReal> x3017=IKPowWithIntegerCheck(IKsign((((x3012*x3013))+(((-1.0)*(r02*r02)))+(((2.0)*x3014*x3015))+(((-1.0)*x3012*(r00*r00)))+(((-1.0)*x3013)))),-1);
if(!x3017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3016.value)+(((1.5707963267949)*(x3017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3018=IKsin(j4);
IkReal x3019=IKcos(j4);
IkReal x3020=(cj5*r10);
IkReal x3021=(r01*sj5);
IkReal x3022=((1.0)*cj2);
IkReal x3023=(cj5*r00);
IkReal x3024=(cj5*r20);
IkReal x3025=((1.0)*x3019);
IkReal x3026=((1.0)*x3018);
IkReal x3027=(sj5*x3018);
evalcond[0]=(((r21*x3027))+(((-1.0)*x3024*x3026))+(((-1.0)*r22*x3025)));
evalcond[1]=((((-1.0)*r12*x3025))+((r11*x3027))+(((-1.0)*x3020*x3026)));
evalcond[2]=(((x3019*x3023))+(((-1.0)*x3021*x3025))+(((-1.0)*r02*x3026)));
evalcond[3]=((-1.0)+(((-1.0)*x3023*x3026))+((x3018*x3021))+(((-1.0)*r02*x3025)));
evalcond[4]=(((x3019*x3024))+(((-1.0)*cj1*x3022))+((sj1*sj2))+(((-1.0)*r22*x3026))+(((-1.0)*r21*sj5*x3025)));
evalcond[5]=((((-1.0)*r12*x3026))+((x3019*x3020))+(((-1.0)*r11*sj5*x3025))+(((-1.0)*sj1*x3022))+(((-1.0)*cj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3028=((1.0)*cj5);
CheckValue<IkReal> x3029 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3028)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3029.valid){
continue;
}
CheckValue<IkReal> x3030=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3028))+(((-1.0)*r10*sj5)))),-1);
if(!x3030.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3029.value)+(((1.5707963267949)*(x3030.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3031=IKsin(j4);
IkReal x3032=IKcos(j4);
IkReal x3033=(cj5*r10);
IkReal x3034=(r01*sj5);
IkReal x3035=((1.0)*cj2);
IkReal x3036=(cj5*r00);
IkReal x3037=(cj5*r20);
IkReal x3038=((1.0)*x3032);
IkReal x3039=((1.0)*x3031);
IkReal x3040=(sj5*x3031);
evalcond[0]=(((r21*x3040))+(((-1.0)*x3037*x3039))+(((-1.0)*r22*x3038)));
evalcond[1]=((((-1.0)*x3033*x3039))+(((-1.0)*r12*x3038))+((r11*x3040)));
evalcond[2]=((((-1.0)*r02*x3039))+((x3032*x3036))+(((-1.0)*x3034*x3038)));
evalcond[3]=((-1.0)+(((-1.0)*x3036*x3039))+(((-1.0)*r02*x3038))+((x3031*x3034)));
evalcond[4]=((((-1.0)*cj1*x3035))+(((-1.0)*r21*sj5*x3038))+((sj1*sj2))+((x3032*x3037))+(((-1.0)*r22*x3039)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x3039))+((x3032*x3033))+(((-1.0)*r11*sj5*x3038))+(((-1.0)*sj1*x3035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3041=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3041.valid){
continue;
}
CheckValue<IkReal> x3042 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3042.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3041.value)))+(x3042.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3043=IKsin(j4);
IkReal x3044=IKcos(j4);
IkReal x3045=(cj5*r10);
IkReal x3046=(r01*sj5);
IkReal x3047=((1.0)*cj2);
IkReal x3048=(cj5*r00);
IkReal x3049=(cj5*r20);
IkReal x3050=((1.0)*x3044);
IkReal x3051=((1.0)*x3043);
IkReal x3052=(sj5*x3043);
evalcond[0]=(((r21*x3052))+(((-1.0)*r22*x3050))+(((-1.0)*x3049*x3051)));
evalcond[1]=(((r11*x3052))+(((-1.0)*x3045*x3051))+(((-1.0)*r12*x3050)));
evalcond[2]=((((-1.0)*r02*x3051))+(((-1.0)*x3046*x3050))+((x3044*x3048)));
evalcond[3]=((-1.0)+((x3043*x3046))+(((-1.0)*x3048*x3051))+(((-1.0)*r02*x3050)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x3047))+(((-1.0)*r21*sj5*x3050))+((x3044*x3049))+(((-1.0)*r22*x3051)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*r12*x3051))+(((-1.0)*sj1*x3047))+((x3044*x3045))+(((-1.0)*r11*sj5*x3050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3053=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3053;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3054=((1.0)*cj5);
IkReal x3055=((((-1.0)*r21*x3054))+(((-1.0)*r20*sj5)));
j4eval[0]=x3055;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x3054))))));
j4eval[2]=IKsign(x3055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x3056=cj5*cj5;
IkReal x3057=r01*r01;
IkReal x3058=(cj5*r00);
IkReal x3059=(r01*sj5);
IkReal x3060=((((-1.0)*x3056*x3057))+x3057+(r02*r02)+((x3056*(r00*r00)))+(((-2.0)*x3058*x3059)));
j4eval[0]=x3060;
j4eval[1]=((IKabs(r02))+(IKabs((x3058+(((-1.0)*x3059))))));
j4eval[2]=IKsign(x3060);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3061=cj5*cj5;
IkReal x3062=r01*r01;
IkReal x3063=(r01*sj5);
IkReal x3064=(cj5*r00);
CheckValue<IkReal> x3065=IKPowWithIntegerCheck(IKsign((((x3061*(r00*r00)))+x3062+(((-1.0)*x3061*x3062))+(((-2.0)*x3063*x3064))+(r02*r02))),-1);
if(!x3065.valid){
continue;
}
CheckValue<IkReal> x3066 = IKatan2WithCheck(IkReal(((((-1.0)*x3063))+x3064)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x3066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3065.value)))+(x3066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3067=IKsin(j4);
IkReal x3068=IKcos(j4);
IkReal x3069=(cj5*r10);
IkReal x3070=(r01*sj5);
IkReal x3071=(cj5*r00);
IkReal x3072=(cj5*r20);
IkReal x3073=((1.0)*x3068);
IkReal x3074=((1.0)*x3067);
IkReal x3075=(sj5*x3067);
evalcond[0]=((((-1.0)*x3072*x3074))+(((-1.0)*r22*x3073))+((r21*x3075)));
evalcond[1]=((((-1.0)*r12*x3073))+(((-1.0)*x3069*x3074))+((r11*x3075)));
evalcond[2]=((((-1.0)*r02*x3074))+((x3068*x3071))+(((-1.0)*x3070*x3073)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3073))+(((-1.0)*x3071*x3074))+((x3067*x3070)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x3073))+(((-1.0)*r12*x3074))+((x3068*x3069)));
evalcond[5]=((((-1.0)*r21*sj5*x3073))+(((-1.0)*r22*x3074))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3068*x3072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3076=((1.0)*cj5);
CheckValue<IkReal> x3077 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x3076))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3077.valid){
continue;
}
CheckValue<IkReal> x3078=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3076))+(((-1.0)*r20*sj5)))),-1);
if(!x3078.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3077.value)+(((1.5707963267949)*(x3078.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3079=IKsin(j4);
IkReal x3080=IKcos(j4);
IkReal x3081=(cj5*r10);
IkReal x3082=(r01*sj5);
IkReal x3083=(cj5*r00);
IkReal x3084=(cj5*r20);
IkReal x3085=((1.0)*x3080);
IkReal x3086=((1.0)*x3079);
IkReal x3087=(sj5*x3079);
evalcond[0]=(((r21*x3087))+(((-1.0)*r22*x3085))+(((-1.0)*x3084*x3086)));
evalcond[1]=(((r11*x3087))+(((-1.0)*r12*x3085))+(((-1.0)*x3081*x3086)));
evalcond[2]=(((x3080*x3083))+(((-1.0)*x3082*x3085))+(((-1.0)*r02*x3086)));
evalcond[3]=((1.0)+(((-1.0)*x3083*x3086))+(((-1.0)*r02*x3085))+((x3079*x3082)));
evalcond[4]=(((cj2*sj1))+((x3080*x3081))+((cj1*sj2))+(((-1.0)*r12*x3086))+(((-1.0)*r11*sj5*x3085)));
evalcond[5]=(((x3080*x3084))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x3085))+(((-1.0)*r22*x3086)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3088 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3088.valid){
continue;
}
CheckValue<IkReal> x3089=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3089.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3088.value)+(((1.5707963267949)*(x3089.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3090=IKsin(j4);
IkReal x3091=IKcos(j4);
IkReal x3092=(cj5*r10);
IkReal x3093=(r01*sj5);
IkReal x3094=(cj5*r00);
IkReal x3095=(cj5*r20);
IkReal x3096=((1.0)*x3091);
IkReal x3097=((1.0)*x3090);
IkReal x3098=(sj5*x3090);
evalcond[0]=((((-1.0)*r22*x3096))+((r21*x3098))+(((-1.0)*x3095*x3097)));
evalcond[1]=((((-1.0)*r12*x3096))+(((-1.0)*x3092*x3097))+((r11*x3098)));
evalcond[2]=((((-1.0)*r02*x3097))+((x3091*x3094))+(((-1.0)*x3093*x3096)));
evalcond[3]=((1.0)+(((-1.0)*r02*x3096))+((x3090*x3093))+(((-1.0)*x3094*x3097)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r12*x3097))+((cj1*sj2))+((x3091*x3092))+(((-1.0)*r11*sj5*x3096)));
evalcond[5]=((((-1.0)*r22*x3097))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3091*x3095))+(((-1.0)*r21*sj5*x3096)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3099=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3099);
rxp1_1=(px*r21);
rxp1_2=(r11*x3099);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3100=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3100);
rxp1_1=(px*r21);
rxp1_2=(r11*x3100);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3101=((-1.0)*px);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x3101);
rxp1_1=(px*r21);
rxp1_2=(r11*x3101);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3104=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x3104.valid){
continue;
}
IkReal x3102=x3104.value;
IkReal x3103=(sj0*x3102);
cj4array[0]=(((cj1*sj2*x3103))+((cj2*sj1*x3103)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3105=IKsin(j4);
IkReal x3106=IKcos(j4);
IkReal x3107=(cj5*r20);
IkReal x3108=(r21*sj5);
IkReal x3109=((1.0)*x3105);
IkReal x3110=((1.0)*x3106);
evalcond[0]=((-1.0)*r02*x3105);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x3110)));
evalcond[2]=((((-1.0)*x3107*x3109))+((x3105*x3108)));
evalcond[3]=(((r11*sj5*x3105))+(((-1.0)*cj5*r10*x3109)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3108*x3110))+((x3106*x3107)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3112=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x3112.valid){
continue;
}
IkReal x3111=x3112.value;
cj4array[0]=(((cj1*cj2*x3111))+(((-1.0)*sj1*sj2*x3111)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3113=IKsin(j4);
IkReal x3114=IKcos(j4);
IkReal x3115=(r11*sj5);
IkReal x3116=((1.0)*sj0);
IkReal x3117=((1.0)*x3114);
IkReal x3118=((1.0)*cj5*x3113);
evalcond[0]=((-1.0)*r02*x3113);
evalcond[1]=((((-1.0)*r02*x3117))+(((-1.0)*x3116)));
evalcond[2]=((((-1.0)*r20*x3118))+((r21*sj5*x3113)));
evalcond[3]=(((x3113*x3115))+(((-1.0)*r10*x3118)));
evalcond[4]=((((-1.0)*x3115*x3117))+(((-1.0)*cj1*sj2*x3116))+(((-1.0)*cj2*sj1*x3116))+((cj5*r10*x3114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x3119=IKPowWithIntegerCheck(r02,-1);
if(!x3119.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x3119.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x3120=IKsin(j4);
IkReal x3121=IKcos(j4);
IkReal x3122=((1.0)*sj0);
IkReal x3123=(cj5*x3121);
IkReal x3124=(sj5*x3120);
IkReal x3125=((1.0)*sj5*x3121);
IkReal x3126=((1.0)*cj5*x3120);
evalcond[0]=((-1.0)*r02*x3120);
evalcond[1]=((((-1.0)*r20*x3126))+((r21*x3124)));
evalcond[2]=((((-1.0)*r10*x3126))+((r11*x3124)));
evalcond[3]=((((-1.0)*r21*x3125))+((r20*x3123))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*cj2*sj1*x3122))+(((-1.0)*cj1*sj2*x3122))+((r10*x3123))+(((-1.0)*r11*x3125)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3127=((1.0)*sj0);
IkReal x3128=((1.0)*cj0);
CheckValue<IkReal> x3129 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x3128))+(((-1.0)*r12*x3127)))),IkReal(((((-1.0)*r01*sj5*x3128))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x3127)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3129.valid){
continue;
}
CheckValue<IkReal> x3130=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x3130.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3129.value)+(((1.5707963267949)*(x3130.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3131=IKsin(j4);
IkReal x3132=IKcos(j4);
IkReal x3133=(cj5*r10);
IkReal x3134=(r01*sj5);
IkReal x3135=((1.0)*cj2);
IkReal x3136=(cj5*r00);
IkReal x3137=((1.0)*sj0);
IkReal x3138=(cj5*r20);
IkReal x3139=(cj1*sj2);
IkReal x3140=((1.0)*x3132);
IkReal x3141=((1.0)*x3131);
IkReal x3142=(sj5*x3131);
evalcond[0]=((((-1.0)*r22*x3140))+(((-1.0)*x3138*x3141))+((r21*x3142)));
evalcond[1]=((((-1.0)*r12*x3140))+cj0+((r11*x3142))+(((-1.0)*x3133*x3141)));
evalcond[2]=(((x3131*x3134))+(((-1.0)*x3136*x3141))+(((-1.0)*r02*x3140))+(((-1.0)*x3137)));
evalcond[3]=((((-1.0)*r22*x3141))+((x3132*x3138))+((sj1*sj2))+(((-1.0)*r21*sj5*x3140))+(((-1.0)*cj1*x3135)));
evalcond[4]=((((-1.0)*cj0*sj1*x3135))+((x3132*x3136))+(((-1.0)*cj0*x3139))+(((-1.0)*r02*x3141))+(((-1.0)*x3134*x3140)));
evalcond[5]=((((-1.0)*r12*x3141))+((x3132*x3133))+(((-1.0)*x3137*x3139))+(((-1.0)*sj0*sj1*x3135))+(((-1.0)*r11*sj5*x3140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3143=((1.0)*cj5);
CheckValue<IkReal> x3144=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3143))+(((-1.0)*r10*sj5)))),-1);
if(!x3144.valid){
continue;
}
CheckValue<IkReal> x3145 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3143)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3145.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3144.value)))+(x3145.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3146=IKsin(j4);
IkReal x3147=IKcos(j4);
IkReal x3148=(cj5*r10);
IkReal x3149=(r01*sj5);
IkReal x3150=((1.0)*cj2);
IkReal x3151=(cj5*r00);
IkReal x3152=((1.0)*sj0);
IkReal x3153=(cj5*r20);
IkReal x3154=(cj1*sj2);
IkReal x3155=((1.0)*x3147);
IkReal x3156=((1.0)*x3146);
IkReal x3157=(sj5*x3146);
evalcond[0]=((((-1.0)*r22*x3155))+(((-1.0)*x3153*x3156))+((r21*x3157)));
evalcond[1]=((((-1.0)*x3148*x3156))+cj0+((r11*x3157))+(((-1.0)*r12*x3155)));
evalcond[2]=((((-1.0)*x3152))+((x3146*x3149))+(((-1.0)*r02*x3155))+(((-1.0)*x3151*x3156)));
evalcond[3]=((((-1.0)*r22*x3156))+(((-1.0)*cj1*x3150))+((x3147*x3153))+((sj1*sj2))+(((-1.0)*r21*sj5*x3155)));
evalcond[4]=(((x3147*x3151))+(((-1.0)*cj0*sj1*x3150))+(((-1.0)*x3149*x3155))+(((-1.0)*r02*x3156))+(((-1.0)*cj0*x3154)));
evalcond[5]=(((x3147*x3148))+(((-1.0)*sj0*sj1*x3150))+(((-1.0)*r11*sj5*x3155))+(((-1.0)*r12*x3156))+(((-1.0)*x3152*x3154)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3158=((1.0)*cj5);
CheckValue<IkReal> x3159 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3159.valid){
continue;
}
CheckValue<IkReal> x3160=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3158)))),-1);
if(!x3160.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3159.value)+(((1.5707963267949)*(x3160.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3161=IKsin(j4);
IkReal x3162=IKcos(j4);
IkReal x3163=(cj5*r10);
IkReal x3164=(r01*sj5);
IkReal x3165=((1.0)*cj2);
IkReal x3166=(cj5*r00);
IkReal x3167=((1.0)*sj0);
IkReal x3168=(cj5*r20);
IkReal x3169=(cj1*sj2);
IkReal x3170=((1.0)*x3162);
IkReal x3171=((1.0)*x3161);
IkReal x3172=(sj5*x3161);
evalcond[0]=(((r21*x3172))+(((-1.0)*x3168*x3171))+(((-1.0)*r22*x3170)));
evalcond[1]=(((r11*x3172))+(((-1.0)*x3163*x3171))+cj0+(((-1.0)*r12*x3170)));
evalcond[2]=((((-1.0)*x3166*x3171))+((x3161*x3164))+(((-1.0)*r02*x3170))+(((-1.0)*x3167)));
evalcond[3]=((((-1.0)*cj1*x3165))+((x3162*x3168))+((sj1*sj2))+(((-1.0)*r22*x3171))+(((-1.0)*r21*sj5*x3170)));
evalcond[4]=(((x3162*x3166))+(((-1.0)*cj0*sj1*x3165))+(((-1.0)*cj0*x3169))+(((-1.0)*x3164*x3170))+(((-1.0)*r02*x3171)));
evalcond[5]=((((-1.0)*sj0*sj1*x3165))+(((-1.0)*x3167*x3169))+(((-1.0)*r12*x3171))+((x3162*x3163))+(((-1.0)*r11*sj5*x3170)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3173=((((-1.0)*cj1*cj2))+((sj1*sj2)));
j0eval[0]=x3173;
j0eval[1]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
j0eval[2]=IKsign(x3173);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3174=r21*r21;
IkReal x3175=cj5*cj5;
IkReal x3176=(sj1*sj2);
IkReal x3177=(r21*sj5);
IkReal x3178=(cj5*r20);
IkReal x3179=(cj1*cj2);
IkReal x3180=(((x3174*x3175))+(((2.0)*x3177*x3178))+(((-1.0)*x3174))+(((-1.0)*(r22*r22)))+(((-1.0)*x3175*(r20*r20))));
j4eval[0]=x3180;
j4eval[1]=((IKabs((((r22*x3176))+(((-1.0)*r22*x3179)))))+(IKabs(((((-1.0)*x3176*x3178))+((x3176*x3177))+((x3178*x3179))+(((-1.0)*x3177*x3179))))));
j4eval[2]=IKsign(x3180);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[1];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j0eval[0]=((((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(j0eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3181=IKsin(j0);
IkReal x3182=IKcos(j0);
evalcond[0]=((((-0.10915)*x3181))+(((-1.0)*px))+(((0.425)*x3182)));
evalcond[1]=((((-1.0)*py))+(((0.425)*x3181))+(((0.10915)*x3182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3183=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3183;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3183);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3184=((1.0)*cj5);
IkReal x3185=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3184)));
j4eval[0]=x3185;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3184))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3185);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3186=((1.0)*cj5);
IkReal x3187=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3186)));
j4eval[0]=x3187;
j4eval[1]=IKsign(x3187);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3186)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3188=((1.0)*cj5);
CheckValue<IkReal> x3189 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3188)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3189.valid){
continue;
}
CheckValue<IkReal> x3190=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3188)))),-1);
if(!x3190.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3189.value)+(((1.5707963267949)*(x3190.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3191=IKcos(j4);
IkReal x3192=IKsin(j4);
IkReal x3193=((1.0)*sj0);
IkReal x3194=(cj5*r00);
IkReal x3195=(cj5*r10);
IkReal x3196=(cj5*r20);
IkReal x3197=((1.0)*x3191);
IkReal x3198=((1.0)*x3192);
IkReal x3199=(sj5*x3191);
IkReal x3200=(sj5*x3192);
evalcond[0]=((((-1.0)*x3196*x3197))+((r21*x3199))+((r22*x3192)));
evalcond[1]=((((-1.0)*x3196*x3198))+(((-1.0)*r22*x3197))+((r21*x3200)));
evalcond[2]=(cj0+((r11*x3200))+(((-1.0)*r12*x3197))+(((-1.0)*x3195*x3198)));
evalcond[3]=(((r01*x3199))+((r02*x3192))+(((-1.0)*cj0))+(((-1.0)*x3194*x3197)));
evalcond[4]=(((r11*x3199))+((r12*x3192))+(((-1.0)*x3193))+(((-1.0)*x3195*x3197)));
evalcond[5]=(((r01*x3200))+(((-1.0)*r02*x3197))+(((-1.0)*x3193))+(((-1.0)*x3194*x3198)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3201=((1.0)*cj5);
CheckValue<IkReal> x3202=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3201)))),-1);
if(!x3202.valid){
continue;
}
CheckValue<IkReal> x3203 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3201)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3202.value)))+(x3203.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3204=IKcos(j4);
IkReal x3205=IKsin(j4);
IkReal x3206=((1.0)*sj0);
IkReal x3207=(cj5*r00);
IkReal x3208=(cj5*r10);
IkReal x3209=(cj5*r20);
IkReal x3210=((1.0)*x3204);
IkReal x3211=((1.0)*x3205);
IkReal x3212=(sj5*x3204);
IkReal x3213=(sj5*x3205);
evalcond[0]=(((r22*x3205))+(((-1.0)*x3209*x3210))+((r21*x3212)));
evalcond[1]=((((-1.0)*x3209*x3211))+((r21*x3213))+(((-1.0)*r22*x3210)));
evalcond[2]=(cj0+((r11*x3213))+(((-1.0)*r12*x3210))+(((-1.0)*x3208*x3211)));
evalcond[3]=(((r01*x3212))+((r02*x3205))+(((-1.0)*x3207*x3210))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3205))+((r11*x3212))+(((-1.0)*x3206))+(((-1.0)*x3208*x3210)));
evalcond[5]=(((r01*x3213))+(((-1.0)*x3206))+(((-1.0)*r02*x3210))+(((-1.0)*x3207*x3211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3214 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3214.valid){
continue;
}
CheckValue<IkReal> x3215=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3214.value)+(((1.5707963267949)*(x3215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3216=IKcos(j4);
IkReal x3217=IKsin(j4);
IkReal x3218=((1.0)*sj0);
IkReal x3219=(cj5*r00);
IkReal x3220=(cj5*r10);
IkReal x3221=(cj5*r20);
IkReal x3222=((1.0)*x3216);
IkReal x3223=((1.0)*x3217);
IkReal x3224=(sj5*x3216);
IkReal x3225=(sj5*x3217);
evalcond[0]=(((r22*x3217))+((r21*x3224))+(((-1.0)*x3221*x3222)));
evalcond[1]=(((r21*x3225))+(((-1.0)*r22*x3222))+(((-1.0)*x3221*x3223)));
evalcond[2]=(cj0+((r11*x3225))+(((-1.0)*x3220*x3223))+(((-1.0)*r12*x3222)));
evalcond[3]=(((r01*x3224))+(((-1.0)*x3219*x3222))+(((-1.0)*cj0))+((r02*x3217)));
evalcond[4]=(((r11*x3224))+((r12*x3217))+(((-1.0)*x3220*x3222))+(((-1.0)*x3218)));
evalcond[5]=((((-1.0)*r02*x3222))+((r01*x3225))+(((-1.0)*x3219*x3223))+(((-1.0)*x3218)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((2.20734818680435)*px))+(((0.566898951975751)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((2.20734818680435)*px))+(((0.566898951975751)*py))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((2.20734818680435)*px))+(((0.566898951975751)*py))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3226=IKsin(j0);
IkReal x3227=IKcos(j0);
evalcond[0]=((((0.425)*x3227))+(((-1.0)*px))+(((-0.10915)*x3226)));
evalcond[1]=((((0.425)*x3226))+(((-1.0)*py))+(((0.10915)*x3227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3228=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3228;
j4eval[1]=IKsign(x3228);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3229=((1.0)*cj5);
IkReal x3230=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3229)));
j4eval[0]=x3230;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3229)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3230);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3231=cj5*cj5;
IkReal x3232=((1.0)*r20);
IkReal x3233=(r01*r21);
IkReal x3234=(r21*sj5);
IkReal x3235=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x3233))+((x3231*x3233))+((cj5*r00*x3234))+(((-1.0)*r00*x3231*x3232)));
j4eval[0]=x3235;
j4eval[1]=((IKabs((((cj0*x3234))+(((-1.0)*cj0*cj5*x3232)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3235);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3236=cj5*cj5;
IkReal x3237=((1.0)*r20);
IkReal x3238=(r01*r21);
IkReal x3239=(r21*sj5);
CheckValue<IkReal> x3240=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x3236*x3238))+(((-1.0)*x3238))+(((-1.0)*r00*x3236*x3237))+((cj5*r00*x3239)))),-1);
if(!x3240.valid){
continue;
}
CheckValue<IkReal> x3241 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3239))+(((-1.0)*cj0*cj5*x3237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3240.value)))+(x3241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3242=IKcos(j4);
IkReal x3243=IKsin(j4);
IkReal x3244=(cj5*r00);
IkReal x3245=(cj5*r10);
IkReal x3246=(cj5*r20);
IkReal x3247=((1.0)*x3242);
IkReal x3248=((1.0)*x3243);
IkReal x3249=(sj5*x3242);
IkReal x3250=(sj5*x3243);
evalcond[0]=(((r22*x3243))+((r21*x3249))+(((-1.0)*x3246*x3247)));
evalcond[1]=(((r21*x3250))+(((-1.0)*x3246*x3248))+(((-1.0)*r22*x3247)));
evalcond[2]=(((r01*x3249))+cj0+(((-1.0)*x3244*x3247))+((r02*x3243)));
evalcond[3]=(sj0+((r12*x3243))+(((-1.0)*x3245*x3247))+((r11*x3249)));
evalcond[4]=(cj0+((r11*x3250))+(((-1.0)*r12*x3247))+(((-1.0)*x3245*x3248)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3244*x3248))+((r01*x3250))+(((-1.0)*r02*x3247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3251=((1.0)*cj5);
CheckValue<IkReal> x3252 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3251)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3252.valid){
continue;
}
CheckValue<IkReal> x3253=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3251)))),-1);
if(!x3253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3252.value)+(((1.5707963267949)*(x3253.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3254=IKcos(j4);
IkReal x3255=IKsin(j4);
IkReal x3256=(cj5*r00);
IkReal x3257=(cj5*r10);
IkReal x3258=(cj5*r20);
IkReal x3259=((1.0)*x3254);
IkReal x3260=((1.0)*x3255);
IkReal x3261=(sj5*x3254);
IkReal x3262=(sj5*x3255);
evalcond[0]=(((r21*x3261))+(((-1.0)*x3258*x3259))+((r22*x3255)));
evalcond[1]=(((r21*x3262))+(((-1.0)*r22*x3259))+(((-1.0)*x3258*x3260)));
evalcond[2]=(((r01*x3261))+cj0+((r02*x3255))+(((-1.0)*x3256*x3259)));
evalcond[3]=(((r12*x3255))+sj0+(((-1.0)*x3257*x3259))+((r11*x3261)));
evalcond[4]=((((-1.0)*x3257*x3260))+cj0+((r11*x3262))+(((-1.0)*r12*x3259)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3259))+((r01*x3262))+(((-1.0)*x3256*x3260)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3263 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3263.valid){
continue;
}
CheckValue<IkReal> x3264=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3264.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3263.value)+(((1.5707963267949)*(x3264.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3265=IKcos(j4);
IkReal x3266=IKsin(j4);
IkReal x3267=(cj5*r00);
IkReal x3268=(cj5*r10);
IkReal x3269=(cj5*r20);
IkReal x3270=((1.0)*x3265);
IkReal x3271=((1.0)*x3266);
IkReal x3272=(sj5*x3265);
IkReal x3273=(sj5*x3266);
evalcond[0]=(((r21*x3272))+(((-1.0)*x3269*x3270))+((r22*x3266)));
evalcond[1]=(((r21*x3273))+(((-1.0)*x3269*x3271))+(((-1.0)*r22*x3270)));
evalcond[2]=(cj0+((r01*x3272))+((r02*x3266))+(((-1.0)*x3267*x3270)));
evalcond[3]=((((-1.0)*x3268*x3270))+sj0+((r11*x3272))+((r12*x3266)));
evalcond[4]=((((-1.0)*x3268*x3271))+(((-1.0)*r12*x3270))+cj0+((r11*x3273)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3273))+(((-1.0)*x3267*x3271))+(((-1.0)*r02*x3270)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3274=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3274;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3275=((1.0)*cj5);
IkReal x3276=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3275)));
j4eval[0]=x3276;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3275)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3277=((1.0)*cj5);
IkReal x3278=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3277)));
j4eval[0]=x3278;
j4eval[1]=IKsign(x3278);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3277))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3279=((1.0)*cj5);
CheckValue<IkReal> x3280 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3279)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3280.valid){
continue;
}
CheckValue<IkReal> x3281=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3279)))),-1);
if(!x3281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3280.value)+(((1.5707963267949)*(x3281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3282=IKcos(j4);
IkReal x3283=IKsin(j4);
IkReal x3284=((1.0)*sj0);
IkReal x3285=(cj5*r00);
IkReal x3286=(cj5*r10);
IkReal x3287=(cj5*r20);
IkReal x3288=((1.0)*x3282);
IkReal x3289=((1.0)*x3283);
IkReal x3290=(sj5*x3282);
IkReal x3291=(sj5*x3283);
evalcond[0]=((((-1.0)*x3287*x3288))+((r22*x3283))+((r21*x3290)));
evalcond[1]=((((-1.0)*r22*x3288))+(((-1.0)*x3287*x3289))+((r21*x3291)));
evalcond[2]=((((-1.0)*r12*x3288))+cj0+((r11*x3291))+(((-1.0)*x3286*x3289)));
evalcond[3]=(((r01*x3290))+((r02*x3283))+(((-1.0)*cj0))+(((-1.0)*x3285*x3288)));
evalcond[4]=((((-1.0)*x3284))+((r11*x3290))+((r12*x3283))+(((-1.0)*x3286*x3288)));
evalcond[5]=(((r01*x3291))+(((-1.0)*x3284))+(((-1.0)*r02*x3288))+(((-1.0)*x3285*x3289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3292=((1.0)*cj5);
CheckValue<IkReal> x3293=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3292)))),-1);
if(!x3293.valid){
continue;
}
CheckValue<IkReal> x3294 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3292))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3294.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3293.value)))+(x3294.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3295=IKcos(j4);
IkReal x3296=IKsin(j4);
IkReal x3297=((1.0)*sj0);
IkReal x3298=(cj5*r00);
IkReal x3299=(cj5*r10);
IkReal x3300=(cj5*r20);
IkReal x3301=((1.0)*x3295);
IkReal x3302=((1.0)*x3296);
IkReal x3303=(sj5*x3295);
IkReal x3304=(sj5*x3296);
evalcond[0]=(((r21*x3303))+((r22*x3296))+(((-1.0)*x3300*x3301)));
evalcond[1]=(((r21*x3304))+(((-1.0)*r22*x3301))+(((-1.0)*x3300*x3302)));
evalcond[2]=(cj0+((r11*x3304))+(((-1.0)*r12*x3301))+(((-1.0)*x3299*x3302)));
evalcond[3]=(((r02*x3296))+(((-1.0)*x3298*x3301))+((r01*x3303))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3297))+((r11*x3303))+(((-1.0)*x3299*x3301))+((r12*x3296)));
evalcond[5]=((((-1.0)*x3297))+(((-1.0)*x3298*x3302))+(((-1.0)*r02*x3301))+((r01*x3304)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3305 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3305.valid){
continue;
}
CheckValue<IkReal> x3306=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3305.value)+(((1.5707963267949)*(x3306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3307=IKcos(j4);
IkReal x3308=IKsin(j4);
IkReal x3309=((1.0)*sj0);
IkReal x3310=(cj5*r00);
IkReal x3311=(cj5*r10);
IkReal x3312=(cj5*r20);
IkReal x3313=((1.0)*x3307);
IkReal x3314=((1.0)*x3308);
IkReal x3315=(sj5*x3307);
IkReal x3316=(sj5*x3308);
evalcond[0]=(((r21*x3315))+((r22*x3308))+(((-1.0)*x3312*x3313)));
evalcond[1]=(((r21*x3316))+(((-1.0)*r22*x3313))+(((-1.0)*x3312*x3314)));
evalcond[2]=(cj0+((r11*x3316))+(((-1.0)*x3311*x3314))+(((-1.0)*r12*x3313)));
evalcond[3]=(((r02*x3308))+(((-1.0)*x3310*x3313))+((r01*x3315))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3309))+((r11*x3315))+((r12*x3308))+(((-1.0)*x3311*x3313)));
evalcond[5]=((((-1.0)*x3309))+(((-1.0)*r02*x3313))+(((-1.0)*x3310*x3314))+((r01*x3316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3317=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3317;
j4eval[1]=IKsign(x3317);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3318=((1.0)*cj5);
IkReal x3319=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3318)));
j4eval[0]=x3319;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3318))))));
j4eval[2]=IKsign(x3319);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3320=cj5*cj5;
IkReal x3321=((1.0)*r20);
IkReal x3322=(r01*r21);
IkReal x3323=(r21*sj5);
IkReal x3324=(((cj5*r01*r20*sj5))+(((-1.0)*x3322))+(((-1.0)*r02*r22))+((cj5*r00*x3323))+((x3320*x3322))+(((-1.0)*r00*x3320*x3321)));
j4eval[0]=x3324;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*cj5*x3321))+((cj0*x3323))))));
j4eval[2]=IKsign(x3324);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3325=cj5*cj5;
IkReal x3326=((1.0)*r20);
IkReal x3327=(r01*r21);
IkReal x3328=(r21*sj5);
CheckValue<IkReal> x3329=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3327))+(((-1.0)*r02*r22))+((x3325*x3327))+((cj5*r00*x3328))+(((-1.0)*r00*x3325*x3326)))),-1);
if(!x3329.valid){
continue;
}
CheckValue<IkReal> x3330 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3326))+((cj0*x3328)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3329.value)))+(x3330.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3331=IKcos(j4);
IkReal x3332=IKsin(j4);
IkReal x3333=(cj5*r00);
IkReal x3334=(cj5*r10);
IkReal x3335=(cj5*r20);
IkReal x3336=((1.0)*x3331);
IkReal x3337=((1.0)*x3332);
IkReal x3338=(sj5*x3331);
IkReal x3339=(sj5*x3332);
evalcond[0]=(((r21*x3338))+((r22*x3332))+(((-1.0)*x3335*x3336)));
evalcond[1]=(((r21*x3339))+(((-1.0)*r22*x3336))+(((-1.0)*x3335*x3337)));
evalcond[2]=(cj0+((r02*x3332))+((r01*x3338))+(((-1.0)*x3333*x3336)));
evalcond[3]=(sj0+((r12*x3332))+(((-1.0)*x3334*x3336))+((r11*x3338)));
evalcond[4]=(cj0+(((-1.0)*x3334*x3337))+((r11*x3339))+(((-1.0)*r12*x3336)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3336))+((r01*x3339))+(((-1.0)*x3333*x3337)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3340=((1.0)*cj5);
CheckValue<IkReal> x3341=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3340)))),-1);
if(!x3341.valid){
continue;
}
CheckValue<IkReal> x3342 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3340)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3342.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3341.value)))+(x3342.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3343=IKcos(j4);
IkReal x3344=IKsin(j4);
IkReal x3345=(cj5*r00);
IkReal x3346=(cj5*r10);
IkReal x3347=(cj5*r20);
IkReal x3348=((1.0)*x3343);
IkReal x3349=((1.0)*x3344);
IkReal x3350=(sj5*x3343);
IkReal x3351=(sj5*x3344);
evalcond[0]=((((-1.0)*x3347*x3348))+((r22*x3344))+((r21*x3350)));
evalcond[1]=((((-1.0)*x3347*x3349))+((r21*x3351))+(((-1.0)*r22*x3348)));
evalcond[2]=(cj0+((r01*x3350))+((r02*x3344))+(((-1.0)*x3345*x3348)));
evalcond[3]=(sj0+((r11*x3350))+(((-1.0)*x3346*x3348))+((r12*x3344)));
evalcond[4]=(cj0+((r11*x3351))+(((-1.0)*x3346*x3349))+(((-1.0)*r12*x3348)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3351))+(((-1.0)*r02*x3348))+(((-1.0)*x3345*x3349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3352 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3352.valid){
continue;
}
CheckValue<IkReal> x3353=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3353.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3352.value)+(((1.5707963267949)*(x3353.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3354=IKcos(j4);
IkReal x3355=IKsin(j4);
IkReal x3356=(cj5*r00);
IkReal x3357=(cj5*r10);
IkReal x3358=(cj5*r20);
IkReal x3359=((1.0)*x3354);
IkReal x3360=((1.0)*x3355);
IkReal x3361=(sj5*x3354);
IkReal x3362=(sj5*x3355);
evalcond[0]=(((r21*x3361))+(((-1.0)*x3358*x3359))+((r22*x3355)));
evalcond[1]=(((r21*x3362))+(((-1.0)*r22*x3359))+(((-1.0)*x3358*x3360)));
evalcond[2]=(cj0+((r01*x3361))+(((-1.0)*x3356*x3359))+((r02*x3355)));
evalcond[3]=(((r12*x3355))+sj0+(((-1.0)*x3357*x3359))+((r11*x3361)));
evalcond[4]=(cj0+(((-1.0)*x3357*x3360))+(((-1.0)*r12*x3359))+((r11*x3362)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3359))+((r01*x3362))+(((-1.0)*x3356*x3360)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3363=IKcos(j0);
IkReal x3364=IKsin(j0);
evalcond[0]=((((-0.425)*x3363))+(((-1.0)*px))+(((-0.10915)*x3364)));
evalcond[1]=((((0.10915)*x3363))+(((-0.425)*x3364))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3365=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3365;
j4eval[1]=IKsign(x3365);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3366=((1.0)*cj5);
IkReal x3367=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3366)));
j4eval[0]=x3367;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3366)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3367);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x3368=cj5*cj5;
IkReal x3369=((1.0)*r20);
IkReal x3370=(r01*r21);
IkReal x3371=(r21*sj5);
IkReal x3372=(((cj5*r01*r20*sj5))+(((-1.0)*x3370))+((cj5*r00*x3371))+(((-1.0)*r02*r22))+((x3368*x3370))+(((-1.0)*r00*x3368*x3369)));
j4eval[0]=x3372;
j4eval[1]=((IKabs((((cj0*x3371))+(((-1.0)*cj0*cj5*x3369)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3372);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3373=cj5*cj5;
IkReal x3374=((1.0)*r20);
IkReal x3375=(r01*r21);
IkReal x3376=(r21*sj5);
CheckValue<IkReal> x3377=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x3375))+((cj5*r00*x3376))+(((-1.0)*r02*r22))+((x3373*x3375))+(((-1.0)*r00*x3373*x3374)))),-1);
if(!x3377.valid){
continue;
}
CheckValue<IkReal> x3378 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x3374))+((cj0*x3376)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3378.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3377.value)))+(x3378.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3379=IKcos(j4);
IkReal x3380=IKsin(j4);
IkReal x3381=(cj5*r00);
IkReal x3382=(cj5*r10);
IkReal x3383=(cj5*r20);
IkReal x3384=((1.0)*x3379);
IkReal x3385=((1.0)*x3380);
IkReal x3386=(sj5*x3379);
IkReal x3387=(sj5*x3380);
evalcond[0]=((((-1.0)*x3383*x3384))+((r21*x3386))+((r22*x3380)));
evalcond[1]=((((-1.0)*r22*x3384))+(((-1.0)*x3383*x3385))+((r21*x3387)));
evalcond[2]=(((r01*x3386))+cj0+(((-1.0)*x3381*x3384))+((r02*x3380)));
evalcond[3]=(sj0+(((-1.0)*x3382*x3384))+((r12*x3380))+((r11*x3386)));
evalcond[4]=(cj0+(((-1.0)*x3382*x3385))+((r11*x3387))+(((-1.0)*r12*x3384)));
evalcond[5]=(((r01*x3387))+(((-1.0)*sj0))+(((-1.0)*x3381*x3385))+(((-1.0)*r02*x3384)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3388=((1.0)*cj5);
CheckValue<IkReal> x3389 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3388)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3389.valid){
continue;
}
CheckValue<IkReal> x3390=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3388)))),-1);
if(!x3390.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3389.value)+(((1.5707963267949)*(x3390.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3391=IKcos(j4);
IkReal x3392=IKsin(j4);
IkReal x3393=(cj5*r00);
IkReal x3394=(cj5*r10);
IkReal x3395=(cj5*r20);
IkReal x3396=((1.0)*x3391);
IkReal x3397=((1.0)*x3392);
IkReal x3398=(sj5*x3391);
IkReal x3399=(sj5*x3392);
evalcond[0]=((((-1.0)*x3395*x3396))+((r21*x3398))+((r22*x3392)));
evalcond[1]=((((-1.0)*r22*x3396))+(((-1.0)*x3395*x3397))+((r21*x3399)));
evalcond[2]=(cj0+((r01*x3398))+((r02*x3392))+(((-1.0)*x3393*x3396)));
evalcond[3]=(sj0+(((-1.0)*x3394*x3396))+((r11*x3398))+((r12*x3392)));
evalcond[4]=((((-1.0)*x3394*x3397))+cj0+((r11*x3399))+(((-1.0)*r12*x3396)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3399))+(((-1.0)*r02*x3396))+(((-1.0)*x3393*x3397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3400 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3400.valid){
continue;
}
CheckValue<IkReal> x3401=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3401.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3400.value)+(((1.5707963267949)*(x3401.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3402=IKcos(j4);
IkReal x3403=IKsin(j4);
IkReal x3404=(cj5*r00);
IkReal x3405=(cj5*r10);
IkReal x3406=(cj5*r20);
IkReal x3407=((1.0)*x3402);
IkReal x3408=((1.0)*x3403);
IkReal x3409=(sj5*x3402);
IkReal x3410=(sj5*x3403);
evalcond[0]=(((r22*x3403))+((r21*x3409))+(((-1.0)*x3406*x3407)));
evalcond[1]=(((r21*x3410))+(((-1.0)*x3406*x3408))+(((-1.0)*r22*x3407)));
evalcond[2]=(((r02*x3403))+cj0+(((-1.0)*x3404*x3407))+((r01*x3409)));
evalcond[3]=((((-1.0)*x3405*x3407))+sj0+((r11*x3409))+((r12*x3403)));
evalcond[4]=((((-1.0)*x3405*x3408))+cj0+(((-1.0)*r12*x3407))+((r11*x3410)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x3404*x3408))+((r01*x3410))+(((-1.0)*r02*x3407)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.20734818680435)*py))+(((-0.566898951975751)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.566898951975751)*py))+(((-2.20734818680435)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))))+IKsqr(((((0.566898951975751)*py))+(((-2.20734818680435)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.20734818680435)*py))+(((-0.566898951975751)*px))), ((((0.566898951975751)*py))+(((-2.20734818680435)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x3411=IKcos(j0);
IkReal x3412=IKsin(j0);
evalcond[0]=((((-0.10915)*x3412))+(((-1.0)*px))+(((-0.425)*x3411)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x3411))+(((-0.425)*x3412)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3413=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3413;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3413);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3414=((1.0)*cj5);
IkReal x3415=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3414)));
j4eval[0]=x3415;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3414)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3415);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x3416=((1.0)*cj5);
IkReal x3417=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3416)));
j4eval[0]=x3417;
j4eval[1]=IKsign(x3417);
j4eval[2]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3416)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3418=((1.0)*cj5);
CheckValue<IkReal> x3419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3418)))),-1);
if(!x3419.valid){
continue;
}
CheckValue<IkReal> x3420 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x3418)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3419.value)))+(x3420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3421=IKcos(j4);
IkReal x3422=IKsin(j4);
IkReal x3423=((1.0)*sj0);
IkReal x3424=(cj5*r00);
IkReal x3425=(cj5*r10);
IkReal x3426=(cj5*r20);
IkReal x3427=((1.0)*x3421);
IkReal x3428=((1.0)*x3422);
IkReal x3429=(sj5*x3421);
IkReal x3430=(sj5*x3422);
evalcond[0]=((((-1.0)*x3426*x3427))+((r21*x3429))+((r22*x3422)));
evalcond[1]=((((-1.0)*x3426*x3428))+(((-1.0)*r22*x3427))+((r21*x3430)));
evalcond[2]=((((-1.0)*r12*x3427))+cj0+(((-1.0)*x3425*x3428))+((r11*x3430)));
evalcond[3]=((((-1.0)*x3424*x3427))+((r02*x3422))+(((-1.0)*cj0))+((r01*x3429)));
evalcond[4]=((((-1.0)*x3423))+(((-1.0)*x3425*x3427))+((r12*x3422))+((r11*x3429)));
evalcond[5]=(((r01*x3430))+(((-1.0)*x3424*x3428))+(((-1.0)*x3423))+(((-1.0)*r02*x3427)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3431=((1.0)*cj5);
CheckValue<IkReal> x3432=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3431)))),-1);
if(!x3432.valid){
continue;
}
CheckValue<IkReal> x3433 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3431)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3433.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3432.value)))+(x3433.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3434=IKcos(j4);
IkReal x3435=IKsin(j4);
IkReal x3436=((1.0)*sj0);
IkReal x3437=(cj5*r00);
IkReal x3438=(cj5*r10);
IkReal x3439=(cj5*r20);
IkReal x3440=((1.0)*x3434);
IkReal x3441=((1.0)*x3435);
IkReal x3442=(sj5*x3434);
IkReal x3443=(sj5*x3435);
evalcond[0]=(((r21*x3442))+(((-1.0)*x3439*x3440))+((r22*x3435)));
evalcond[1]=(((r21*x3443))+(((-1.0)*x3439*x3441))+(((-1.0)*r22*x3440)));
evalcond[2]=(((r11*x3443))+cj0+(((-1.0)*x3438*x3441))+(((-1.0)*r12*x3440)));
evalcond[3]=((((-1.0)*x3437*x3440))+((r01*x3442))+((r02*x3435))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x3442))+(((-1.0)*x3438*x3440))+(((-1.0)*x3436))+((r12*x3435)));
evalcond[5]=((((-1.0)*x3436))+(((-1.0)*x3437*x3441))+(((-1.0)*r02*x3440))+((r01*x3443)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3444 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3444.valid){
continue;
}
CheckValue<IkReal> x3445=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3445.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3444.value)+(((1.5707963267949)*(x3445.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3446=IKcos(j4);
IkReal x3447=IKsin(j4);
IkReal x3448=((1.0)*sj0);
IkReal x3449=(cj5*r00);
IkReal x3450=(cj5*r10);
IkReal x3451=(cj5*r20);
IkReal x3452=((1.0)*x3446);
IkReal x3453=((1.0)*x3447);
IkReal x3454=(sj5*x3446);
IkReal x3455=(sj5*x3447);
evalcond[0]=((((-1.0)*x3451*x3452))+((r21*x3454))+((r22*x3447)));
evalcond[1]=((((-1.0)*x3451*x3453))+((r21*x3455))+(((-1.0)*r22*x3452)));
evalcond[2]=(cj0+(((-1.0)*r12*x3452))+(((-1.0)*x3450*x3453))+((r11*x3455)));
evalcond[3]=(((r02*x3447))+(((-1.0)*x3449*x3452))+((r01*x3454))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x3447))+(((-1.0)*x3450*x3452))+(((-1.0)*x3448))+((r11*x3454)));
evalcond[5]=((((-1.0)*r02*x3452))+(((-1.0)*x3449*x3453))+((r01*x3455))+(((-1.0)*x3448)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3456=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3456;
j4eval[1]=IKsign(x3456);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3457=((1.0)*cj5);
IkReal x3458=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3457)));
j4eval[0]=x3458;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x3457))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3458);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x3459=cj5*cj5;
IkReal x3460=((1.0)*r20);
IkReal x3461=(r01*r21);
IkReal x3462=(r21*sj5);
IkReal x3463=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3459*x3460))+(((-1.0)*x3461))+((cj5*r00*x3462))+((x3459*x3461)));
j4eval[0]=x3463;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*x3462))+(((-1.0)*cj0*cj5*x3460))))));
j4eval[2]=IKsign(x3463);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3464=cj5*cj5;
IkReal x3465=((1.0)*r20);
IkReal x3466=(r01*r21);
IkReal x3467=(r21*sj5);
CheckValue<IkReal> x3468 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x3467))+(((-1.0)*cj0*cj5*x3465)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3468.valid){
continue;
}
CheckValue<IkReal> x3469=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((x3464*x3466))+(((-1.0)*r02*r22))+(((-1.0)*r00*x3464*x3465))+(((-1.0)*x3466))+((cj5*r00*x3467)))),-1);
if(!x3469.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3468.value)+(((1.5707963267949)*(x3469.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3470=IKcos(j4);
IkReal x3471=IKsin(j4);
IkReal x3472=(cj5*r00);
IkReal x3473=(cj5*r10);
IkReal x3474=(cj5*r20);
IkReal x3475=((1.0)*x3470);
IkReal x3476=((1.0)*x3471);
IkReal x3477=(sj5*x3470);
IkReal x3478=(sj5*x3471);
evalcond[0]=(((r21*x3477))+(((-1.0)*x3474*x3475))+((r22*x3471)));
evalcond[1]=((((-1.0)*r22*x3475))+((r21*x3478))+(((-1.0)*x3474*x3476)));
evalcond[2]=(cj0+(((-1.0)*x3472*x3475))+((r01*x3477))+((r02*x3471)));
evalcond[3]=(sj0+((r12*x3471))+(((-1.0)*x3473*x3475))+((r11*x3477)));
evalcond[4]=(cj0+(((-1.0)*r12*x3475))+(((-1.0)*x3473*x3476))+((r11*x3478)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x3475))+(((-1.0)*x3472*x3476))+((r01*x3478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3479=((1.0)*cj5);
CheckValue<IkReal> x3480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x3479)))),-1);
if(!x3480.valid){
continue;
}
CheckValue<IkReal> x3481 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3479)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3480.value)))+(x3481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3482=IKcos(j4);
IkReal x3483=IKsin(j4);
IkReal x3484=(cj5*r00);
IkReal x3485=(cj5*r10);
IkReal x3486=(cj5*r20);
IkReal x3487=((1.0)*x3482);
IkReal x3488=((1.0)*x3483);
IkReal x3489=(sj5*x3482);
IkReal x3490=(sj5*x3483);
evalcond[0]=(((r21*x3489))+((r22*x3483))+(((-1.0)*x3486*x3487)));
evalcond[1]=((((-1.0)*r22*x3487))+((r21*x3490))+(((-1.0)*x3486*x3488)));
evalcond[2]=(cj0+((r01*x3489))+(((-1.0)*x3484*x3487))+((r02*x3483)));
evalcond[3]=(sj0+(((-1.0)*x3485*x3487))+((r12*x3483))+((r11*x3489)));
evalcond[4]=(cj0+(((-1.0)*x3485*x3488))+(((-1.0)*r12*x3487))+((r11*x3490)));
evalcond[5]=((((-1.0)*sj0))+((r01*x3490))+(((-1.0)*r02*x3487))+(((-1.0)*x3484*x3488)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3491 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3491.valid){
continue;
}
CheckValue<IkReal> x3492=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3492.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3491.value)+(((1.5707963267949)*(x3492.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3493=IKcos(j4);
IkReal x3494=IKsin(j4);
IkReal x3495=(cj5*r00);
IkReal x3496=(cj5*r10);
IkReal x3497=(cj5*r20);
IkReal x3498=((1.0)*x3493);
IkReal x3499=((1.0)*x3494);
IkReal x3500=(sj5*x3493);
IkReal x3501=(sj5*x3494);
evalcond[0]=((((-1.0)*x3497*x3498))+((r22*x3494))+((r21*x3500)));
evalcond[1]=((((-1.0)*x3497*x3499))+(((-1.0)*r22*x3498))+((r21*x3501)));
evalcond[2]=(((r01*x3500))+cj0+((r02*x3494))+(((-1.0)*x3495*x3498)));
evalcond[3]=(sj0+(((-1.0)*x3496*x3498))+((r11*x3500))+((r12*x3494)));
evalcond[4]=((((-1.0)*r12*x3498))+cj0+(((-1.0)*x3496*x3499))+((r11*x3501)));
evalcond[5]=(((r01*x3501))+(((-1.0)*r02*x3498))+(((-1.0)*sj0))+(((-1.0)*x3495*x3499)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((-9.16170407695831)*px)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((9.16170407695831)*py)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-9.16170407695831)*px))+IKsqr(((9.16170407695831)*py))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((-9.16170407695831)*px), ((9.16170407695831)*py));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
evalcond[0]=((((-0.10915)*(IKsin(j0))))+(((-1.0)*px)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3502=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x3502;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x3502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3503=((1.0)*cj5);
IkReal x3504=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3503)));
j4eval[0]=x3504;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3503))))));
j4eval[2]=IKsign(x3504);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x3505=((1.0)*cj5);
IkReal x3506=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3505)));
j4eval[0]=x3506;
j4eval[1]=IKsign(x3506);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3505))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3507=((1.0)*cj5);
CheckValue<IkReal> x3508 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x3507))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x3508.valid){
continue;
}
CheckValue<IkReal> x3509=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3507)))),-1);
if(!x3509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3508.value)+(((1.5707963267949)*(x3509.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3510=IKcos(j4);
IkReal x3511=IKsin(j4);
IkReal x3512=((1.0)*sj0);
IkReal x3513=(cj5*r00);
IkReal x3514=(cj5*r10);
IkReal x3515=(cj5*r20);
IkReal x3516=((1.0)*x3510);
IkReal x3517=((1.0)*x3511);
IkReal x3518=(sj5*x3510);
IkReal x3519=(sj5*x3511);
evalcond[0]=((((-1.0)*x3515*x3516))+((r21*x3518))+((r22*x3511)));
evalcond[1]=((((-1.0)*x3515*x3517))+((r21*x3519))+(((-1.0)*r22*x3516)));
evalcond[2]=((((-1.0)*x3514*x3517))+cj0+((r11*x3519))+(((-1.0)*r12*x3516)));
evalcond[3]=((((-1.0)*x3513*x3516))+((r01*x3518))+((r02*x3511))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3514*x3516))+(((-1.0)*x3512))+((r11*x3518))+((r12*x3511)));
evalcond[5]=((((-1.0)*r02*x3516))+(((-1.0)*x3513*x3517))+(((-1.0)*x3512))+((r01*x3519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3520=((1.0)*cj5);
CheckValue<IkReal> x3521=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3520)))),-1);
if(!x3521.valid){
continue;
}
CheckValue<IkReal> x3522 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3520)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3522.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3521.value)))+(x3522.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3523=IKcos(j4);
IkReal x3524=IKsin(j4);
IkReal x3525=((1.0)*sj0);
IkReal x3526=(cj5*r00);
IkReal x3527=(cj5*r10);
IkReal x3528=(cj5*r20);
IkReal x3529=((1.0)*x3523);
IkReal x3530=((1.0)*x3524);
IkReal x3531=(sj5*x3523);
IkReal x3532=(sj5*x3524);
evalcond[0]=(((r21*x3531))+((r22*x3524))+(((-1.0)*x3528*x3529)));
evalcond[1]=((((-1.0)*r22*x3529))+((r21*x3532))+(((-1.0)*x3528*x3530)));
evalcond[2]=(((r11*x3532))+cj0+(((-1.0)*x3527*x3530))+(((-1.0)*r12*x3529)));
evalcond[3]=((((-1.0)*x3526*x3529))+((r02*x3524))+((r01*x3531))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3527*x3529))+((r11*x3531))+(((-1.0)*x3525))+((r12*x3524)));
evalcond[5]=((((-1.0)*r02*x3529))+(((-1.0)*x3525))+(((-1.0)*x3526*x3530))+((r01*x3532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3533 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x3533.valid){
continue;
}
CheckValue<IkReal> x3534=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x3534.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3533.value)+(((1.5707963267949)*(x3534.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3535=IKcos(j4);
IkReal x3536=IKsin(j4);
IkReal x3537=((1.0)*sj0);
IkReal x3538=(cj5*r00);
IkReal x3539=(cj5*r10);
IkReal x3540=(cj5*r20);
IkReal x3541=((1.0)*x3535);
IkReal x3542=((1.0)*x3536);
IkReal x3543=(sj5*x3535);
IkReal x3544=(sj5*x3536);
evalcond[0]=(((r22*x3536))+((r21*x3543))+(((-1.0)*x3540*x3541)));
evalcond[1]=(((r21*x3544))+(((-1.0)*r22*x3541))+(((-1.0)*x3540*x3542)));
evalcond[2]=((((-1.0)*x3539*x3542))+cj0+(((-1.0)*r12*x3541))+((r11*x3544)));
evalcond[3]=(((r02*x3536))+(((-1.0)*x3538*x3541))+((r01*x3543))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x3539*x3541))+((r12*x3536))+(((-1.0)*x3537))+((r11*x3543)));
evalcond[5]=((((-1.0)*r02*x3541))+(((-1.0)*x3538*x3542))+((r01*x3544))+(((-1.0)*x3537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x3545=(r00*sj5);
IkReal x3546=(cj5*r01);
IkReal x3547=(sj1*sj2);
IkReal x3548=(cj1*cj2);
IkReal x3549=((20000.0)*px);
IkReal x3550=((8500.0)*cj1);
IkReal x3551=((9738.0)*x3548);
CheckValue<IkReal> x3552=IKPowWithIntegerCheck(((((2183.0)*x3547))+(((-2183.0)*x3548))),-1);
if(!x3552.valid){
continue;
}
CheckValue<IkReal> x3553=IKPowWithIntegerCheck((x3547+(((-1.0)*x3548))),-1);
if(!x3553.valid){
continue;
}
if( IKabs(((x3552.value)*(((((-9738.0)*x3545*x3547))+(((-9738.0)*x3546*x3547))+((x3548*x3549))+((x3546*x3551))+((x3546*x3550))+(((-1.0)*x3547*x3549))+((x3545*x3550))+((x3545*x3551)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x3553.value)*((x3545+x3546)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x3552.value)*(((((-9738.0)*x3545*x3547))+(((-9738.0)*x3546*x3547))+((x3548*x3549))+((x3546*x3551))+((x3546*x3550))+(((-1.0)*x3547*x3549))+((x3545*x3550))+((x3545*x3551))))))+IKsqr(((x3553.value)*((x3545+x3546))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x3552.value)*(((((-9738.0)*x3545*x3547))+(((-9738.0)*x3546*x3547))+((x3548*x3549))+((x3546*x3551))+((x3546*x3550))+(((-1.0)*x3547*x3549))+((x3545*x3550))+((x3545*x3551))))), ((x3553.value)*((x3545+x3546))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x3554=IKcos(j0);
IkReal x3555=IKsin(j0);
IkReal x3556=(cj5*r11);
IkReal x3557=(cj5*r01);
IkReal x3558=((1.0)*sj5);
IkReal x3559=((0.09465)*sj5);
IkReal x3560=(sj1*sj2);
IkReal x3561=((0.39225)*cj2);
IkReal x3562=((1.0)*cj2);
IkReal x3563=((0.39225)*x3560);
IkReal x3564=(cj1*x3554);
IkReal x3565=(cj1*x3555);
evalcond[0]=((((-1.0)*r00*x3558))+(((-1.0)*x3557))+(((-1.0)*x3562*x3564))+((x3554*x3560)));
evalcond[1]=((((-1.0)*r10*x3558))+(((-1.0)*x3556))+(((-1.0)*x3562*x3565))+((x3555*x3560)));
evalcond[2]=((((-0.09465)*x3557))+(((-1.0)*x3554*x3563))+(((-1.0)*r00*x3559))+((x3561*x3564))+(((-1.0)*px))+(((0.425)*x3564))+(((-0.10915)*x3555)));
evalcond[3]=((((-0.09465)*x3556))+(((-1.0)*r10*x3559))+(((0.10915)*x3554))+(((-1.0)*x3555*x3563))+((x3561*x3565))+(((-1.0)*py))+(((0.425)*x3565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3566=((1.0)*cj5);
IkReal x3567=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3566)));
j4eval[0]=x3567;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x3566))))));
j4eval[2]=IKsign(x3567);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3568=((1.0)*cj5);
IkReal x3569=((((-1.0)*r10*sj5))+(((-1.0)*r11*x3568)));
j4eval[0]=x3569;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x3568))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x3569);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x3570=((1.0)*sj0);
IkReal x3571=((1.0)*cj0);
IkReal x3572=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x3572;
j4eval[1]=((IKabs(((((-1.0)*r11*sj5*x3570))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x3571)))))+(IKabs(((((-1.0)*r12*x3570))+(((-1.0)*r02*x3571))))));
j4eval[2]=IKsign(x3572);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x3573=((-1.0)*r20);
IkReal x3575 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3575)==0){
continue;
}
IkReal x3574=pow(x3575,-0.5);
CheckValue<IkReal> x3576 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3573),IKFAST_ATAN2_MAGTHRESH);
if(!x3576.valid){
continue;
}
IkReal gconst96=((-1.0)*(x3576.value));
IkReal gconst97=(r21*x3574);
IkReal gconst98=(x3573*x3574);
CheckValue<IkReal> x3577 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3577.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3577.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3578=((-1.0)*r20);
IkReal x3579=x3574;
CheckValue<IkReal> x3581 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3578),IKFAST_ATAN2_MAGTHRESH);
if(!x3581.valid){
continue;
}
IkReal x3580=((-1.0)*(x3581.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3580;
IkReal gconst96=x3580;
IkReal gconst97=(r21*x3579);
IkReal gconst98=(x3578*x3579);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3582=((-1.0)*r20);
IkReal x3583=x3574;
CheckValue<IkReal> x3585 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3582),IKFAST_ATAN2_MAGTHRESH);
if(!x3585.valid){
continue;
}
IkReal x3584=((-1.0)*(x3585.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3584;
IkReal gconst96=x3584;
IkReal gconst97=(r21*x3583);
IkReal gconst98=(x3582*x3583);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x3586=((-1.0)*r20);
IkReal x3587=x3574;
CheckValue<IkReal> x3589 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x3586),IKFAST_ATAN2_MAGTHRESH);
if(!x3589.valid){
continue;
}
IkReal x3588=((-1.0)*(x3589.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x3588;
IkReal gconst96=x3588;
IkReal gconst97=(r21*x3587);
IkReal gconst98=(x3586*x3587);
IkReal x3590=((1.0)*(r22*r22));
CheckValue<IkReal> x3594=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x3590))),-1);
if(!x3594.valid){
continue;
}
IkReal x3591=x3594.value;
IkReal x3592=((1.0)*x3591);
IkReal x3593=((((-1.0)*x3592*(r21*r21*r21*r21)))+(((-1.0)*x3592*(r20*r20*r20*r20)))+(((-2.0)*x3591*(r20*r20)*(r21*r21)))+(((-1.0)*x3590)));
j4eval[0]=x3593;
j4eval[1]=IKsign(x3593);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3595=(cj1*cj2);
IkReal x3596=(gconst98*r20);
IkReal x3597=(sj1*sj2);
IkReal x3598=(gconst97*r21);
CheckValue<IkReal> x3599=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3596*x3596)))+(((-1.0)*(r22*r22)))+(((2.0)*x3596*x3598))+(((-1.0)*(x3598*x3598))))),-1);
if(!x3599.valid){
continue;
}
CheckValue<IkReal> x3600 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x3595))+((r22*x3597)))),IkReal(((((-1.0)*x3595*x3598))+((x3595*x3596))+((x3597*x3598))+(((-1.0)*x3596*x3597)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3600.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3599.value)))+(x3600.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3601=IKsin(j4);
IkReal x3602=IKcos(j4);
IkReal x3603=(gconst98*r10);
IkReal x3604=(gconst97*r21);
IkReal x3605=(gconst98*r20);
IkReal x3606=((1.0)*cj2);
IkReal x3607=((1.0)*sj0);
IkReal x3608=(gconst98*r00);
IkReal x3609=(cj1*sj2);
IkReal x3610=((1.0)*x3602);
IkReal x3611=((1.0)*x3601);
IkReal x3612=(gconst97*x3601);
IkReal x3613=(gconst97*x3602);
evalcond[0]=((((-1.0)*x3605*x3611))+(((-1.0)*r22*x3610))+((x3601*x3604)));
evalcond[1]=(((r11*x3612))+cj0+(((-1.0)*r12*x3610))+(((-1.0)*x3603*x3611)));
evalcond[2]=((((-1.0)*r02*x3610))+((r01*x3612))+(((-1.0)*x3608*x3611))+(((-1.0)*x3607)));
evalcond[3]=((((-1.0)*x3605*x3610))+((r22*x3601))+((sj1*sj2))+((x3602*x3604))+(((-1.0)*cj1*x3606)));
evalcond[4]=(((r02*x3601))+((r01*x3613))+(((-1.0)*x3608*x3610))+(((-1.0)*cj0*x3609))+(((-1.0)*cj0*sj1*x3606)));
evalcond[5]=(((r11*x3613))+(((-1.0)*x3603*x3610))+(((-1.0)*x3607*x3609))+(((-1.0)*sj0*sj1*x3606))+((r12*x3601)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3614=((1.0)*gconst98);
CheckValue<IkReal> x3615 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x3614)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3615.valid){
continue;
}
CheckValue<IkReal> x3616=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x3614))+(((-1.0)*gconst97*r10)))),-1);
if(!x3616.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3615.value)+(((1.5707963267949)*(x3616.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3617=IKsin(j4);
IkReal x3618=IKcos(j4);
IkReal x3619=(gconst98*r10);
IkReal x3620=(gconst97*r21);
IkReal x3621=(gconst98*r20);
IkReal x3622=((1.0)*cj2);
IkReal x3623=((1.0)*sj0);
IkReal x3624=(gconst98*r00);
IkReal x3625=(cj1*sj2);
IkReal x3626=((1.0)*x3618);
IkReal x3627=((1.0)*x3617);
IkReal x3628=(gconst97*x3617);
IkReal x3629=(gconst97*x3618);
evalcond[0]=((((-1.0)*x3621*x3627))+(((-1.0)*r22*x3626))+((x3617*x3620)));
evalcond[1]=(cj0+(((-1.0)*r12*x3626))+((r11*x3628))+(((-1.0)*x3619*x3627)));
evalcond[2]=((((-1.0)*x3623))+(((-1.0)*x3624*x3627))+((r01*x3628))+(((-1.0)*r02*x3626)));
evalcond[3]=((((-1.0)*x3621*x3626))+((x3618*x3620))+((r22*x3617))+((sj1*sj2))+(((-1.0)*cj1*x3622)));
evalcond[4]=((((-1.0)*x3624*x3626))+((r02*x3617))+((r01*x3629))+(((-1.0)*cj0*x3625))+(((-1.0)*cj0*sj1*x3622)));
evalcond[5]=((((-1.0)*x3623*x3625))+((r11*x3629))+(((-1.0)*x3619*x3626))+(((-1.0)*sj0*sj1*x3622))+((r12*x3617)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3630=((1.0)*gconst98);
CheckValue<IkReal> x3631=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x3630))+(((-1.0)*gconst97*r00)))),-1);
if(!x3631.valid){
continue;
}
CheckValue<IkReal> x3632 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3630))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3631.value)))+(x3632.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3633=IKsin(j4);
IkReal x3634=IKcos(j4);
IkReal x3635=(gconst98*r10);
IkReal x3636=(gconst97*r21);
IkReal x3637=(gconst98*r20);
IkReal x3638=((1.0)*cj2);
IkReal x3639=((1.0)*sj0);
IkReal x3640=(gconst98*r00);
IkReal x3641=(cj1*sj2);
IkReal x3642=((1.0)*x3634);
IkReal x3643=((1.0)*x3633);
IkReal x3644=(gconst97*x3633);
IkReal x3645=(gconst97*x3634);
evalcond[0]=((((-1.0)*x3637*x3643))+(((-1.0)*r22*x3642))+((x3633*x3636)));
evalcond[1]=(((r11*x3644))+cj0+(((-1.0)*x3635*x3643))+(((-1.0)*r12*x3642)));
evalcond[2]=((((-1.0)*x3640*x3643))+((r01*x3644))+(((-1.0)*x3639))+(((-1.0)*r02*x3642)));
evalcond[3]=((((-1.0)*cj1*x3638))+((r22*x3633))+((sj1*sj2))+((x3634*x3636))+(((-1.0)*x3637*x3642)));
evalcond[4]=(((r02*x3633))+(((-1.0)*x3640*x3642))+((r01*x3645))+(((-1.0)*cj0*x3641))+(((-1.0)*cj0*sj1*x3638)));
evalcond[5]=(((r12*x3633))+((r11*x3645))+(((-1.0)*x3635*x3642))+(((-1.0)*x3639*x3641))+(((-1.0)*sj0*sj1*x3638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3646=((-1.0)*r21);
IkReal x3648 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x3648)==0){
continue;
}
IkReal x3647=pow(x3648,-0.5);
CheckValue<IkReal> x3649 = IKatan2WithCheck(IkReal(x3646),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3649.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x3649.value))));
IkReal gconst100=(x3646*x3647);
IkReal gconst101=((1.0)*r20*x3647);
CheckValue<IkReal> x3650 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3650.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3650.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x3651=((-1.0)*r21);
CheckValue<IkReal> x3654 = IKatan2WithCheck(IkReal(x3651),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3654.valid){
continue;
}
IkReal x3652=((1.0)*(x3654.value));
IkReal x3653=x3647;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3652)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3652)));
IkReal gconst100=(x3651*x3653);
IkReal gconst101=((1.0)*r20*x3653);
IkReal x3655=r22*r22;
IkReal x3656=((1.0)*x3655);
CheckValue<IkReal> x3660=IKPowWithIntegerCheck(((-1.0)+x3655),-1);
if(!x3660.valid){
continue;
}
IkReal x3657=x3660.value;
if((((1.0)+(((-1.0)*x3656)))) < -0.00001)
continue;
IkReal x3658=IKsqrt(((1.0)+(((-1.0)*x3656))));
IkReal x3659=(cj0*x3657*x3658);
j4eval[0]=((IKabs((x3659+(((-1.0)*x3656*x3659)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3661=((-1.0)*r21);
CheckValue<IkReal> x3664 = IKatan2WithCheck(IkReal(x3661),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3664.valid){
continue;
}
IkReal x3662=((1.0)*(x3664.value));
IkReal x3663=x3647;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3662)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3662)));
IkReal gconst100=(x3661*x3663);
IkReal gconst101=((1.0)*r20*x3663);
IkReal x3665=r22*r22;
IkReal x3666=((1.0)*x3665);
CheckValue<IkReal> x3670=IKPowWithIntegerCheck(((-1.0)+x3665),-1);
if(!x3670.valid){
continue;
}
IkReal x3667=x3670.value;
if((((1.0)+(((-1.0)*x3666)))) < -0.00001)
continue;
IkReal x3668=IKsqrt(((1.0)+(((-1.0)*x3666))));
IkReal x3669=(sj0*x3667*x3668);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x3666*x3669))+x3669))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3671=((-1.0)*r21);
CheckValue<IkReal> x3674 = IKatan2WithCheck(IkReal(x3671),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x3674.valid){
continue;
}
IkReal x3672=((1.0)*(x3674.value));
IkReal x3673=x3647;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x3672)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x3672)));
IkReal gconst100=(x3671*x3673);
IkReal gconst101=((1.0)*r20*x3673);
IkReal x3675=r22*r22;
IkReal x3676=(r12*sj0);
IkReal x3677=(cj0*r02);
CheckValue<IkReal> x3681=IKPowWithIntegerCheck(((-1.0)+x3675),-1);
if(!x3681.valid){
continue;
}
IkReal x3678=x3681.value;
if((((1.0)+(((-1.0)*x3675)))) < -0.00001)
continue;
IkReal x3679=IKsqrt(((1.0)+(((-1.0)*x3675))));
IkReal x3680=(r22*x3678*x3679);
j4eval[0]=0;
j4eval[1]=((IKabs((((x3676*x3680))+((x3677*x3680)))))+(IKabs(((((-1.0)*x3676))+(((-1.0)*x3677))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3682=((1.0)*sj0);
IkReal x3683=((1.0)*gconst100);
CheckValue<IkReal> x3684 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3682)))),IkReal(((((-1.0)*cj0*r01*x3683))+((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x3682)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3684.valid){
continue;
}
CheckValue<IkReal> x3685=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3683))+(((-1.0)*gconst101*r21)))),-1);
if(!x3685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3684.value)+(((1.5707963267949)*(x3685.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3686=IKsin(j4);
IkReal x3687=IKcos(j4);
IkReal x3688=(gconst101*r20);
IkReal x3689=(gconst101*r10);
IkReal x3690=((1.0)*cj2);
IkReal x3691=(gconst101*r00);
IkReal x3692=((1.0)*sj0);
IkReal x3693=(cj1*sj2);
IkReal x3694=((1.0)*x3687);
IkReal x3695=((1.0)*x3686);
IkReal x3696=(gconst100*x3686);
IkReal x3697=(gconst100*x3687);
evalcond[0]=((((-1.0)*x3688*x3695))+(((-1.0)*r22*x3694))+((r21*x3696)));
evalcond[1]=((((-1.0)*x3689*x3695))+cj0+(((-1.0)*r12*x3694))+((r11*x3696)));
evalcond[2]=(((r01*x3696))+(((-1.0)*r02*x3694))+(((-1.0)*x3692))+(((-1.0)*x3691*x3695)));
evalcond[3]=((((-1.0)*x3688*x3694))+(((-1.0)*cj1*x3690))+((sj1*sj2))+((r21*x3697))+((r22*x3686)));
evalcond[4]=(((r01*x3697))+(((-1.0)*cj0*x3693))+(((-1.0)*cj0*sj1*x3690))+((r02*x3686))+(((-1.0)*x3691*x3694)));
evalcond[5]=((((-1.0)*x3689*x3694))+((r12*x3686))+(((-1.0)*sj0*sj1*x3690))+((r11*x3697))+(((-1.0)*x3692*x3693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3698=((1.0)*gconst101);
CheckValue<IkReal> x3699 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x3698))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3699.valid){
continue;
}
CheckValue<IkReal> x3700=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x3698)))),-1);
if(!x3700.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3699.value)+(((1.5707963267949)*(x3700.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3701=IKsin(j4);
IkReal x3702=IKcos(j4);
IkReal x3703=(gconst101*r20);
IkReal x3704=(gconst101*r10);
IkReal x3705=((1.0)*cj2);
IkReal x3706=(gconst101*r00);
IkReal x3707=((1.0)*sj0);
IkReal x3708=(cj1*sj2);
IkReal x3709=((1.0)*x3702);
IkReal x3710=((1.0)*x3701);
IkReal x3711=(gconst100*x3701);
IkReal x3712=(gconst100*x3702);
evalcond[0]=((((-1.0)*x3703*x3710))+((r21*x3711))+(((-1.0)*r22*x3709)));
evalcond[1]=((((-1.0)*x3704*x3710))+((r11*x3711))+cj0+(((-1.0)*r12*x3709)));
evalcond[2]=((((-1.0)*r02*x3709))+(((-1.0)*x3707))+((r01*x3711))+(((-1.0)*x3706*x3710)));
evalcond[3]=((((-1.0)*cj1*x3705))+(((-1.0)*x3703*x3709))+((sj1*sj2))+((r21*x3712))+((r22*x3701)));
evalcond[4]=((((-1.0)*cj0*x3708))+(((-1.0)*cj0*sj1*x3705))+(((-1.0)*x3706*x3709))+((r01*x3712))+((r02*x3701)));
evalcond[5]=((((-1.0)*x3707*x3708))+((r11*x3712))+((r12*x3701))+(((-1.0)*x3704*x3709))+(((-1.0)*sj0*sj1*x3705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3713=((1.0)*gconst101);
CheckValue<IkReal> x3714=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r00))+(((-1.0)*r01*x3713)))),-1);
if(!x3714.valid){
continue;
}
CheckValue<IkReal> x3715 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x3713)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3715.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3714.value)))+(x3715.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3716=IKsin(j4);
IkReal x3717=IKcos(j4);
IkReal x3718=(gconst101*r20);
IkReal x3719=(gconst101*r10);
IkReal x3720=((1.0)*cj2);
IkReal x3721=(gconst101*r00);
IkReal x3722=((1.0)*sj0);
IkReal x3723=(cj1*sj2);
IkReal x3724=((1.0)*x3717);
IkReal x3725=((1.0)*x3716);
IkReal x3726=(gconst100*x3716);
IkReal x3727=(gconst100*x3717);
evalcond[0]=((((-1.0)*r22*x3724))+(((-1.0)*x3718*x3725))+((r21*x3726)));
evalcond[1]=(cj0+(((-1.0)*r12*x3724))+((r11*x3726))+(((-1.0)*x3719*x3725)));
evalcond[2]=((((-1.0)*x3722))+((r01*x3726))+(((-1.0)*x3721*x3725))+(((-1.0)*r02*x3724)));
evalcond[3]=((((-1.0)*cj1*x3720))+((sj1*sj2))+(((-1.0)*x3718*x3724))+((r22*x3716))+((r21*x3727)));
evalcond[4]=((((-1.0)*cj0*x3723))+((r01*x3727))+(((-1.0)*cj0*sj1*x3720))+(((-1.0)*x3721*x3724))+((r02*x3716)));
evalcond[5]=((((-1.0)*sj0*sj1*x3720))+((r12*x3716))+((r11*x3727))+(((-1.0)*x3719*x3724))+(((-1.0)*x3722*x3723)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3728=((-1.0)*r10);
IkReal x3730 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3730)==0){
continue;
}
IkReal x3729=pow(x3730,-0.5);
CheckValue<IkReal> x3731 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3728),IKFAST_ATAN2_MAGTHRESH);
if(!x3731.valid){
continue;
}
IkReal gconst102=((-1.0)*(x3731.value));
IkReal gconst103=(r11*x3729);
IkReal gconst104=(x3728*x3729);
CheckValue<IkReal> x3732 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3732.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3732.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3733=((-1.0)*r10);
IkReal x3734=x3729;
CheckValue<IkReal> x3736 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x3733),IKFAST_ATAN2_MAGTHRESH);
if(!x3736.valid){
continue;
}
IkReal x3735=((-1.0)*(x3736.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x3735;
IkReal gconst102=x3735;
IkReal gconst103=(r11*x3734);
IkReal gconst104=(x3733*x3734);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3737=((1.0)*sj0);
IkReal x3738=((1.0)*gconst103);
CheckValue<IkReal> x3739=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x3738)))),-1);
if(!x3739.valid){
continue;
}
CheckValue<IkReal> x3740 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3737))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3738))+((gconst104*r10*sj0))+(((-1.0)*gconst103*r11*x3737))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3740.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3739.value)))+(x3740.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3741=IKsin(j4);
IkReal x3742=IKcos(j4);
IkReal x3743=(gconst103*r11);
IkReal x3744=((1.0)*cj2);
IkReal x3745=((1.0)*sj0);
IkReal x3746=(cj1*sj2);
IkReal x3747=((1.0)*x3742);
IkReal x3748=(gconst103*x3742);
IkReal x3749=(gconst103*x3741);
IkReal x3750=((1.0)*gconst104*x3741);
evalcond[0]=((((-1.0)*r22*x3747))+(((-1.0)*r20*x3750))+((r21*x3749)));
evalcond[1]=(cj0+(((-1.0)*r12*x3747))+(((-1.0)*r10*x3750))+((x3741*x3743)));
evalcond[2]=(((r01*x3749))+(((-1.0)*r00*x3750))+(((-1.0)*x3745))+(((-1.0)*r02*x3747)));
evalcond[3]=((((-1.0)*gconst104*r20*x3747))+((sj1*sj2))+((r22*x3741))+((r21*x3748))+(((-1.0)*cj1*x3744)));
evalcond[4]=((((-1.0)*gconst104*r00*x3747))+((r01*x3748))+(((-1.0)*cj0*x3746))+((r02*x3741))+(((-1.0)*cj0*sj1*x3744)));
evalcond[5]=(((x3742*x3743))+(((-1.0)*sj0*sj1*x3744))+((r12*x3741))+(((-1.0)*x3745*x3746))+(((-1.0)*gconst104*r10*x3747)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3751=((1.0)*gconst104);
CheckValue<IkReal> x3752=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst103*r00))+(((-1.0)*r01*x3751)))),-1);
if(!x3752.valid){
continue;
}
CheckValue<IkReal> x3753 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3751))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3753.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3752.value)))+(x3753.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3754=IKsin(j4);
IkReal x3755=IKcos(j4);
IkReal x3756=(gconst103*r11);
IkReal x3757=((1.0)*cj2);
IkReal x3758=((1.0)*sj0);
IkReal x3759=(cj1*sj2);
IkReal x3760=((1.0)*x3755);
IkReal x3761=(gconst103*x3755);
IkReal x3762=(gconst103*x3754);
IkReal x3763=((1.0)*gconst104*x3754);
evalcond[0]=((((-1.0)*r20*x3763))+((r21*x3762))+(((-1.0)*r22*x3760)));
evalcond[1]=((((-1.0)*r10*x3763))+((x3754*x3756))+cj0+(((-1.0)*r12*x3760)));
evalcond[2]=((((-1.0)*x3758))+(((-1.0)*r00*x3763))+(((-1.0)*r02*x3760))+((r01*x3762)));
evalcond[3]=((((-1.0)*cj1*x3757))+((r21*x3761))+((sj1*sj2))+((r22*x3754))+(((-1.0)*gconst104*r20*x3760)));
evalcond[4]=((((-1.0)*cj0*x3759))+((r02*x3754))+(((-1.0)*cj0*sj1*x3757))+(((-1.0)*gconst104*r00*x3760))+((r01*x3761)));
evalcond[5]=(((x3755*x3756))+(((-1.0)*sj0*sj1*x3757))+(((-1.0)*gconst104*r10*x3760))+((r12*x3754))+(((-1.0)*x3758*x3759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3764=((-1.0)*r11);
IkReal x3766 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x3766)==0){
continue;
}
IkReal x3765=pow(x3766,-0.5);
CheckValue<IkReal> x3767 = IKatan2WithCheck(IkReal(x3764),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3767.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x3767.value))));
IkReal gconst106=(x3764*x3765);
IkReal gconst107=((1.0)*r10*x3765);
CheckValue<IkReal> x3768 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3768.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3768.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3769=((-1.0)*r11);
CheckValue<IkReal> x3772 = IKatan2WithCheck(IkReal(x3769),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3772.valid){
continue;
}
IkReal x3770=((1.0)*(x3772.value));
IkReal x3771=x3765;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3770)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3770)));
IkReal gconst106=(x3769*x3771);
IkReal gconst107=((1.0)*r10*x3771);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3773=((-1.0)*r11);
CheckValue<IkReal> x3776 = IKatan2WithCheck(IkReal(x3773),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3776.valid){
continue;
}
IkReal x3774=((1.0)*(x3776.value));
IkReal x3775=x3765;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3774)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3774)));
IkReal gconst106=(x3773*x3775);
IkReal gconst107=((1.0)*r10*x3775);
IkReal x3777=r12*r12;
IkReal x3778=((1.0)*sj0);
IkReal x3779=(cj0*r02);
IkReal x3780=x3765;
j4eval[0]=((IKabs(((((-1.0)*x3779))+(((-1.0)*r12*x3778)))))+(IKabs(((((-1.0)*x3778*x3780))+((r12*x3779*x3780))+((sj0*x3777*x3780))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3781=((-1.0)*r11);
CheckValue<IkReal> x3784 = IKatan2WithCheck(IkReal(x3781),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x3784.valid){
continue;
}
IkReal x3782=((1.0)*(x3784.value));
IkReal x3783=x3765;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x3782)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x3782)));
IkReal gconst106=(x3781*x3783);
IkReal gconst107=((1.0)*r10*x3783);
IkReal x3785=r12*r12;
IkReal x3786=((1.0)+(((-1.0)*x3785)));
IkReal x3787=(r22*sj1*sj2);
IkReal x3788=(cj1*cj2*r22);
CheckValue<IkReal> x3795=IKPowWithIntegerCheck(x3786,-1);
if(!x3795.valid){
continue;
}
IkReal x3789=x3795.value;
CheckValue<IkReal> x3796=IKPowWithIntegerCheck(((-1.0)+x3785),-1);
if(!x3796.valid){
continue;
}
IkReal x3790=x3796.value;
IkReal x3791=((1.0)*x3789);
if((x3786) < -0.00001)
continue;
IkReal x3792=IKsqrt(x3786);
IkReal x3793=(r12*x3790*x3792);
IkReal x3794=((((-1.0)*x3791*(r11*r11)*(r21*r21)))+(((-1.0)*x3791*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x3789)));
j4eval[0]=x3794;
j4eval[1]=((IKabs(((((-1.0)*x3788))+x3787)))+(IKabs((((x3788*x3793))+(((-1.0)*x3787*x3793))))));
j4eval[2]=IKsign(x3794);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3797=(sj1*sj2);
IkReal x3798=(gconst106*r21);
IkReal x3799=(gconst107*r20);
IkReal x3800=(cj1*cj2);
CheckValue<IkReal> x3801 = IKatan2WithCheck(IkReal((((r22*x3797))+(((-1.0)*r22*x3800)))),IkReal((((x3799*x3800))+(((-1.0)*x3798*x3800))+(((-1.0)*x3797*x3799))+((x3797*x3798)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3801.valid){
continue;
}
CheckValue<IkReal> x3802=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x3799*x3799)))+(((-1.0)*(x3798*x3798)))+(((-1.0)*(r22*r22)))+(((2.0)*x3798*x3799)))),-1);
if(!x3802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3801.value)+(((1.5707963267949)*(x3802.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3803=IKsin(j4);
IkReal x3804=IKcos(j4);
IkReal x3805=(gconst107*r10);
IkReal x3806=(gconst107*r00);
IkReal x3807=((1.0)*cj2);
IkReal x3808=(gconst107*r20);
IkReal x3809=((1.0)*sj0);
IkReal x3810=(cj1*sj2);
IkReal x3811=((1.0)*x3804);
IkReal x3812=(gconst106*x3804);
IkReal x3813=(gconst106*x3803);
IkReal x3814=((1.0)*x3803);
evalcond[0]=((((-1.0)*r22*x3811))+((r21*x3813))+(((-1.0)*x3808*x3814)));
evalcond[1]=((((-1.0)*r12*x3811))+cj0+((r11*x3813))+(((-1.0)*x3805*x3814)));
evalcond[2]=((((-1.0)*r02*x3811))+(((-1.0)*x3809))+((r01*x3813))+(((-1.0)*x3806*x3814)));
evalcond[3]=(((r21*x3812))+((r22*x3803))+(((-1.0)*x3808*x3811))+((sj1*sj2))+(((-1.0)*cj1*x3807)));
evalcond[4]=((((-1.0)*cj0*x3810))+((r02*x3803))+(((-1.0)*cj0*sj1*x3807))+((r01*x3812))+(((-1.0)*x3806*x3811)));
evalcond[5]=((((-1.0)*sj0*sj1*x3807))+((r11*x3812))+((r12*x3803))+(((-1.0)*x3809*x3810))+(((-1.0)*x3805*x3811)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3815=((1.0)*sj0);
IkReal x3816=((1.0)*gconst106);
CheckValue<IkReal> x3817=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst107*r21))+(((-1.0)*r20*x3816)))),-1);
if(!x3817.valid){
continue;
}
CheckValue<IkReal> x3818 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x3815))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x3816))+((gconst107*r10*sj0))+((cj0*gconst107*r00))+(((-1.0)*gconst106*r11*x3815)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3818.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3817.value)))+(x3818.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3819=IKsin(j4);
IkReal x3820=IKcos(j4);
IkReal x3821=(gconst107*r10);
IkReal x3822=(gconst107*r00);
IkReal x3823=((1.0)*cj2);
IkReal x3824=(gconst107*r20);
IkReal x3825=((1.0)*sj0);
IkReal x3826=(cj1*sj2);
IkReal x3827=((1.0)*x3820);
IkReal x3828=(gconst106*x3820);
IkReal x3829=(gconst106*x3819);
IkReal x3830=((1.0)*x3819);
evalcond[0]=((((-1.0)*r22*x3827))+(((-1.0)*x3824*x3830))+((r21*x3829)));
evalcond[1]=((((-1.0)*x3821*x3830))+(((-1.0)*r12*x3827))+cj0+((r11*x3829)));
evalcond[2]=((((-1.0)*r02*x3827))+(((-1.0)*x3825))+((r01*x3829))+(((-1.0)*x3822*x3830)));
evalcond[3]=((((-1.0)*x3824*x3827))+((sj1*sj2))+(((-1.0)*cj1*x3823))+((r22*x3819))+((r21*x3828)));
evalcond[4]=((((-1.0)*cj0*x3826))+(((-1.0)*x3822*x3827))+((r02*x3819))+(((-1.0)*cj0*sj1*x3823))+((r01*x3828)));
evalcond[5]=(((r12*x3819))+(((-1.0)*sj0*sj1*x3823))+((r11*x3828))+(((-1.0)*x3821*x3827))+(((-1.0)*x3825*x3826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3831=((1.0)*gconst107);
CheckValue<IkReal> x3832 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x3831))+((cj0*gconst106*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3832.valid){
continue;
}
CheckValue<IkReal> x3833=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x3831)))),-1);
if(!x3833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3832.value)+(((1.5707963267949)*(x3833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3834=IKsin(j4);
IkReal x3835=IKcos(j4);
IkReal x3836=(gconst107*r10);
IkReal x3837=(gconst107*r00);
IkReal x3838=((1.0)*cj2);
IkReal x3839=(gconst107*r20);
IkReal x3840=((1.0)*sj0);
IkReal x3841=(cj1*sj2);
IkReal x3842=((1.0)*x3835);
IkReal x3843=(gconst106*x3835);
IkReal x3844=(gconst106*x3834);
IkReal x3845=((1.0)*x3834);
evalcond[0]=(((r21*x3844))+(((-1.0)*x3839*x3845))+(((-1.0)*r22*x3842)));
evalcond[1]=(cj0+(((-1.0)*r12*x3842))+(((-1.0)*x3836*x3845))+((r11*x3844)));
evalcond[2]=((((-1.0)*r02*x3842))+((r01*x3844))+(((-1.0)*x3837*x3845))+(((-1.0)*x3840)));
evalcond[3]=(((r21*x3843))+((sj1*sj2))+(((-1.0)*x3839*x3842))+(((-1.0)*cj1*x3838))+((r22*x3834)));
evalcond[4]=(((r02*x3834))+(((-1.0)*cj0*sj1*x3838))+((r01*x3843))+(((-1.0)*x3837*x3842))+(((-1.0)*cj0*x3841)));
evalcond[5]=((((-1.0)*x3840*x3841))+((r12*x3834))+(((-1.0)*sj0*sj1*x3838))+(((-1.0)*x3836*x3842))+((r11*x3843)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3846=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x3846;
j4eval[1]=IKsign(x3846);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3847=((1.0)*cj5);
IkReal x3848=((((-1.0)*r00*sj5))+(((-1.0)*r01*x3847)));
j4eval[0]=x3848;
j4eval[1]=((IKabs(((((-1.0)*r20*x3847))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x3848);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x3849=(sj1*sj2);
IkReal x3850=(cj5*r10);
IkReal x3851=(r11*sj5);
IkReal x3852=(cj1*cj2);
IkReal x3853=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x3853;
j4eval[1]=((IKabs((((x3850*x3852))+((x3849*x3851))+(((-1.0)*x3849*x3850))+(((-1.0)*x3851*x3852)))))+(IKabs((((r12*x3852))+(((-1.0)*r12*x3849))))));
j4eval[2]=IKsign(x3853);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3854=(sj1*sj2);
IkReal x3855=(cj5*r10);
IkReal x3856=(r11*sj5);
IkReal x3857=(cj1*cj2);
CheckValue<IkReal> x3858=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x3858.valid){
continue;
}
CheckValue<IkReal> x3859 = IKatan2WithCheck(IkReal((((x3854*x3856))+(((-1.0)*x3854*x3855))+((x3855*x3857))+(((-1.0)*x3856*x3857)))),IkReal(((((-1.0)*r12*x3854))+((r12*x3857)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3858.value)))+(x3859.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3860=IKcos(j4);
IkReal x3861=IKsin(j4);
IkReal x3862=(cj5*r00);
IkReal x3863=(cj5*r10);
IkReal x3864=(r21*sj5);
IkReal x3865=((1.0)*cj2);
IkReal x3866=(cj5*r20);
IkReal x3867=((1.0)*x3860);
IkReal x3868=((1.0)*x3861);
IkReal x3869=(sj5*x3861);
IkReal x3870=(sj5*x3860);
evalcond[0]=((((-1.0)*x3863*x3867))+((r11*x3870))+((r12*x3861)));
evalcond[1]=((((-1.0)*x3866*x3868))+((x3861*x3864))+(((-1.0)*r22*x3867)));
evalcond[2]=((((-1.0)*r02*x3867))+((r01*x3869))+(((-1.0)*x3862*x3868)));
evalcond[3]=((1.0)+((r11*x3869))+(((-1.0)*x3863*x3868))+(((-1.0)*r12*x3867)));
evalcond[4]=(((x3860*x3864))+(((-1.0)*x3866*x3867))+((sj1*sj2))+(((-1.0)*cj1*x3865))+((r22*x3861)));
evalcond[5]=(((r02*x3861))+((r01*x3870))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x3865))+(((-1.0)*x3862*x3867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3871=((1.0)*cj5);
CheckValue<IkReal> x3872 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x3871)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3872.valid){
continue;
}
CheckValue<IkReal> x3873=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x3871)))),-1);
if(!x3873.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3872.value)+(((1.5707963267949)*(x3873.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3874=IKcos(j4);
IkReal x3875=IKsin(j4);
IkReal x3876=(cj5*r00);
IkReal x3877=(cj5*r10);
IkReal x3878=(r21*sj5);
IkReal x3879=((1.0)*cj2);
IkReal x3880=(cj5*r20);
IkReal x3881=((1.0)*x3874);
IkReal x3882=((1.0)*x3875);
IkReal x3883=(sj5*x3875);
IkReal x3884=(sj5*x3874);
evalcond[0]=(((r11*x3884))+(((-1.0)*x3877*x3881))+((r12*x3875)));
evalcond[1]=((((-1.0)*x3880*x3882))+(((-1.0)*r22*x3881))+((x3875*x3878)));
evalcond[2]=((((-1.0)*r02*x3881))+((r01*x3883))+(((-1.0)*x3876*x3882)));
evalcond[3]=((1.0)+((r11*x3883))+(((-1.0)*x3877*x3882))+(((-1.0)*r12*x3881)));
evalcond[4]=((((-1.0)*x3880*x3881))+((sj1*sj2))+((x3874*x3878))+(((-1.0)*cj1*x3879))+((r22*x3875)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x3884))+(((-1.0)*sj1*x3879))+((r02*x3875))+(((-1.0)*x3876*x3881)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3885=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x3885.valid){
continue;
}
CheckValue<IkReal> x3886 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3886.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3885.value)))+(x3886.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3887=IKcos(j4);
IkReal x3888=IKsin(j4);
IkReal x3889=(cj5*r00);
IkReal x3890=(cj5*r10);
IkReal x3891=(r21*sj5);
IkReal x3892=((1.0)*cj2);
IkReal x3893=(cj5*r20);
IkReal x3894=((1.0)*x3887);
IkReal x3895=((1.0)*x3888);
IkReal x3896=(sj5*x3888);
IkReal x3897=(sj5*x3887);
evalcond[0]=(((r12*x3888))+((r11*x3897))+(((-1.0)*x3890*x3894)));
evalcond[1]=(((x3888*x3891))+(((-1.0)*r22*x3894))+(((-1.0)*x3893*x3895)));
evalcond[2]=((((-1.0)*x3889*x3895))+((r01*x3896))+(((-1.0)*r02*x3894)));
evalcond[3]=((1.0)+(((-1.0)*r12*x3894))+((r11*x3896))+(((-1.0)*x3890*x3895)));
evalcond[4]=(((r22*x3888))+((sj1*sj2))+(((-1.0)*x3893*x3894))+((x3887*x3891))+(((-1.0)*cj1*x3892)));
evalcond[5]=((((-1.0)*x3889*x3894))+(((-1.0)*cj1*sj2))+((r01*x3897))+((r02*x3888))+(((-1.0)*sj1*x3892)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3898=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x3898;
j4eval[1]=IKsign(x3898);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3899=((1.0)*cj5);
IkReal x3900=((((-1.0)*r21*x3899))+(((-1.0)*r20*sj5)));
j4eval[0]=x3900;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x3899))))));
j4eval[2]=IKsign(x3900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x3901=cj5*cj5;
IkReal x3902=r11*r11;
IkReal x3903=(r11*sj5);
IkReal x3904=(cj5*r10);
IkReal x3905=((r12*r12)+((x3901*(r10*r10)))+(((-1.0)*x3901*x3902))+(((-2.0)*x3903*x3904))+x3902);
j4eval[0]=x3905;
j4eval[1]=IKsign(x3905);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x3904))+x3903))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3906=cj5*cj5;
IkReal x3907=r11*r11;
IkReal x3908=(cj5*r10);
IkReal x3909=(r11*sj5);
CheckValue<IkReal> x3910=IKPowWithIntegerCheck(IKsign((((x3906*(r10*r10)))+(r12*r12)+(((-2.0)*x3908*x3909))+x3907+(((-1.0)*x3906*x3907)))),-1);
if(!x3910.valid){
continue;
}
CheckValue<IkReal> x3911 = IKatan2WithCheck(IkReal(((((-1.0)*x3908))+x3909)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x3911.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3910.value)))+(x3911.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3912=IKcos(j4);
IkReal x3913=IKsin(j4);
IkReal x3914=(cj5*r00);
IkReal x3915=(cj5*r10);
IkReal x3916=(r21*sj5);
IkReal x3917=(cj5*r20);
IkReal x3918=((1.0)*x3912);
IkReal x3919=((1.0)*x3913);
IkReal x3920=(sj5*x3913);
IkReal x3921=(sj5*x3912);
evalcond[0]=((((-1.0)*x3915*x3918))+((r11*x3921))+((r12*x3913)));
evalcond[1]=((((-1.0)*r22*x3918))+(((-1.0)*x3917*x3919))+((x3913*x3916)));
evalcond[2]=((((-1.0)*r02*x3918))+(((-1.0)*x3914*x3919))+((r01*x3920)));
evalcond[3]=((-1.0)+(((-1.0)*x3915*x3919))+((r11*x3920))+(((-1.0)*r12*x3918)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x3914*x3918))+((cj1*sj2))+((r02*x3913))+((r01*x3921)));
evalcond[5]=((((-1.0)*x3917*x3918))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x3912*x3916))+((r22*x3913)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3922=((1.0)*cj5);
CheckValue<IkReal> x3923 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x3922)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3923.valid){
continue;
}
CheckValue<IkReal> x3924=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x3922))+(((-1.0)*r20*sj5)))),-1);
if(!x3924.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3923.value)+(((1.5707963267949)*(x3924.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3925=IKcos(j4);
IkReal x3926=IKsin(j4);
IkReal x3927=(cj5*r00);
IkReal x3928=(cj5*r10);
IkReal x3929=(r21*sj5);
IkReal x3930=(cj5*r20);
IkReal x3931=((1.0)*x3925);
IkReal x3932=((1.0)*x3926);
IkReal x3933=(sj5*x3926);
IkReal x3934=(sj5*x3925);
evalcond[0]=(((r12*x3926))+(((-1.0)*x3928*x3931))+((r11*x3934)));
evalcond[1]=((((-1.0)*r22*x3931))+(((-1.0)*x3930*x3932))+((x3926*x3929)));
evalcond[2]=(((r01*x3933))+(((-1.0)*r02*x3931))+(((-1.0)*x3927*x3932)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x3931))+(((-1.0)*x3928*x3932))+((r11*x3933)));
evalcond[4]=(((cj2*sj1))+((r01*x3934))+((cj1*sj2))+((r02*x3926))+(((-1.0)*x3927*x3931)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3930*x3931))+((r22*x3926))+((x3925*x3929)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x3935 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3935.valid){
continue;
}
CheckValue<IkReal> x3936=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x3936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x3935.value)+(((1.5707963267949)*(x3936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3937=IKcos(j4);
IkReal x3938=IKsin(j4);
IkReal x3939=(cj5*r00);
IkReal x3940=(cj5*r10);
IkReal x3941=(r21*sj5);
IkReal x3942=(cj5*r20);
IkReal x3943=((1.0)*x3937);
IkReal x3944=((1.0)*x3938);
IkReal x3945=(sj5*x3938);
IkReal x3946=(sj5*x3937);
evalcond[0]=((((-1.0)*x3940*x3943))+((r12*x3938))+((r11*x3946)));
evalcond[1]=((((-1.0)*x3942*x3944))+(((-1.0)*r22*x3943))+((x3938*x3941)));
evalcond[2]=(((r01*x3945))+(((-1.0)*r02*x3943))+(((-1.0)*x3939*x3944)));
evalcond[3]=((-1.0)+(((-1.0)*x3940*x3944))+(((-1.0)*r12*x3943))+((r11*x3945)));
evalcond[4]=(((cj2*sj1))+((r01*x3946))+((cj1*sj2))+(((-1.0)*x3939*x3943))+((r02*x3938)));
evalcond[5]=(((r22*x3938))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x3942*x3943))+((x3937*x3941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3947=((-1.0)*r00);
IkReal x3949 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3949)==0){
continue;
}
IkReal x3948=pow(x3949,-0.5);
CheckValue<IkReal> x3950 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3947),IKFAST_ATAN2_MAGTHRESH);
if(!x3950.valid){
continue;
}
IkReal gconst108=((-1.0)*(x3950.value));
IkReal gconst109=(r01*x3948);
IkReal gconst110=(x3947*x3948);
CheckValue<IkReal> x3951 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3951.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x3951.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x3952=((-1.0)*r00);
IkReal x3953=x3948;
CheckValue<IkReal> x3955 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x3952),IKFAST_ATAN2_MAGTHRESH);
if(!x3955.valid){
continue;
}
IkReal x3954=((-1.0)*(x3955.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x3954;
IkReal gconst108=x3954;
IkReal gconst109=(r01*x3953);
IkReal gconst110=(x3952*x3953);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3956=((1.0)*sj0);
IkReal x3957=((1.0)*gconst109);
CheckValue<IkReal> x3958=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x3957))+(((-1.0)*gconst110*r21)))),-1);
if(!x3958.valid){
continue;
}
CheckValue<IkReal> x3959 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x3956)))),IkReal(((((-1.0)*cj0*r01*x3957))+(((-1.0)*gconst109*r11*x3956))+((cj0*gconst110*r00))+((gconst110*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3958.value)))+(x3959.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3960=IKsin(j4);
IkReal x3961=IKcos(j4);
IkReal x3962=(gconst109*r21);
IkReal x3963=((1.0)*cj2);
IkReal x3964=((1.0)*sj0);
IkReal x3965=(cj1*sj2);
IkReal x3966=((1.0)*x3961);
IkReal x3967=(gconst109*x3960);
IkReal x3968=(gconst109*x3961);
IkReal x3969=((1.0)*gconst110*x3960);
evalcond[0]=((((-1.0)*r20*x3969))+((x3960*x3962))+(((-1.0)*r22*x3966)));
evalcond[1]=(cj0+((r11*x3967))+(((-1.0)*r10*x3969))+(((-1.0)*r12*x3966)));
evalcond[2]=((((-1.0)*x3964))+(((-1.0)*r02*x3966))+((r01*x3967))+(((-1.0)*r00*x3969)));
evalcond[3]=((((-1.0)*gconst110*r20*x3966))+((r22*x3960))+((sj1*sj2))+((x3961*x3962))+(((-1.0)*cj1*x3963)));
evalcond[4]=((((-1.0)*cj0*x3965))+(((-1.0)*gconst110*r00*x3966))+((r02*x3960))+(((-1.0)*cj0*sj1*x3963))+((r01*x3968)));
evalcond[5]=((((-1.0)*gconst110*r10*x3966))+((r11*x3968))+((r12*x3960))+(((-1.0)*x3964*x3965))+(((-1.0)*sj0*sj1*x3963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x3970=((1.0)*gconst110);
CheckValue<IkReal> x3971=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst109*r10))+(((-1.0)*r11*x3970)))),-1);
if(!x3971.valid){
continue;
}
CheckValue<IkReal> x3972 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x3970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x3972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x3971.value)))+(x3972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x3973=IKsin(j4);
IkReal x3974=IKcos(j4);
IkReal x3975=(gconst109*r21);
IkReal x3976=((1.0)*cj2);
IkReal x3977=((1.0)*sj0);
IkReal x3978=(cj1*sj2);
IkReal x3979=((1.0)*x3974);
IkReal x3980=(gconst109*x3973);
IkReal x3981=(gconst109*x3974);
IkReal x3982=((1.0)*gconst110*x3973);
evalcond[0]=(((x3973*x3975))+(((-1.0)*r20*x3982))+(((-1.0)*r22*x3979)));
evalcond[1]=((((-1.0)*r12*x3979))+((r11*x3980))+cj0+(((-1.0)*r10*x3982)));
evalcond[2]=((((-1.0)*x3977))+(((-1.0)*r02*x3979))+((r01*x3980))+(((-1.0)*r00*x3982)));
evalcond[3]=((((-1.0)*cj1*x3976))+(((-1.0)*gconst110*r20*x3979))+((sj1*sj2))+((r22*x3973))+((x3974*x3975)));
evalcond[4]=((((-1.0)*gconst110*r00*x3979))+((r02*x3973))+((r01*x3981))+(((-1.0)*cj0*sj1*x3976))+(((-1.0)*cj0*x3978)));
evalcond[5]=(((r11*x3981))+(((-1.0)*x3977*x3978))+(((-1.0)*gconst110*r10*x3979))+((r12*x3973))+(((-1.0)*sj0*sj1*x3976)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x3983=((-1.0)*r01);
IkReal x3985 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x3985)==0){
continue;
}
IkReal x3984=pow(x3985,-0.5);
CheckValue<IkReal> x3986 = IKatan2WithCheck(IkReal(x3983),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3986.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x3986.value))));
IkReal gconst112=(x3983*x3984);
IkReal gconst113=((1.0)*r00*x3984);
CheckValue<IkReal> x3987 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3987.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x3987.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x3988=((-1.0)*r01);
CheckValue<IkReal> x3991 = IKatan2WithCheck(IkReal(x3988),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3991.valid){
continue;
}
IkReal x3989=((1.0)*(x3991.value));
IkReal x3990=x3984;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3989)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3989)));
IkReal gconst112=(x3988*x3990);
IkReal gconst113=((1.0)*r00*x3990);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x3992=((-1.0)*r01);
CheckValue<IkReal> x3995 = IKatan2WithCheck(IkReal(x3992),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3995.valid){
continue;
}
IkReal x3993=((1.0)*(x3995.value));
IkReal x3994=x3984;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3993)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3993)));
IkReal gconst112=(x3992*x3994);
IkReal gconst113=((1.0)*r00*x3994);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x3996=((-1.0)*r01);
CheckValue<IkReal> x3999 = IKatan2WithCheck(IkReal(x3996),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x3999.valid){
continue;
}
IkReal x3997=((1.0)*(x3999.value));
IkReal x3998=x3984;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x3997)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x3997)));
IkReal gconst112=(x3996*x3998);
IkReal gconst113=((1.0)*r00*x3998);
IkReal x4000=r02*r02;
IkReal x4001=(r12*sj0);
IkReal x4002=((1.0)*cj0);
IkReal x4003=x3984;
j4eval[0]=((IKabs(((((-1.0)*r02*x4002))+(((-1.0)*x4001)))))+(IKabs((((cj0*x4000*x4003))+(((-1.0)*x4002*x4003))+((r02*x4001*x4003))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4004=((1.0)*sj0);
IkReal x4005=((1.0)*gconst112);
CheckValue<IkReal> x4006 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4004)))),IkReal((((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4005))+(((-1.0)*gconst112*r11*x4004)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4006.valid){
continue;
}
CheckValue<IkReal> x4007=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst113*r21))+(((-1.0)*r20*x4005)))),-1);
if(!x4007.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4006.value)+(((1.5707963267949)*(x4007.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4008=IKsin(j4);
IkReal x4009=IKcos(j4);
IkReal x4010=(gconst113*r20);
IkReal x4011=(gconst112*r21);
IkReal x4012=((1.0)*cj2);
IkReal x4013=(gconst113*r00);
IkReal x4014=(gconst113*r10);
IkReal x4015=((1.0)*sj0);
IkReal x4016=(cj1*sj2);
IkReal x4017=((1.0)*x4009);
IkReal x4018=((1.0)*x4008);
IkReal x4019=(gconst112*x4009);
IkReal x4020=(gconst112*x4008);
evalcond[0]=((((-1.0)*r22*x4017))+((x4008*x4011))+(((-1.0)*x4010*x4018)));
evalcond[1]=((((-1.0)*r12*x4017))+cj0+(((-1.0)*x4014*x4018))+((r11*x4020)));
evalcond[2]=((((-1.0)*x4013*x4018))+((r01*x4020))+(((-1.0)*r02*x4017))+(((-1.0)*x4015)));
evalcond[3]=((((-1.0)*cj1*x4012))+((sj1*sj2))+((r22*x4008))+((x4009*x4011))+(((-1.0)*x4010*x4017)));
evalcond[4]=((((-1.0)*cj0*x4016))+(((-1.0)*x4013*x4017))+(((-1.0)*cj0*sj1*x4012))+((r01*x4019))+((r02*x4008)));
evalcond[5]=(((r12*x4008))+(((-1.0)*sj0*sj1*x4012))+(((-1.0)*x4014*x4017))+(((-1.0)*x4015*x4016))+((r11*x4019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4021=((1.0)*gconst113);
CheckValue<IkReal> x4022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4021))+(((-1.0)*gconst112*r10)))),-1);
if(!x4022.valid){
continue;
}
CheckValue<IkReal> x4023 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4021)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4022.value)))+(x4023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4024=IKsin(j4);
IkReal x4025=IKcos(j4);
IkReal x4026=(gconst113*r20);
IkReal x4027=(gconst112*r21);
IkReal x4028=((1.0)*cj2);
IkReal x4029=(gconst113*r00);
IkReal x4030=(gconst113*r10);
IkReal x4031=((1.0)*sj0);
IkReal x4032=(cj1*sj2);
IkReal x4033=((1.0)*x4025);
IkReal x4034=((1.0)*x4024);
IkReal x4035=(gconst112*x4025);
IkReal x4036=(gconst112*x4024);
evalcond[0]=((((-1.0)*r22*x4033))+(((-1.0)*x4026*x4034))+((x4024*x4027)));
evalcond[1]=(cj0+(((-1.0)*x4030*x4034))+(((-1.0)*r12*x4033))+((r11*x4036)));
evalcond[2]=(((r01*x4036))+(((-1.0)*x4029*x4034))+(((-1.0)*x4031))+(((-1.0)*r02*x4033)));
evalcond[3]=((((-1.0)*x4026*x4033))+((sj1*sj2))+(((-1.0)*cj1*x4028))+((x4025*x4027))+((r22*x4024)));
evalcond[4]=((((-1.0)*cj0*x4032))+(((-1.0)*cj0*sj1*x4028))+((r01*x4035))+(((-1.0)*x4029*x4033))+((r02*x4024)));
evalcond[5]=((((-1.0)*x4031*x4032))+(((-1.0)*sj0*sj1*x4028))+(((-1.0)*x4030*x4033))+((r12*x4024))+((r11*x4035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4037=((1.0)*gconst113);
CheckValue<IkReal> x4038=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4037))+(((-1.0)*gconst112*r00)))),-1);
if(!x4038.valid){
continue;
}
CheckValue<IkReal> x4039 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst112*r21))+(((-1.0)*cj0*r20*x4037)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4039.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4038.value)))+(x4039.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4040=IKsin(j4);
IkReal x4041=IKcos(j4);
IkReal x4042=(gconst113*r20);
IkReal x4043=(gconst112*r21);
IkReal x4044=((1.0)*cj2);
IkReal x4045=(gconst113*r00);
IkReal x4046=(gconst113*r10);
IkReal x4047=((1.0)*sj0);
IkReal x4048=(cj1*sj2);
IkReal x4049=((1.0)*x4041);
IkReal x4050=((1.0)*x4040);
IkReal x4051=(gconst112*x4041);
IkReal x4052=(gconst112*x4040);
evalcond[0]=(((x4040*x4043))+(((-1.0)*x4042*x4050))+(((-1.0)*r22*x4049)));
evalcond[1]=(cj0+(((-1.0)*x4046*x4050))+(((-1.0)*r12*x4049))+((r11*x4052)));
evalcond[2]=((((-1.0)*x4045*x4050))+(((-1.0)*r02*x4049))+(((-1.0)*x4047))+((r01*x4052)));
evalcond[3]=(((r22*x4040))+((x4041*x4043))+((sj1*sj2))+(((-1.0)*x4042*x4049))+(((-1.0)*cj1*x4044)));
evalcond[4]=(((r02*x4040))+(((-1.0)*x4045*x4049))+(((-1.0)*cj0*x4048))+(((-1.0)*cj0*sj1*x4044))+((r01*x4051)));
evalcond[5]=((((-1.0)*x4047*x4048))+(((-1.0)*x4046*x4049))+((r11*x4051))+((r12*x4040))+(((-1.0)*sj0*sj1*x4044)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4053=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4053;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4053);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4054=((1.0)*cj5);
IkReal x4055=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4054)));
j4eval[0]=x4055;
j4eval[1]=((IKabs(((((-1.0)*r20*x4054))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4055);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4056=cj5*cj5;
IkReal x4057=r01*r01;
IkReal x4058=(cj5*r00);
IkReal x4059=(r01*sj5);
IkReal x4060=((((-2.0)*x4058*x4059))+x4057+((x4056*(r00*r00)))+(r02*r02)+(((-1.0)*x4056*x4057)));
j4eval[0]=x4060;
j4eval[1]=IKsign(x4060);
j4eval[2]=((IKabs(r02))+(IKabs((x4059+(((-1.0)*x4058))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4061=cj5*cj5;
IkReal x4062=r01*r01;
IkReal x4063=(r01*sj5);
IkReal x4064=(cj5*r00);
CheckValue<IkReal> x4065=IKPowWithIntegerCheck(IKsign((((x4061*(r00*r00)))+(((-2.0)*x4063*x4064))+(((-1.0)*x4061*x4062))+x4062+(r02*r02))),-1);
if(!x4065.valid){
continue;
}
CheckValue<IkReal> x4066 = IKatan2WithCheck(IkReal((x4063+(((-1.0)*x4064)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4066.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4065.value)))+(x4066.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4067=IKcos(j4);
IkReal x4068=IKsin(j4);
IkReal x4069=(cj5*r00);
IkReal x4070=(cj5*r10);
IkReal x4071=(r21*sj5);
IkReal x4072=((1.0)*cj2);
IkReal x4073=(cj5*r20);
IkReal x4074=((1.0)*x4067);
IkReal x4075=((1.0)*x4068);
IkReal x4076=(sj5*x4068);
IkReal x4077=(sj5*x4067);
evalcond[0]=((((-1.0)*x4069*x4074))+((r02*x4068))+((r01*x4077)));
evalcond[1]=((((-1.0)*r22*x4074))+((x4068*x4071))+(((-1.0)*x4073*x4075)));
evalcond[2]=((((-1.0)*x4070*x4075))+(((-1.0)*r12*x4074))+((r11*x4076)));
evalcond[3]=((-1.0)+(((-1.0)*x4069*x4075))+(((-1.0)*r02*x4074))+((r01*x4076)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*cj1*x4072))+((x4067*x4071))+((r22*x4068))+(((-1.0)*x4073*x4074)));
evalcond[5]=((((-1.0)*x4070*x4074))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4072))+((r12*x4068))+((r11*x4077)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4078=((1.0)*cj5);
CheckValue<IkReal> x4079=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4078)))),-1);
if(!x4079.valid){
continue;
}
CheckValue<IkReal> x4080 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4078)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4080.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4079.value)))+(x4080.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4081=IKcos(j4);
IkReal x4082=IKsin(j4);
IkReal x4083=(cj5*r00);
IkReal x4084=(cj5*r10);
IkReal x4085=(r21*sj5);
IkReal x4086=((1.0)*cj2);
IkReal x4087=(cj5*r20);
IkReal x4088=((1.0)*x4081);
IkReal x4089=((1.0)*x4082);
IkReal x4090=(sj5*x4082);
IkReal x4091=(sj5*x4081);
evalcond[0]=(((r01*x4091))+(((-1.0)*x4083*x4088))+((r02*x4082)));
evalcond[1]=(((x4082*x4085))+(((-1.0)*r22*x4088))+(((-1.0)*x4087*x4089)));
evalcond[2]=((((-1.0)*r12*x4088))+((r11*x4090))+(((-1.0)*x4084*x4089)));
evalcond[3]=((-1.0)+((r01*x4090))+(((-1.0)*r02*x4088))+(((-1.0)*x4083*x4089)));
evalcond[4]=(((sj1*sj2))+((x4081*x4085))+(((-1.0)*cj1*x4086))+(((-1.0)*x4087*x4088))+((r22*x4082)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x4091))+(((-1.0)*sj1*x4086))+((r12*x4082))+(((-1.0)*x4084*x4088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4092=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4092.valid){
continue;
}
CheckValue<IkReal> x4093 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4092.value)))+(x4093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4094=IKcos(j4);
IkReal x4095=IKsin(j4);
IkReal x4096=(cj5*r00);
IkReal x4097=(cj5*r10);
IkReal x4098=(r21*sj5);
IkReal x4099=((1.0)*cj2);
IkReal x4100=(cj5*r20);
IkReal x4101=((1.0)*x4094);
IkReal x4102=((1.0)*x4095);
IkReal x4103=(sj5*x4095);
IkReal x4104=(sj5*x4094);
evalcond[0]=((((-1.0)*x4096*x4101))+((r02*x4095))+((r01*x4104)));
evalcond[1]=((((-1.0)*r22*x4101))+((x4095*x4098))+(((-1.0)*x4100*x4102)));
evalcond[2]=((((-1.0)*r12*x4101))+((r11*x4103))+(((-1.0)*x4097*x4102)));
evalcond[3]=((-1.0)+(((-1.0)*x4096*x4102))+((r01*x4103))+(((-1.0)*r02*x4101)));
evalcond[4]=(((x4094*x4098))+((sj1*sj2))+((r22*x4095))+(((-1.0)*cj1*x4099))+(((-1.0)*x4100*x4101)));
evalcond[5]=((((-1.0)*sj1*x4099))+(((-1.0)*cj1*sj2))+((r12*x4095))+((r11*x4104))+(((-1.0)*x4097*x4101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4105=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4105;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4105);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4106=((1.0)*cj5);
IkReal x4107=((((-1.0)*r21*x4106))+(((-1.0)*r20*sj5)));
j4eval[0]=x4107;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x4106))+((r11*sj5))))));
j4eval[2]=IKsign(x4107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4108=cj5*cj5;
IkReal x4109=r01*r01;
IkReal x4110=(r01*sj5);
IkReal x4111=(cj5*r00);
IkReal x4112=((((-1.0)*x4109))+(((-1.0)*x4108*(r00*r00)))+(((-1.0)*(r02*r02)))+(((2.0)*x4110*x4111))+((x4108*x4109)));
j4eval[0]=x4112;
j4eval[1]=IKsign(x4112);
j4eval[2]=((IKabs(r02))+(IKabs((x4110+(((-1.0)*x4111))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4113=cj5*cj5;
IkReal x4114=r01*r01;
IkReal x4115=(r01*sj5);
IkReal x4116=(cj5*r00);
CheckValue<IkReal> x4117=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*x4113*(r00*r00)))+(((2.0)*x4115*x4116))+((x4113*x4114))+(((-1.0)*x4114)))),-1);
if(!x4117.valid){
continue;
}
CheckValue<IkReal> x4118 = IKatan2WithCheck(IkReal((x4115+(((-1.0)*x4116)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4118.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4117.value)))+(x4118.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4119=IKcos(j4);
IkReal x4120=IKsin(j4);
IkReal x4121=(cj5*r00);
IkReal x4122=(cj5*r10);
IkReal x4123=(r21*sj5);
IkReal x4124=(cj5*r20);
IkReal x4125=((1.0)*x4119);
IkReal x4126=((1.0)*x4120);
IkReal x4127=(sj5*x4120);
IkReal x4128=(sj5*x4119);
evalcond[0]=(((r02*x4120))+(((-1.0)*x4121*x4125))+((r01*x4128)));
evalcond[1]=((((-1.0)*r22*x4125))+((x4120*x4123))+(((-1.0)*x4124*x4126)));
evalcond[2]=((((-1.0)*r12*x4125))+(((-1.0)*x4122*x4126))+((r11*x4127)));
evalcond[3]=((1.0)+(((-1.0)*x4121*x4126))+(((-1.0)*r02*x4125))+((r01*x4127)));
evalcond[4]=(((r12*x4120))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4122*x4125))+((r11*x4128)));
evalcond[5]=((((-1.0)*x4124*x4125))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4120))+((x4119*x4123)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4129=((1.0)*cj5);
CheckValue<IkReal> x4130=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4129))+(((-1.0)*r20*sj5)))),-1);
if(!x4130.valid){
continue;
}
CheckValue<IkReal> x4131 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x4129)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4131.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4130.value)))+(x4131.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4132=IKcos(j4);
IkReal x4133=IKsin(j4);
IkReal x4134=(cj5*r00);
IkReal x4135=(cj5*r10);
IkReal x4136=(r21*sj5);
IkReal x4137=(cj5*r20);
IkReal x4138=((1.0)*x4132);
IkReal x4139=((1.0)*x4133);
IkReal x4140=(sj5*x4133);
IkReal x4141=(sj5*x4132);
evalcond[0]=(((r01*x4141))+(((-1.0)*x4134*x4138))+((r02*x4133)));
evalcond[1]=((((-1.0)*x4137*x4139))+(((-1.0)*r22*x4138))+((x4133*x4136)));
evalcond[2]=((((-1.0)*x4135*x4139))+((r11*x4140))+(((-1.0)*r12*x4138)));
evalcond[3]=((1.0)+((r01*x4140))+(((-1.0)*x4134*x4139))+(((-1.0)*r02*x4138)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4135*x4138))+((r11*x4141))+((r12*x4133)));
evalcond[5]=(((r22*x4133))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4132*x4136))+(((-1.0)*x4137*x4138)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4142 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4142.valid){
continue;
}
CheckValue<IkReal> x4143=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4142.value)+(((1.5707963267949)*(x4143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4144=IKcos(j4);
IkReal x4145=IKsin(j4);
IkReal x4146=(cj5*r00);
IkReal x4147=(cj5*r10);
IkReal x4148=(r21*sj5);
IkReal x4149=(cj5*r20);
IkReal x4150=((1.0)*x4144);
IkReal x4151=((1.0)*x4145);
IkReal x4152=(sj5*x4145);
IkReal x4153=(sj5*x4144);
evalcond[0]=(((r02*x4145))+(((-1.0)*x4146*x4150))+((r01*x4153)));
evalcond[1]=(((x4145*x4148))+(((-1.0)*x4149*x4151))+(((-1.0)*r22*x4150)));
evalcond[2]=((((-1.0)*x4147*x4151))+((r11*x4152))+(((-1.0)*r12*x4150)));
evalcond[3]=((1.0)+(((-1.0)*x4146*x4151))+((r01*x4152))+(((-1.0)*r02*x4150)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4147*x4150))+((cj1*sj2))+((r12*x4145))+((r11*x4153)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4145))+(((-1.0)*x4149*x4150))+((x4144*x4148)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4154=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4154);
rxp1_1=(px*r21);
rxp1_2=(r11*x4154);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4155=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4155);
rxp1_1=(px*r21);
rxp1_2=(r11*x4155);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4156=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4156);
rxp1_1=(px*r21);
rxp1_2=(r11*x4156);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4159=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4159.valid){
continue;
}
IkReal x4157=x4159.value;
IkReal x4158=(sj0*x4157);
cj4array[0]=(((cj2*sj1*x4158))+((cj1*sj2*x4158)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4160=IKsin(j4);
IkReal x4161=IKcos(j4);
IkReal x4162=(r21*sj5);
IkReal x4163=((1.0)*cj5*r20);
evalcond[0]=(r02*x4160);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4161)));
evalcond[2]=((((-1.0)*x4160*x4163))+((x4160*x4162)));
evalcond[3]=((((-1.0)*cj5*r10*x4160))+((r11*sj5*x4160)));
evalcond[4]=((((-1.0)*x4161*x4163))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4161*x4162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4165=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4165.valid){
continue;
}
IkReal x4164=x4165.value;
cj4array[0]=((((-1.0)*sj1*sj2*x4164))+((cj1*cj2*x4164)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4166=IKsin(j4);
IkReal x4167=IKcos(j4);
IkReal x4168=((1.0)*sj0);
IkReal x4169=((1.0)*cj5);
IkReal x4170=(sj5*x4166);
evalcond[0]=(r02*x4166);
evalcond[1]=((((-1.0)*x4168))+(((-1.0)*r02*x4167)));
evalcond[2]=(((r21*x4170))+(((-1.0)*r20*x4166*x4169)));
evalcond[3]=(((r11*x4170))+(((-1.0)*r10*x4166*x4169)));
evalcond[4]=((((-1.0)*cj1*sj2*x4168))+(((-1.0)*cj2*sj1*x4168))+(((-1.0)*r10*x4167*x4169))+((r11*sj5*x4167)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4171=IKPowWithIntegerCheck(r02,-1);
if(!x4171.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4171.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4172=IKsin(j4);
IkReal x4173=IKcos(j4);
IkReal x4174=((1.0)*cj1);
IkReal x4175=(r21*sj5);
IkReal x4176=((1.0)*cj5);
IkReal x4177=(r11*sj5);
evalcond[0]=(r02*x4172);
evalcond[1]=((((-1.0)*r20*x4172*x4176))+((x4172*x4175)));
evalcond[2]=((((-1.0)*r10*x4172*x4176))+((x4172*x4177)));
evalcond[3]=(((x4173*x4175))+(((-1.0)*r20*x4173*x4176))+((sj1*sj2))+(((-1.0)*cj2*x4174)));
evalcond[4]=(((x4173*x4177))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x4173*x4176))+(((-1.0)*sj0*sj2*x4174)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4178=((1.0)*sj0);
IkReal x4179=((1.0)*cj0);
CheckValue<IkReal> x4180 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x4179))+(((-1.0)*r12*x4178)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4178))+(((-1.0)*r01*sj5*x4179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4180.valid){
continue;
}
CheckValue<IkReal> x4181=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4180.value)+(((1.5707963267949)*(x4181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4182=IKsin(j4);
IkReal x4183=IKcos(j4);
IkReal x4184=(cj5*r00);
IkReal x4185=(cj5*r10);
IkReal x4186=(r21*sj5);
IkReal x4187=((1.0)*cj2);
IkReal x4188=((1.0)*sj0);
IkReal x4189=(cj1*sj2);
IkReal x4190=(cj5*r20);
IkReal x4191=((1.0)*x4183);
IkReal x4192=((1.0)*x4182);
IkReal x4193=(sj5*x4182);
IkReal x4194=(sj5*x4183);
evalcond[0]=((((-1.0)*x4190*x4192))+((x4182*x4186))+(((-1.0)*r22*x4191)));
evalcond[1]=((((-1.0)*r12*x4191))+((r11*x4193))+cj0+(((-1.0)*x4185*x4192)));
evalcond[2]=((((-1.0)*x4188))+(((-1.0)*r02*x4191))+((r01*x4193))+(((-1.0)*x4184*x4192)));
evalcond[3]=((((-1.0)*cj1*x4187))+((sj1*sj2))+((r22*x4182))+((x4183*x4186))+(((-1.0)*x4190*x4191)));
evalcond[4]=(((r02*x4182))+(((-1.0)*cj0*sj1*x4187))+(((-1.0)*cj0*x4189))+((r01*x4194))+(((-1.0)*x4184*x4191)));
evalcond[5]=(((r12*x4182))+((r11*x4194))+(((-1.0)*x4185*x4191))+(((-1.0)*sj0*sj1*x4187))+(((-1.0)*x4188*x4189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4195=((1.0)*cj5);
CheckValue<IkReal> x4196=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4195))+(((-1.0)*r10*sj5)))),-1);
if(!x4196.valid){
continue;
}
CheckValue<IkReal> x4197 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4195)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4197.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4196.value)))+(x4197.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4198=IKsin(j4);
IkReal x4199=IKcos(j4);
IkReal x4200=(cj5*r00);
IkReal x4201=(cj5*r10);
IkReal x4202=(r21*sj5);
IkReal x4203=((1.0)*cj2);
IkReal x4204=((1.0)*sj0);
IkReal x4205=(cj1*sj2);
IkReal x4206=(cj5*r20);
IkReal x4207=((1.0)*x4199);
IkReal x4208=((1.0)*x4198);
IkReal x4209=(sj5*x4198);
IkReal x4210=(sj5*x4199);
evalcond[0]=(((x4198*x4202))+(((-1.0)*x4206*x4208))+(((-1.0)*r22*x4207)));
evalcond[1]=(((r11*x4209))+(((-1.0)*r12*x4207))+cj0+(((-1.0)*x4201*x4208)));
evalcond[2]=((((-1.0)*r02*x4207))+(((-1.0)*x4204))+((r01*x4209))+(((-1.0)*x4200*x4208)));
evalcond[3]=(((x4199*x4202))+(((-1.0)*x4206*x4207))+((sj1*sj2))+((r22*x4198))+(((-1.0)*cj1*x4203)));
evalcond[4]=(((r02*x4198))+(((-1.0)*cj0*x4205))+(((-1.0)*cj0*sj1*x4203))+((r01*x4210))+(((-1.0)*x4200*x4207)));
evalcond[5]=(((r12*x4198))+(((-1.0)*x4201*x4207))+((r11*x4210))+(((-1.0)*sj0*sj1*x4203))+(((-1.0)*x4204*x4205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4211=((1.0)*cj5);
CheckValue<IkReal> x4212=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4211))+(((-1.0)*r00*sj5)))),-1);
if(!x4212.valid){
continue;
}
CheckValue<IkReal> x4213 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4211)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4213.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4212.value)))+(x4213.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4214=IKsin(j4);
IkReal x4215=IKcos(j4);
IkReal x4216=(cj5*r00);
IkReal x4217=(cj5*r10);
IkReal x4218=(r21*sj5);
IkReal x4219=((1.0)*cj2);
IkReal x4220=((1.0)*sj0);
IkReal x4221=(cj1*sj2);
IkReal x4222=(cj5*r20);
IkReal x4223=((1.0)*x4215);
IkReal x4224=((1.0)*x4214);
IkReal x4225=(sj5*x4214);
IkReal x4226=(sj5*x4215);
evalcond[0]=(((x4214*x4218))+(((-1.0)*x4222*x4224))+(((-1.0)*r22*x4223)));
evalcond[1]=(cj0+(((-1.0)*r12*x4223))+(((-1.0)*x4217*x4224))+((r11*x4225)));
evalcond[2]=((((-1.0)*x4220))+((r01*x4225))+(((-1.0)*r02*x4223))+(((-1.0)*x4216*x4224)));
evalcond[3]=(((r22*x4214))+(((-1.0)*x4222*x4223))+((sj1*sj2))+((x4215*x4218))+(((-1.0)*cj1*x4219)));
evalcond[4]=((((-1.0)*cj0*sj1*x4219))+((r01*x4226))+((r02*x4214))+(((-1.0)*x4216*x4223))+(((-1.0)*cj0*x4221)));
evalcond[5]=(((r12*x4214))+(((-1.0)*sj0*sj1*x4219))+(((-1.0)*x4217*x4223))+((r11*x4226))+(((-1.0)*x4220*x4221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4227=r21*r21;
IkReal x4228=cj5*cj5;
IkReal x4229=(sj1*sj2);
IkReal x4230=(r21*sj5);
IkReal x4231=(cj1*cj2);
IkReal x4232=(cj5*r20);
CheckValue<IkReal> x4233=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4227))+((x4227*x4228))+(((-1.0)*x4228*(r20*r20)))+(((-1.0)*(r22*r22)))+(((2.0)*x4230*x4232)))),-1);
if(!x4233.valid){
continue;
}
CheckValue<IkReal> x4234 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x4231))+((r22*x4229)))),IkReal(((((-1.0)*x4230*x4231))+((x4231*x4232))+(((-1.0)*x4229*x4232))+((x4229*x4230)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4234.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4233.value)))+(x4234.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x4235=IKsin(j4);
IkReal x4236=IKcos(j4);
IkReal x4237=(r21*sj5);
IkReal x4238=(cj5*r20);
IkReal x4239=((1.0)*x4236);
evalcond[0]=(((x4235*x4237))+(((-1.0)*x4235*x4238))+(((-1.0)*r22*x4239)));
evalcond[1]=(((x4236*x4237))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4235))+(((-1.0)*x4238*x4239)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x4240=(cj5*sj4);
IkReal x4241=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x4241))+(((-1.0)*r00*x4240)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x4240))+(((-1.0)*r11*x4241))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x4241))+(((-1.0)*r00*x4240))))+IKsqr((((r10*x4240))+(((-1.0)*r11*x4241))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x4241))+(((-1.0)*r00*x4240))), (((r10*x4240))+(((-1.0)*r11*x4241))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x4242=IKcos(j0);
IkReal x4243=IKsin(j0);
IkReal x4244=((1.0)*cj1);
IkReal x4245=((0.39225)*sj1);
IkReal x4246=(r11*sj5);
IkReal x4247=(cj5*r11);
IkReal x4248=((1.0)*sj5);
IkReal x4249=((1.0)*sj1);
IkReal x4250=((0.09465)*sj5);
IkReal x4251=((1.0)*cj5);
IkReal x4252=((0.425)*cj1);
IkReal x4253=((1.0)*cj4);
IkReal x4254=(r01*sj5);
IkReal x4255=(sj2*x4242);
IkReal x4256=(sj2*x4243);
IkReal x4257=(cj4*x4251);
IkReal x4258=((0.39225)*cj1*cj2);
IkReal x4259=(cj2*x4242);
IkReal x4260=(cj2*x4243);
evalcond[0]=(((sj4*x4246))+(((-1.0)*r10*sj4*x4251))+x4242+(((-1.0)*r12*x4253)));
evalcond[1]=(((sj4*x4254))+(((-1.0)*r00*sj4*x4251))+(((-1.0)*r02*x4253))+(((-1.0)*x4243)));
evalcond[2]=((((-1.0)*x4244*x4259))+(((-1.0)*r01*x4251))+((sj1*x4255))+(((-1.0)*r00*x4248)));
evalcond[3]=((((-1.0)*x4244*x4260))+(((-1.0)*r10*x4248))+((sj1*x4256))+(((-1.0)*x4247)));
evalcond[4]=(((r02*sj4))+(((-1.0)*x4244*x4255))+((cj4*x4254))+(((-1.0)*r00*x4257))+(((-1.0)*x4249*x4259)));
evalcond[5]=(((cj4*x4246))+(((-1.0)*x4244*x4256))+((r12*sj4))+(((-1.0)*x4249*x4260))+(((-1.0)*r10*x4257)));
evalcond[6]=((((-1.0)*x4245*x4255))+(((-0.09465)*cj5*r01))+((x4242*x4252))+((x4242*x4258))+(((-0.10915)*x4243))+(((-1.0)*px))+(((-1.0)*r00*x4250)));
evalcond[7]=((((-1.0)*x4245*x4256))+(((0.10915)*x4242))+(((-1.0)*py))+((x4243*x4258))+((x4243*x4252))+(((-1.0)*r10*x4250))+(((-0.09465)*x4247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x4261 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4261.valid){
continue;
}
CheckValue<IkReal> x4262=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj1*cj2))+((sj1*sj2)))),-1);
if(!x4262.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x4261.value)+(((1.5707963267949)*(x4262.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x4263=IKcos(j0);
IkReal x4264=IKsin(j0);
IkReal x4265=(cj5*r11);
IkReal x4266=(cj5*r01);
IkReal x4267=((1.0)*sj5);
IkReal x4268=((0.09465)*sj5);
IkReal x4269=(sj1*sj2);
IkReal x4270=((0.39225)*cj2);
IkReal x4271=((1.0)*cj2);
IkReal x4272=((0.39225)*x4269);
IkReal x4273=(cj1*x4263);
IkReal x4274=(cj1*x4264);
evalcond[0]=((((-1.0)*r00*x4267))+((x4263*x4269))+(((-1.0)*x4271*x4273))+(((-1.0)*x4266)));
evalcond[1]=((((-1.0)*r10*x4267))+(((-1.0)*x4271*x4274))+((x4264*x4269))+(((-1.0)*x4265)));
evalcond[2]=(((x4270*x4273))+(((-1.0)*x4263*x4272))+(((-1.0)*r00*x4268))+(((-1.0)*px))+(((-0.10915)*x4264))+(((0.425)*x4273))+(((-0.09465)*x4266)));
evalcond[3]=((((0.10915)*x4263))+(((-1.0)*x4264*x4272))+(((-1.0)*r10*x4268))+((x4270*x4274))+(((-1.0)*py))+(((0.425)*x4274))+(((-0.09465)*x4265)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4275=((1.0)*cj5);
IkReal x4276=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4275)));
j4eval[0]=x4276;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4275))))));
j4eval[2]=IKsign(x4276);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4277=((1.0)*cj5);
IkReal x4278=((((-1.0)*r11*x4277))+(((-1.0)*r10*sj5)));
j4eval[0]=x4278;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x4277))))));
j4eval[2]=IKsign(x4278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x4279=((1.0)*sj0);
IkReal x4280=((1.0)*cj0);
IkReal x4281=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x4281;
j4eval[1]=((IKabs(((((-1.0)*r12*x4279))+(((-1.0)*r02*x4280)))))+(IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x4280))+(((-1.0)*r11*sj5*x4279))))));
j4eval[2]=IKsign(x4281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x4282=((-1.0)*r20);
IkReal x4284 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4284)==0){
continue;
}
IkReal x4283=pow(x4284,-0.5);
CheckValue<IkReal> x4285 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4282),IKFAST_ATAN2_MAGTHRESH);
if(!x4285.valid){
continue;
}
IkReal gconst96=((-1.0)*(x4285.value));
IkReal gconst97=(r21*x4283);
IkReal gconst98=(x4282*x4283);
CheckValue<IkReal> x4286 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4286.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4286.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4287=((-1.0)*r20);
IkReal x4288=x4283;
CheckValue<IkReal> x4290 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4287),IKFAST_ATAN2_MAGTHRESH);
if(!x4290.valid){
continue;
}
IkReal x4289=((-1.0)*(x4290.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4289;
IkReal gconst96=x4289;
IkReal gconst97=(r21*x4288);
IkReal gconst98=(x4287*x4288);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4291=((-1.0)*r20);
IkReal x4292=x4283;
CheckValue<IkReal> x4294 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4291),IKFAST_ATAN2_MAGTHRESH);
if(!x4294.valid){
continue;
}
IkReal x4293=((-1.0)*(x4294.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4293;
IkReal gconst96=x4293;
IkReal gconst97=(r21*x4292);
IkReal gconst98=(x4291*x4292);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x4295=((-1.0)*r20);
IkReal x4296=x4283;
CheckValue<IkReal> x4298 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x4295),IKFAST_ATAN2_MAGTHRESH);
if(!x4298.valid){
continue;
}
IkReal x4297=((-1.0)*(x4298.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst97;
cj5=gconst98;
j5=x4297;
IkReal gconst96=x4297;
IkReal gconst97=(r21*x4296);
IkReal gconst98=(x4295*x4296);
IkReal x4299=((1.0)*(r22*r22));
CheckValue<IkReal> x4303=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x4299))),-1);
if(!x4303.valid){
continue;
}
IkReal x4300=x4303.value;
IkReal x4301=((1.0)*x4300);
IkReal x4302=((((-2.0)*x4300*(r20*r20)*(r21*r21)))+(((-1.0)*x4301*(r20*r20*r20*r20)))+(((-1.0)*x4299))+(((-1.0)*x4301*(r21*r21*r21*r21))));
j4eval[0]=x4302;
j4eval[1]=IKsign(x4302);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4304=(cj1*cj2);
IkReal x4305=(gconst98*r20);
IkReal x4306=(sj1*sj2);
IkReal x4307=(gconst97*r21);
CheckValue<IkReal> x4308 = IKatan2WithCheck(IkReal((((r22*x4306))+(((-1.0)*r22*x4304)))),IkReal(((((-1.0)*x4304*x4307))+((x4306*x4307))+((x4304*x4305))+(((-1.0)*x4305*x4306)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4308.valid){
continue;
}
CheckValue<IkReal> x4309=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4307*x4307)))+(((-1.0)*(x4305*x4305)))+(((2.0)*x4305*x4307))+(((-1.0)*(r22*r22))))),-1);
if(!x4309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4308.value)+(((1.5707963267949)*(x4309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4310=IKsin(j4);
IkReal x4311=IKcos(j4);
IkReal x4312=(gconst98*r10);
IkReal x4313=(gconst97*r21);
IkReal x4314=(gconst98*r20);
IkReal x4315=((1.0)*cj2);
IkReal x4316=((1.0)*sj0);
IkReal x4317=(gconst98*r00);
IkReal x4318=(cj1*sj2);
IkReal x4319=((1.0)*x4311);
IkReal x4320=((1.0)*x4310);
IkReal x4321=(gconst97*x4310);
IkReal x4322=(gconst97*x4311);
evalcond[0]=(((x4310*x4313))+(((-1.0)*r22*x4319))+(((-1.0)*x4314*x4320)));
evalcond[1]=(cj0+(((-1.0)*x4312*x4320))+((r11*x4321))+(((-1.0)*r12*x4319)));
evalcond[2]=((((-1.0)*x4317*x4320))+(((-1.0)*x4316))+(((-1.0)*r02*x4319))+((r01*x4321)));
evalcond[3]=((((-1.0)*cj1*x4315))+((x4311*x4313))+((sj1*sj2))+(((-1.0)*x4314*x4319))+((r22*x4310)));
evalcond[4]=((((-1.0)*cj0*x4318))+(((-1.0)*x4317*x4319))+(((-1.0)*cj0*sj1*x4315))+((r02*x4310))+((r01*x4322)));
evalcond[5]=((((-1.0)*x4312*x4319))+((r12*x4310))+(((-1.0)*x4316*x4318))+(((-1.0)*sj0*sj1*x4315))+((r11*x4322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4323=((1.0)*gconst98);
CheckValue<IkReal> x4324=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4323))+(((-1.0)*gconst97*r10)))),-1);
if(!x4324.valid){
continue;
}
CheckValue<IkReal> x4325 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst97*r21*sj0))+(((-1.0)*r20*sj0*x4323)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4325.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4324.value)))+(x4325.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4326=IKsin(j4);
IkReal x4327=IKcos(j4);
IkReal x4328=(gconst98*r10);
IkReal x4329=(gconst97*r21);
IkReal x4330=(gconst98*r20);
IkReal x4331=((1.0)*cj2);
IkReal x4332=((1.0)*sj0);
IkReal x4333=(gconst98*r00);
IkReal x4334=(cj1*sj2);
IkReal x4335=((1.0)*x4327);
IkReal x4336=((1.0)*x4326);
IkReal x4337=(gconst97*x4326);
IkReal x4338=(gconst97*x4327);
evalcond[0]=((((-1.0)*x4330*x4336))+((x4326*x4329))+(((-1.0)*r22*x4335)));
evalcond[1]=(cj0+(((-1.0)*r12*x4335))+((r11*x4337))+(((-1.0)*x4328*x4336)));
evalcond[2]=(((r01*x4337))+(((-1.0)*x4333*x4336))+(((-1.0)*r02*x4335))+(((-1.0)*x4332)));
evalcond[3]=((((-1.0)*x4330*x4335))+((x4327*x4329))+((sj1*sj2))+(((-1.0)*cj1*x4331))+((r22*x4326)));
evalcond[4]=(((r01*x4338))+(((-1.0)*x4333*x4335))+(((-1.0)*cj0*sj1*x4331))+((r02*x4326))+(((-1.0)*cj0*x4334)));
evalcond[5]=((((-1.0)*x4332*x4334))+(((-1.0)*sj0*sj1*x4331))+((r12*x4326))+((r11*x4338))+(((-1.0)*x4328*x4335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4339=((1.0)*gconst98);
CheckValue<IkReal> x4340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4339))+(((-1.0)*gconst97*r00)))),-1);
if(!x4340.valid){
continue;
}
CheckValue<IkReal> x4341 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4339))+((cj0*gconst97*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4340.value)))+(x4341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4342=IKsin(j4);
IkReal x4343=IKcos(j4);
IkReal x4344=(gconst98*r10);
IkReal x4345=(gconst97*r21);
IkReal x4346=(gconst98*r20);
IkReal x4347=((1.0)*cj2);
IkReal x4348=((1.0)*sj0);
IkReal x4349=(gconst98*r00);
IkReal x4350=(cj1*sj2);
IkReal x4351=((1.0)*x4343);
IkReal x4352=((1.0)*x4342);
IkReal x4353=(gconst97*x4342);
IkReal x4354=(gconst97*x4343);
evalcond[0]=(((x4342*x4345))+(((-1.0)*r22*x4351))+(((-1.0)*x4346*x4352)));
evalcond[1]=((((-1.0)*x4344*x4352))+cj0+(((-1.0)*r12*x4351))+((r11*x4353)));
evalcond[2]=((((-1.0)*r02*x4351))+(((-1.0)*x4348))+(((-1.0)*x4349*x4352))+((r01*x4353)));
evalcond[3]=(((x4343*x4345))+((sj1*sj2))+((r22*x4342))+(((-1.0)*cj1*x4347))+(((-1.0)*x4346*x4351)));
evalcond[4]=((((-1.0)*x4349*x4351))+((r02*x4342))+(((-1.0)*cj0*sj1*x4347))+(((-1.0)*cj0*x4350))+((r01*x4354)));
evalcond[5]=((((-1.0)*x4344*x4351))+(((-1.0)*sj0*sj1*x4347))+((r12*x4342))+((r11*x4354))+(((-1.0)*x4348*x4350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4355=((-1.0)*r21);
IkReal x4357 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x4357)==0){
continue;
}
IkReal x4356=pow(x4357,-0.5);
CheckValue<IkReal> x4358 = IKatan2WithCheck(IkReal(x4355),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4358.valid){
continue;
}
IkReal gconst99=((3.14159265358979)+(((-1.0)*(x4358.value))));
IkReal gconst100=(x4355*x4356);
IkReal gconst101=((1.0)*r20*x4356);
CheckValue<IkReal> x4359 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4359.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4359.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4360=((-1.0)*r21);
CheckValue<IkReal> x4363 = IKatan2WithCheck(IkReal(x4360),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4363.valid){
continue;
}
IkReal x4361=((1.0)*(x4363.value));
IkReal x4362=x4356;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4361)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4361)));
IkReal gconst100=(x4360*x4362);
IkReal gconst101=((1.0)*r20*x4362);
IkReal x4364=r22*r22;
IkReal x4365=((1.0)*x4364);
CheckValue<IkReal> x4369=IKPowWithIntegerCheck(((-1.0)+x4364),-1);
if(!x4369.valid){
continue;
}
IkReal x4366=x4369.value;
if((((1.0)+(((-1.0)*x4365)))) < -0.00001)
continue;
IkReal x4367=IKsqrt(((1.0)+(((-1.0)*x4365))));
IkReal x4368=(cj0*x4366*x4367);
j4eval[0]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*x4365*x4368))+x4368))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4370=((-1.0)*r21);
CheckValue<IkReal> x4373 = IKatan2WithCheck(IkReal(x4370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4373.valid){
continue;
}
IkReal x4371=((1.0)*(x4373.value));
IkReal x4372=x4356;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4371)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4371)));
IkReal gconst100=(x4370*x4372);
IkReal gconst101=((1.0)*r20*x4372);
IkReal x4374=r22*r22;
IkReal x4375=((1.0)*x4374);
CheckValue<IkReal> x4379=IKPowWithIntegerCheck(((-1.0)+x4374),-1);
if(!x4379.valid){
continue;
}
IkReal x4376=x4379.value;
if((((1.0)+(((-1.0)*x4375)))) < -0.00001)
continue;
IkReal x4377=IKsqrt(((1.0)+(((-1.0)*x4375))));
IkReal x4378=(sj0*x4376*x4377);
j4eval[0]=((IKabs(((((-1.0)*x4375*x4378))+x4378)))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4380=((-1.0)*r21);
CheckValue<IkReal> x4383 = IKatan2WithCheck(IkReal(x4380),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x4383.valid){
continue;
}
IkReal x4381=((1.0)*(x4383.value));
IkReal x4382=x4356;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst100;
cj5=gconst101;
j5=((3.14159265)+(((-1.0)*x4381)));
IkReal gconst99=((3.14159265358979)+(((-1.0)*x4381)));
IkReal gconst100=(x4380*x4382);
IkReal gconst101=((1.0)*r20*x4382);
IkReal x4384=r22*r22;
IkReal x4385=(r12*sj0);
IkReal x4386=(cj0*r02);
CheckValue<IkReal> x4390=IKPowWithIntegerCheck(((-1.0)+x4384),-1);
if(!x4390.valid){
continue;
}
IkReal x4387=x4390.value;
if((((1.0)+(((-1.0)*x4384)))) < -0.00001)
continue;
IkReal x4388=IKsqrt(((1.0)+(((-1.0)*x4384))));
IkReal x4389=(r22*x4387*x4388);
j4eval[0]=0;
j4eval[1]=((IKabs((((x4385*x4389))+((x4386*x4389)))))+(IKabs(((((-1.0)*x4386))+(((-1.0)*x4385))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4391=((1.0)*sj0);
IkReal x4392=((1.0)*gconst100);
CheckValue<IkReal> x4393=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst101*r21))+(((-1.0)*r20*x4392)))),-1);
if(!x4393.valid){
continue;
}
CheckValue<IkReal> x4394 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4391))+(((-1.0)*cj0*r02)))),IkReal((((gconst101*r10*sj0))+((cj0*gconst101*r00))+(((-1.0)*gconst100*r11*x4391))+(((-1.0)*cj0*r01*x4392)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4393.value)))+(x4394.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4395=IKsin(j4);
IkReal x4396=IKcos(j4);
IkReal x4397=(gconst101*r20);
IkReal x4398=(gconst101*r10);
IkReal x4399=((1.0)*cj2);
IkReal x4400=(gconst101*r00);
IkReal x4401=((1.0)*sj0);
IkReal x4402=(cj1*sj2);
IkReal x4403=((1.0)*x4396);
IkReal x4404=((1.0)*x4395);
IkReal x4405=(gconst100*x4395);
IkReal x4406=(gconst100*x4396);
evalcond[0]=(((r21*x4405))+(((-1.0)*r22*x4403))+(((-1.0)*x4397*x4404)));
evalcond[1]=(((r11*x4405))+cj0+(((-1.0)*r12*x4403))+(((-1.0)*x4398*x4404)));
evalcond[2]=((((-1.0)*x4400*x4404))+((r01*x4405))+(((-1.0)*r02*x4403))+(((-1.0)*x4401)));
evalcond[3]=(((r21*x4406))+((r22*x4395))+((sj1*sj2))+(((-1.0)*cj1*x4399))+(((-1.0)*x4397*x4403)));
evalcond[4]=((((-1.0)*cj0*sj1*x4399))+(((-1.0)*cj0*x4402))+(((-1.0)*x4400*x4403))+((r02*x4395))+((r01*x4406)));
evalcond[5]=((((-1.0)*sj0*sj1*x4399))+((r11*x4406))+(((-1.0)*x4401*x4402))+(((-1.0)*x4398*x4403))+((r12*x4395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4407=((1.0)*gconst101);
CheckValue<IkReal> x4408 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4407))+((gconst100*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4408.valid){
continue;
}
CheckValue<IkReal> x4409=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst100*r10))+(((-1.0)*r11*x4407)))),-1);
if(!x4409.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4408.value)+(((1.5707963267949)*(x4409.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4410=IKsin(j4);
IkReal x4411=IKcos(j4);
IkReal x4412=(gconst101*r20);
IkReal x4413=(gconst101*r10);
IkReal x4414=((1.0)*cj2);
IkReal x4415=(gconst101*r00);
IkReal x4416=((1.0)*sj0);
IkReal x4417=(cj1*sj2);
IkReal x4418=((1.0)*x4411);
IkReal x4419=((1.0)*x4410);
IkReal x4420=(gconst100*x4410);
IkReal x4421=(gconst100*x4411);
evalcond[0]=((((-1.0)*x4412*x4419))+(((-1.0)*r22*x4418))+((r21*x4420)));
evalcond[1]=(cj0+(((-1.0)*r12*x4418))+(((-1.0)*x4413*x4419))+((r11*x4420)));
evalcond[2]=((((-1.0)*r02*x4418))+(((-1.0)*x4416))+((r01*x4420))+(((-1.0)*x4415*x4419)));
evalcond[3]=(((r22*x4410))+((sj1*sj2))+(((-1.0)*x4412*x4418))+((r21*x4421))+(((-1.0)*cj1*x4414)));
evalcond[4]=((((-1.0)*cj0*sj1*x4414))+(((-1.0)*cj0*x4417))+((r01*x4421))+(((-1.0)*x4415*x4418))+((r02*x4410)));
evalcond[5]=(((r12*x4410))+(((-1.0)*x4413*x4418))+(((-1.0)*sj0*sj1*x4414))+(((-1.0)*x4416*x4417))+((r11*x4421)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4422=((1.0)*gconst101);
CheckValue<IkReal> x4423=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4422))+(((-1.0)*gconst100*r00)))),-1);
if(!x4423.valid){
continue;
}
CheckValue<IkReal> x4424 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst100*r21))+(((-1.0)*cj0*r20*x4422)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4424.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4423.value)))+(x4424.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4425=IKsin(j4);
IkReal x4426=IKcos(j4);
IkReal x4427=(gconst101*r20);
IkReal x4428=(gconst101*r10);
IkReal x4429=((1.0)*cj2);
IkReal x4430=(gconst101*r00);
IkReal x4431=((1.0)*sj0);
IkReal x4432=(cj1*sj2);
IkReal x4433=((1.0)*x4426);
IkReal x4434=((1.0)*x4425);
IkReal x4435=(gconst100*x4425);
IkReal x4436=(gconst100*x4426);
evalcond[0]=((((-1.0)*x4427*x4434))+(((-1.0)*r22*x4433))+((r21*x4435)));
evalcond[1]=((((-1.0)*x4428*x4434))+cj0+(((-1.0)*r12*x4433))+((r11*x4435)));
evalcond[2]=((((-1.0)*r02*x4433))+(((-1.0)*x4430*x4434))+(((-1.0)*x4431))+((r01*x4435)));
evalcond[3]=((((-1.0)*x4427*x4433))+((sj1*sj2))+((r22*x4425))+(((-1.0)*cj1*x4429))+((r21*x4436)));
evalcond[4]=((((-1.0)*x4430*x4433))+((r02*x4425))+(((-1.0)*cj0*x4432))+(((-1.0)*cj0*sj1*x4429))+((r01*x4436)));
evalcond[5]=((((-1.0)*x4428*x4433))+(((-1.0)*sj0*sj1*x4429))+(((-1.0)*x4431*x4432))+((r11*x4436))+((r12*x4425)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4437=((-1.0)*r10);
IkReal x4439 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4439)==0){
continue;
}
IkReal x4438=pow(x4439,-0.5);
CheckValue<IkReal> x4440 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4437),IKFAST_ATAN2_MAGTHRESH);
if(!x4440.valid){
continue;
}
IkReal gconst102=((-1.0)*(x4440.value));
IkReal gconst103=(r11*x4438);
IkReal gconst104=(x4437*x4438);
CheckValue<IkReal> x4441 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4441.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4441.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4442=((-1.0)*r10);
IkReal x4443=x4438;
CheckValue<IkReal> x4445 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x4442),IKFAST_ATAN2_MAGTHRESH);
if(!x4445.valid){
continue;
}
IkReal x4444=((-1.0)*(x4445.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst103;
cj5=gconst104;
j5=x4444;
IkReal gconst102=x4444;
IkReal gconst103=(r11*x4443);
IkReal gconst104=(x4442*x4443);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4446=((1.0)*sj0);
IkReal x4447=((1.0)*gconst103);
CheckValue<IkReal> x4448=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst104*r21))+(((-1.0)*r20*x4447)))),-1);
if(!x4448.valid){
continue;
}
CheckValue<IkReal> x4449 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4446))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst103*r11*x4446))+(((-1.0)*cj0*r01*x4447))+((gconst104*r10*sj0))+((cj0*gconst104*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4449.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4448.value)))+(x4449.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4450=IKsin(j4);
IkReal x4451=IKcos(j4);
IkReal x4452=(gconst103*r11);
IkReal x4453=((1.0)*cj2);
IkReal x4454=((1.0)*sj0);
IkReal x4455=(cj1*sj2);
IkReal x4456=((1.0)*x4451);
IkReal x4457=(gconst103*x4451);
IkReal x4458=(gconst103*x4450);
IkReal x4459=((1.0)*gconst104*x4450);
evalcond[0]=(((r21*x4458))+(((-1.0)*r22*x4456))+(((-1.0)*r20*x4459)));
evalcond[1]=(cj0+((x4450*x4452))+(((-1.0)*r12*x4456))+(((-1.0)*r10*x4459)));
evalcond[2]=((((-1.0)*x4454))+((r01*x4458))+(((-1.0)*r02*x4456))+(((-1.0)*r00*x4459)));
evalcond[3]=((((-1.0)*gconst104*r20*x4456))+((r21*x4457))+((sj1*sj2))+(((-1.0)*cj1*x4453))+((r22*x4450)));
evalcond[4]=((((-1.0)*gconst104*r00*x4456))+((r01*x4457))+(((-1.0)*cj0*sj1*x4453))+(((-1.0)*cj0*x4455))+((r02*x4450)));
evalcond[5]=(((x4451*x4452))+(((-1.0)*x4454*x4455))+(((-1.0)*gconst104*r10*x4456))+((r12*x4450))+(((-1.0)*sj0*sj1*x4453)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4460=((1.0)*gconst104);
CheckValue<IkReal> x4461 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4460))+((cj0*gconst103*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4461.valid){
continue;
}
CheckValue<IkReal> x4462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4460))+(((-1.0)*gconst103*r00)))),-1);
if(!x4462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4461.value)+(((1.5707963267949)*(x4462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4463=IKsin(j4);
IkReal x4464=IKcos(j4);
IkReal x4465=(gconst103*r11);
IkReal x4466=((1.0)*cj2);
IkReal x4467=((1.0)*sj0);
IkReal x4468=(cj1*sj2);
IkReal x4469=((1.0)*x4464);
IkReal x4470=(gconst103*x4464);
IkReal x4471=(gconst103*x4463);
IkReal x4472=((1.0)*gconst104*x4463);
evalcond[0]=(((r21*x4471))+(((-1.0)*r20*x4472))+(((-1.0)*r22*x4469)));
evalcond[1]=(cj0+(((-1.0)*r12*x4469))+(((-1.0)*r10*x4472))+((x4463*x4465)));
evalcond[2]=((((-1.0)*r02*x4469))+(((-1.0)*x4467))+(((-1.0)*r00*x4472))+((r01*x4471)));
evalcond[3]=(((r22*x4463))+((r21*x4470))+((sj1*sj2))+(((-1.0)*cj1*x4466))+(((-1.0)*gconst104*r20*x4469)));
evalcond[4]=((((-1.0)*cj0*sj1*x4466))+(((-1.0)*gconst104*r00*x4469))+((r01*x4470))+(((-1.0)*cj0*x4468))+((r02*x4463)));
evalcond[5]=(((r12*x4463))+(((-1.0)*sj0*sj1*x4466))+(((-1.0)*gconst104*r10*x4469))+((x4464*x4465))+(((-1.0)*x4467*x4468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4473=((-1.0)*r11);
IkReal x4475 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x4475)==0){
continue;
}
IkReal x4474=pow(x4475,-0.5);
CheckValue<IkReal> x4476 = IKatan2WithCheck(IkReal(x4473),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4476.valid){
continue;
}
IkReal gconst105=((3.14159265358979)+(((-1.0)*(x4476.value))));
IkReal gconst106=(x4473*x4474);
IkReal gconst107=((1.0)*r10*x4474);
CheckValue<IkReal> x4477 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4477.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4477.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4478=((-1.0)*r11);
CheckValue<IkReal> x4481 = IKatan2WithCheck(IkReal(x4478),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4481.valid){
continue;
}
IkReal x4479=((1.0)*(x4481.value));
IkReal x4480=x4474;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4479)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4479)));
IkReal gconst106=(x4478*x4480);
IkReal gconst107=((1.0)*r10*x4480);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4482=((-1.0)*r11);
CheckValue<IkReal> x4485 = IKatan2WithCheck(IkReal(x4482),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4485.valid){
continue;
}
IkReal x4483=((1.0)*(x4485.value));
IkReal x4484=x4474;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4483)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4483)));
IkReal gconst106=(x4482*x4484);
IkReal gconst107=((1.0)*r10*x4484);
IkReal x4486=r12*r12;
IkReal x4487=((1.0)*sj0);
IkReal x4488=(cj0*r02);
IkReal x4489=x4474;
j4eval[0]=((IKabs(((((-1.0)*x4487*x4489))+((sj0*x4486*x4489))+((r12*x4488*x4489)))))+(IKabs(((((-1.0)*x4488))+(((-1.0)*r12*x4487))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4490=((-1.0)*r11);
CheckValue<IkReal> x4493 = IKatan2WithCheck(IkReal(x4490),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x4493.valid){
continue;
}
IkReal x4491=((1.0)*(x4493.value));
IkReal x4492=x4474;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst106;
cj5=gconst107;
j5=((3.14159265)+(((-1.0)*x4491)));
IkReal gconst105=((3.14159265358979)+(((-1.0)*x4491)));
IkReal gconst106=(x4490*x4492);
IkReal gconst107=((1.0)*r10*x4492);
IkReal x4494=r12*r12;
IkReal x4495=((1.0)+(((-1.0)*x4494)));
IkReal x4496=(r22*sj1*sj2);
IkReal x4497=(cj1*cj2*r22);
CheckValue<IkReal> x4504=IKPowWithIntegerCheck(x4495,-1);
if(!x4504.valid){
continue;
}
IkReal x4498=x4504.value;
CheckValue<IkReal> x4505=IKPowWithIntegerCheck(((-1.0)+x4494),-1);
if(!x4505.valid){
continue;
}
IkReal x4499=x4505.value;
IkReal x4500=((1.0)*x4498);
if((x4495) < -0.00001)
continue;
IkReal x4501=IKsqrt(x4495);
IkReal x4502=(r12*x4499*x4501);
IkReal x4503=((((-1.0)*x4500*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x4498))+(((-1.0)*x4500*(r10*r10)*(r20*r20))));
j4eval[0]=x4503;
j4eval[1]=((IKabs((((x4497*x4502))+(((-1.0)*x4496*x4502)))))+(IKabs(((((-1.0)*x4497))+x4496))));
j4eval[2]=IKsign(x4503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4506=(sj1*sj2);
IkReal x4507=(gconst106*r21);
IkReal x4508=(gconst107*r20);
IkReal x4509=(cj1*cj2);
CheckValue<IkReal> x4510=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x4508*x4508)))+(((-1.0)*(r22*r22)))+(((2.0)*x4507*x4508))+(((-1.0)*(x4507*x4507))))),-1);
if(!x4510.valid){
continue;
}
CheckValue<IkReal> x4511 = IKatan2WithCheck(IkReal((((r22*x4506))+(((-1.0)*r22*x4509)))),IkReal((((x4508*x4509))+((x4506*x4507))+(((-1.0)*x4507*x4509))+(((-1.0)*x4506*x4508)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4511.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4510.value)))+(x4511.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4512=IKsin(j4);
IkReal x4513=IKcos(j4);
IkReal x4514=(gconst107*r10);
IkReal x4515=(gconst107*r00);
IkReal x4516=((1.0)*cj2);
IkReal x4517=(gconst107*r20);
IkReal x4518=((1.0)*sj0);
IkReal x4519=(cj1*sj2);
IkReal x4520=((1.0)*x4513);
IkReal x4521=(gconst106*x4513);
IkReal x4522=(gconst106*x4512);
IkReal x4523=((1.0)*x4512);
evalcond[0]=(((r21*x4522))+(((-1.0)*r22*x4520))+(((-1.0)*x4517*x4523)));
evalcond[1]=((((-1.0)*r12*x4520))+((r11*x4522))+cj0+(((-1.0)*x4514*x4523)));
evalcond[2]=(((r01*x4522))+(((-1.0)*x4518))+(((-1.0)*r02*x4520))+(((-1.0)*x4515*x4523)));
evalcond[3]=((((-1.0)*cj1*x4516))+((r21*x4521))+((sj1*sj2))+(((-1.0)*x4517*x4520))+((r22*x4512)));
evalcond[4]=(((r02*x4512))+((r01*x4521))+(((-1.0)*cj0*x4519))+(((-1.0)*cj0*sj1*x4516))+(((-1.0)*x4515*x4520)));
evalcond[5]=(((r11*x4521))+(((-1.0)*x4518*x4519))+(((-1.0)*sj0*sj1*x4516))+(((-1.0)*x4514*x4520))+((r12*x4512)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4524=((1.0)*sj0);
IkReal x4525=((1.0)*gconst106);
CheckValue<IkReal> x4526 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4524))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst106*r11*x4524))+((gconst107*r10*sj0))+((cj0*gconst107*r00))+(((-1.0)*cj0*r01*x4525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4526.valid){
continue;
}
CheckValue<IkReal> x4527=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4525))+(((-1.0)*gconst107*r21)))),-1);
if(!x4527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4526.value)+(((1.5707963267949)*(x4527.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4528=IKsin(j4);
IkReal x4529=IKcos(j4);
IkReal x4530=(gconst107*r10);
IkReal x4531=(gconst107*r00);
IkReal x4532=((1.0)*cj2);
IkReal x4533=(gconst107*r20);
IkReal x4534=((1.0)*sj0);
IkReal x4535=(cj1*sj2);
IkReal x4536=((1.0)*x4529);
IkReal x4537=(gconst106*x4529);
IkReal x4538=(gconst106*x4528);
IkReal x4539=((1.0)*x4528);
evalcond[0]=(((r21*x4538))+(((-1.0)*r22*x4536))+(((-1.0)*x4533*x4539)));
evalcond[1]=((((-1.0)*x4530*x4539))+cj0+(((-1.0)*r12*x4536))+((r11*x4538)));
evalcond[2]=(((r01*x4538))+(((-1.0)*x4534))+(((-1.0)*x4531*x4539))+(((-1.0)*r02*x4536)));
evalcond[3]=(((r21*x4537))+(((-1.0)*cj1*x4532))+((sj1*sj2))+((r22*x4528))+(((-1.0)*x4533*x4536)));
evalcond[4]=(((r01*x4537))+(((-1.0)*x4531*x4536))+((r02*x4528))+(((-1.0)*cj0*x4535))+(((-1.0)*cj0*sj1*x4532)));
evalcond[5]=((((-1.0)*x4530*x4536))+((r12*x4528))+(((-1.0)*x4534*x4535))+((r11*x4537))+(((-1.0)*sj0*sj1*x4532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4540=((1.0)*gconst107);
CheckValue<IkReal> x4541=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst106*r00))+(((-1.0)*r01*x4540)))),-1);
if(!x4541.valid){
continue;
}
CheckValue<IkReal> x4542 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst106*r21))+(((-1.0)*cj0*r20*x4540)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4542.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4541.value)))+(x4542.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4543=IKsin(j4);
IkReal x4544=IKcos(j4);
IkReal x4545=(gconst107*r10);
IkReal x4546=(gconst107*r00);
IkReal x4547=((1.0)*cj2);
IkReal x4548=(gconst107*r20);
IkReal x4549=((1.0)*sj0);
IkReal x4550=(cj1*sj2);
IkReal x4551=((1.0)*x4544);
IkReal x4552=(gconst106*x4544);
IkReal x4553=(gconst106*x4543);
IkReal x4554=((1.0)*x4543);
evalcond[0]=((((-1.0)*x4548*x4554))+((r21*x4553))+(((-1.0)*r22*x4551)));
evalcond[1]=((((-1.0)*r12*x4551))+cj0+((r11*x4553))+(((-1.0)*x4545*x4554)));
evalcond[2]=(((r01*x4553))+(((-1.0)*r02*x4551))+(((-1.0)*x4549))+(((-1.0)*x4546*x4554)));
evalcond[3]=(((r22*x4543))+((sj1*sj2))+(((-1.0)*x4548*x4551))+((r21*x4552))+(((-1.0)*cj1*x4547)));
evalcond[4]=(((r01*x4552))+((r02*x4543))+(((-1.0)*cj0*sj1*x4547))+(((-1.0)*cj0*x4550))+(((-1.0)*x4546*x4551)));
evalcond[5]=(((r11*x4552))+(((-1.0)*sj0*sj1*x4547))+(((-1.0)*x4549*x4550))+((r12*x4543))+(((-1.0)*x4545*x4551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4555=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4555;
j4eval[1]=IKsign(x4555);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4556=((1.0)*cj5);
IkReal x4557=((((-1.0)*r01*x4556))+(((-1.0)*r00*sj5)));
j4eval[0]=x4557;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x4556))))));
j4eval[2]=IKsign(x4557);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=1.0;
j0=0;
IkReal x4558=(sj1*sj2);
IkReal x4559=(cj5*r10);
IkReal x4560=(r11*sj5);
IkReal x4561=(cj1*cj2);
IkReal x4562=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x4562;
j4eval[1]=((IKabs(((((-1.0)*x4558*x4559))+(((-1.0)*x4560*x4561))+((x4559*x4561))+((x4558*x4560)))))+(IKabs((((r12*x4561))+(((-1.0)*r12*x4558))))));
j4eval[2]=IKsign(x4562);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4563=(sj1*sj2);
IkReal x4564=(cj5*r10);
IkReal x4565=(r11*sj5);
IkReal x4566=(cj1*cj2);
CheckValue<IkReal> x4567 = IKatan2WithCheck(IkReal((((x4564*x4566))+(((-1.0)*x4565*x4566))+(((-1.0)*x4563*x4564))+((x4563*x4565)))),IkReal((((r12*x4566))+(((-1.0)*r12*x4563)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4567.valid){
continue;
}
CheckValue<IkReal> x4568=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x4568.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4567.value)+(((1.5707963267949)*(x4568.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4569=IKcos(j4);
IkReal x4570=IKsin(j4);
IkReal x4571=(cj5*r00);
IkReal x4572=(cj5*r10);
IkReal x4573=(r21*sj5);
IkReal x4574=((1.0)*cj2);
IkReal x4575=(cj5*r20);
IkReal x4576=((1.0)*x4569);
IkReal x4577=((1.0)*x4570);
IkReal x4578=(sj5*x4570);
IkReal x4579=(sj5*x4569);
evalcond[0]=(((r12*x4570))+((r11*x4579))+(((-1.0)*x4572*x4576)));
evalcond[1]=((((-1.0)*x4575*x4577))+((x4570*x4573))+(((-1.0)*r22*x4576)));
evalcond[2]=((((-1.0)*x4571*x4577))+(((-1.0)*r02*x4576))+((r01*x4578)));
evalcond[3]=((1.0)+((r11*x4578))+(((-1.0)*x4572*x4577))+(((-1.0)*r12*x4576)));
evalcond[4]=((((-1.0)*cj1*x4574))+(((-1.0)*x4575*x4576))+((r22*x4570))+((sj1*sj2))+((x4569*x4573)));
evalcond[5]=((((-1.0)*sj1*x4574))+(((-1.0)*x4571*x4576))+((r02*x4570))+(((-1.0)*cj1*sj2))+((r01*x4579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4580=((1.0)*cj5);
CheckValue<IkReal> x4581=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4580))+(((-1.0)*r00*sj5)))),-1);
if(!x4581.valid){
continue;
}
CheckValue<IkReal> x4582 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x4580)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4582.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4581.value)))+(x4582.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4583=IKcos(j4);
IkReal x4584=IKsin(j4);
IkReal x4585=(cj5*r00);
IkReal x4586=(cj5*r10);
IkReal x4587=(r21*sj5);
IkReal x4588=((1.0)*cj2);
IkReal x4589=(cj5*r20);
IkReal x4590=((1.0)*x4583);
IkReal x4591=((1.0)*x4584);
IkReal x4592=(sj5*x4584);
IkReal x4593=(sj5*x4583);
evalcond[0]=((((-1.0)*x4586*x4590))+((r11*x4593))+((r12*x4584)));
evalcond[1]=((((-1.0)*r22*x4590))+(((-1.0)*x4589*x4591))+((x4584*x4587)));
evalcond[2]=((((-1.0)*x4585*x4591))+(((-1.0)*r02*x4590))+((r01*x4592)));
evalcond[3]=((1.0)+(((-1.0)*x4586*x4591))+((r11*x4592))+(((-1.0)*r12*x4590)));
evalcond[4]=(((r22*x4584))+(((-1.0)*x4589*x4590))+((sj1*sj2))+((x4583*x4587))+(((-1.0)*cj1*x4588)));
evalcond[5]=((((-1.0)*x4585*x4590))+((r02*x4584))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4588))+((r01*x4593)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4594=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4594.valid){
continue;
}
CheckValue<IkReal> x4595 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4594.value)))+(x4595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4596=IKcos(j4);
IkReal x4597=IKsin(j4);
IkReal x4598=(cj5*r00);
IkReal x4599=(cj5*r10);
IkReal x4600=(r21*sj5);
IkReal x4601=((1.0)*cj2);
IkReal x4602=(cj5*r20);
IkReal x4603=((1.0)*x4596);
IkReal x4604=((1.0)*x4597);
IkReal x4605=(sj5*x4597);
IkReal x4606=(sj5*x4596);
evalcond[0]=(((r11*x4606))+(((-1.0)*x4599*x4603))+((r12*x4597)));
evalcond[1]=(((x4597*x4600))+(((-1.0)*x4602*x4604))+(((-1.0)*r22*x4603)));
evalcond[2]=(((r01*x4605))+(((-1.0)*r02*x4603))+(((-1.0)*x4598*x4604)));
evalcond[3]=((1.0)+((r11*x4605))+(((-1.0)*x4599*x4604))+(((-1.0)*r12*x4603)));
evalcond[4]=(((r22*x4597))+(((-1.0)*cj1*x4601))+((sj1*sj2))+((x4596*x4600))+(((-1.0)*x4602*x4603)));
evalcond[5]=(((r01*x4606))+((r02*x4597))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x4601))+(((-1.0)*x4598*x4603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4607=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4607;
j4eval[1]=IKsign(x4607);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4608=((1.0)*cj5);
IkReal x4609=((((-1.0)*r21*x4608))+(((-1.0)*r20*sj5)));
j4eval[0]=x4609;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x4608))))));
j4eval[2]=IKsign(x4609);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x4610=cj5*cj5;
IkReal x4611=r11*r11;
IkReal x4612=(r11*sj5);
IkReal x4613=(cj5*r10);
IkReal x4614=((r12*r12)+(((-1.0)*x4610*x4611))+((x4610*(r10*r10)))+x4611+(((-2.0)*x4612*x4613)));
j4eval[0]=x4614;
j4eval[1]=IKsign(x4614);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x4613))+x4612))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4615=cj5*cj5;
IkReal x4616=r11*r11;
IkReal x4617=(cj5*r10);
IkReal x4618=(r11*sj5);
CheckValue<IkReal> x4619=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4617*x4618))+(r12*r12)+x4616+(((-1.0)*x4615*x4616))+((x4615*(r10*r10))))),-1);
if(!x4619.valid){
continue;
}
CheckValue<IkReal> x4620 = IKatan2WithCheck(IkReal(((((-1.0)*x4617))+x4618)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x4620.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4619.value)))+(x4620.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4621=IKcos(j4);
IkReal x4622=IKsin(j4);
IkReal x4623=(cj5*r00);
IkReal x4624=(cj5*r10);
IkReal x4625=(r21*sj5);
IkReal x4626=(cj5*r20);
IkReal x4627=((1.0)*x4621);
IkReal x4628=((1.0)*x4622);
IkReal x4629=(sj5*x4622);
IkReal x4630=(sj5*x4621);
evalcond[0]=(((r12*x4622))+((r11*x4630))+(((-1.0)*x4624*x4627)));
evalcond[1]=((((-1.0)*x4626*x4628))+(((-1.0)*r22*x4627))+((x4622*x4625)));
evalcond[2]=((((-1.0)*r02*x4627))+(((-1.0)*x4623*x4628))+((r01*x4629)));
evalcond[3]=((-1.0)+((r11*x4629))+(((-1.0)*r12*x4627))+(((-1.0)*x4624*x4628)));
evalcond[4]=(((cj2*sj1))+((r01*x4630))+((cj1*sj2))+((r02*x4622))+(((-1.0)*x4623*x4627)));
evalcond[5]=((((-1.0)*x4626*x4627))+((x4621*x4625))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4622)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4631=((1.0)*cj5);
CheckValue<IkReal> x4632=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4631))+(((-1.0)*r20*sj5)))),-1);
if(!x4632.valid){
continue;
}
CheckValue<IkReal> x4633 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x4631)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4633.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4632.value)))+(x4633.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4634=IKcos(j4);
IkReal x4635=IKsin(j4);
IkReal x4636=(cj5*r00);
IkReal x4637=(cj5*r10);
IkReal x4638=(r21*sj5);
IkReal x4639=(cj5*r20);
IkReal x4640=((1.0)*x4634);
IkReal x4641=((1.0)*x4635);
IkReal x4642=(sj5*x4635);
IkReal x4643=(sj5*x4634);
evalcond[0]=(((r12*x4635))+(((-1.0)*x4637*x4640))+((r11*x4643)));
evalcond[1]=((((-1.0)*r22*x4640))+((x4635*x4638))+(((-1.0)*x4639*x4641)));
evalcond[2]=((((-1.0)*r02*x4640))+(((-1.0)*x4636*x4641))+((r01*x4642)));
evalcond[3]=((-1.0)+(((-1.0)*x4637*x4641))+((r11*x4642))+(((-1.0)*r12*x4640)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x4636*x4640))+((cj1*sj2))+((r01*x4643))+((r02*x4635)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x4634*x4638))+((r22*x4635))+(((-1.0)*x4639*x4640)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4644 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4644.valid){
continue;
}
CheckValue<IkReal> x4645=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x4645.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4644.value)+(((1.5707963267949)*(x4645.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4646=IKcos(j4);
IkReal x4647=IKsin(j4);
IkReal x4648=(cj5*r00);
IkReal x4649=(cj5*r10);
IkReal x4650=(r21*sj5);
IkReal x4651=(cj5*r20);
IkReal x4652=((1.0)*x4646);
IkReal x4653=((1.0)*x4647);
IkReal x4654=(sj5*x4647);
IkReal x4655=(sj5*x4646);
evalcond[0]=(((r11*x4655))+(((-1.0)*x4649*x4652))+((r12*x4647)));
evalcond[1]=(((x4647*x4650))+(((-1.0)*r22*x4652))+(((-1.0)*x4651*x4653)));
evalcond[2]=((((-1.0)*r02*x4652))+(((-1.0)*x4648*x4653))+((r01*x4654)));
evalcond[3]=((-1.0)+((r11*x4654))+(((-1.0)*x4649*x4653))+(((-1.0)*r12*x4652)));
evalcond[4]=(((r02*x4647))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4648*x4652))+((r01*x4655)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x4647))+(((-1.0)*x4651*x4652))+((x4646*x4650)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4656=((-1.0)*r00);
IkReal x4658 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4658)==0){
continue;
}
IkReal x4657=pow(x4658,-0.5);
CheckValue<IkReal> x4659 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4656),IKFAST_ATAN2_MAGTHRESH);
if(!x4659.valid){
continue;
}
IkReal gconst108=((-1.0)*(x4659.value));
IkReal gconst109=(r01*x4657);
IkReal gconst110=(x4656*x4657);
CheckValue<IkReal> x4660 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4660.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x4660.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x4661=((-1.0)*r00);
IkReal x4662=x4657;
CheckValue<IkReal> x4664 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x4661),IKFAST_ATAN2_MAGTHRESH);
if(!x4664.valid){
continue;
}
IkReal x4663=((-1.0)*(x4664.value));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst109;
cj5=gconst110;
j5=x4663;
IkReal gconst108=x4663;
IkReal gconst109=(r01*x4662);
IkReal gconst110=(x4661*x4662);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4665=((1.0)*sj0);
IkReal x4666=((1.0)*gconst109);
CheckValue<IkReal> x4667 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4665)))),IkReal(((((-1.0)*cj0*r01*x4666))+((cj0*gconst110*r00))+((gconst110*r10*sj0))+(((-1.0)*gconst109*r11*x4665)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4667.valid){
continue;
}
CheckValue<IkReal> x4668=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4666))+(((-1.0)*gconst110*r21)))),-1);
if(!x4668.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4667.value)+(((1.5707963267949)*(x4668.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4669=IKsin(j4);
IkReal x4670=IKcos(j4);
IkReal x4671=(gconst109*r21);
IkReal x4672=((1.0)*cj2);
IkReal x4673=((1.0)*sj0);
IkReal x4674=(cj1*sj2);
IkReal x4675=((1.0)*x4670);
IkReal x4676=(gconst109*x4669);
IkReal x4677=(gconst109*x4670);
IkReal x4678=((1.0)*gconst110*x4669);
evalcond[0]=(((x4669*x4671))+(((-1.0)*r20*x4678))+(((-1.0)*r22*x4675)));
evalcond[1]=(cj0+((r11*x4676))+(((-1.0)*r12*x4675))+(((-1.0)*r10*x4678)));
evalcond[2]=((((-1.0)*r02*x4675))+(((-1.0)*x4673))+((r01*x4676))+(((-1.0)*r00*x4678)));
evalcond[3]=((((-1.0)*cj1*x4672))+((x4670*x4671))+((sj1*sj2))+(((-1.0)*gconst110*r20*x4675))+((r22*x4669)));
evalcond[4]=((((-1.0)*cj0*x4674))+((r02*x4669))+(((-1.0)*cj0*sj1*x4672))+((r01*x4677))+(((-1.0)*gconst110*r00*x4675)));
evalcond[5]=((((-1.0)*gconst110*r10*x4675))+((r12*x4669))+((r11*x4677))+(((-1.0)*sj0*sj1*x4672))+(((-1.0)*x4673*x4674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4679=((1.0)*gconst110);
CheckValue<IkReal> x4680=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4679))+(((-1.0)*gconst109*r10)))),-1);
if(!x4680.valid){
continue;
}
CheckValue<IkReal> x4681 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst109*r21*sj0))+(((-1.0)*r20*sj0*x4679)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4681.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4680.value)))+(x4681.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4682=IKsin(j4);
IkReal x4683=IKcos(j4);
IkReal x4684=(gconst109*r21);
IkReal x4685=((1.0)*cj2);
IkReal x4686=((1.0)*sj0);
IkReal x4687=(cj1*sj2);
IkReal x4688=((1.0)*x4683);
IkReal x4689=(gconst109*x4682);
IkReal x4690=(gconst109*x4683);
IkReal x4691=((1.0)*gconst110*x4682);
evalcond[0]=((((-1.0)*r20*x4691))+((x4682*x4684))+(((-1.0)*r22*x4688)));
evalcond[1]=(cj0+((r11*x4689))+(((-1.0)*r10*x4691))+(((-1.0)*r12*x4688)));
evalcond[2]=((((-1.0)*r00*x4691))+(((-1.0)*r02*x4688))+((r01*x4689))+(((-1.0)*x4686)));
evalcond[3]=(((x4683*x4684))+(((-1.0)*cj1*x4685))+((sj1*sj2))+((r22*x4682))+(((-1.0)*gconst110*r20*x4688)));
evalcond[4]=(((r02*x4682))+(((-1.0)*cj0*sj1*x4685))+(((-1.0)*gconst110*r00*x4688))+(((-1.0)*cj0*x4687))+((r01*x4690)));
evalcond[5]=((((-1.0)*gconst110*r10*x4688))+(((-1.0)*x4686*x4687))+(((-1.0)*sj0*sj1*x4685))+((r12*x4682))+((r11*x4690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x4692=((-1.0)*r01);
IkReal x4694 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x4694)==0){
continue;
}
IkReal x4693=pow(x4694,-0.5);
CheckValue<IkReal> x4695 = IKatan2WithCheck(IkReal(x4692),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4695.valid){
continue;
}
IkReal gconst111=((3.14159265358979)+(((-1.0)*(x4695.value))));
IkReal gconst112=(x4692*x4693);
IkReal gconst113=((1.0)*r00*x4693);
CheckValue<IkReal> x4696 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4696.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x4696.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x4697=((-1.0)*r01);
CheckValue<IkReal> x4700 = IKatan2WithCheck(IkReal(x4697),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4700.valid){
continue;
}
IkReal x4698=((1.0)*(x4700.value));
IkReal x4699=x4693;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4698)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4698)));
IkReal gconst112=(x4697*x4699);
IkReal gconst113=((1.0)*r00*x4699);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x4701=((-1.0)*r01);
CheckValue<IkReal> x4704 = IKatan2WithCheck(IkReal(x4701),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4704.valid){
continue;
}
IkReal x4702=((1.0)*(x4704.value));
IkReal x4703=x4693;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4702)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4702)));
IkReal gconst112=(x4701*x4703);
IkReal gconst113=((1.0)*r00*x4703);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4705=((-1.0)*r01);
CheckValue<IkReal> x4708 = IKatan2WithCheck(IkReal(x4705),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x4708.valid){
continue;
}
IkReal x4706=((1.0)*(x4708.value));
IkReal x4707=x4693;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj5=gconst112;
cj5=gconst113;
j5=((3.14159265)+(((-1.0)*x4706)));
IkReal gconst111=((3.14159265358979)+(((-1.0)*x4706)));
IkReal gconst112=(x4705*x4707);
IkReal gconst113=((1.0)*r00*x4707);
IkReal x4709=r02*r02;
IkReal x4710=(r12*sj0);
IkReal x4711=((1.0)*cj0);
IkReal x4712=x4693;
j4eval[0]=((IKabs(((((-1.0)*r02*x4711))+(((-1.0)*x4710)))))+(IKabs((((cj0*x4709*x4712))+(((-1.0)*x4711*x4712))+((r02*x4710*x4712))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4713=((1.0)*sj0);
IkReal x4714=((1.0)*gconst112);
CheckValue<IkReal> x4715=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x4714))+(((-1.0)*gconst113*r21)))),-1);
if(!x4715.valid){
continue;
}
CheckValue<IkReal> x4716 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x4713)))),IkReal(((((-1.0)*gconst112*r11*x4713))+((gconst113*r10*sj0))+((cj0*gconst113*r00))+(((-1.0)*cj0*r01*x4714)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4716.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4715.value)))+(x4716.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4717=IKsin(j4);
IkReal x4718=IKcos(j4);
IkReal x4719=(gconst113*r20);
IkReal x4720=(gconst112*r21);
IkReal x4721=((1.0)*cj2);
IkReal x4722=(gconst113*r00);
IkReal x4723=(gconst113*r10);
IkReal x4724=((1.0)*sj0);
IkReal x4725=(cj1*sj2);
IkReal x4726=((1.0)*x4718);
IkReal x4727=((1.0)*x4717);
IkReal x4728=(gconst112*x4718);
IkReal x4729=(gconst112*x4717);
evalcond[0]=((((-1.0)*x4719*x4727))+((x4717*x4720))+(((-1.0)*r22*x4726)));
evalcond[1]=(((r11*x4729))+(((-1.0)*x4723*x4727))+cj0+(((-1.0)*r12*x4726)));
evalcond[2]=((((-1.0)*x4722*x4727))+(((-1.0)*x4724))+((r01*x4729))+(((-1.0)*r02*x4726)));
evalcond[3]=(((r22*x4717))+(((-1.0)*cj1*x4721))+((sj1*sj2))+(((-1.0)*x4719*x4726))+((x4718*x4720)));
evalcond[4]=((((-1.0)*x4722*x4726))+(((-1.0)*cj0*sj1*x4721))+(((-1.0)*cj0*x4725))+((r01*x4728))+((r02*x4717)));
evalcond[5]=(((r11*x4728))+(((-1.0)*x4723*x4726))+(((-1.0)*x4724*x4725))+(((-1.0)*sj0*sj1*x4721))+((r12*x4717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4730=((1.0)*gconst113);
CheckValue<IkReal> x4731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4730))+(((-1.0)*gconst112*r10)))),-1);
if(!x4731.valid){
continue;
}
CheckValue<IkReal> x4732 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst112*r21*sj0))+(((-1.0)*r20*sj0*x4730)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4731.value)))+(x4732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4733=IKsin(j4);
IkReal x4734=IKcos(j4);
IkReal x4735=(gconst113*r20);
IkReal x4736=(gconst112*r21);
IkReal x4737=((1.0)*cj2);
IkReal x4738=(gconst113*r00);
IkReal x4739=(gconst113*r10);
IkReal x4740=((1.0)*sj0);
IkReal x4741=(cj1*sj2);
IkReal x4742=((1.0)*x4734);
IkReal x4743=((1.0)*x4733);
IkReal x4744=(gconst112*x4734);
IkReal x4745=(gconst112*x4733);
evalcond[0]=((((-1.0)*r22*x4742))+((x4733*x4736))+(((-1.0)*x4735*x4743)));
evalcond[1]=(((r11*x4745))+(((-1.0)*r12*x4742))+cj0+(((-1.0)*x4739*x4743)));
evalcond[2]=(((r01*x4745))+(((-1.0)*x4740))+(((-1.0)*x4738*x4743))+(((-1.0)*r02*x4742)));
evalcond[3]=(((x4734*x4736))+(((-1.0)*cj1*x4737))+((sj1*sj2))+((r22*x4733))+(((-1.0)*x4735*x4742)));
evalcond[4]=((((-1.0)*cj0*x4741))+((r01*x4744))+(((-1.0)*cj0*sj1*x4737))+((r02*x4733))+(((-1.0)*x4738*x4742)));
evalcond[5]=(((r11*x4744))+(((-1.0)*sj0*sj1*x4737))+(((-1.0)*x4740*x4741))+(((-1.0)*x4739*x4742))+((r12*x4733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4746=((1.0)*gconst113);
CheckValue<IkReal> x4747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4746))+(((-1.0)*gconst112*r00)))),-1);
if(!x4747.valid){
continue;
}
CheckValue<IkReal> x4748 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x4746))+((cj0*gconst112*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4747.value)))+(x4748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4749=IKsin(j4);
IkReal x4750=IKcos(j4);
IkReal x4751=(gconst113*r20);
IkReal x4752=(gconst112*r21);
IkReal x4753=((1.0)*cj2);
IkReal x4754=(gconst113*r00);
IkReal x4755=(gconst113*r10);
IkReal x4756=((1.0)*sj0);
IkReal x4757=(cj1*sj2);
IkReal x4758=((1.0)*x4750);
IkReal x4759=((1.0)*x4749);
IkReal x4760=(gconst112*x4750);
IkReal x4761=(gconst112*x4749);
evalcond[0]=((((-1.0)*r22*x4758))+(((-1.0)*x4751*x4759))+((x4749*x4752)));
evalcond[1]=((((-1.0)*x4755*x4759))+cj0+(((-1.0)*r12*x4758))+((r11*x4761)));
evalcond[2]=((((-1.0)*x4754*x4759))+((r01*x4761))+(((-1.0)*x4756))+(((-1.0)*r02*x4758)));
evalcond[3]=((((-1.0)*cj1*x4753))+((sj1*sj2))+((x4750*x4752))+(((-1.0)*x4751*x4758))+((r22*x4749)));
evalcond[4]=((((-1.0)*x4754*x4758))+(((-1.0)*cj0*sj1*x4753))+((r01*x4760))+((r02*x4749))+(((-1.0)*cj0*x4757)));
evalcond[5]=((((-1.0)*x4755*x4758))+(((-1.0)*x4756*x4757))+((r12*x4749))+(((-1.0)*sj0*sj1*x4753))+((r11*x4760)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4762=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x4762;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x4762);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4763=((1.0)*cj5);
IkReal x4764=((((-1.0)*r10*sj5))+(((-1.0)*r11*x4763)));
j4eval[0]=x4764;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x4763)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4764);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x4765=cj5*cj5;
IkReal x4766=r01*r01;
IkReal x4767=(cj5*r00);
IkReal x4768=(r01*sj5);
IkReal x4769=((((-2.0)*x4767*x4768))+(((-1.0)*x4765*x4766))+x4766+(r02*r02)+((x4765*(r00*r00))));
j4eval[0]=x4769;
j4eval[1]=IKsign(x4769);
j4eval[2]=((IKabs(((((-1.0)*x4767))+x4768)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4770=cj5*cj5;
IkReal x4771=r01*r01;
IkReal x4772=(r01*sj5);
IkReal x4773=(cj5*r00);
CheckValue<IkReal> x4774=IKPowWithIntegerCheck(IKsign(((((-2.0)*x4772*x4773))+x4771+(((-1.0)*x4770*x4771))+((x4770*(r00*r00)))+(r02*r02))),-1);
if(!x4774.valid){
continue;
}
CheckValue<IkReal> x4775 = IKatan2WithCheck(IkReal(((((-1.0)*x4773))+x4772)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4774.value)))+(x4775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4776=IKcos(j4);
IkReal x4777=IKsin(j4);
IkReal x4778=(cj5*r00);
IkReal x4779=(cj5*r10);
IkReal x4780=(r21*sj5);
IkReal x4781=((1.0)*cj2);
IkReal x4782=(cj5*r20);
IkReal x4783=((1.0)*x4776);
IkReal x4784=((1.0)*x4777);
IkReal x4785=(sj5*x4777);
IkReal x4786=(sj5*x4776);
evalcond[0]=(((r01*x4786))+((r02*x4777))+(((-1.0)*x4778*x4783)));
evalcond[1]=(((x4777*x4780))+(((-1.0)*x4782*x4784))+(((-1.0)*r22*x4783)));
evalcond[2]=((((-1.0)*x4779*x4784))+((r11*x4785))+(((-1.0)*r12*x4783)));
evalcond[3]=((-1.0)+((r01*x4785))+(((-1.0)*r02*x4783))+(((-1.0)*x4778*x4784)));
evalcond[4]=(((x4776*x4780))+((sj1*sj2))+(((-1.0)*x4782*x4783))+(((-1.0)*cj1*x4781))+((r22*x4777)));
evalcond[5]=((((-1.0)*x4779*x4783))+((r12*x4777))+(((-1.0)*cj1*sj2))+((r11*x4786))+(((-1.0)*sj1*x4781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4787=((1.0)*cj5);
CheckValue<IkReal> x4788=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x4787)))),-1);
if(!x4788.valid){
continue;
}
CheckValue<IkReal> x4789 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x4787))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4789.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4788.value)))+(x4789.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4790=IKcos(j4);
IkReal x4791=IKsin(j4);
IkReal x4792=(cj5*r00);
IkReal x4793=(cj5*r10);
IkReal x4794=(r21*sj5);
IkReal x4795=((1.0)*cj2);
IkReal x4796=(cj5*r20);
IkReal x4797=((1.0)*x4790);
IkReal x4798=((1.0)*x4791);
IkReal x4799=(sj5*x4791);
IkReal x4800=(sj5*x4790);
evalcond[0]=(((r01*x4800))+((r02*x4791))+(((-1.0)*x4792*x4797)));
evalcond[1]=((((-1.0)*r22*x4797))+((x4791*x4794))+(((-1.0)*x4796*x4798)));
evalcond[2]=((((-1.0)*r12*x4797))+((r11*x4799))+(((-1.0)*x4793*x4798)));
evalcond[3]=((-1.0)+((r01*x4799))+(((-1.0)*r02*x4797))+(((-1.0)*x4792*x4798)));
evalcond[4]=(((x4790*x4794))+((sj1*sj2))+(((-1.0)*x4796*x4797))+(((-1.0)*cj1*x4795))+((r22*x4791)));
evalcond[5]=((((-1.0)*sj1*x4795))+(((-1.0)*cj1*sj2))+((r12*x4791))+(((-1.0)*x4793*x4797))+((r11*x4800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4801=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x4801.valid){
continue;
}
CheckValue<IkReal> x4802 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4802.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4801.value)))+(x4802.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4803=IKcos(j4);
IkReal x4804=IKsin(j4);
IkReal x4805=(cj5*r00);
IkReal x4806=(cj5*r10);
IkReal x4807=(r21*sj5);
IkReal x4808=((1.0)*cj2);
IkReal x4809=(cj5*r20);
IkReal x4810=((1.0)*x4803);
IkReal x4811=((1.0)*x4804);
IkReal x4812=(sj5*x4804);
IkReal x4813=(sj5*x4803);
evalcond[0]=(((r02*x4804))+(((-1.0)*x4805*x4810))+((r01*x4813)));
evalcond[1]=((((-1.0)*x4809*x4811))+((x4804*x4807))+(((-1.0)*r22*x4810)));
evalcond[2]=(((r11*x4812))+(((-1.0)*x4806*x4811))+(((-1.0)*r12*x4810)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x4810))+(((-1.0)*x4805*x4811))+((r01*x4812)));
evalcond[4]=((((-1.0)*x4809*x4810))+((sj1*sj2))+((r22*x4804))+((x4803*x4807))+(((-1.0)*cj1*x4808)));
evalcond[5]=((((-1.0)*sj1*x4808))+((r11*x4813))+(((-1.0)*x4806*x4810))+(((-1.0)*cj1*sj2))+((r12*x4804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4814=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4814;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x4814);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4815=((1.0)*cj5);
IkReal x4816=((((-1.0)*r21*x4815))+(((-1.0)*r20*sj5)));
j4eval[0]=x4816;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x4815))))));
j4eval[2]=IKsign(x4816);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x4817=cj5*cj5;
IkReal x4818=r01*r01;
IkReal x4819=(r01*sj5);
IkReal x4820=(cj5*r00);
IkReal x4821=(((x4817*x4818))+(((-1.0)*x4818))+(((-1.0)*(r02*r02)))+(((-1.0)*x4817*(r00*r00)))+(((2.0)*x4819*x4820)));
j4eval[0]=x4821;
j4eval[1]=IKsign(x4821);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x4820))+x4819))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4822=cj5*cj5;
IkReal x4823=r01*r01;
IkReal x4824=(r01*sj5);
IkReal x4825=(cj5*r00);
CheckValue<IkReal> x4826 = IKatan2WithCheck(IkReal(((((-1.0)*x4825))+x4824)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x4826.valid){
continue;
}
CheckValue<IkReal> x4827=IKPowWithIntegerCheck(IKsign(((((-1.0)*x4822*(r00*r00)))+(((-1.0)*(r02*r02)))+(((-1.0)*x4823))+((x4822*x4823))+(((2.0)*x4824*x4825)))),-1);
if(!x4827.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4826.value)+(((1.5707963267949)*(x4827.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4828=IKcos(j4);
IkReal x4829=IKsin(j4);
IkReal x4830=(cj5*r00);
IkReal x4831=(cj5*r10);
IkReal x4832=(r21*sj5);
IkReal x4833=(cj5*r20);
IkReal x4834=((1.0)*x4828);
IkReal x4835=((1.0)*x4829);
IkReal x4836=(sj5*x4829);
IkReal x4837=(sj5*x4828);
evalcond[0]=(((r01*x4837))+(((-1.0)*x4830*x4834))+((r02*x4829)));
evalcond[1]=((((-1.0)*x4833*x4835))+(((-1.0)*r22*x4834))+((x4829*x4832)));
evalcond[2]=(((r11*x4836))+(((-1.0)*x4831*x4835))+(((-1.0)*r12*x4834)));
evalcond[3]=((1.0)+((r01*x4836))+(((-1.0)*x4830*x4835))+(((-1.0)*r02*x4834)));
evalcond[4]=(((cj2*sj1))+((r11*x4837))+(((-1.0)*x4831*x4834))+((cj1*sj2))+((r12*x4829)));
evalcond[5]=(((r22*x4829))+(((-1.0)*x4833*x4834))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x4828*x4832)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4838=((1.0)*cj5);
CheckValue<IkReal> x4839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x4838))+(((-1.0)*r20*sj5)))),-1);
if(!x4839.valid){
continue;
}
CheckValue<IkReal> x4840 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x4838))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4839.value)))+(x4840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4841=IKcos(j4);
IkReal x4842=IKsin(j4);
IkReal x4843=(cj5*r00);
IkReal x4844=(cj5*r10);
IkReal x4845=(r21*sj5);
IkReal x4846=(cj5*r20);
IkReal x4847=((1.0)*x4841);
IkReal x4848=((1.0)*x4842);
IkReal x4849=(sj5*x4842);
IkReal x4850=(sj5*x4841);
evalcond[0]=(((r02*x4842))+((r01*x4850))+(((-1.0)*x4843*x4847)));
evalcond[1]=(((x4842*x4845))+(((-1.0)*x4846*x4848))+(((-1.0)*r22*x4847)));
evalcond[2]=((((-1.0)*x4844*x4848))+((r11*x4849))+(((-1.0)*r12*x4847)));
evalcond[3]=((1.0)+(((-1.0)*r02*x4847))+((r01*x4849))+(((-1.0)*x4843*x4848)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x4844*x4847))+((r12*x4842))+((r11*x4850)));
evalcond[5]=(((x4841*x4845))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4846*x4847))+((r22*x4842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4851 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4851.valid){
continue;
}
CheckValue<IkReal> x4852=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4852.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4851.value)+(((1.5707963267949)*(x4852.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4853=IKcos(j4);
IkReal x4854=IKsin(j4);
IkReal x4855=(cj5*r00);
IkReal x4856=(cj5*r10);
IkReal x4857=(r21*sj5);
IkReal x4858=(cj5*r20);
IkReal x4859=((1.0)*x4853);
IkReal x4860=((1.0)*x4854);
IkReal x4861=(sj5*x4854);
IkReal x4862=(sj5*x4853);
evalcond[0]=(((r01*x4862))+((r02*x4854))+(((-1.0)*x4855*x4859)));
evalcond[1]=((((-1.0)*x4858*x4860))+(((-1.0)*r22*x4859))+((x4854*x4857)));
evalcond[2]=(((r11*x4861))+(((-1.0)*x4856*x4860))+(((-1.0)*r12*x4859)));
evalcond[3]=((1.0)+(((-1.0)*x4855*x4860))+((r01*x4861))+(((-1.0)*r02*x4859)));
evalcond[4]=(((r11*x4862))+((cj2*sj1))+(((-1.0)*x4856*x4859))+((r12*x4854))+((cj1*sj2)));
evalcond[5]=(((x4853*x4857))+(((-1.0)*x4858*x4859))+((r22*x4854))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x4863=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4863);
rxp1_1=(px*r21);
rxp1_2=(r11*x4863);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4864=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4864);
rxp1_1=(px*r21);
rxp1_2=(r11*x4864);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x4865=((-1.0)*px);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x4865);
rxp1_1=(px*r21);
rxp1_2=(r11*x4865);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4868=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x4868.valid){
continue;
}
IkReal x4866=x4868.value;
IkReal x4867=(sj0*x4866);
cj4array[0]=(((cj1*sj2*x4867))+((cj2*sj1*x4867)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4869=IKsin(j4);
IkReal x4870=IKcos(j4);
IkReal x4871=(r21*sj5);
IkReal x4872=((1.0)*cj5*r20);
evalcond[0]=(r02*x4869);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x4870)));
evalcond[2]=(((x4869*x4871))+(((-1.0)*x4869*x4872)));
evalcond[3]=(((r11*sj5*x4869))+(((-1.0)*cj5*r10*x4869)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x4870*x4872))+((x4870*x4871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4874=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x4874.valid){
continue;
}
IkReal x4873=x4874.value;
cj4array[0]=(((cj1*cj2*x4873))+(((-1.0)*sj1*sj2*x4873)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4875=IKsin(j4);
IkReal x4876=IKcos(j4);
IkReal x4877=((1.0)*sj0);
IkReal x4878=((1.0)*cj5);
IkReal x4879=(sj5*x4875);
evalcond[0]=(r02*x4875);
evalcond[1]=((((-1.0)*r02*x4876))+(((-1.0)*x4877)));
evalcond[2]=((((-1.0)*r20*x4875*x4878))+((r21*x4879)));
evalcond[3]=(((r11*x4879))+(((-1.0)*r10*x4875*x4878)));
evalcond[4]=((((-1.0)*r10*x4876*x4878))+(((-1.0)*cj2*sj1*x4877))+((r11*sj5*x4876))+(((-1.0)*cj1*sj2*x4877)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x4880=IKPowWithIntegerCheck(r02,-1);
if(!x4880.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x4880.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x4881=IKsin(j4);
IkReal x4882=IKcos(j4);
IkReal x4883=((1.0)*cj1);
IkReal x4884=(r21*sj5);
IkReal x4885=((1.0)*cj5);
IkReal x4886=(r11*sj5);
evalcond[0]=(r02*x4881);
evalcond[1]=(((x4881*x4884))+(((-1.0)*r20*x4881*x4885)));
evalcond[2]=((((-1.0)*r10*x4881*x4885))+((x4881*x4886)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*cj2*x4883))+(((-1.0)*r20*x4882*x4885))+((x4882*x4884)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*sj0*sj2*x4883))+(((-1.0)*r10*x4882*x4885))+((x4882*x4886)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4887=((1.0)*sj0);
IkReal x4888=((1.0)*cj0);
CheckValue<IkReal> x4889 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x4887))+(((-1.0)*r02*x4888)))),IkReal(((((-1.0)*r01*sj5*x4888))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x4887)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4889.valid){
continue;
}
CheckValue<IkReal> x4890=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x4890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4889.value)+(((1.5707963267949)*(x4890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4891=IKsin(j4);
IkReal x4892=IKcos(j4);
IkReal x4893=(cj5*r00);
IkReal x4894=(cj5*r10);
IkReal x4895=(r21*sj5);
IkReal x4896=((1.0)*cj2);
IkReal x4897=((1.0)*sj0);
IkReal x4898=(cj1*sj2);
IkReal x4899=(cj5*r20);
IkReal x4900=((1.0)*x4892);
IkReal x4901=((1.0)*x4891);
IkReal x4902=(sj5*x4891);
IkReal x4903=(sj5*x4892);
evalcond[0]=((((-1.0)*x4899*x4901))+((x4891*x4895))+(((-1.0)*r22*x4900)));
evalcond[1]=((((-1.0)*r12*x4900))+cj0+(((-1.0)*x4894*x4901))+((r11*x4902)));
evalcond[2]=((((-1.0)*x4897))+(((-1.0)*x4893*x4901))+(((-1.0)*r02*x4900))+((r01*x4902)));
evalcond[3]=((((-1.0)*x4899*x4900))+((x4892*x4895))+(((-1.0)*cj1*x4896))+((sj1*sj2))+((r22*x4891)));
evalcond[4]=((((-1.0)*cj0*x4898))+((r02*x4891))+(((-1.0)*cj0*sj1*x4896))+(((-1.0)*x4893*x4900))+((r01*x4903)));
evalcond[5]=(((r12*x4891))+(((-1.0)*x4894*x4900))+(((-1.0)*sj0*sj1*x4896))+(((-1.0)*x4897*x4898))+((r11*x4903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4904=((1.0)*cj5);
CheckValue<IkReal> x4905=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x4904))+(((-1.0)*r10*sj5)))),-1);
if(!x4905.valid){
continue;
}
CheckValue<IkReal> x4906 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x4904))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4906.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4905.value)))+(x4906.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4907=IKsin(j4);
IkReal x4908=IKcos(j4);
IkReal x4909=(cj5*r00);
IkReal x4910=(cj5*r10);
IkReal x4911=(r21*sj5);
IkReal x4912=((1.0)*cj2);
IkReal x4913=((1.0)*sj0);
IkReal x4914=(cj1*sj2);
IkReal x4915=(cj5*r20);
IkReal x4916=((1.0)*x4908);
IkReal x4917=((1.0)*x4907);
IkReal x4918=(sj5*x4907);
IkReal x4919=(sj5*x4908);
evalcond[0]=((((-1.0)*x4915*x4917))+((x4907*x4911))+(((-1.0)*r22*x4916)));
evalcond[1]=(cj0+(((-1.0)*r12*x4916))+(((-1.0)*x4910*x4917))+((r11*x4918)));
evalcond[2]=((((-1.0)*x4909*x4917))+(((-1.0)*r02*x4916))+(((-1.0)*x4913))+((r01*x4918)));
evalcond[3]=((((-1.0)*x4915*x4916))+((sj1*sj2))+((x4908*x4911))+((r22*x4907))+(((-1.0)*cj1*x4912)));
evalcond[4]=((((-1.0)*cj0*sj1*x4912))+(((-1.0)*x4909*x4916))+((r02*x4907))+((r01*x4919))+(((-1.0)*cj0*x4914)));
evalcond[5]=((((-1.0)*x4910*x4916))+(((-1.0)*sj0*sj1*x4912))+(((-1.0)*x4913*x4914))+((r11*x4919))+((r12*x4907)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4920=((1.0)*cj5);
CheckValue<IkReal> x4921=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x4920))+(((-1.0)*r00*sj5)))),-1);
if(!x4921.valid){
continue;
}
CheckValue<IkReal> x4922 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4920)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4921.value)))+(x4922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4923=IKsin(j4);
IkReal x4924=IKcos(j4);
IkReal x4925=(cj5*r00);
IkReal x4926=(cj5*r10);
IkReal x4927=(r21*sj5);
IkReal x4928=((1.0)*cj2);
IkReal x4929=((1.0)*sj0);
IkReal x4930=(cj1*sj2);
IkReal x4931=(cj5*r20);
IkReal x4932=((1.0)*x4924);
IkReal x4933=((1.0)*x4923);
IkReal x4934=(sj5*x4923);
IkReal x4935=(sj5*x4924);
evalcond[0]=((((-1.0)*x4931*x4933))+((x4923*x4927))+(((-1.0)*r22*x4932)));
evalcond[1]=(cj0+(((-1.0)*x4926*x4933))+(((-1.0)*r12*x4932))+((r11*x4934)));
evalcond[2]=((((-1.0)*x4925*x4933))+(((-1.0)*r02*x4932))+((r01*x4934))+(((-1.0)*x4929)));
evalcond[3]=(((x4924*x4927))+(((-1.0)*x4931*x4932))+((sj1*sj2))+((r22*x4923))+(((-1.0)*cj1*x4928)));
evalcond[4]=((((-1.0)*x4925*x4932))+(((-1.0)*cj0*sj1*x4928))+((r01*x4935))+((r02*x4923))+(((-1.0)*cj0*x4930)));
evalcond[5]=((((-1.0)*x4926*x4932))+(((-1.0)*x4929*x4930))+((r11*x4935))+(((-1.0)*sj0*sj1*x4928))+((r12*x4923)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4936=((1.0)*cj5);
IkReal x4937=((1.0)*sj5);
IkReal x4938=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x4938;
j0eval[1]=((IKabs(((((-1.0)*r11*x4936))+(((-1.0)*r10*x4937)))))+(IKabs(((((-1.0)*r00*x4937))+(((-1.0)*r01*x4936))))));
j0eval[2]=IKsign(x4938);
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4939=r21*r21;
IkReal x4940=cj5*cj5;
IkReal x4941=(cj2*sj1);
IkReal x4942=(cj1*sj2);
IkReal x4943=(r21*sj5);
IkReal x4944=((1.0)*cj5*r20);
IkReal x4945=((((-1.0)*x4939))+((x4939*x4940))+(((2.0)*cj5*r20*x4943))+(((-1.0)*(r22*r22)))+(((-1.0)*x4940*(r20*r20))));
j4eval[0]=x4945;
j4eval[1]=((IKabs(((((-1.0)*x4942*x4944))+(((-1.0)*x4941*x4944))+((x4942*x4943))+((x4941*x4943)))))+(IKabs((((r22*x4941))+((r22*x4942))))));
j4eval[2]=IKsign(x4945);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=1.0;
j3=0;
IkReal x4946=cj1*cj1;
IkReal x4947=(cj2*sj2);
IkReal x4948=(cj2*sj1);
IkReal x4949=(cj1*sj1);
j0eval[0]=(x4947+x4949+(((-2.0)*cj1*cj2*x4948))+(((-1.08349267049076)*sj2*x4946))+(((-1.08349267049076)*cj1*x4948))+(((-2.0)*x4946*x4947)));
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x4948)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4950=IKsin(j0);
IkReal x4951=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((0.81725)*x4951))+(((-0.10915)*x4950)));
evalcond[1]=((((0.10915)*x4951))+(((-1.0)*py))+(((0.81725)*x4950)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4952=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x4952;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x4952);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4953=((1.0)*cj5);
IkReal x4954=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4953)));
j4eval[0]=x4954;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4953))))));
j4eval[2]=IKsign(x4954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x4955=((1.0)*cj5);
IkReal x4956=((((-1.0)*r00*sj5))+(((-1.0)*r01*x4955)));
j4eval[0]=x4956;
j4eval[1]=IKsign(x4956);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x4955))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4957=((1.0)*cj5);
CheckValue<IkReal> x4958 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x4957))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x4958.valid){
continue;
}
CheckValue<IkReal> x4959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4957)))),-1);
if(!x4959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4958.value)+(((1.5707963267949)*(x4959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4960=IKcos(j4);
IkReal x4961=IKsin(j4);
IkReal x4962=((1.0)*sj0);
IkReal x4963=(cj5*r00);
IkReal x4964=(cj5*r10);
IkReal x4965=(cj5*r20);
IkReal x4966=((1.0)*x4960);
IkReal x4967=((1.0)*x4961);
IkReal x4968=(sj5*x4960);
IkReal x4969=(sj5*x4961);
evalcond[0]=(((r22*x4961))+(((-1.0)*x4965*x4966))+((r21*x4968)));
evalcond[1]=((((-1.0)*r22*x4966))+(((-1.0)*x4965*x4967))+((r21*x4969)));
evalcond[2]=(cj0+((r11*x4969))+(((-1.0)*r12*x4966))+(((-1.0)*x4964*x4967)));
evalcond[3]=((((-1.0)*x4963*x4966))+((r02*x4961))+((r01*x4968))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4961))+(((-1.0)*x4962))+((r11*x4968))+(((-1.0)*x4964*x4966)));
evalcond[5]=((((-1.0)*x4962))+(((-1.0)*x4963*x4967))+(((-1.0)*r02*x4966))+((r01*x4969)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x4970=((1.0)*cj5);
CheckValue<IkReal> x4971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x4970)))),-1);
if(!x4971.valid){
continue;
}
CheckValue<IkReal> x4972 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x4972.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x4971.value)))+(x4972.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4973=IKcos(j4);
IkReal x4974=IKsin(j4);
IkReal x4975=((1.0)*sj0);
IkReal x4976=(cj5*r00);
IkReal x4977=(cj5*r10);
IkReal x4978=(cj5*r20);
IkReal x4979=((1.0)*x4973);
IkReal x4980=((1.0)*x4974);
IkReal x4981=(sj5*x4973);
IkReal x4982=(sj5*x4974);
evalcond[0]=(((r22*x4974))+(((-1.0)*x4978*x4979))+((r21*x4981)));
evalcond[1]=(((r21*x4982))+(((-1.0)*r22*x4979))+(((-1.0)*x4978*x4980)));
evalcond[2]=((((-1.0)*x4977*x4980))+cj0+((r11*x4982))+(((-1.0)*r12*x4979)));
evalcond[3]=(((r01*x4981))+(((-1.0)*x4976*x4979))+((r02*x4974))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x4981))+((r12*x4974))+(((-1.0)*x4975))+(((-1.0)*x4977*x4979)));
evalcond[5]=(((r01*x4982))+(((-1.0)*x4975))+(((-1.0)*r02*x4979))+(((-1.0)*x4976*x4980)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x4983 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x4983.valid){
continue;
}
CheckValue<IkReal> x4984=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x4984.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x4983.value)+(((1.5707963267949)*(x4984.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x4985=IKcos(j4);
IkReal x4986=IKsin(j4);
IkReal x4987=((1.0)*sj0);
IkReal x4988=(cj5*r00);
IkReal x4989=(cj5*r10);
IkReal x4990=(cj5*r20);
IkReal x4991=((1.0)*x4985);
IkReal x4992=((1.0)*x4986);
IkReal x4993=(sj5*x4985);
IkReal x4994=(sj5*x4986);
evalcond[0]=((((-1.0)*x4990*x4991))+((r22*x4986))+((r21*x4993)));
evalcond[1]=((((-1.0)*r22*x4991))+(((-1.0)*x4990*x4992))+((r21*x4994)));
evalcond[2]=(cj0+(((-1.0)*r12*x4991))+((r11*x4994))+(((-1.0)*x4989*x4992)));
evalcond[3]=((((-1.0)*x4988*x4991))+((r01*x4993))+((r02*x4986))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x4986))+((r11*x4993))+(((-1.0)*x4987))+(((-1.0)*x4989*x4991)));
evalcond[5]=((((-1.0)*r02*x4991))+(((-1.0)*x4987))+(((-1.0)*x4988*x4992))+((r01*x4994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x4995=IKsin(j0);
IkReal x4996=IKcos(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x4995))+(((0.03275)*x4996)));
evalcond[1]=((((-1.0)*py))+(((0.03275)*x4995))+(((0.10915)*x4996)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4997=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x4997;
j4eval[1]=IKsign(x4997);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x4998=((1.0)*cj5);
IkReal x4999=((((-1.0)*r11*x4998))+(((-1.0)*r10*sj5)));
j4eval[0]=x4999;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x4998))))));
j4eval[2]=IKsign(x4999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5000=cj5*cj5;
IkReal x5001=((1.0)*r20);
IkReal x5002=(r01*r21);
IkReal x5003=(r21*sj5);
IkReal x5004=(((cj5*r01*r20*sj5))+((cj5*r00*x5003))+(((-1.0)*r02*r22))+(((-1.0)*x5002))+(((-1.0)*r00*x5000*x5001))+((x5000*x5002)));
j4eval[0]=x5004;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5001))+((cj0*x5003)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5004);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5005=cj5*cj5;
IkReal x5006=((1.0)*r20);
IkReal x5007=(r01*r21);
IkReal x5008=(r21*sj5);
CheckValue<IkReal> x5009 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5006))+((cj0*x5008)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5009.valid){
continue;
}
CheckValue<IkReal> x5010=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+((cj5*r00*x5008))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5005*x5006))+(((-1.0)*x5007))+((x5005*x5007)))),-1);
if(!x5010.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5009.value)+(((1.5707963267949)*(x5010.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5011=IKcos(j4);
IkReal x5012=IKsin(j4);
IkReal x5013=(cj5*r00);
IkReal x5014=(cj5*r10);
IkReal x5015=(cj5*r20);
IkReal x5016=((1.0)*x5011);
IkReal x5017=((1.0)*x5012);
IkReal x5018=(sj5*x5011);
IkReal x5019=(sj5*x5012);
evalcond[0]=(((r21*x5018))+((r22*x5012))+(((-1.0)*x5015*x5016)));
evalcond[1]=((((-1.0)*r22*x5016))+((r21*x5019))+(((-1.0)*x5015*x5017)));
evalcond[2]=(cj0+((r02*x5012))+(((-1.0)*x5013*x5016))+((r01*x5018)));
evalcond[3]=(sj0+(((-1.0)*x5014*x5016))+((r11*x5018))+((r12*x5012)));
evalcond[4]=(cj0+(((-1.0)*x5014*x5017))+(((-1.0)*r12*x5016))+((r11*x5019)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5016))+(((-1.0)*x5013*x5017))+((r01*x5019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5020=((1.0)*cj5);
CheckValue<IkReal> x5021 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5020)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5021.valid){
continue;
}
CheckValue<IkReal> x5022=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5020)))),-1);
if(!x5022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5021.value)+(((1.5707963267949)*(x5022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5023=IKcos(j4);
IkReal x5024=IKsin(j4);
IkReal x5025=(cj5*r00);
IkReal x5026=(cj5*r10);
IkReal x5027=(cj5*r20);
IkReal x5028=((1.0)*x5023);
IkReal x5029=((1.0)*x5024);
IkReal x5030=(sj5*x5023);
IkReal x5031=(sj5*x5024);
evalcond[0]=(((r22*x5024))+((r21*x5030))+(((-1.0)*x5027*x5028)));
evalcond[1]=(((r21*x5031))+(((-1.0)*r22*x5028))+(((-1.0)*x5027*x5029)));
evalcond[2]=((((-1.0)*x5025*x5028))+((r02*x5024))+cj0+((r01*x5030)));
evalcond[3]=(sj0+((r12*x5024))+((r11*x5030))+(((-1.0)*x5026*x5028)));
evalcond[4]=(cj0+((r11*x5031))+(((-1.0)*r12*x5028))+(((-1.0)*x5026*x5029)));
evalcond[5]=((((-1.0)*r02*x5028))+(((-1.0)*x5025*x5029))+(((-1.0)*sj0))+((r01*x5031)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5032 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5032.valid){
continue;
}
CheckValue<IkReal> x5033=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5033.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5032.value)+(((1.5707963267949)*(x5033.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5034=IKcos(j4);
IkReal x5035=IKsin(j4);
IkReal x5036=(cj5*r00);
IkReal x5037=(cj5*r10);
IkReal x5038=(cj5*r20);
IkReal x5039=((1.0)*x5034);
IkReal x5040=((1.0)*x5035);
IkReal x5041=(sj5*x5034);
IkReal x5042=(sj5*x5035);
evalcond[0]=(((r21*x5041))+((r22*x5035))+(((-1.0)*x5038*x5039)));
evalcond[1]=(((r21*x5042))+(((-1.0)*x5038*x5040))+(((-1.0)*r22*x5039)));
evalcond[2]=(cj0+((r02*x5035))+(((-1.0)*x5036*x5039))+((r01*x5041)));
evalcond[3]=((((-1.0)*x5037*x5039))+((r12*x5035))+sj0+((r11*x5041)));
evalcond[4]=(cj0+(((-1.0)*x5037*x5040))+(((-1.0)*r12*x5039))+((r11*x5042)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5036*x5040))+((r01*x5042))+(((-1.0)*r02*x5039)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5043=IKsin(j0);
IkReal x5044=IKcos(j0);
IkReal x5045=(r00*sj5);
IkReal x5046=(r10*sj5);
IkReal x5047=(cj5*r11);
IkReal x5048=(cj5*r01);
evalcond[0]=(x5048+x5045+(((-1.0)*x5044)));
evalcond[1]=(x5047+x5046+(((-1.0)*x5043)));
evalcond[2]=((((-0.09465)*x5048))+(((-0.09465)*x5045))+(((-0.10915)*x5043))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5047))+(((-0.09465)*x5046))+(((0.10915)*x5044))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5049=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5049;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5049);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5050=((1.0)*cj5);
IkReal x5051=((((-1.0)*r01*x5050))+(((-1.0)*r00*sj5)));
j4eval[0]=x5051;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x5050))+((r11*sj5))))));
j4eval[2]=IKsign(x5051);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5052=cj5*cj5;
IkReal x5053=(r01*r11);
IkReal x5054=((1.0)*r00);
IkReal x5055=(r01*sj5);
IkReal x5056=((((-1.0)*r02*r12))+((cj5*r10*x5055))+((x5052*x5053))+(((-1.0)*r10*x5052*x5054))+(((-1.0)*x5053))+((cj5*r00*r11*sj5)));
j4eval[0]=x5056;
j4eval[1]=IKsign(x5056);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5054))+((cj0*x5055))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5057=cj5*cj5;
IkReal x5058=(r01*r11);
IkReal x5059=(cj5*r00);
IkReal x5060=(r01*sj5);
CheckValue<IkReal> x5061 = IKatan2WithCheck(IkReal((((cj0*x5060))+(((-1.0)*cj0*x5059)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5061.valid){
continue;
}
CheckValue<IkReal> x5062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5057))+((x5057*x5058))+((cj5*r10*x5060))+((r11*sj5*x5059))+(((-1.0)*x5058)))),-1);
if(!x5062.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5061.value)+(((1.5707963267949)*(x5062.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5063=IKcos(j4);
IkReal x5064=IKsin(j4);
IkReal x5065=(cj5*r00);
IkReal x5066=(r01*sj5);
IkReal x5067=(cj5*r10);
IkReal x5068=(cj5*r20);
IkReal x5069=((1.0)*x5063);
IkReal x5070=((1.0)*x5064);
IkReal x5071=(sj5*x5064);
IkReal x5072=(sj5*x5063);
evalcond[0]=(((x5063*x5066))+((r02*x5064))+(((-1.0)*x5065*x5069)));
evalcond[1]=(((r12*x5064))+((r11*x5072))+(((-1.0)*x5067*x5069)));
evalcond[2]=(((r21*x5071))+(((-1.0)*r22*x5069))+(((-1.0)*x5068*x5070)));
evalcond[3]=((1.0)+((r21*x5072))+((r22*x5064))+(((-1.0)*x5068*x5069)));
evalcond[4]=((((-1.0)*x5067*x5070))+cj0+(((-1.0)*r12*x5069))+((r11*x5071)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5069))+((x5064*x5066))+(((-1.0)*x5065*x5070)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5073=((1.0)*cj5);
CheckValue<IkReal> x5074 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5073))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5074.valid){
continue;
}
CheckValue<IkReal> x5075=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5073)))),-1);
if(!x5075.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5074.value)+(((1.5707963267949)*(x5075.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5076=IKcos(j4);
IkReal x5077=IKsin(j4);
IkReal x5078=(cj5*r00);
IkReal x5079=(r01*sj5);
IkReal x5080=(cj5*r10);
IkReal x5081=(cj5*r20);
IkReal x5082=((1.0)*x5076);
IkReal x5083=((1.0)*x5077);
IkReal x5084=(sj5*x5077);
IkReal x5085=(sj5*x5076);
evalcond[0]=(((x5076*x5079))+((r02*x5077))+(((-1.0)*x5078*x5082)));
evalcond[1]=((((-1.0)*x5080*x5082))+((r11*x5085))+((r12*x5077)));
evalcond[2]=(((r21*x5084))+(((-1.0)*x5081*x5083))+(((-1.0)*r22*x5082)));
evalcond[3]=((1.0)+((r21*x5085))+(((-1.0)*x5081*x5082))+((r22*x5077)));
evalcond[4]=((((-1.0)*r12*x5082))+(((-1.0)*x5080*x5083))+cj0+((r11*x5084)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5078*x5083))+((x5077*x5079))+(((-1.0)*r02*x5082)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5086 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5086.valid){
continue;
}
CheckValue<IkReal> x5087=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5087.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5086.value)+(((1.5707963267949)*(x5087.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5088=IKcos(j4);
IkReal x5089=IKsin(j4);
IkReal x5090=(cj5*r00);
IkReal x5091=(r01*sj5);
IkReal x5092=(cj5*r10);
IkReal x5093=(cj5*r20);
IkReal x5094=((1.0)*x5088);
IkReal x5095=((1.0)*x5089);
IkReal x5096=(sj5*x5089);
IkReal x5097=(sj5*x5088);
evalcond[0]=((((-1.0)*x5090*x5094))+((x5088*x5091))+((r02*x5089)));
evalcond[1]=(((r11*x5097))+((r12*x5089))+(((-1.0)*x5092*x5094)));
evalcond[2]=((((-1.0)*r22*x5094))+(((-1.0)*x5093*x5095))+((r21*x5096)));
evalcond[3]=((1.0)+(((-1.0)*x5093*x5094))+((r21*x5097))+((r22*x5089)));
evalcond[4]=(cj0+((r11*x5096))+(((-1.0)*x5092*x5095))+(((-1.0)*r12*x5094)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5090*x5095))+((x5089*x5091))+(((-1.0)*r02*x5094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5098=IKcos(j0);
IkReal x5099=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.39225)*x5098))+(((-0.10915)*x5099)));
evalcond[1]=((((0.10915)*x5098))+(((-1.0)*py))+(((-0.39225)*x5099)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5100=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5100;
j4eval[1]=IKsign(x5100);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5101=((1.0)*cj5);
IkReal x5102=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5101)));
j4eval[0]=x5102;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5101))))));
j4eval[2]=IKsign(x5102);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5103=cj5*cj5;
IkReal x5104=((1.0)*r20);
IkReal x5105=(r01*r21);
IkReal x5106=(r21*sj5);
IkReal x5107=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*x5105))+((cj5*r00*x5106))+((x5103*x5105))+(((-1.0)*r00*x5103*x5104)));
j4eval[0]=x5107;
j4eval[1]=((IKabs((((cj0*x5106))+(((-1.0)*cj0*cj5*x5104)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5107);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5108=cj5*cj5;
IkReal x5109=((1.0)*r20);
IkReal x5110=(r01*r21);
IkReal x5111=(r21*sj5);
CheckValue<IkReal> x5112=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+((x5108*x5110))+(((-1.0)*x5110))+(((-1.0)*r00*x5108*x5109))+((cj5*r00*x5111)))),-1);
if(!x5112.valid){
continue;
}
CheckValue<IkReal> x5113 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*x5111))+(((-1.0)*cj0*cj5*x5109)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5113.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5112.value)))+(x5113.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5114=IKcos(j4);
IkReal x5115=IKsin(j4);
IkReal x5116=(cj5*r00);
IkReal x5117=(cj5*r10);
IkReal x5118=(cj5*r20);
IkReal x5119=((1.0)*x5114);
IkReal x5120=((1.0)*x5115);
IkReal x5121=(sj5*x5114);
IkReal x5122=(sj5*x5115);
evalcond[0]=(((r22*x5115))+((r21*x5121))+(((-1.0)*x5118*x5119)));
evalcond[1]=((((-1.0)*r22*x5119))+(((-1.0)*x5118*x5120))+((r21*x5122)));
evalcond[2]=(cj0+((r02*x5115))+(((-1.0)*x5116*x5119))+((r01*x5121)));
evalcond[3]=(sj0+(((-1.0)*x5117*x5119))+((r11*x5121))+((r12*x5115)));
evalcond[4]=(cj0+((r11*x5122))+(((-1.0)*x5117*x5120))+(((-1.0)*r12*x5119)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5119))+((r01*x5122))+(((-1.0)*x5116*x5120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5123=((1.0)*cj5);
CheckValue<IkReal> x5124 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r20*x5123))+((cj0*r21*sj5)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5124.valid){
continue;
}
CheckValue<IkReal> x5125=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5123)))),-1);
if(!x5125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5124.value)+(((1.5707963267949)*(x5125.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5126=IKcos(j4);
IkReal x5127=IKsin(j4);
IkReal x5128=(cj5*r00);
IkReal x5129=(cj5*r10);
IkReal x5130=(cj5*r20);
IkReal x5131=((1.0)*x5126);
IkReal x5132=((1.0)*x5127);
IkReal x5133=(sj5*x5126);
IkReal x5134=(sj5*x5127);
evalcond[0]=(((r22*x5127))+(((-1.0)*x5130*x5131))+((r21*x5133)));
evalcond[1]=((((-1.0)*x5130*x5132))+((r21*x5134))+(((-1.0)*r22*x5131)));
evalcond[2]=(cj0+(((-1.0)*x5128*x5131))+((r01*x5133))+((r02*x5127)));
evalcond[3]=(sj0+((r12*x5127))+((r11*x5133))+(((-1.0)*x5129*x5131)));
evalcond[4]=(cj0+((r11*x5134))+(((-1.0)*x5129*x5132))+(((-1.0)*r12*x5131)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5128*x5132))+((r01*x5134))+(((-1.0)*r02*x5131)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5135 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5135.valid){
continue;
}
CheckValue<IkReal> x5136=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5136.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5135.value)+(((1.5707963267949)*(x5136.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5137=IKcos(j4);
IkReal x5138=IKsin(j4);
IkReal x5139=(cj5*r00);
IkReal x5140=(cj5*r10);
IkReal x5141=(cj5*r20);
IkReal x5142=((1.0)*x5137);
IkReal x5143=((1.0)*x5138);
IkReal x5144=(sj5*x5137);
IkReal x5145=(sj5*x5138);
evalcond[0]=(((r21*x5144))+((r22*x5138))+(((-1.0)*x5141*x5142)));
evalcond[1]=(((r21*x5145))+(((-1.0)*x5141*x5143))+(((-1.0)*r22*x5142)));
evalcond[2]=(((r01*x5144))+cj0+(((-1.0)*x5139*x5142))+((r02*x5138)));
evalcond[3]=(sj0+(((-1.0)*x5140*x5142))+((r12*x5138))+((r11*x5144)));
evalcond[4]=(cj0+(((-1.0)*x5140*x5143))+(((-1.0)*r12*x5142))+((r11*x5145)));
evalcond[5]=((((-1.0)*sj0))+((r01*x5145))+(((-1.0)*r02*x5142))+(((-1.0)*x5139*x5143)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5146=((1.0)*sj5);
IkReal x5147=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x5147))+(((-1.0)*r10*x5146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5147))+(((-1.0)*r00*x5146)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x5147))+(((-1.0)*r10*x5146))))+IKsqr(((((-1.0)*r01*x5147))+(((-1.0)*r00*x5146))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x5147))+(((-1.0)*r10*x5146))), ((((-1.0)*r01*x5147))+(((-1.0)*r00*x5146))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5148=IKsin(j0);
IkReal x5149=IKcos(j0);
IkReal x5150=(r00*sj5);
IkReal x5151=(r10*sj5);
IkReal x5152=(cj5*r11);
IkReal x5153=(cj5*r01);
evalcond[0]=(x5150+x5153+x5149);
evalcond[1]=(x5151+x5152+x5148);
evalcond[2]=((((-0.09465)*x5150))+(((-0.09465)*x5153))+(((-1.0)*px))+(((-0.10915)*x5148)));
evalcond[3]=((((-0.09465)*x5152))+(((-0.09465)*x5151))+(((0.10915)*x5149))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5154=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5154;
j4eval[1]=IKsign(x5154);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5155=((1.0)*cj5);
IkReal x5156=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5155)));
j4eval[0]=x5156;
j4eval[1]=IKsign(x5156);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5155))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5157=cj5*cj5;
IkReal x5158=(r01*r11);
IkReal x5159=((1.0)*r00);
IkReal x5160=(r01*sj5);
IkReal x5161=(((x5157*x5158))+(((-1.0)*r02*r12))+(((-1.0)*r10*x5157*x5159))+(((-1.0)*x5158))+((cj5*r10*x5160))+((cj5*r00*r11*sj5)));
j4eval[0]=x5161;
j4eval[1]=IKsign(x5161);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs((((cj0*x5160))+(((-1.0)*cj0*cj5*x5159))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5162=cj5*cj5;
IkReal x5163=(r01*r11);
IkReal x5164=(cj5*r00);
IkReal x5165=(r01*sj5);
CheckValue<IkReal> x5166=IKPowWithIntegerCheck(IKsign((((x5162*x5163))+((r11*sj5*x5164))+(((-1.0)*r02*r12))+(((-1.0)*x5163))+(((-1.0)*r00*r10*x5162))+((cj5*r10*x5165)))),-1);
if(!x5166.valid){
continue;
}
CheckValue<IkReal> x5167 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5164))+((cj0*x5165)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5167.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5166.value)))+(x5167.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5168=IKcos(j4);
IkReal x5169=IKsin(j4);
IkReal x5170=(cj5*r00);
IkReal x5171=(r01*sj5);
IkReal x5172=(cj5*r10);
IkReal x5173=(cj5*r20);
IkReal x5174=((1.0)*x5168);
IkReal x5175=((1.0)*x5169);
IkReal x5176=(sj5*x5169);
IkReal x5177=(sj5*x5168);
evalcond[0]=((((-1.0)*x5170*x5174))+((r02*x5169))+((x5168*x5171)));
evalcond[1]=((((-1.0)*x5172*x5174))+((r12*x5169))+((r11*x5177)));
evalcond[2]=((((-1.0)*x5173*x5175))+(((-1.0)*r22*x5174))+((r21*x5176)));
evalcond[3]=((-1.0)+(((-1.0)*x5173*x5174))+((r22*x5169))+((r21*x5177)));
evalcond[4]=(cj0+(((-1.0)*x5172*x5175))+(((-1.0)*r12*x5174))+((r11*x5176)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5170*x5175))+(((-1.0)*r02*x5174))+((x5169*x5171)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5178=((1.0)*cj5);
CheckValue<IkReal> x5179 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5178)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5179.valid){
continue;
}
CheckValue<IkReal> x5180=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5178)))),-1);
if(!x5180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5179.value)+(((1.5707963267949)*(x5180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5181=IKcos(j4);
IkReal x5182=IKsin(j4);
IkReal x5183=(cj5*r00);
IkReal x5184=(r01*sj5);
IkReal x5185=(cj5*r10);
IkReal x5186=(cj5*r20);
IkReal x5187=((1.0)*x5181);
IkReal x5188=((1.0)*x5182);
IkReal x5189=(sj5*x5182);
IkReal x5190=(sj5*x5181);
evalcond[0]=((((-1.0)*x5183*x5187))+((x5181*x5184))+((r02*x5182)));
evalcond[1]=(((r11*x5190))+(((-1.0)*x5185*x5187))+((r12*x5182)));
evalcond[2]=((((-1.0)*r22*x5187))+((r21*x5189))+(((-1.0)*x5186*x5188)));
evalcond[3]=((-1.0)+((r22*x5182))+((r21*x5190))+(((-1.0)*x5186*x5187)));
evalcond[4]=(cj0+(((-1.0)*x5185*x5188))+(((-1.0)*r12*x5187))+((r11*x5189)));
evalcond[5]=((((-1.0)*x5183*x5188))+(((-1.0)*sj0))+(((-1.0)*r02*x5187))+((x5182*x5184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5191=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5191.valid){
continue;
}
CheckValue<IkReal> x5192 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5191.value)))+(x5192.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5193=IKcos(j4);
IkReal x5194=IKsin(j4);
IkReal x5195=(cj5*r00);
IkReal x5196=(r01*sj5);
IkReal x5197=(cj5*r10);
IkReal x5198=(cj5*r20);
IkReal x5199=((1.0)*x5193);
IkReal x5200=((1.0)*x5194);
IkReal x5201=(sj5*x5194);
IkReal x5202=(sj5*x5193);
evalcond[0]=(((r02*x5194))+((x5193*x5196))+(((-1.0)*x5195*x5199)));
evalcond[1]=(((r11*x5202))+((r12*x5194))+(((-1.0)*x5197*x5199)));
evalcond[2]=((((-1.0)*x5198*x5200))+(((-1.0)*r22*x5199))+((r21*x5201)));
evalcond[3]=((-1.0)+((r22*x5194))+(((-1.0)*x5198*x5199))+((r21*x5202)));
evalcond[4]=((((-1.0)*r12*x5199))+cj0+((r11*x5201))+(((-1.0)*x5197*x5200)));
evalcond[5]=((((-1.0)*sj0))+((x5194*x5196))+(((-1.0)*r02*x5199))+(((-1.0)*x5195*x5200)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5203=IKsin(j0);
IkReal x5204=IKcos(j0);
evalcond[0]=((((-0.10915)*x5203))+(((-1.0)*px))+(((0.39225)*x5204)));
evalcond[1]=((((0.10915)*x5204))+(((-1.0)*py))+(((0.39225)*x5203)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5205=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5205;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5205);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5206=((1.0)*cj5);
IkReal x5207=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5206)));
j4eval[0]=x5207;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5206)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5207);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5208=((1.0)*cj5);
IkReal x5209=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5208)));
j4eval[0]=x5209;
j4eval[1]=IKsign(x5209);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x5208))+((r21*sj0*sj5))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5210=((1.0)*cj5);
CheckValue<IkReal> x5211=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5210)))),-1);
if(!x5211.valid){
continue;
}
CheckValue<IkReal> x5212 = IKatan2WithCheck(IkReal(((((-1.0)*r20*sj0*x5210))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5212.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5211.value)))+(x5212.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5213=IKcos(j4);
IkReal x5214=IKsin(j4);
IkReal x5215=((1.0)*sj0);
IkReal x5216=(cj5*r00);
IkReal x5217=(cj5*r10);
IkReal x5218=(cj5*r20);
IkReal x5219=((1.0)*x5213);
IkReal x5220=((1.0)*x5214);
IkReal x5221=(sj5*x5213);
IkReal x5222=(sj5*x5214);
evalcond[0]=(((r21*x5221))+(((-1.0)*x5218*x5219))+((r22*x5214)));
evalcond[1]=(((r21*x5222))+(((-1.0)*x5218*x5220))+(((-1.0)*r22*x5219)));
evalcond[2]=(cj0+(((-1.0)*x5217*x5220))+((r11*x5222))+(((-1.0)*r12*x5219)));
evalcond[3]=(((r02*x5214))+((r01*x5221))+(((-1.0)*cj0))+(((-1.0)*x5216*x5219)));
evalcond[4]=((((-1.0)*x5217*x5219))+(((-1.0)*x5215))+((r12*x5214))+((r11*x5221)));
evalcond[5]=((((-1.0)*x5215))+(((-1.0)*x5216*x5220))+((r01*x5222))+(((-1.0)*r02*x5219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5223=((1.0)*cj5);
CheckValue<IkReal> x5224 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5223)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5224.valid){
continue;
}
CheckValue<IkReal> x5225=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5223)))),-1);
if(!x5225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5224.value)+(((1.5707963267949)*(x5225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5226=IKcos(j4);
IkReal x5227=IKsin(j4);
IkReal x5228=((1.0)*sj0);
IkReal x5229=(cj5*r00);
IkReal x5230=(cj5*r10);
IkReal x5231=(cj5*r20);
IkReal x5232=((1.0)*x5226);
IkReal x5233=((1.0)*x5227);
IkReal x5234=(sj5*x5226);
IkReal x5235=(sj5*x5227);
evalcond[0]=(((r22*x5227))+(((-1.0)*x5231*x5232))+((r21*x5234)));
evalcond[1]=((((-1.0)*r22*x5232))+(((-1.0)*x5231*x5233))+((r21*x5235)));
evalcond[2]=(cj0+((r11*x5235))+(((-1.0)*r12*x5232))+(((-1.0)*x5230*x5233)));
evalcond[3]=(((r02*x5227))+((r01*x5234))+(((-1.0)*x5229*x5232))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5234))+(((-1.0)*x5228))+((r12*x5227))+(((-1.0)*x5230*x5232)));
evalcond[5]=((((-1.0)*r02*x5232))+((r01*x5235))+(((-1.0)*x5229*x5233))+(((-1.0)*x5228)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5236 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5236.valid){
continue;
}
CheckValue<IkReal> x5237=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5237.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5236.value)+(((1.5707963267949)*(x5237.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5238=IKcos(j4);
IkReal x5239=IKsin(j4);
IkReal x5240=((1.0)*sj0);
IkReal x5241=(cj5*r00);
IkReal x5242=(cj5*r10);
IkReal x5243=(cj5*r20);
IkReal x5244=((1.0)*x5238);
IkReal x5245=((1.0)*x5239);
IkReal x5246=(sj5*x5238);
IkReal x5247=(sj5*x5239);
evalcond[0]=((((-1.0)*x5243*x5244))+((r21*x5246))+((r22*x5239)));
evalcond[1]=((((-1.0)*x5243*x5245))+(((-1.0)*r22*x5244))+((r21*x5247)));
evalcond[2]=((((-1.0)*r12*x5244))+((r11*x5247))+cj0+(((-1.0)*x5242*x5245)));
evalcond[3]=(((r01*x5246))+(((-1.0)*x5241*x5244))+((r02*x5239))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5246))+(((-1.0)*x5240))+(((-1.0)*x5242*x5244))+((r12*x5239)));
evalcond[5]=((((-1.0)*x5240))+((r01*x5247))+(((-1.0)*r02*x5244))+(((-1.0)*x5241*x5245)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5248=IKcos(j0);
IkReal x5249=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.81725)*x5248))+(((-0.10915)*x5249)));
evalcond[1]=((((0.10915)*x5248))+(((-1.0)*py))+(((-0.81725)*x5249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5250=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5250;
j4eval[1]=IKsign(x5250);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5251=((1.0)*cj5);
IkReal x5252=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5251)));
j4eval[0]=x5252;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5251)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5252);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5253=cj5*cj5;
IkReal x5254=((1.0)*r20);
IkReal x5255=(r01*r21);
IkReal x5256=(r21*sj5);
IkReal x5257=(((cj5*r01*r20*sj5))+((cj5*r00*x5256))+((x5253*x5255))+(((-1.0)*r02*r22))+(((-1.0)*x5255))+(((-1.0)*r00*x5253*x5254)));
j4eval[0]=x5257;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5254))+((cj0*x5256)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5257);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5258=cj5*cj5;
IkReal x5259=((1.0)*r20);
IkReal x5260=(r01*r21);
IkReal x5261=(r21*sj5);
CheckValue<IkReal> x5262=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*x5260))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5258*x5259))+((x5258*x5260))+((cj5*r00*x5261)))),-1);
if(!x5262.valid){
continue;
}
CheckValue<IkReal> x5263 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5259))+((cj0*x5261)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5263.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5262.value)))+(x5263.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5264=IKcos(j4);
IkReal x5265=IKsin(j4);
IkReal x5266=(cj5*r00);
IkReal x5267=(cj5*r10);
IkReal x5268=(cj5*r20);
IkReal x5269=((1.0)*x5264);
IkReal x5270=((1.0)*x5265);
IkReal x5271=(sj5*x5264);
IkReal x5272=(sj5*x5265);
evalcond[0]=((((-1.0)*x5268*x5269))+((r21*x5271))+((r22*x5265)));
evalcond[1]=(((r21*x5272))+(((-1.0)*r22*x5269))+(((-1.0)*x5268*x5270)));
evalcond[2]=(((r02*x5265))+cj0+((r01*x5271))+(((-1.0)*x5266*x5269)));
evalcond[3]=(sj0+((r12*x5265))+(((-1.0)*x5267*x5269))+((r11*x5271)));
evalcond[4]=(cj0+(((-1.0)*r12*x5269))+(((-1.0)*x5267*x5270))+((r11*x5272)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5269))+(((-1.0)*x5266*x5270))+((r01*x5272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5273=((1.0)*cj5);
CheckValue<IkReal> x5274=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5273)))),-1);
if(!x5274.valid){
continue;
}
CheckValue<IkReal> x5275 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5273)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5275.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5274.value)))+(x5275.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5276=IKcos(j4);
IkReal x5277=IKsin(j4);
IkReal x5278=(cj5*r00);
IkReal x5279=(cj5*r10);
IkReal x5280=(cj5*r20);
IkReal x5281=((1.0)*x5276);
IkReal x5282=((1.0)*x5277);
IkReal x5283=(sj5*x5276);
IkReal x5284=(sj5*x5277);
evalcond[0]=(((r22*x5277))+((r21*x5283))+(((-1.0)*x5280*x5281)));
evalcond[1]=((((-1.0)*r22*x5281))+((r21*x5284))+(((-1.0)*x5280*x5282)));
evalcond[2]=(((r02*x5277))+cj0+(((-1.0)*x5278*x5281))+((r01*x5283)));
evalcond[3]=(sj0+(((-1.0)*x5279*x5281))+((r11*x5283))+((r12*x5277)));
evalcond[4]=((((-1.0)*x5279*x5282))+cj0+(((-1.0)*r12*x5281))+((r11*x5284)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x5278*x5282))+((r01*x5284))+(((-1.0)*r02*x5281)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5285 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5285.valid){
continue;
}
CheckValue<IkReal> x5286=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5286.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5285.value)+(((1.5707963267949)*(x5286.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5287=IKcos(j4);
IkReal x5288=IKsin(j4);
IkReal x5289=(cj5*r00);
IkReal x5290=(cj5*r10);
IkReal x5291=(cj5*r20);
IkReal x5292=((1.0)*x5287);
IkReal x5293=((1.0)*x5288);
IkReal x5294=(sj5*x5287);
IkReal x5295=(sj5*x5288);
evalcond[0]=(((r22*x5288))+((r21*x5294))+(((-1.0)*x5291*x5292)));
evalcond[1]=((((-1.0)*r22*x5292))+((r21*x5295))+(((-1.0)*x5291*x5293)));
evalcond[2]=((((-1.0)*x5289*x5292))+((r02*x5288))+cj0+((r01*x5294)));
evalcond[3]=(((r12*x5288))+sj0+((r11*x5294))+(((-1.0)*x5290*x5292)));
evalcond[4]=(cj0+(((-1.0)*r12*x5292))+((r11*x5295))+(((-1.0)*x5290*x5293)));
evalcond[5]=((((-1.0)*x5289*x5293))+(((-1.0)*sj0))+((r01*x5295))+(((-1.0)*r02*x5292)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5296=IKcos(j0);
IkReal x5297=IKsin(j0);
evalcond[0]=((((-0.03275)*x5296))+(((-1.0)*px))+(((-0.10915)*x5297)));
evalcond[1]=((((-0.03275)*x5297))+(((-1.0)*py))+(((0.10915)*x5296)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5298=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5298;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5299=((1.0)*cj5);
IkReal x5300=((((-1.0)*r01*x5299))+(((-1.0)*r00*sj5)));
j4eval[0]=x5300;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5299))))));
j4eval[2]=IKsign(x5300);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5301=((1.0)*cj5);
IkReal x5302=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5301)));
j4eval[0]=x5302;
j4eval[1]=IKsign(x5302);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5301))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5303=((1.0)*cj5);
CheckValue<IkReal> x5304 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5303)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5304.valid){
continue;
}
CheckValue<IkReal> x5305=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5303)))),-1);
if(!x5305.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5304.value)+(((1.5707963267949)*(x5305.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5306=IKcos(j4);
IkReal x5307=IKsin(j4);
IkReal x5308=((1.0)*sj0);
IkReal x5309=(cj5*r00);
IkReal x5310=(cj5*r10);
IkReal x5311=(cj5*r20);
IkReal x5312=((1.0)*x5306);
IkReal x5313=((1.0)*x5307);
IkReal x5314=(sj5*x5306);
IkReal x5315=(sj5*x5307);
evalcond[0]=(((r21*x5314))+((r22*x5307))+(((-1.0)*x5311*x5312)));
evalcond[1]=(((r21*x5315))+(((-1.0)*r22*x5312))+(((-1.0)*x5311*x5313)));
evalcond[2]=((((-1.0)*x5310*x5313))+(((-1.0)*r12*x5312))+cj0+((r11*x5315)));
evalcond[3]=(((r01*x5314))+((r02*x5307))+(((-1.0)*x5309*x5312))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5310*x5312))+(((-1.0)*x5308))+((r12*x5307))+((r11*x5314)));
evalcond[5]=(((r01*x5315))+(((-1.0)*x5308))+(((-1.0)*x5309*x5313))+(((-1.0)*r02*x5312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5316=((1.0)*cj5);
CheckValue<IkReal> x5317 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5316)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5317.valid){
continue;
}
CheckValue<IkReal> x5318=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5316)))),-1);
if(!x5318.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5317.value)+(((1.5707963267949)*(x5318.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5319=IKcos(j4);
IkReal x5320=IKsin(j4);
IkReal x5321=((1.0)*sj0);
IkReal x5322=(cj5*r00);
IkReal x5323=(cj5*r10);
IkReal x5324=(cj5*r20);
IkReal x5325=((1.0)*x5319);
IkReal x5326=((1.0)*x5320);
IkReal x5327=(sj5*x5319);
IkReal x5328=(sj5*x5320);
evalcond[0]=(((r22*x5320))+(((-1.0)*x5324*x5325))+((r21*x5327)));
evalcond[1]=((((-1.0)*r22*x5325))+(((-1.0)*x5324*x5326))+((r21*x5328)));
evalcond[2]=(((r11*x5328))+cj0+(((-1.0)*x5323*x5326))+(((-1.0)*r12*x5325)));
evalcond[3]=((((-1.0)*x5322*x5325))+((r01*x5327))+((r02*x5320))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5327))+(((-1.0)*x5323*x5325))+((r12*x5320))+(((-1.0)*x5321)));
evalcond[5]=((((-1.0)*r02*x5325))+(((-1.0)*x5322*x5326))+((r01*x5328))+(((-1.0)*x5321)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5329 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5329.valid){
continue;
}
CheckValue<IkReal> x5330=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5330.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5329.value)+(((1.5707963267949)*(x5330.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5331=IKcos(j4);
IkReal x5332=IKsin(j4);
IkReal x5333=((1.0)*sj0);
IkReal x5334=(cj5*r00);
IkReal x5335=(cj5*r10);
IkReal x5336=(cj5*r20);
IkReal x5337=((1.0)*x5331);
IkReal x5338=((1.0)*x5332);
IkReal x5339=(sj5*x5331);
IkReal x5340=(sj5*x5332);
evalcond[0]=(((r21*x5339))+((r22*x5332))+(((-1.0)*x5336*x5337)));
evalcond[1]=((((-1.0)*r22*x5337))+(((-1.0)*x5336*x5338))+((r21*x5340)));
evalcond[2]=(cj0+(((-1.0)*x5335*x5338))+(((-1.0)*r12*x5337))+((r11*x5340)));
evalcond[3]=(((r01*x5339))+((r02*x5332))+(((-1.0)*x5334*x5337))+(((-1.0)*cj0)));
evalcond[4]=(((r11*x5339))+((r12*x5332))+(((-1.0)*x5335*x5337))+(((-1.0)*x5333)));
evalcond[5]=(((r01*x5340))+(((-1.0)*r02*x5337))+(((-1.0)*x5333))+(((-1.0)*x5334*x5338)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5341=((1.0)*sj5);
IkReal x5342=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x5341))+(((-1.0)*r11*x5342)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x5342))+(((-1.0)*r00*x5341)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x5341))+(((-1.0)*r11*x5342))))+IKsqr(((((-1.0)*r01*x5342))+(((-1.0)*r00*x5341))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x5341))+(((-1.0)*r11*x5342))), ((((-1.0)*r01*x5342))+(((-1.0)*r00*x5341))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5343=IKsin(j0);
IkReal x5344=IKcos(j0);
IkReal x5345=(r00*sj5);
IkReal x5346=(r10*sj5);
IkReal x5347=(cj5*r11);
IkReal x5348=(cj5*r01);
evalcond[0]=(x5344+x5345+x5348);
evalcond[1]=(x5346+x5347+x5343);
evalcond[2]=((((-0.10915)*x5343))+(((-0.09465)*x5348))+(((-0.09465)*x5345))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x5344))+(((-0.09465)*x5346))+(((-0.09465)*x5347))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5349=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5349;
j4eval[1]=IKsign(x5349);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5350=((1.0)*cj5);
IkReal x5351=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5350)));
j4eval[0]=x5351;
j4eval[1]=IKsign(x5351);
j4eval[2]=((IKabs((((r01*sj5))+(((-1.0)*r00*x5350)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x5352=cj5*cj5;
IkReal x5353=(r01*r11);
IkReal x5354=((1.0)*r00);
IkReal x5355=(r01*sj5);
IkReal x5356=((((-1.0)*r02*r12))+((x5352*x5353))+(((-1.0)*r10*x5352*x5354))+((cj5*r10*x5355))+(((-1.0)*x5353))+((cj5*r00*r11*sj5)));
j4eval[0]=x5356;
j4eval[1]=IKsign(x5356);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5354))+((cj0*x5355))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5357=cj5*cj5;
IkReal x5358=(r01*r11);
IkReal x5359=(cj5*r00);
IkReal x5360=(r01*sj5);
CheckValue<IkReal> x5361 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5359))+((cj0*x5360)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5361.valid){
continue;
}
CheckValue<IkReal> x5362=IKPowWithIntegerCheck(IKsign((((x5357*x5358))+(((-1.0)*r02*r12))+(((-1.0)*r00*r10*x5357))+((cj5*r10*x5360))+((r11*sj5*x5359))+(((-1.0)*x5358)))),-1);
if(!x5362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5361.value)+(((1.5707963267949)*(x5362.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5363=IKcos(j4);
IkReal x5364=IKsin(j4);
IkReal x5365=(cj5*r00);
IkReal x5366=(r01*sj5);
IkReal x5367=(cj5*r10);
IkReal x5368=(cj5*r20);
IkReal x5369=((1.0)*x5363);
IkReal x5370=((1.0)*x5364);
IkReal x5371=(sj5*x5364);
IkReal x5372=(sj5*x5363);
evalcond[0]=(((r02*x5364))+(((-1.0)*x5365*x5369))+((x5363*x5366)));
evalcond[1]=(((r12*x5364))+(((-1.0)*x5367*x5369))+((r11*x5372)));
evalcond[2]=((((-1.0)*r22*x5369))+((r21*x5371))+(((-1.0)*x5368*x5370)));
evalcond[3]=((-1.0)+((r22*x5364))+((r21*x5372))+(((-1.0)*x5368*x5369)));
evalcond[4]=(cj0+(((-1.0)*x5367*x5370))+((r11*x5371))+(((-1.0)*r12*x5369)));
evalcond[5]=((((-1.0)*sj0))+((x5364*x5366))+(((-1.0)*r02*x5369))+(((-1.0)*x5365*x5370)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5373=((1.0)*cj5);
CheckValue<IkReal> x5374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5373)))),-1);
if(!x5374.valid){
continue;
}
CheckValue<IkReal> x5375 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*r00*x5373)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5374.value)))+(x5375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5376=IKcos(j4);
IkReal x5377=IKsin(j4);
IkReal x5378=(cj5*r00);
IkReal x5379=(r01*sj5);
IkReal x5380=(cj5*r10);
IkReal x5381=(cj5*r20);
IkReal x5382=((1.0)*x5376);
IkReal x5383=((1.0)*x5377);
IkReal x5384=(sj5*x5377);
IkReal x5385=(sj5*x5376);
evalcond[0]=(((r02*x5377))+((x5376*x5379))+(((-1.0)*x5378*x5382)));
evalcond[1]=(((r11*x5385))+(((-1.0)*x5380*x5382))+((r12*x5377)));
evalcond[2]=((((-1.0)*r22*x5382))+((r21*x5384))+(((-1.0)*x5381*x5383)));
evalcond[3]=((-1.0)+((r22*x5377))+((r21*x5385))+(((-1.0)*x5381*x5382)));
evalcond[4]=(cj0+((r11*x5384))+(((-1.0)*x5380*x5383))+(((-1.0)*r12*x5382)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5382))+((x5377*x5379))+(((-1.0)*x5378*x5383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5386=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5386.valid){
continue;
}
CheckValue<IkReal> x5387 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5386.value)))+(x5387.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5388=IKcos(j4);
IkReal x5389=IKsin(j4);
IkReal x5390=(cj5*r00);
IkReal x5391=(r01*sj5);
IkReal x5392=(cj5*r10);
IkReal x5393=(cj5*r20);
IkReal x5394=((1.0)*x5388);
IkReal x5395=((1.0)*x5389);
IkReal x5396=(sj5*x5389);
IkReal x5397=(sj5*x5388);
evalcond[0]=(((r02*x5389))+((x5388*x5391))+(((-1.0)*x5390*x5394)));
evalcond[1]=((((-1.0)*x5392*x5394))+((r11*x5397))+((r12*x5389)));
evalcond[2]=((((-1.0)*x5393*x5395))+(((-1.0)*r22*x5394))+((r21*x5396)));
evalcond[3]=((-1.0)+(((-1.0)*x5393*x5394))+((r21*x5397))+((r22*x5389)));
evalcond[4]=(cj0+(((-1.0)*x5392*x5395))+((r11*x5396))+(((-1.0)*r12*x5394)));
evalcond[5]=(((x5389*x5391))+(((-1.0)*sj0))+(((-1.0)*r02*x5394))+(((-1.0)*x5390*x5395)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5398=IKsin(j0);
IkReal x5399=IKcos(j0);
evalcond[0]=((((-0.10915)*x5398))+(((0.39225)*x5399))+(((-1.0)*px)));
evalcond[1]=((((0.39225)*x5398))+(((0.10915)*x5399))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5400=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5400;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5400);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5401=((1.0)*cj5);
IkReal x5402=((((-1.0)*r01*x5401))+(((-1.0)*r00*sj5)));
j4eval[0]=x5402;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x5401))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5402);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x5403=((1.0)*cj5);
IkReal x5404=((((-1.0)*r01*x5403))+(((-1.0)*r00*sj5)));
j4eval[0]=x5404;
j4eval[1]=IKsign(x5404);
j4eval[2]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5403))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5405=((1.0)*cj5);
CheckValue<IkReal> x5406=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5405))+(((-1.0)*r00*sj5)))),-1);
if(!x5406.valid){
continue;
}
CheckValue<IkReal> x5407 = IKatan2WithCheck(IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5405)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5406.value)))+(x5407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5408=IKcos(j4);
IkReal x5409=IKsin(j4);
IkReal x5410=((1.0)*sj0);
IkReal x5411=(cj5*r00);
IkReal x5412=(cj5*r10);
IkReal x5413=(cj5*r20);
IkReal x5414=((1.0)*x5408);
IkReal x5415=((1.0)*x5409);
IkReal x5416=(sj5*x5408);
IkReal x5417=(sj5*x5409);
evalcond[0]=(((r22*x5409))+((r21*x5416))+(((-1.0)*x5413*x5414)));
evalcond[1]=((((-1.0)*r22*x5414))+((r21*x5417))+(((-1.0)*x5413*x5415)));
evalcond[2]=((((-1.0)*x5412*x5415))+((r11*x5417))+cj0+(((-1.0)*r12*x5414)));
evalcond[3]=(((r02*x5409))+((r01*x5416))+(((-1.0)*x5411*x5414))+(((-1.0)*cj0)));
evalcond[4]=(((r12*x5409))+(((-1.0)*x5412*x5414))+((r11*x5416))+(((-1.0)*x5410)));
evalcond[5]=((((-1.0)*r02*x5414))+(((-1.0)*x5410))+((r01*x5417))+(((-1.0)*x5411*x5415)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5418=((1.0)*cj5);
CheckValue<IkReal> x5419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5418)))),-1);
if(!x5419.valid){
continue;
}
CheckValue<IkReal> x5420 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5418)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5420.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5419.value)))+(x5420.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5421=IKcos(j4);
IkReal x5422=IKsin(j4);
IkReal x5423=((1.0)*sj0);
IkReal x5424=(cj5*r00);
IkReal x5425=(cj5*r10);
IkReal x5426=(cj5*r20);
IkReal x5427=((1.0)*x5421);
IkReal x5428=((1.0)*x5422);
IkReal x5429=(sj5*x5421);
IkReal x5430=(sj5*x5422);
evalcond[0]=(((r22*x5422))+(((-1.0)*x5426*x5427))+((r21*x5429)));
evalcond[1]=((((-1.0)*x5426*x5428))+(((-1.0)*r22*x5427))+((r21*x5430)));
evalcond[2]=(cj0+(((-1.0)*x5425*x5428))+((r11*x5430))+(((-1.0)*r12*x5427)));
evalcond[3]=(((r01*x5429))+(((-1.0)*x5424*x5427))+((r02*x5422))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5423))+((r12*x5422))+(((-1.0)*x5425*x5427))+((r11*x5429)));
evalcond[5]=((((-1.0)*x5423))+(((-1.0)*x5424*x5428))+(((-1.0)*r02*x5427))+((r01*x5430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5431 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*r20)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5431.valid){
continue;
}
CheckValue<IkReal> x5432=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5432.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5431.value)+(((1.5707963267949)*(x5432.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5433=IKcos(j4);
IkReal x5434=IKsin(j4);
IkReal x5435=((1.0)*sj0);
IkReal x5436=(cj5*r00);
IkReal x5437=(cj5*r10);
IkReal x5438=(cj5*r20);
IkReal x5439=((1.0)*x5433);
IkReal x5440=((1.0)*x5434);
IkReal x5441=(sj5*x5433);
IkReal x5442=(sj5*x5434);
evalcond[0]=(((r22*x5434))+(((-1.0)*x5438*x5439))+((r21*x5441)));
evalcond[1]=((((-1.0)*x5438*x5440))+(((-1.0)*r22*x5439))+((r21*x5442)));
evalcond[2]=((((-1.0)*x5437*x5440))+cj0+(((-1.0)*r12*x5439))+((r11*x5442)));
evalcond[3]=(((r02*x5434))+((r01*x5441))+(((-1.0)*x5436*x5439))+(((-1.0)*cj0)));
evalcond[4]=((((-1.0)*x5437*x5439))+(((-1.0)*x5435))+((r11*x5441))+((r12*x5434)));
evalcond[5]=((((-1.0)*x5436*x5440))+(((-1.0)*r02*x5439))+((r01*x5442))+(((-1.0)*x5435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5443=IKsin(j0);
IkReal x5444=IKcos(j0);
IkReal x5445=(r00*sj5);
IkReal x5446=(r10*sj5);
IkReal x5447=(cj5*r11);
IkReal x5448=(cj5*r01);
evalcond[0]=((((-1.0)*x5444))+x5448+x5445);
evalcond[1]=((((-1.0)*x5443))+x5447+x5446);
evalcond[2]=((((-0.10915)*x5443))+(((-0.09465)*x5448))+(((-0.09465)*x5445))+(((-1.0)*px)));
evalcond[3]=((((-0.09465)*x5447))+(((-0.09465)*x5446))+(((-1.0)*py))+(((0.10915)*x5444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5449=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x5449;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
j4eval[2]=IKsign(x5449);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5450=((1.0)*cj5);
IkReal x5451=((((-1.0)*r00*sj5))+(((-1.0)*r01*x5450)));
j4eval[0]=x5451;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x5450)))))+(IKabs(r12)));
j4eval[2]=IKsign(x5451);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x5452=cj5*cj5;
IkReal x5453=(r01*r11);
IkReal x5454=((1.0)*r00);
IkReal x5455=(r01*sj5);
IkReal x5456=((((-1.0)*r02*r12))+(((-1.0)*r10*x5452*x5454))+((cj5*r10*x5455))+(((-1.0)*x5453))+((x5452*x5453))+((cj5*r00*r11*sj5)));
j4eval[0]=x5456;
j4eval[1]=IKsign(x5456);
j4eval[2]=((IKabs((cj0*r02)))+(IKabs(((((-1.0)*cj0*cj5*x5454))+((cj0*x5455))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5457=cj5*cj5;
IkReal x5458=(r01*r11);
IkReal x5459=(cj5*r00);
IkReal x5460=(r01*sj5);
CheckValue<IkReal> x5461 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*x5459))+((cj0*x5460)))),IkReal(((-1.0)*cj0*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5461.valid){
continue;
}
CheckValue<IkReal> x5462=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r12))+((r11*sj5*x5459))+(((-1.0)*r00*r10*x5457))+((cj5*r10*x5460))+(((-1.0)*x5458))+((x5457*x5458)))),-1);
if(!x5462.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5461.value)+(((1.5707963267949)*(x5462.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5463=IKcos(j4);
IkReal x5464=IKsin(j4);
IkReal x5465=(cj5*r00);
IkReal x5466=(r01*sj5);
IkReal x5467=(cj5*r10);
IkReal x5468=(cj5*r20);
IkReal x5469=((1.0)*x5463);
IkReal x5470=((1.0)*x5464);
IkReal x5471=(sj5*x5464);
IkReal x5472=(sj5*x5463);
evalcond[0]=(((r02*x5464))+((x5463*x5466))+(((-1.0)*x5465*x5469)));
evalcond[1]=((((-1.0)*x5467*x5469))+((r12*x5464))+((r11*x5472)));
evalcond[2]=((((-1.0)*x5468*x5470))+((r21*x5471))+(((-1.0)*r22*x5469)));
evalcond[3]=((1.0)+((r22*x5464))+(((-1.0)*x5468*x5469))+((r21*x5472)));
evalcond[4]=(cj0+(((-1.0)*x5467*x5470))+(((-1.0)*r12*x5469))+((r11*x5471)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x5469))+(((-1.0)*x5465*x5470))+((x5464*x5466)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5473=((1.0)*cj5);
CheckValue<IkReal> x5474=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5473)))),-1);
if(!x5474.valid){
continue;
}
CheckValue<IkReal> x5475 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x5473))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5474.value)))+(x5475.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5476=IKcos(j4);
IkReal x5477=IKsin(j4);
IkReal x5478=(cj5*r00);
IkReal x5479=(r01*sj5);
IkReal x5480=(cj5*r10);
IkReal x5481=(cj5*r20);
IkReal x5482=((1.0)*x5476);
IkReal x5483=((1.0)*x5477);
IkReal x5484=(sj5*x5477);
IkReal x5485=(sj5*x5476);
evalcond[0]=((((-1.0)*x5478*x5482))+((r02*x5477))+((x5476*x5479)));
evalcond[1]=(((r11*x5485))+((r12*x5477))+(((-1.0)*x5480*x5482)));
evalcond[2]=((((-1.0)*x5481*x5483))+(((-1.0)*r22*x5482))+((r21*x5484)));
evalcond[3]=((1.0)+(((-1.0)*x5481*x5482))+((r21*x5485))+((r22*x5477)));
evalcond[4]=((((-1.0)*r12*x5482))+cj0+((r11*x5484))+(((-1.0)*x5480*x5483)));
evalcond[5]=((((-1.0)*sj0))+((x5477*x5479))+(((-1.0)*x5478*x5483))+(((-1.0)*r02*x5482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5486 = IKatan2WithCheck(IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x5486.valid){
continue;
}
CheckValue<IkReal> x5487=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x5487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5486.value)+(((1.5707963267949)*(x5487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5488=IKcos(j4);
IkReal x5489=IKsin(j4);
IkReal x5490=(cj5*r00);
IkReal x5491=(r01*sj5);
IkReal x5492=(cj5*r10);
IkReal x5493=(cj5*r20);
IkReal x5494=((1.0)*x5488);
IkReal x5495=((1.0)*x5489);
IkReal x5496=(sj5*x5489);
IkReal x5497=(sj5*x5488);
evalcond[0]=(((x5488*x5491))+(((-1.0)*x5490*x5494))+((r02*x5489)));
evalcond[1]=(((r12*x5489))+((r11*x5497))+(((-1.0)*x5492*x5494)));
evalcond[2]=(((r21*x5496))+(((-1.0)*r22*x5494))+(((-1.0)*x5493*x5495)));
evalcond[3]=((1.0)+((r21*x5497))+(((-1.0)*x5493*x5494))+((r22*x5489)));
evalcond[4]=(cj0+(((-1.0)*r12*x5494))+((r11*x5496))+(((-1.0)*x5492*x5495)));
evalcond[5]=(((x5489*x5491))+(((-1.0)*sj0))+(((-1.0)*r02*x5494))+(((-1.0)*x5490*x5495)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x5498=IKcos(j0);
IkReal x5499=IKsin(j0);
evalcond[0]=((((-0.39225)*x5498))+(((-1.0)*px))+(((-0.10915)*x5499)));
evalcond[1]=((((0.10915)*x5498))+(((-0.39225)*x5499))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5500=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5500;
j4eval[1]=IKsign(x5500);
j4eval[2]=((IKabs(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5501=((1.0)*cj5);
IkReal x5502=((((-1.0)*r10*sj5))+(((-1.0)*r11*x5501)));
j4eval[0]=x5502;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5501)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5502);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x5503=cj5*cj5;
IkReal x5504=((1.0)*r20);
IkReal x5505=(r01*r21);
IkReal x5506=(r21*sj5);
IkReal x5507=(((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5503*x5504))+((x5503*x5505))+(((-1.0)*x5505))+((cj5*r00*x5506)));
j4eval[0]=x5507;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x5504))+((cj0*x5506)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x5507);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5508=cj5*cj5;
IkReal x5509=((1.0)*r20);
IkReal x5510=(r01*r21);
IkReal x5511=(r21*sj5);
CheckValue<IkReal> x5512=IKPowWithIntegerCheck(IKsign((((cj5*r01*r20*sj5))+(((-1.0)*r02*r22))+(((-1.0)*r00*x5508*x5509))+((x5508*x5510))+(((-1.0)*x5510))+((cj5*r00*x5511)))),-1);
if(!x5512.valid){
continue;
}
CheckValue<IkReal> x5513 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*cj5*x5509))+((cj0*x5511)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5513.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5512.value)))+(x5513.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5514=IKcos(j4);
IkReal x5515=IKsin(j4);
IkReal x5516=(cj5*r00);
IkReal x5517=(cj5*r10);
IkReal x5518=(cj5*r20);
IkReal x5519=((1.0)*x5514);
IkReal x5520=((1.0)*x5515);
IkReal x5521=(sj5*x5514);
IkReal x5522=(sj5*x5515);
evalcond[0]=(((r21*x5521))+((r22*x5515))+(((-1.0)*x5518*x5519)));
evalcond[1]=((((-1.0)*r22*x5519))+((r21*x5522))+(((-1.0)*x5518*x5520)));
evalcond[2]=(cj0+((r02*x5515))+((r01*x5521))+(((-1.0)*x5516*x5519)));
evalcond[3]=(sj0+((r12*x5515))+((r11*x5521))+(((-1.0)*x5517*x5519)));
evalcond[4]=(cj0+(((-1.0)*x5517*x5520))+(((-1.0)*r12*x5519))+((r11*x5522)));
evalcond[5]=((((-1.0)*x5516*x5520))+(((-1.0)*sj0))+(((-1.0)*r02*x5519))+((r01*x5522)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5523=((1.0)*cj5);
CheckValue<IkReal> x5524=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x5523)))),-1);
if(!x5524.valid){
continue;
}
CheckValue<IkReal> x5525 = IKatan2WithCheck(IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x5523)))),IkReal(((-1.0)*cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x5525.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5524.value)))+(x5525.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5526=IKcos(j4);
IkReal x5527=IKsin(j4);
IkReal x5528=(cj5*r00);
IkReal x5529=(cj5*r10);
IkReal x5530=(cj5*r20);
IkReal x5531=((1.0)*x5526);
IkReal x5532=((1.0)*x5527);
IkReal x5533=(sj5*x5526);
IkReal x5534=(sj5*x5527);
evalcond[0]=(((r22*x5527))+(((-1.0)*x5530*x5531))+((r21*x5533)));
evalcond[1]=((((-1.0)*r22*x5531))+(((-1.0)*x5530*x5532))+((r21*x5534)));
evalcond[2]=(((r02*x5527))+(((-1.0)*x5528*x5531))+cj0+((r01*x5533)));
evalcond[3]=(sj0+((r11*x5533))+((r12*x5527))+(((-1.0)*x5529*x5531)));
evalcond[4]=(cj0+((r11*x5534))+(((-1.0)*r12*x5531))+(((-1.0)*x5529*x5532)));
evalcond[5]=((((-1.0)*r02*x5531))+(((-1.0)*sj0))+(((-1.0)*x5528*x5532))+((r01*x5534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5535 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r20*sj0))+((r21*sj0*sj5)))),IkReal(((-1.0)*r22*sj0)),IKFAST_ATAN2_MAGTHRESH);
if(!x5535.valid){
continue;
}
CheckValue<IkReal> x5536=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5535.value)+(((1.5707963267949)*(x5536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5537=IKcos(j4);
IkReal x5538=IKsin(j4);
IkReal x5539=(cj5*r00);
IkReal x5540=(cj5*r10);
IkReal x5541=(cj5*r20);
IkReal x5542=((1.0)*x5537);
IkReal x5543=((1.0)*x5538);
IkReal x5544=(sj5*x5537);
IkReal x5545=(sj5*x5538);
evalcond[0]=((((-1.0)*x5541*x5542))+((r22*x5538))+((r21*x5544)));
evalcond[1]=((((-1.0)*x5541*x5543))+(((-1.0)*r22*x5542))+((r21*x5545)));
evalcond[2]=((((-1.0)*x5539*x5542))+cj0+((r02*x5538))+((r01*x5544)));
evalcond[3]=(sj0+((r11*x5544))+(((-1.0)*x5540*x5542))+((r12*x5538)));
evalcond[4]=(cj0+((r11*x5545))+(((-1.0)*x5540*x5543))+(((-1.0)*r12*x5542)));
evalcond[5]=((((-1.0)*x5539*x5543))+(((-1.0)*sj0))+(((-1.0)*r02*x5542))+((r01*x5545)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x5546=cj1*cj1;
IkReal x5547=(cj1*sj1);
IkReal x5548=(cj5*r01);
IkReal x5549=(r00*sj5);
IkReal x5550=(r10*sj5);
IkReal x5551=(cj5*r11);
IkReal x5552=(cj1*sj2);
IkReal x5553=((20000.0)*py);
IkReal x5554=(cj2*sj1);
IkReal x5555=((1893.0)*x5554);
IkReal x5556=(sj2*x5546);
CheckValue<IkReal> x5557=IKPowWithIntegerCheck(((((-8500.0)*cj2*x5547))+(((-15690.0)*x5547*(cj2*cj2)))+(((-8500.0)*x5556))+(((-15690.0)*cj2*x5556))+(((7845.0)*cj2*sj2))+(((7845.0)*x5547))),-1);
if(!x5557.valid){
continue;
}
CheckValue<IkReal> x5558=IKPowWithIntegerCheck(((((-1.0)*x5554))+(((-1.0)*x5552))),-1);
if(!x5558.valid){
continue;
}
if( IKabs(((x5557.value)*(((((-1.0)*x5550*x5555))+(((-1.0)*x5551*x5555))+(((-1.0)*x5552*x5553))+(((-1.0)*x5553*x5554))+(((2183.0)*x5549))+(((2183.0)*x5548))+(((-1893.0)*x5551*x5552))+(((-1893.0)*x5550*x5552)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x5558.value)*(((((-1.0)*x5548))+(((-1.0)*x5549)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x5557.value)*(((((-1.0)*x5550*x5555))+(((-1.0)*x5551*x5555))+(((-1.0)*x5552*x5553))+(((-1.0)*x5553*x5554))+(((2183.0)*x5549))+(((2183.0)*x5548))+(((-1893.0)*x5551*x5552))+(((-1893.0)*x5550*x5552))))))+IKsqr(((x5558.value)*(((((-1.0)*x5548))+(((-1.0)*x5549))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x5557.value)*(((((-1.0)*x5550*x5555))+(((-1.0)*x5551*x5555))+(((-1.0)*x5552*x5553))+(((-1.0)*x5553*x5554))+(((2183.0)*x5549))+(((2183.0)*x5548))+(((-1893.0)*x5551*x5552))+(((-1893.0)*x5550*x5552))))), ((x5558.value)*(((((-1.0)*x5548))+(((-1.0)*x5549))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x5559=IKcos(j0);
IkReal x5560=IKsin(j0);
IkReal x5561=(cj5*r01);
IkReal x5562=((1.0)*cj1);
IkReal x5563=((0.39225)*sj1);
IkReal x5564=(cj5*r11);
IkReal x5565=(r00*sj5);
IkReal x5566=((0.39225)*cj2);
IkReal x5567=(r10*sj5);
IkReal x5568=(sj2*x5559);
IkReal x5569=(sj2*x5560);
IkReal x5570=(cj1*x5559);
IkReal x5571=((1.0)*cj2*sj1);
IkReal x5572=(cj1*x5560);
evalcond[0]=(x5565+x5561+(((-1.0)*x5562*x5568))+(((-1.0)*x5559*x5571)));
evalcond[1]=(x5564+x5567+(((-1.0)*x5562*x5569))+(((-1.0)*x5560*x5571)));
evalcond[2]=((((0.425)*x5570))+((x5566*x5570))+(((-0.09465)*x5565))+(((-0.09465)*x5561))+(((-1.0)*x5563*x5568))+(((-0.10915)*x5560))+(((-1.0)*px)));
evalcond[3]=((((0.10915)*x5559))+(((0.425)*x5572))+((x5566*x5572))+(((-0.09465)*x5564))+(((-0.09465)*x5567))+(((-1.0)*x5563*x5569))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5573=((1.0)*cj5);
IkReal x5574=((((-1.0)*r01*x5573))+(((-1.0)*r00*sj5)));
j4eval[0]=x5574;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x5573))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x5574);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5575=((1.0)*cj5);
IkReal x5576=((((-1.0)*r11*x5575))+(((-1.0)*r10*sj5)));
j4eval[0]=x5576;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x5575))))));
j4eval[2]=IKsign(x5576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x5577=((1.0)*sj0);
IkReal x5578=((1.0)*cj0);
IkReal x5579=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x5579;
j4eval[1]=((IKabs(((((-1.0)*r01*sj5*x5578))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x5577)))))+(IKabs(((((-1.0)*r12*x5577))+(((-1.0)*r02*x5578))))));
j4eval[2]=IKsign(x5579);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x5580=((-1.0)*r20);
IkReal x5582 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5582)==0){
continue;
}
IkReal x5581=pow(x5582,-0.5);
CheckValue<IkReal> x5583 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5580),IKFAST_ATAN2_MAGTHRESH);
if(!x5583.valid){
continue;
}
IkReal gconst114=((-1.0)*(x5583.value));
IkReal gconst115=(r21*x5581);
IkReal gconst116=(x5580*x5581);
CheckValue<IkReal> x5584 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5584.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5584.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5585=((-1.0)*r20);
IkReal x5586=x5581;
CheckValue<IkReal> x5588 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5585),IKFAST_ATAN2_MAGTHRESH);
if(!x5588.valid){
continue;
}
IkReal x5587=((-1.0)*(x5588.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5587;
IkReal gconst114=x5587;
IkReal gconst115=(r21*x5586);
IkReal gconst116=(x5585*x5586);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5589=((-1.0)*r20);
IkReal x5590=x5581;
CheckValue<IkReal> x5592 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5589),IKFAST_ATAN2_MAGTHRESH);
if(!x5592.valid){
continue;
}
IkReal x5591=((-1.0)*(x5592.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5591;
IkReal gconst114=x5591;
IkReal gconst115=(r21*x5590);
IkReal gconst116=(x5589*x5590);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x5593=((-1.0)*r20);
IkReal x5594=x5581;
CheckValue<IkReal> x5596 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x5593),IKFAST_ATAN2_MAGTHRESH);
if(!x5596.valid){
continue;
}
IkReal x5595=((-1.0)*(x5596.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x5595;
IkReal gconst114=x5595;
IkReal gconst115=(r21*x5594);
IkReal gconst116=(x5593*x5594);
IkReal x5597=((1.0)*(r22*r22));
CheckValue<IkReal> x5601=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x5597))),-1);
if(!x5601.valid){
continue;
}
IkReal x5598=x5601.value;
IkReal x5599=((1.0)*x5598);
IkReal x5600=((((-1.0)*x5599*(r21*r21*r21*r21)))+(((-2.0)*x5598*(r20*r20)*(r21*r21)))+(((-1.0)*x5597))+(((-1.0)*x5599*(r20*r20*r20*r20))));
j4eval[0]=x5600;
j4eval[1]=IKsign(x5600);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5602=(cj2*sj1);
IkReal x5603=(gconst115*r21);
IkReal x5604=(cj1*sj2);
IkReal x5605=((1.0)*gconst116*r20);
CheckValue<IkReal> x5606=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst116*r20*x5603))+(((-1.0)*gconst116*r20*x5605))+(((-1.0)*(x5603*x5603)))+(((-1.0)*(r22*r22))))),-1);
if(!x5606.valid){
continue;
}
CheckValue<IkReal> x5607 = IKatan2WithCheck(IkReal((((r22*x5604))+((r22*x5602)))),IkReal((((x5603*x5604))+(((-1.0)*x5602*x5605))+((x5602*x5603))+(((-1.0)*x5604*x5605)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5607.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5606.value)))+(x5607.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5608=IKsin(j4);
IkReal x5609=IKcos(j4);
IkReal x5610=(sj1*sj2);
IkReal x5611=((1.0)*x5609);
IkReal x5612=((1.0)*cj1*cj2);
IkReal x5613=(gconst115*x5608);
IkReal x5614=(gconst115*x5609);
IkReal x5615=((1.0)*gconst116*x5608);
evalcond[0]=((((-1.0)*r22*x5611))+((r21*x5613))+(((-1.0)*r20*x5615)));
evalcond[1]=(cj0+(((-1.0)*r10*x5615))+(((-1.0)*r12*x5611))+((r11*x5613)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r00*x5615))+((r01*x5613))+(((-1.0)*r02*x5611)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x5611))+((cj1*sj2))+((r21*x5614))+((r22*x5608)));
evalcond[4]=(((cj0*x5610))+((r02*x5608))+(((-1.0)*cj0*x5612))+((r01*x5614))+(((-1.0)*gconst116*r00*x5611)));
evalcond[5]=(((sj0*x5610))+(((-1.0)*gconst116*r10*x5611))+((r12*x5608))+(((-1.0)*sj0*x5612))+((r11*x5614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5616=((1.0)*gconst116);
CheckValue<IkReal> x5617 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x5616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5617.valid){
continue;
}
CheckValue<IkReal> x5618=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x5616)))),-1);
if(!x5618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5617.value)+(((1.5707963267949)*(x5618.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5619=IKsin(j4);
IkReal x5620=IKcos(j4);
IkReal x5621=(sj1*sj2);
IkReal x5622=((1.0)*x5620);
IkReal x5623=((1.0)*cj1*cj2);
IkReal x5624=(gconst115*x5619);
IkReal x5625=(gconst115*x5620);
IkReal x5626=((1.0)*gconst116*x5619);
evalcond[0]=((((-1.0)*r22*x5622))+((r21*x5624))+(((-1.0)*r20*x5626)));
evalcond[1]=(cj0+(((-1.0)*r10*x5626))+(((-1.0)*r12*x5622))+((r11*x5624)));
evalcond[2]=((((-1.0)*r00*x5626))+(((-1.0)*sj0))+((r01*x5624))+(((-1.0)*r02*x5622)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst116*r20*x5622))+((r21*x5625))+((r22*x5619)));
evalcond[4]=(((cj0*x5621))+((r02*x5619))+(((-1.0)*cj0*x5623))+((r01*x5625))+(((-1.0)*gconst116*r00*x5622)));
evalcond[5]=(((sj0*x5621))+(((-1.0)*gconst116*r10*x5622))+((r12*x5619))+((r11*x5625))+(((-1.0)*sj0*x5623)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5627=((1.0)*gconst116);
CheckValue<IkReal> x5628=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5627))+(((-1.0)*gconst115*r00)))),-1);
if(!x5628.valid){
continue;
}
CheckValue<IkReal> x5629 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5627))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5629.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5628.value)))+(x5629.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5630=IKsin(j4);
IkReal x5631=IKcos(j4);
IkReal x5632=(sj1*sj2);
IkReal x5633=((1.0)*x5631);
IkReal x5634=((1.0)*cj1*cj2);
IkReal x5635=(gconst115*x5630);
IkReal x5636=(gconst115*x5631);
IkReal x5637=((1.0)*gconst116*x5630);
evalcond[0]=((((-1.0)*r20*x5637))+(((-1.0)*r22*x5633))+((r21*x5635)));
evalcond[1]=((((-1.0)*r12*x5633))+((r11*x5635))+cj0+(((-1.0)*r10*x5637)));
evalcond[2]=(((r01*x5635))+(((-1.0)*sj0))+(((-1.0)*r02*x5633))+(((-1.0)*r00*x5637)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5630))+((r21*x5636))+(((-1.0)*gconst116*r20*x5633)));
evalcond[4]=(((r01*x5636))+(((-1.0)*gconst116*r00*x5633))+((cj0*x5632))+((r02*x5630))+(((-1.0)*cj0*x5634)));
evalcond[5]=(((r12*x5630))+(((-1.0)*sj0*x5634))+((r11*x5636))+((sj0*x5632))+(((-1.0)*gconst116*r10*x5633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5638=((-1.0)*r21);
IkReal x5640 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x5640)==0){
continue;
}
IkReal x5639=pow(x5640,-0.5);
CheckValue<IkReal> x5641 = IKatan2WithCheck(IkReal(x5638),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5641.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x5641.value))));
IkReal gconst118=(x5638*x5639);
IkReal gconst119=((1.0)*r20*x5639);
CheckValue<IkReal> x5642 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5642.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5642.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x5643=((-1.0)*r21);
CheckValue<IkReal> x5646 = IKatan2WithCheck(IkReal(x5643),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5646.valid){
continue;
}
IkReal x5644=((1.0)*(x5646.value));
IkReal x5645=x5639;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5644)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5644)));
IkReal gconst118=(x5643*x5645);
IkReal gconst119=((1.0)*r20*x5645);
IkReal x5647=r22*r22;
IkReal x5648=((1.0)*x5647);
CheckValue<IkReal> x5652=IKPowWithIntegerCheck(((-1.0)+x5647),-1);
if(!x5652.valid){
continue;
}
IkReal x5649=x5652.value;
if((((1.0)+(((-1.0)*x5648)))) < -0.00001)
continue;
IkReal x5650=IKsqrt(((1.0)+(((-1.0)*x5648))));
IkReal x5651=(cj0*x5649*x5650);
j4eval[0]=((IKabs((x5651+(((-1.0)*x5648*x5651)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5653=((-1.0)*r21);
CheckValue<IkReal> x5656 = IKatan2WithCheck(IkReal(x5653),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5656.valid){
continue;
}
IkReal x5654=((1.0)*(x5656.value));
IkReal x5655=x5639;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5654)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5654)));
IkReal gconst118=(x5653*x5655);
IkReal gconst119=((1.0)*r20*x5655);
IkReal x5657=r22*r22;
IkReal x5658=((1.0)*x5657);
CheckValue<IkReal> x5662=IKPowWithIntegerCheck(((-1.0)+x5657),-1);
if(!x5662.valid){
continue;
}
IkReal x5659=x5662.value;
if((((1.0)+(((-1.0)*x5658)))) < -0.00001)
continue;
IkReal x5660=IKsqrt(((1.0)+(((-1.0)*x5658))));
IkReal x5661=(sj0*x5659*x5660);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x5661+(((-1.0)*x5658*x5661))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5663=((-1.0)*r21);
CheckValue<IkReal> x5666 = IKatan2WithCheck(IkReal(x5663),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x5666.valid){
continue;
}
IkReal x5664=((1.0)*(x5666.value));
IkReal x5665=x5639;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x5664)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x5664)));
IkReal gconst118=(x5663*x5665);
IkReal gconst119=((1.0)*r20*x5665);
IkReal x5667=r22*r22;
IkReal x5668=(r12*sj0);
IkReal x5669=(cj0*r02);
CheckValue<IkReal> x5673=IKPowWithIntegerCheck(((-1.0)+x5667),-1);
if(!x5673.valid){
continue;
}
IkReal x5670=x5673.value;
if((((1.0)+(((-1.0)*x5667)))) < -0.00001)
continue;
IkReal x5671=IKsqrt(((1.0)+(((-1.0)*x5667))));
IkReal x5672=(r22*x5670*x5671);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x5668))+(((-1.0)*x5669)))))+(IKabs((((x5668*x5672))+((x5669*x5672))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5674=((1.0)*sj0);
IkReal x5675=((1.0)*gconst118);
CheckValue<IkReal> x5676=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x5675)))),-1);
if(!x5676.valid){
continue;
}
CheckValue<IkReal> x5677 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5674))+(((-1.0)*cj0*r02)))),IkReal((((gconst119*r10*sj0))+((cj0*gconst119*r00))+(((-1.0)*gconst118*r11*x5674))+(((-1.0)*cj0*r01*x5675)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5677.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5676.value)))+(x5677.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5678=IKsin(j4);
IkReal x5679=IKcos(j4);
IkReal x5680=(gconst118*r01);
IkReal x5681=(sj1*sj2);
IkReal x5682=(gconst119*r20);
IkReal x5683=(gconst119*r10);
IkReal x5684=(gconst119*r00);
IkReal x5685=(gconst118*r21);
IkReal x5686=(gconst118*r11);
IkReal x5687=((1.0)*x5679);
IkReal x5688=((1.0)*cj1*cj2);
IkReal x5689=((1.0)*x5678);
evalcond[0]=((((-1.0)*r22*x5687))+((x5678*x5685))+(((-1.0)*x5682*x5689)));
evalcond[1]=(cj0+(((-1.0)*x5683*x5689))+((x5678*x5686))+(((-1.0)*r12*x5687)));
evalcond[2]=((((-1.0)*r02*x5687))+(((-1.0)*sj0))+(((-1.0)*x5684*x5689))+((x5678*x5680)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x5679*x5685))+((r22*x5678))+(((-1.0)*x5682*x5687)));
evalcond[4]=(((r02*x5678))+(((-1.0)*cj0*x5688))+(((-1.0)*x5684*x5687))+((x5679*x5680))+((cj0*x5681)));
evalcond[5]=((((-1.0)*sj0*x5688))+(((-1.0)*x5683*x5687))+((sj0*x5681))+((x5679*x5686))+((r12*x5678)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5690=((1.0)*gconst119);
CheckValue<IkReal> x5691 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x5690))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5691.valid){
continue;
}
CheckValue<IkReal> x5692=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x5690)))),-1);
if(!x5692.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5691.value)+(((1.5707963267949)*(x5692.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5693=IKsin(j4);
IkReal x5694=IKcos(j4);
IkReal x5695=(gconst118*r01);
IkReal x5696=(sj1*sj2);
IkReal x5697=(gconst119*r20);
IkReal x5698=(gconst119*r10);
IkReal x5699=(gconst119*r00);
IkReal x5700=(gconst118*r21);
IkReal x5701=(gconst118*r11);
IkReal x5702=((1.0)*x5694);
IkReal x5703=((1.0)*cj1*cj2);
IkReal x5704=((1.0)*x5693);
evalcond[0]=((((-1.0)*x5697*x5704))+(((-1.0)*r22*x5702))+((x5693*x5700)));
evalcond[1]=((((-1.0)*r12*x5702))+cj0+((x5693*x5701))+(((-1.0)*x5698*x5704)));
evalcond[2]=((((-1.0)*sj0))+((x5693*x5695))+(((-1.0)*x5699*x5704))+(((-1.0)*r02*x5702)));
evalcond[3]=(((cj2*sj1))+((r22*x5693))+(((-1.0)*x5697*x5702))+((x5694*x5700))+((cj1*sj2)));
evalcond[4]=(((x5694*x5695))+((r02*x5693))+(((-1.0)*x5699*x5702))+(((-1.0)*cj0*x5703))+((cj0*x5696)));
evalcond[5]=(((x5694*x5701))+(((-1.0)*x5698*x5702))+((sj0*x5696))+(((-1.0)*sj0*x5703))+((r12*x5693)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5705=((1.0)*gconst119);
CheckValue<IkReal> x5706=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x5705)))),-1);
if(!x5706.valid){
continue;
}
CheckValue<IkReal> x5707 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x5705)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5707.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5706.value)))+(x5707.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5708=IKsin(j4);
IkReal x5709=IKcos(j4);
IkReal x5710=(gconst118*r01);
IkReal x5711=(sj1*sj2);
IkReal x5712=(gconst119*r20);
IkReal x5713=(gconst119*r10);
IkReal x5714=(gconst119*r00);
IkReal x5715=(gconst118*r21);
IkReal x5716=(gconst118*r11);
IkReal x5717=((1.0)*x5709);
IkReal x5718=((1.0)*cj1*cj2);
IkReal x5719=((1.0)*x5708);
evalcond[0]=((((-1.0)*r22*x5717))+(((-1.0)*x5712*x5719))+((x5708*x5715)));
evalcond[1]=(cj0+(((-1.0)*x5713*x5719))+(((-1.0)*r12*x5717))+((x5708*x5716)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5714*x5719))+((x5708*x5710))+(((-1.0)*r02*x5717)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5708))+(((-1.0)*x5712*x5717))+((x5709*x5715)));
evalcond[4]=((((-1.0)*cj0*x5718))+((r02*x5708))+((cj0*x5711))+(((-1.0)*x5714*x5717))+((x5709*x5710)));
evalcond[5]=((((-1.0)*x5713*x5717))+((r12*x5708))+((sj0*x5711))+(((-1.0)*sj0*x5718))+((x5709*x5716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5720=((-1.0)*r10);
IkReal x5722 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5722)==0){
continue;
}
IkReal x5721=pow(x5722,-0.5);
CheckValue<IkReal> x5723 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5720),IKFAST_ATAN2_MAGTHRESH);
if(!x5723.valid){
continue;
}
IkReal gconst120=((-1.0)*(x5723.value));
IkReal gconst121=(r11*x5721);
IkReal gconst122=(x5720*x5721);
CheckValue<IkReal> x5724 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5724.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5724.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5725=((-1.0)*r10);
IkReal x5726=x5721;
CheckValue<IkReal> x5728 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x5725),IKFAST_ATAN2_MAGTHRESH);
if(!x5728.valid){
continue;
}
IkReal x5727=((-1.0)*(x5728.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x5727;
IkReal gconst120=x5727;
IkReal gconst121=(r11*x5726);
IkReal gconst122=(x5725*x5726);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5729=((1.0)*sj0);
IkReal x5730=((1.0)*gconst121);
CheckValue<IkReal> x5731=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x5730))+(((-1.0)*gconst122*r21)))),-1);
if(!x5731.valid){
continue;
}
CheckValue<IkReal> x5732 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5729))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x5730))+(((-1.0)*gconst121*r11*x5729))+((cj0*gconst122*r00))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5732.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5731.value)))+(x5732.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5733=IKsin(j4);
IkReal x5734=IKcos(j4);
IkReal x5735=(gconst121*r11);
IkReal x5736=(sj1*sj2);
IkReal x5737=(gconst122*r00);
IkReal x5738=(gconst122*r10);
IkReal x5739=(gconst122*r20);
IkReal x5740=((1.0)*x5734);
IkReal x5741=((1.0)*cj1*cj2);
IkReal x5742=((1.0)*x5733);
IkReal x5743=(gconst121*x5733);
IkReal x5744=(gconst121*x5734);
evalcond[0]=((((-1.0)*r22*x5740))+(((-1.0)*x5739*x5742))+((r21*x5743)));
evalcond[1]=(cj0+((x5733*x5735))+(((-1.0)*x5738*x5742))+(((-1.0)*r12*x5740)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5737*x5742))+((r01*x5743))+(((-1.0)*r02*x5740)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5739*x5740))+((r21*x5744))+((r22*x5733)));
evalcond[4]=((((-1.0)*x5737*x5740))+((r01*x5744))+(((-1.0)*cj0*x5741))+((cj0*x5736))+((r02*x5733)));
evalcond[5]=(((r12*x5733))+((x5734*x5735))+(((-1.0)*x5738*x5740))+((sj0*x5736))+(((-1.0)*sj0*x5741)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5745=((1.0)*gconst122);
CheckValue<IkReal> x5746=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x5745))+(((-1.0)*gconst121*r00)))),-1);
if(!x5746.valid){
continue;
}
CheckValue<IkReal> x5747 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x5745))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5747.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5746.value)))+(x5747.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5748=IKsin(j4);
IkReal x5749=IKcos(j4);
IkReal x5750=(gconst121*r11);
IkReal x5751=(sj1*sj2);
IkReal x5752=(gconst122*r00);
IkReal x5753=(gconst122*r10);
IkReal x5754=(gconst122*r20);
IkReal x5755=((1.0)*x5749);
IkReal x5756=((1.0)*cj1*cj2);
IkReal x5757=((1.0)*x5748);
IkReal x5758=(gconst121*x5748);
IkReal x5759=(gconst121*x5749);
evalcond[0]=(((r21*x5758))+(((-1.0)*r22*x5755))+(((-1.0)*x5754*x5757)));
evalcond[1]=(cj0+((x5748*x5750))+(((-1.0)*r12*x5755))+(((-1.0)*x5753*x5757)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5752*x5757))+((r01*x5758))+(((-1.0)*r02*x5755)));
evalcond[3]=(((cj2*sj1))+((r21*x5759))+((r22*x5748))+((cj1*sj2))+(((-1.0)*x5754*x5755)));
evalcond[4]=((((-1.0)*x5752*x5755))+((r01*x5759))+(((-1.0)*cj0*x5756))+((r02*x5748))+((cj0*x5751)));
evalcond[5]=((((-1.0)*sj0*x5756))+((x5749*x5750))+(((-1.0)*x5753*x5755))+((r12*x5748))+((sj0*x5751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5760=((-1.0)*r11);
IkReal x5762 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x5762)==0){
continue;
}
IkReal x5761=pow(x5762,-0.5);
CheckValue<IkReal> x5763 = IKatan2WithCheck(IkReal(x5760),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5763.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x5763.value))));
IkReal gconst124=(x5760*x5761);
IkReal gconst125=((1.0)*r10*x5761);
CheckValue<IkReal> x5764 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5764.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5764.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5765=((-1.0)*r11);
CheckValue<IkReal> x5768 = IKatan2WithCheck(IkReal(x5765),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5768.valid){
continue;
}
IkReal x5766=((1.0)*(x5768.value));
IkReal x5767=x5761;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5766)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5766)));
IkReal gconst124=(x5765*x5767);
IkReal gconst125=((1.0)*r10*x5767);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5769=((-1.0)*r11);
CheckValue<IkReal> x5772 = IKatan2WithCheck(IkReal(x5769),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5772.valid){
continue;
}
IkReal x5770=((1.0)*(x5772.value));
IkReal x5771=x5761;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5770)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5770)));
IkReal gconst124=(x5769*x5771);
IkReal gconst125=((1.0)*r10*x5771);
IkReal x5773=r12*r12;
IkReal x5774=((1.0)*sj0);
IkReal x5775=(cj0*r02);
IkReal x5776=x5761;
j4eval[0]=((IKabs(((((-1.0)*r12*x5774))+(((-1.0)*x5775)))))+(IKabs(((((-1.0)*x5774*x5776))+((sj0*x5773*x5776))+((r12*x5775*x5776))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5777=((-1.0)*r11);
CheckValue<IkReal> x5780 = IKatan2WithCheck(IkReal(x5777),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x5780.valid){
continue;
}
IkReal x5778=((1.0)*(x5780.value));
IkReal x5779=x5761;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x5778)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x5778)));
IkReal gconst124=(x5777*x5779);
IkReal gconst125=((1.0)*r10*x5779);
IkReal x5781=r12*r12;
IkReal x5782=((1.0)+(((-1.0)*x5781)));
IkReal x5783=(cj2*r22*sj1);
IkReal x5784=(cj1*r22*sj2);
CheckValue<IkReal> x5791=IKPowWithIntegerCheck(x5782,-1);
if(!x5791.valid){
continue;
}
IkReal x5785=x5791.value;
CheckValue<IkReal> x5792=IKPowWithIntegerCheck(((-1.0)+x5781),-1);
if(!x5792.valid){
continue;
}
IkReal x5786=x5792.value;
IkReal x5787=((1.0)*x5785);
if((x5782) < -0.00001)
continue;
IkReal x5788=IKsqrt(x5782);
IkReal x5789=((1.0)*r12*x5786*x5788);
IkReal x5790=((((-1.0)*x5787*(r10*r10)*(r20*r20)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x5785))+(((-1.0)*x5787*(r11*r11)*(r21*r21))));
j4eval[0]=x5790;
j4eval[1]=IKsign(x5790);
j4eval[2]=((IKabs((x5784+x5783)))+(IKabs(((((-1.0)*x5784*x5789))+(((-1.0)*x5783*x5789))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5793=(gconst124*r21);
IkReal x5794=(cj1*sj2);
IkReal x5795=(cj2*sj1);
IkReal x5796=(gconst125*r20);
CheckValue<IkReal> x5797 = IKatan2WithCheck(IkReal((((r22*x5795))+((r22*x5794)))),IkReal(((((-1.0)*x5795*x5796))+((x5793*x5794))+((x5793*x5795))+(((-1.0)*x5794*x5796)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5797.valid){
continue;
}
CheckValue<IkReal> x5798=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x5796*x5796)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x5793*x5793)))+(((2.0)*x5793*x5796)))),-1);
if(!x5798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5797.value)+(((1.5707963267949)*(x5798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5799=IKsin(j4);
IkReal x5800=IKcos(j4);
IkReal x5801=(sj1*sj2);
IkReal x5802=(gconst125*r20);
IkReal x5803=(gconst124*r01);
IkReal x5804=(gconst125*r00);
IkReal x5805=(gconst125*r10);
IkReal x5806=((1.0)*x5800);
IkReal x5807=((1.0)*cj1*cj2);
IkReal x5808=((1.0)*x5799);
IkReal x5809=(gconst124*x5799);
IkReal x5810=(gconst124*x5800);
evalcond[0]=((((-1.0)*r22*x5806))+((r21*x5809))+(((-1.0)*x5802*x5808)));
evalcond[1]=(cj0+(((-1.0)*x5805*x5808))+(((-1.0)*r12*x5806))+((r11*x5809)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x5804*x5808))+((x5799*x5803))+(((-1.0)*r02*x5806)));
evalcond[3]=(((r21*x5810))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x5802*x5806))+((r22*x5799)));
evalcond[4]=(((x5800*x5803))+(((-1.0)*x5804*x5806))+((cj0*x5801))+(((-1.0)*cj0*x5807))+((r02*x5799)));
evalcond[5]=(((r12*x5799))+(((-1.0)*x5805*x5806))+((r11*x5810))+((sj0*x5801))+(((-1.0)*sj0*x5807)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5811=((1.0)*sj0);
IkReal x5812=((1.0)*cj0);
CheckValue<IkReal> x5813 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5811))+(((-1.0)*r02*x5812)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r11*x5811))+(((-1.0)*gconst124*r01*x5812))+((cj0*gconst125*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5813.valid){
continue;
}
CheckValue<IkReal> x5814=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x5814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5813.value)+(((1.5707963267949)*(x5814.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5815=IKsin(j4);
IkReal x5816=IKcos(j4);
IkReal x5817=(sj1*sj2);
IkReal x5818=(gconst125*r20);
IkReal x5819=(gconst124*r01);
IkReal x5820=(gconst125*r00);
IkReal x5821=(gconst125*r10);
IkReal x5822=((1.0)*x5816);
IkReal x5823=((1.0)*cj1*cj2);
IkReal x5824=((1.0)*x5815);
IkReal x5825=(gconst124*x5815);
IkReal x5826=(gconst124*x5816);
evalcond[0]=((((-1.0)*r22*x5822))+((r21*x5825))+(((-1.0)*x5818*x5824)));
evalcond[1]=(cj0+(((-1.0)*x5821*x5824))+((r11*x5825))+(((-1.0)*r12*x5822)));
evalcond[2]=(((x5815*x5819))+(((-1.0)*sj0))+(((-1.0)*r02*x5822))+(((-1.0)*x5820*x5824)));
evalcond[3]=(((r21*x5826))+((cj2*sj1))+((r22*x5815))+(((-1.0)*x5818*x5822))+((cj1*sj2)));
evalcond[4]=((((-1.0)*x5820*x5822))+((r02*x5815))+((x5816*x5819))+((cj0*x5817))+(((-1.0)*cj0*x5823)));
evalcond[5]=(((sj0*x5817))+(((-1.0)*x5821*x5822))+((r11*x5826))+((r12*x5815))+(((-1.0)*sj0*x5823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5827=((1.0)*gconst125);
CheckValue<IkReal> x5828=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x5827)))),-1);
if(!x5828.valid){
continue;
}
CheckValue<IkReal> x5829 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst124*r21))+(((-1.0)*cj0*r20*x5827)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5829.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5828.value)))+(x5829.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5830=IKsin(j4);
IkReal x5831=IKcos(j4);
IkReal x5832=(sj1*sj2);
IkReal x5833=(gconst125*r20);
IkReal x5834=(gconst124*r01);
IkReal x5835=(gconst125*r00);
IkReal x5836=(gconst125*r10);
IkReal x5837=((1.0)*x5831);
IkReal x5838=((1.0)*cj1*cj2);
IkReal x5839=((1.0)*x5830);
IkReal x5840=(gconst124*x5830);
IkReal x5841=(gconst124*x5831);
evalcond[0]=((((-1.0)*r22*x5837))+((r21*x5840))+(((-1.0)*x5833*x5839)));
evalcond[1]=(cj0+((r11*x5840))+(((-1.0)*r12*x5837))+(((-1.0)*x5836*x5839)));
evalcond[2]=((((-1.0)*r02*x5837))+(((-1.0)*sj0))+((x5830*x5834))+(((-1.0)*x5835*x5839)));
evalcond[3]=(((cj2*sj1))+((r21*x5841))+(((-1.0)*x5833*x5837))+((cj1*sj2))+((r22*x5830)));
evalcond[4]=(((r02*x5830))+((x5831*x5834))+((cj0*x5832))+(((-1.0)*cj0*x5838))+(((-1.0)*x5835*x5837)));
evalcond[5]=(((r11*x5841))+((r12*x5830))+((sj0*x5832))+(((-1.0)*sj0*x5838))+(((-1.0)*x5836*x5837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5842=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x5842;
j4eval[1]=IKsign(x5842);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5843=((1.0)*cj5);
IkReal x5844=((((-1.0)*r01*x5843))+(((-1.0)*r00*sj5)));
j4eval[0]=x5844;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x5843))))));
j4eval[2]=IKsign(x5844);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x5845=cj5*cj5;
IkReal x5846=r11*r11;
IkReal x5847=(cj5*r10);
IkReal x5848=(r11*sj5);
IkReal x5849=((((-1.0)*x5846))+((x5845*x5846))+(((2.0)*x5847*x5848))+(((-1.0)*x5845*(r10*r10)))+(((-1.0)*(r12*r12))));
j4eval[0]=x5849;
j4eval[1]=IKsign(x5849);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x5847))+x5848))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5850=cj5*cj5;
IkReal x5851=r11*r11;
IkReal x5852=(cj5*r10);
IkReal x5853=(r11*sj5);
CheckValue<IkReal> x5854=IKPowWithIntegerCheck(IKsign(((((-1.0)*x5851))+(((-1.0)*(r12*r12)))+((x5850*x5851))+(((2.0)*x5852*x5853))+(((-1.0)*x5850*(r10*r10))))),-1);
if(!x5854.valid){
continue;
}
CheckValue<IkReal> x5855 = IKatan2WithCheck(IkReal(((((-1.0)*x5852))+x5853)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5855.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5854.value)))+(x5855.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5856=IKcos(j4);
IkReal x5857=IKsin(j4);
IkReal x5858=(cj5*r00);
IkReal x5859=(cj5*r10);
IkReal x5860=(r21*sj5);
IkReal x5861=(cj5*r20);
IkReal x5862=((1.0)*x5856);
IkReal x5863=((1.0)*x5857);
IkReal x5864=(sj5*x5857);
IkReal x5865=(sj5*x5856);
evalcond[0]=(((r12*x5857))+((r11*x5865))+(((-1.0)*x5859*x5862)));
evalcond[1]=((((-1.0)*r22*x5862))+(((-1.0)*x5861*x5863))+((x5857*x5860)));
evalcond[2]=((((-1.0)*x5858*x5863))+(((-1.0)*r02*x5862))+((r01*x5864)));
evalcond[3]=((1.0)+((r11*x5864))+(((-1.0)*x5859*x5863))+(((-1.0)*r12*x5862)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5861*x5862))+((cj1*sj2))+((x5856*x5860))+((r22*x5857)));
evalcond[5]=((((-1.0)*x5858*x5862))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5857))+((r01*x5865)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5866=((1.0)*cj5);
CheckValue<IkReal> x5867 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x5866)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5867.valid){
continue;
}
CheckValue<IkReal> x5868=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x5866)))),-1);
if(!x5868.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5867.value)+(((1.5707963267949)*(x5868.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5869=IKcos(j4);
IkReal x5870=IKsin(j4);
IkReal x5871=(cj5*r00);
IkReal x5872=(cj5*r10);
IkReal x5873=(r21*sj5);
IkReal x5874=(cj5*r20);
IkReal x5875=((1.0)*x5869);
IkReal x5876=((1.0)*x5870);
IkReal x5877=(sj5*x5870);
IkReal x5878=(sj5*x5869);
evalcond[0]=((((-1.0)*x5872*x5875))+((r12*x5870))+((r11*x5878)));
evalcond[1]=((((-1.0)*r22*x5875))+(((-1.0)*x5874*x5876))+((x5870*x5873)));
evalcond[2]=((((-1.0)*r02*x5875))+(((-1.0)*x5871*x5876))+((r01*x5877)));
evalcond[3]=((1.0)+(((-1.0)*r12*x5875))+(((-1.0)*x5872*x5876))+((r11*x5877)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x5870))+(((-1.0)*x5874*x5875))+((x5869*x5873)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x5870))+(((-1.0)*x5871*x5875))+((r01*x5878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5879=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x5879.valid){
continue;
}
CheckValue<IkReal> x5880 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5880.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5879.value)))+(x5880.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5881=IKcos(j4);
IkReal x5882=IKsin(j4);
IkReal x5883=(cj5*r00);
IkReal x5884=(cj5*r10);
IkReal x5885=(r21*sj5);
IkReal x5886=(cj5*r20);
IkReal x5887=((1.0)*x5881);
IkReal x5888=((1.0)*x5882);
IkReal x5889=(sj5*x5882);
IkReal x5890=(sj5*x5881);
evalcond[0]=(((r12*x5882))+(((-1.0)*x5884*x5887))+((r11*x5890)));
evalcond[1]=((((-1.0)*x5886*x5888))+((x5882*x5885))+(((-1.0)*r22*x5887)));
evalcond[2]=((((-1.0)*x5883*x5888))+((r01*x5889))+(((-1.0)*r02*x5887)));
evalcond[3]=((1.0)+((r11*x5889))+(((-1.0)*r12*x5887))+(((-1.0)*x5884*x5888)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x5886*x5887))+((cj1*sj2))+((x5881*x5885))+((r22*x5882)));
evalcond[5]=((((-1.0)*x5883*x5887))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x5890))+((r02*x5882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5891=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x5891;
j4eval[1]=IKsign(x5891);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5892=((1.0)*cj5);
IkReal x5893=((((-1.0)*r21*x5892))+(((-1.0)*r20*sj5)));
j4eval[0]=x5893;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x5892))))));
j4eval[2]=IKsign(x5893);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x5894=cj5*cj5;
IkReal x5895=r11*r11;
IkReal x5896=(r11*sj5);
IkReal x5897=(cj5*r10);
IkReal x5898=((r12*r12)+(((-1.0)*x5894*x5895))+(((-2.0)*x5896*x5897))+((x5894*(r10*r10)))+x5895);
j4eval[0]=x5898;
j4eval[1]=IKsign(x5898);
j4eval[2]=((IKabs(((((-1.0)*x5897))+x5896)))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5899=cj5*cj5;
IkReal x5900=r11*r11;
IkReal x5901=(cj5*r10);
IkReal x5902=(r11*sj5);
CheckValue<IkReal> x5903 = IKatan2WithCheck(IkReal((x5902+(((-1.0)*x5901)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x5903.valid){
continue;
}
CheckValue<IkReal> x5904=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x5899*(r10*r10)))+(((-2.0)*x5901*x5902))+(((-1.0)*x5899*x5900))+x5900)),-1);
if(!x5904.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5903.value)+(((1.5707963267949)*(x5904.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5905=IKcos(j4);
IkReal x5906=IKsin(j4);
IkReal x5907=(cj5*r00);
IkReal x5908=(cj5*r10);
IkReal x5909=(r21*sj5);
IkReal x5910=(cj5*r20);
IkReal x5911=((1.0)*x5905);
IkReal x5912=((1.0)*x5906);
IkReal x5913=(sj5*x5906);
IkReal x5914=(sj5*x5905);
evalcond[0]=(((r12*x5906))+(((-1.0)*x5908*x5911))+((r11*x5914)));
evalcond[1]=((((-1.0)*r22*x5911))+(((-1.0)*x5910*x5912))+((x5906*x5909)));
evalcond[2]=(((r01*x5913))+(((-1.0)*x5907*x5912))+(((-1.0)*r02*x5911)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x5911))+(((-1.0)*x5908*x5912))+((r11*x5913)));
evalcond[4]=(((cj2*sj1))+((r22*x5906))+((cj1*sj2))+(((-1.0)*x5910*x5911))+((x5905*x5909)));
evalcond[5]=(((r01*x5914))+(((-1.0)*x5907*x5911))+(((-1.0)*sj1*sj2))+((r02*x5906))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5915=((1.0)*cj5);
CheckValue<IkReal> x5916=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x5915))+(((-1.0)*r20*sj5)))),-1);
if(!x5916.valid){
continue;
}
CheckValue<IkReal> x5917 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x5915))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5917.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5916.value)))+(x5917.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5918=IKcos(j4);
IkReal x5919=IKsin(j4);
IkReal x5920=(cj5*r00);
IkReal x5921=(cj5*r10);
IkReal x5922=(r21*sj5);
IkReal x5923=(cj5*r20);
IkReal x5924=((1.0)*x5918);
IkReal x5925=((1.0)*x5919);
IkReal x5926=(sj5*x5919);
IkReal x5927=(sj5*x5918);
evalcond[0]=(((r12*x5919))+((r11*x5927))+(((-1.0)*x5921*x5924)));
evalcond[1]=((((-1.0)*r22*x5924))+((x5919*x5922))+(((-1.0)*x5923*x5925)));
evalcond[2]=((((-1.0)*r02*x5924))+(((-1.0)*x5920*x5925))+((r01*x5926)));
evalcond[3]=((-1.0)+((r11*x5926))+(((-1.0)*r12*x5924))+(((-1.0)*x5921*x5925)));
evalcond[4]=(((cj2*sj1))+((r22*x5919))+((cj1*sj2))+((x5918*x5922))+(((-1.0)*x5923*x5924)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5920*x5924))+((r02*x5919))+((cj1*cj2))+((r01*x5927)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x5928 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5928.valid){
continue;
}
CheckValue<IkReal> x5929=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x5929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x5928.value)+(((1.5707963267949)*(x5929.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5930=IKcos(j4);
IkReal x5931=IKsin(j4);
IkReal x5932=(cj5*r00);
IkReal x5933=(cj5*r10);
IkReal x5934=(r21*sj5);
IkReal x5935=(cj5*r20);
IkReal x5936=((1.0)*x5930);
IkReal x5937=((1.0)*x5931);
IkReal x5938=(sj5*x5931);
IkReal x5939=(sj5*x5930);
evalcond[0]=(((r11*x5939))+((r12*x5931))+(((-1.0)*x5933*x5936)));
evalcond[1]=((((-1.0)*x5935*x5937))+((x5931*x5934))+(((-1.0)*r22*x5936)));
evalcond[2]=((((-1.0)*r02*x5936))+(((-1.0)*x5932*x5937))+((r01*x5938)));
evalcond[3]=((-1.0)+((r11*x5938))+(((-1.0)*x5933*x5937))+(((-1.0)*r12*x5936)));
evalcond[4]=(((cj2*sj1))+((x5930*x5934))+((cj1*sj2))+((r22*x5931))+(((-1.0)*x5935*x5936)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x5932*x5936))+((r01*x5939))+((cj1*cj2))+((r02*x5931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5940=((-1.0)*r00);
IkReal x5942 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5942)==0){
continue;
}
IkReal x5941=pow(x5942,-0.5);
CheckValue<IkReal> x5943 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5940),IKFAST_ATAN2_MAGTHRESH);
if(!x5943.valid){
continue;
}
IkReal gconst126=((-1.0)*(x5943.value));
IkReal gconst127=(r01*x5941);
IkReal gconst128=(x5940*x5941);
CheckValue<IkReal> x5944 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5944.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x5944.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x5945=((-1.0)*r00);
IkReal x5946=x5941;
CheckValue<IkReal> x5948 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x5945),IKFAST_ATAN2_MAGTHRESH);
if(!x5948.valid){
continue;
}
IkReal x5947=((-1.0)*(x5948.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x5947;
IkReal gconst126=x5947;
IkReal gconst127=(r01*x5946);
IkReal gconst128=(x5945*x5946);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5949=((1.0)*sj0);
IkReal x5950=((1.0)*gconst127);
CheckValue<IkReal> x5951=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x5950)))),-1);
if(!x5951.valid){
continue;
}
CheckValue<IkReal> x5952 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x5949))+(((-1.0)*cj0*r02)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*cj0*r01*x5950))+((cj0*gconst128*r00))+(((-1.0)*gconst127*r11*x5949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5952.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5951.value)))+(x5952.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5953=IKsin(j4);
IkReal x5954=IKcos(j4);
IkReal x5955=(gconst127*r01);
IkReal x5956=(sj1*sj2);
IkReal x5957=(gconst128*r10);
IkReal x5958=(gconst128*r00);
IkReal x5959=(gconst128*r20);
IkReal x5960=((1.0)*x5954);
IkReal x5961=((1.0)*cj1*cj2);
IkReal x5962=((1.0)*x5953);
IkReal x5963=(gconst127*x5954);
IkReal x5964=(gconst127*x5953);
evalcond[0]=((((-1.0)*r22*x5960))+((r21*x5964))+(((-1.0)*x5959*x5962)));
evalcond[1]=(cj0+(((-1.0)*x5957*x5962))+(((-1.0)*r12*x5960))+((r11*x5964)));
evalcond[2]=((((-1.0)*sj0))+((x5953*x5955))+(((-1.0)*x5958*x5962))+(((-1.0)*r02*x5960)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x5963))+((r22*x5953))+(((-1.0)*x5959*x5960)));
evalcond[4]=(((r02*x5953))+((x5954*x5955))+(((-1.0)*cj0*x5961))+(((-1.0)*x5958*x5960))+((cj0*x5956)));
evalcond[5]=((((-1.0)*x5957*x5960))+((sj0*x5956))+(((-1.0)*sj0*x5961))+((r12*x5953))+((r11*x5963)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x5965=((1.0)*gconst128);
CheckValue<IkReal> x5966=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x5965))+(((-1.0)*gconst127*r10)))),-1);
if(!x5966.valid){
continue;
}
CheckValue<IkReal> x5967 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst127*r21*sj0))+(((-1.0)*r20*sj0*x5965)))),IKFAST_ATAN2_MAGTHRESH);
if(!x5967.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x5966.value)))+(x5967.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x5968=IKsin(j4);
IkReal x5969=IKcos(j4);
IkReal x5970=(gconst127*r01);
IkReal x5971=(sj1*sj2);
IkReal x5972=(gconst128*r10);
IkReal x5973=(gconst128*r00);
IkReal x5974=(gconst128*r20);
IkReal x5975=((1.0)*x5969);
IkReal x5976=((1.0)*cj1*cj2);
IkReal x5977=((1.0)*x5968);
IkReal x5978=(gconst127*x5969);
IkReal x5979=(gconst127*x5968);
evalcond[0]=((((-1.0)*r22*x5975))+((r21*x5979))+(((-1.0)*x5974*x5977)));
evalcond[1]=(cj0+(((-1.0)*r12*x5975))+(((-1.0)*x5972*x5977))+((r11*x5979)));
evalcond[2]=((((-1.0)*r02*x5975))+(((-1.0)*sj0))+((x5968*x5970))+(((-1.0)*x5973*x5977)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x5968))+((r21*x5978))+(((-1.0)*x5974*x5975)));
evalcond[4]=(((r02*x5968))+((x5969*x5970))+((cj0*x5971))+(((-1.0)*cj0*x5976))+(((-1.0)*x5973*x5975)));
evalcond[5]=((((-1.0)*sj0*x5976))+(((-1.0)*x5972*x5975))+((r11*x5978))+((r12*x5968))+((sj0*x5971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x5980=((-1.0)*r01);
IkReal x5982 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x5982)==0){
continue;
}
IkReal x5981=pow(x5982,-0.5);
CheckValue<IkReal> x5983 = IKatan2WithCheck(IkReal(x5980),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5983.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x5983.value))));
IkReal gconst130=(x5980*x5981);
IkReal gconst131=((1.0)*r00*x5981);
CheckValue<IkReal> x5984 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5984.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x5984.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x5985=((-1.0)*r01);
CheckValue<IkReal> x5988 = IKatan2WithCheck(IkReal(x5985),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5988.valid){
continue;
}
IkReal x5986=((1.0)*(x5988.value));
IkReal x5987=x5981;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5986)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5986)));
IkReal gconst130=(x5985*x5987);
IkReal gconst131=((1.0)*r00*x5987);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x5989=((-1.0)*r01);
CheckValue<IkReal> x5992 = IKatan2WithCheck(IkReal(x5989),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5992.valid){
continue;
}
IkReal x5990=((1.0)*(x5992.value));
IkReal x5991=x5981;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5990)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5990)));
IkReal gconst130=(x5989*x5991);
IkReal gconst131=((1.0)*r00*x5991);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x5993=((-1.0)*r01);
CheckValue<IkReal> x5996 = IKatan2WithCheck(IkReal(x5993),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x5996.valid){
continue;
}
IkReal x5994=((1.0)*(x5996.value));
IkReal x5995=x5981;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x5994)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x5994)));
IkReal gconst130=(x5993*x5995);
IkReal gconst131=((1.0)*r00*x5995);
IkReal x5997=r02*r02;
IkReal x5998=(r12*sj0);
IkReal x5999=((1.0)*cj0);
IkReal x6000=x5981;
j4eval[0]=((IKabs((((cj0*x5997*x6000))+(((-1.0)*x5999*x6000))+((r02*x5998*x6000)))))+(IKabs(((((-1.0)*r02*x5999))+(((-1.0)*x5998))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6001=((1.0)*sj0);
IkReal x6002=((1.0)*gconst130);
CheckValue<IkReal> x6003=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst131*r21))+(((-1.0)*r20*x6002)))),-1);
if(!x6003.valid){
continue;
}
CheckValue<IkReal> x6004 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6001))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x6002))+((gconst131*r10*sj0))+((cj0*gconst131*r00))+(((-1.0)*gconst130*r11*x6001)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6004.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6003.value)))+(x6004.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6005=IKsin(j4);
IkReal x6006=IKcos(j4);
IkReal x6007=(gconst131*r10);
IkReal x6008=(sj1*sj2);
IkReal x6009=(gconst131*r20);
IkReal x6010=(gconst131*r00);
IkReal x6011=((1.0)*x6006);
IkReal x6012=((1.0)*cj1*cj2);
IkReal x6013=(gconst130*x6005);
IkReal x6014=((1.0)*x6005);
IkReal x6015=(gconst130*x6006);
evalcond[0]=(((r21*x6013))+(((-1.0)*x6009*x6014))+(((-1.0)*r22*x6011)));
evalcond[1]=(((r11*x6013))+cj0+(((-1.0)*r12*x6011))+(((-1.0)*x6007*x6014)));
evalcond[2]=(((r01*x6013))+(((-1.0)*sj0))+(((-1.0)*r02*x6011))+(((-1.0)*x6010*x6014)));
evalcond[3]=(((cj2*sj1))+((r22*x6005))+((r21*x6015))+((cj1*sj2))+(((-1.0)*x6009*x6011)));
evalcond[4]=(((r01*x6015))+((cj0*x6008))+(((-1.0)*x6010*x6011))+((r02*x6005))+(((-1.0)*cj0*x6012)));
evalcond[5]=(((r12*x6005))+((r11*x6015))+(((-1.0)*sj0*x6012))+((sj0*x6008))+(((-1.0)*x6007*x6011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6016=((1.0)*gconst131);
CheckValue<IkReal> x6017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6016))+(((-1.0)*gconst130*r10)))),-1);
if(!x6017.valid){
continue;
}
CheckValue<IkReal> x6018 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst130*r21*sj0))+(((-1.0)*r20*sj0*x6016)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6018.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6017.value)))+(x6018.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6019=IKsin(j4);
IkReal x6020=IKcos(j4);
IkReal x6021=(gconst131*r10);
IkReal x6022=(sj1*sj2);
IkReal x6023=(gconst131*r20);
IkReal x6024=(gconst131*r00);
IkReal x6025=((1.0)*x6020);
IkReal x6026=((1.0)*cj1*cj2);
IkReal x6027=(gconst130*x6019);
IkReal x6028=((1.0)*x6019);
IkReal x6029=(gconst130*x6020);
evalcond[0]=((((-1.0)*x6023*x6028))+(((-1.0)*r22*x6025))+((r21*x6027)));
evalcond[1]=(cj0+(((-1.0)*x6021*x6028))+((r11*x6027))+(((-1.0)*r12*x6025)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6024*x6028))+((r01*x6027))+(((-1.0)*r02*x6025)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6023*x6025))+((cj1*sj2))+((r21*x6029))+((r22*x6019)));
evalcond[4]=((((-1.0)*cj0*x6026))+(((-1.0)*x6024*x6025))+((r01*x6029))+((r02*x6019))+((cj0*x6022)));
evalcond[5]=(((sj0*x6022))+(((-1.0)*x6021*x6025))+((r12*x6019))+(((-1.0)*sj0*x6026))+((r11*x6029)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6030=((1.0)*gconst131);
CheckValue<IkReal> x6031=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6030))+(((-1.0)*gconst130*r00)))),-1);
if(!x6031.valid){
continue;
}
CheckValue<IkReal> x6032 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6030)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6032.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6031.value)))+(x6032.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6033=IKsin(j4);
IkReal x6034=IKcos(j4);
IkReal x6035=(gconst131*r10);
IkReal x6036=(sj1*sj2);
IkReal x6037=(gconst131*r20);
IkReal x6038=(gconst131*r00);
IkReal x6039=((1.0)*x6034);
IkReal x6040=((1.0)*cj1*cj2);
IkReal x6041=(gconst130*x6033);
IkReal x6042=((1.0)*x6033);
IkReal x6043=(gconst130*x6034);
evalcond[0]=((((-1.0)*x6037*x6042))+(((-1.0)*r22*x6039))+((r21*x6041)));
evalcond[1]=(((r11*x6041))+cj0+(((-1.0)*r12*x6039))+(((-1.0)*x6035*x6042)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6038*x6042))+((r01*x6041))+(((-1.0)*r02*x6039)));
evalcond[3]=(((r22*x6033))+((cj2*sj1))+((cj1*sj2))+((r21*x6043))+(((-1.0)*x6037*x6039)));
evalcond[4]=(((cj0*x6036))+((r02*x6033))+(((-1.0)*cj0*x6040))+((r01*x6043))+(((-1.0)*x6038*x6039)));
evalcond[5]=(((r11*x6043))+((r12*x6033))+(((-1.0)*x6035*x6039))+((sj0*x6036))+(((-1.0)*sj0*x6040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6044=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6044;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6045=((1.0)*cj5);
IkReal x6046=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6045)));
j4eval[0]=x6046;
j4eval[1]=((IKabs(((((-1.0)*r20*x6045))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6047=cj5*cj5;
IkReal x6048=r01*r01;
IkReal x6049=(cj5*r00);
IkReal x6050=(r01*sj5);
IkReal x6051=(x6048+(((-1.0)*x6047*x6048))+((x6047*(r00*r00)))+(r02*r02)+(((-2.0)*x6049*x6050)));
j4eval[0]=x6051;
j4eval[1]=IKsign(x6051);
j4eval[2]=((IKabs(r02))+(IKabs((x6050+(((-1.0)*x6049))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6052=cj5*cj5;
IkReal x6053=r01*r01;
IkReal x6054=(r01*sj5);
IkReal x6055=(cj5*r00);
CheckValue<IkReal> x6056 = IKatan2WithCheck(IkReal((x6054+(((-1.0)*x6055)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6056.valid){
continue;
}
CheckValue<IkReal> x6057=IKPowWithIntegerCheck(IKsign((((x6052*(r00*r00)))+x6053+(((-1.0)*x6052*x6053))+(((-2.0)*x6054*x6055))+(r02*r02))),-1);
if(!x6057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6056.value)+(((1.5707963267949)*(x6057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6058=IKcos(j4);
IkReal x6059=IKsin(j4);
IkReal x6060=(cj5*r00);
IkReal x6061=(cj5*r10);
IkReal x6062=(r21*sj5);
IkReal x6063=(cj5*r20);
IkReal x6064=((1.0)*x6058);
IkReal x6065=((1.0)*x6059);
IkReal x6066=(sj5*x6059);
IkReal x6067=(sj5*x6058);
evalcond[0]=(((r01*x6067))+(((-1.0)*x6060*x6064))+((r02*x6059)));
evalcond[1]=((((-1.0)*r22*x6064))+((x6059*x6062))+(((-1.0)*x6063*x6065)));
evalcond[2]=((((-1.0)*x6061*x6065))+((r11*x6066))+(((-1.0)*r12*x6064)));
evalcond[3]=((-1.0)+((r01*x6066))+(((-1.0)*x6060*x6065))+(((-1.0)*r02*x6064)));
evalcond[4]=(((cj2*sj1))+((r22*x6059))+((cj1*sj2))+(((-1.0)*x6063*x6064))+((x6058*x6062)));
evalcond[5]=(((r12*x6059))+(((-1.0)*x6061*x6064))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6067)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6068=((1.0)*cj5);
CheckValue<IkReal> x6069=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6068)))),-1);
if(!x6069.valid){
continue;
}
CheckValue<IkReal> x6070 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6069.value)))+(x6070.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6071=IKcos(j4);
IkReal x6072=IKsin(j4);
IkReal x6073=(cj5*r00);
IkReal x6074=(cj5*r10);
IkReal x6075=(r21*sj5);
IkReal x6076=(cj5*r20);
IkReal x6077=((1.0)*x6071);
IkReal x6078=((1.0)*x6072);
IkReal x6079=(sj5*x6072);
IkReal x6080=(sj5*x6071);
evalcond[0]=(((r01*x6080))+(((-1.0)*x6073*x6077))+((r02*x6072)));
evalcond[1]=((((-1.0)*x6076*x6078))+(((-1.0)*r22*x6077))+((x6072*x6075)));
evalcond[2]=(((r11*x6079))+(((-1.0)*x6074*x6078))+(((-1.0)*r12*x6077)));
evalcond[3]=((-1.0)+((r01*x6079))+(((-1.0)*r02*x6077))+(((-1.0)*x6073*x6078)));
evalcond[4]=(((cj2*sj1))+((x6071*x6075))+((cj1*sj2))+((r22*x6072))+(((-1.0)*x6076*x6077)));
evalcond[5]=((((-1.0)*x6074*x6077))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r11*x6080))+((r12*x6072)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6081=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6081.valid){
continue;
}
CheckValue<IkReal> x6082 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6081.value)))+(x6082.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6083=IKcos(j4);
IkReal x6084=IKsin(j4);
IkReal x6085=(cj5*r00);
IkReal x6086=(cj5*r10);
IkReal x6087=(r21*sj5);
IkReal x6088=(cj5*r20);
IkReal x6089=((1.0)*x6083);
IkReal x6090=((1.0)*x6084);
IkReal x6091=(sj5*x6084);
IkReal x6092=(sj5*x6083);
evalcond[0]=((((-1.0)*x6085*x6089))+((r01*x6092))+((r02*x6084)));
evalcond[1]=((((-1.0)*r22*x6089))+((x6084*x6087))+(((-1.0)*x6088*x6090)));
evalcond[2]=((((-1.0)*r12*x6089))+((r11*x6091))+(((-1.0)*x6086*x6090)));
evalcond[3]=((-1.0)+((r01*x6091))+(((-1.0)*r02*x6089))+(((-1.0)*x6085*x6090)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6088*x6089))+((cj1*sj2))+((r22*x6084))+((x6083*x6087)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x6084))+((r11*x6092))+(((-1.0)*x6086*x6089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6093=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6093;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6093);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6094=((1.0)*cj5);
IkReal x6095=((((-1.0)*r21*x6094))+(((-1.0)*r20*sj5)));
j4eval[0]=x6095;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x6094))+((r11*sj5))))));
j4eval[2]=IKsign(x6095);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6096=(r01*sj5);
IkReal x6097=(cj1*sj2);
IkReal x6098=(cj2*sj1);
IkReal x6099=((1.0)*r02);
IkReal x6100=((1.0)*cj5*r00);
IkReal x6101=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6101;
j4eval[1]=((IKabs(((((-1.0)*x6098*x6099))+(((-1.0)*x6097*x6099)))))+(IKabs((((x6096*x6098))+((x6096*x6097))+(((-1.0)*x6098*x6100))+(((-1.0)*x6097*x6100))))));
j4eval[2]=IKsign(x6101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6102=(r01*sj5);
IkReal x6103=(cj1*sj2);
IkReal x6104=(cj2*sj1);
IkReal x6105=((1.0)*r02);
IkReal x6106=((1.0)*cj5*r00);
CheckValue<IkReal> x6107 = IKatan2WithCheck(IkReal((((x6102*x6104))+((x6102*x6103))+(((-1.0)*x6104*x6106))+(((-1.0)*x6103*x6106)))),IkReal(((((-1.0)*x6104*x6105))+(((-1.0)*x6103*x6105)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6107.valid){
continue;
}
CheckValue<IkReal> x6108=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6108.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6107.value)+(((1.5707963267949)*(x6108.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6109=IKcos(j4);
IkReal x6110=IKsin(j4);
IkReal x6111=(cj5*r00);
IkReal x6112=(cj5*r10);
IkReal x6113=(r21*sj5);
IkReal x6114=(cj5*r20);
IkReal x6115=((1.0)*x6109);
IkReal x6116=((1.0)*x6110);
IkReal x6117=(sj5*x6110);
IkReal x6118=(sj5*x6109);
evalcond[0]=(((r02*x6110))+(((-1.0)*x6111*x6115))+((r01*x6118)));
evalcond[1]=((((-1.0)*r22*x6115))+((x6110*x6113))+(((-1.0)*x6114*x6116)));
evalcond[2]=((((-1.0)*r12*x6115))+(((-1.0)*x6112*x6116))+((r11*x6117)));
evalcond[3]=((1.0)+(((-1.0)*x6111*x6116))+(((-1.0)*r02*x6115))+((r01*x6117)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6110))+(((-1.0)*x6114*x6115))+((x6109*x6113)));
evalcond[5]=((((-1.0)*x6112*x6115))+(((-1.0)*sj1*sj2))+((r12*x6110))+((r11*x6118))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6119=((1.0)*cj5);
CheckValue<IkReal> x6120=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6119))+(((-1.0)*r20*sj5)))),-1);
if(!x6120.valid){
continue;
}
CheckValue<IkReal> x6121 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6119))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6121.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6120.value)))+(x6121.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6122=IKcos(j4);
IkReal x6123=IKsin(j4);
IkReal x6124=(cj5*r00);
IkReal x6125=(cj5*r10);
IkReal x6126=(r21*sj5);
IkReal x6127=(cj5*r20);
IkReal x6128=((1.0)*x6122);
IkReal x6129=((1.0)*x6123);
IkReal x6130=(sj5*x6123);
IkReal x6131=(sj5*x6122);
evalcond[0]=((((-1.0)*x6124*x6128))+((r02*x6123))+((r01*x6131)));
evalcond[1]=((((-1.0)*r22*x6128))+((x6123*x6126))+(((-1.0)*x6127*x6129)));
evalcond[2]=((((-1.0)*x6125*x6129))+((r11*x6130))+(((-1.0)*r12*x6128)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6128))+(((-1.0)*x6124*x6129))+((r01*x6130)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x6122*x6126))+(((-1.0)*x6127*x6128))+((r22*x6123)));
evalcond[5]=((((-1.0)*x6125*x6128))+((r11*x6131))+((r12*x6123))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6132 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6132.valid){
continue;
}
CheckValue<IkReal> x6133=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6133.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6132.value)+(((1.5707963267949)*(x6133.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6134=IKcos(j4);
IkReal x6135=IKsin(j4);
IkReal x6136=(cj5*r00);
IkReal x6137=(cj5*r10);
IkReal x6138=(r21*sj5);
IkReal x6139=(cj5*r20);
IkReal x6140=((1.0)*x6134);
IkReal x6141=((1.0)*x6135);
IkReal x6142=(sj5*x6135);
IkReal x6143=(sj5*x6134);
evalcond[0]=((((-1.0)*x6136*x6140))+((r01*x6143))+((r02*x6135)));
evalcond[1]=((((-1.0)*x6139*x6141))+((x6135*x6138))+(((-1.0)*r22*x6140)));
evalcond[2]=((((-1.0)*x6137*x6141))+((r11*x6142))+(((-1.0)*r12*x6140)));
evalcond[3]=((1.0)+(((-1.0)*x6136*x6141))+(((-1.0)*r02*x6140))+((r01*x6142)));
evalcond[4]=((((-1.0)*x6139*x6140))+((cj2*sj1))+((r22*x6135))+((cj1*sj2))+((x6134*x6138)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x6137*x6140))+((r11*x6143))+((cj1*cj2))+((r12*x6135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6144=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6144);
rxp1_1=(px*r21);
rxp1_2=(r11*x6144);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6145=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6145);
rxp1_1=(px*r21);
rxp1_2=(r11*x6145);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6146=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6146);
rxp1_1=(px*r21);
rxp1_2=(r11*x6146);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6149=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6149.valid){
continue;
}
IkReal x6147=x6149.value;
IkReal x6148=(sj0*x6147);
cj4array[0]=(((cj1*cj2*x6148))+(((-1.0)*sj1*sj2*x6148)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6150=IKsin(j4);
IkReal x6151=IKcos(j4);
IkReal x6152=(r21*sj5);
IkReal x6153=((1.0)*cj5*r20);
evalcond[0]=(r02*x6150);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6151)));
evalcond[2]=((((-1.0)*x6150*x6153))+((x6150*x6152)));
evalcond[3]=((((-1.0)*cj5*r10*x6150))+((r11*sj5*x6150)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x6151*x6153))+((cj1*sj2))+((x6151*x6152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6156=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6156.valid){
continue;
}
IkReal x6154=x6156.value;
IkReal x6155=((1.0)*x6154);
cj4array[0]=((((-1.0)*cj2*sj1*x6155))+(((-1.0)*cj1*sj2*x6155)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6157=IKsin(j4);
IkReal x6158=IKcos(j4);
IkReal x6159=((1.0)*sj0);
IkReal x6160=((1.0)*cj5);
IkReal x6161=(sj5*x6157);
evalcond[0]=(r02*x6157);
evalcond[1]=((((-1.0)*x6159))+(((-1.0)*r02*x6158)));
evalcond[2]=(((r21*x6161))+(((-1.0)*r20*x6157*x6160)));
evalcond[3]=(((r11*x6161))+(((-1.0)*r10*x6157*x6160)));
evalcond[4]=((((-1.0)*cj1*cj2*x6159))+(((-1.0)*r10*x6158*x6160))+((r11*sj5*x6158))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6162=IKPowWithIntegerCheck(r02,-1);
if(!x6162.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6162.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6163=IKsin(j4);
IkReal x6164=IKcos(j4);
IkReal x6165=(r21*sj5);
IkReal x6166=((1.0)*cj5);
IkReal x6167=(r11*sj5);
evalcond[0]=(r02*x6163);
evalcond[1]=(((x6163*x6165))+(((-1.0)*r20*x6163*x6166)));
evalcond[2]=(((x6163*x6167))+(((-1.0)*r10*x6163*x6166)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r20*x6164*x6166))+((cj1*sj2))+((x6164*x6165)));
evalcond[4]=((((-1.0)*r10*x6164*x6166))+(((-1.0)*cj1*cj2*sj0))+((x6164*x6167))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6168=((1.0)*sj0);
IkReal x6169=((1.0)*cj0);
CheckValue<IkReal> x6170 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6168))+(((-1.0)*r02*x6169)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6169))+(((-1.0)*r11*sj5*x6168)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6170.valid){
continue;
}
CheckValue<IkReal> x6171=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6171.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6170.value)+(((1.5707963267949)*(x6171.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6172=IKsin(j4);
IkReal x6173=IKcos(j4);
IkReal x6174=(cj5*r00);
IkReal x6175=(cj5*r10);
IkReal x6176=(r21*sj5);
IkReal x6177=(sj1*sj2);
IkReal x6178=(cj5*r20);
IkReal x6179=((1.0)*x6173);
IkReal x6180=((1.0)*cj1*cj2);
IkReal x6181=((1.0)*x6172);
IkReal x6182=(sj5*x6172);
IkReal x6183=(sj5*x6173);
evalcond[0]=(((x6172*x6176))+(((-1.0)*x6178*x6181))+(((-1.0)*r22*x6179)));
evalcond[1]=(cj0+(((-1.0)*r12*x6179))+((r11*x6182))+(((-1.0)*x6175*x6181)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6182))+(((-1.0)*r02*x6179))+(((-1.0)*x6174*x6181)));
evalcond[3]=(((cj2*sj1))+((x6173*x6176))+((cj1*sj2))+((r22*x6172))+(((-1.0)*x6178*x6179)));
evalcond[4]=(((r01*x6183))+((r02*x6172))+(((-1.0)*x6174*x6179))+(((-1.0)*cj0*x6180))+((cj0*x6177)));
evalcond[5]=(((r12*x6172))+((sj0*x6177))+(((-1.0)*x6175*x6179))+((r11*x6183))+(((-1.0)*sj0*x6180)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6184=((1.0)*cj5);
CheckValue<IkReal> x6185 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6184)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6185.valid){
continue;
}
CheckValue<IkReal> x6186=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6184)))),-1);
if(!x6186.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6185.value)+(((1.5707963267949)*(x6186.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6187=IKsin(j4);
IkReal x6188=IKcos(j4);
IkReal x6189=(cj5*r00);
IkReal x6190=(cj5*r10);
IkReal x6191=(r21*sj5);
IkReal x6192=(sj1*sj2);
IkReal x6193=(cj5*r20);
IkReal x6194=((1.0)*x6188);
IkReal x6195=((1.0)*cj1*cj2);
IkReal x6196=((1.0)*x6187);
IkReal x6197=(sj5*x6187);
IkReal x6198=(sj5*x6188);
evalcond[0]=((((-1.0)*x6193*x6196))+(((-1.0)*r22*x6194))+((x6187*x6191)));
evalcond[1]=(cj0+((r11*x6197))+(((-1.0)*r12*x6194))+(((-1.0)*x6190*x6196)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6189*x6196))+((r01*x6197))+(((-1.0)*r02*x6194)));
evalcond[3]=(((cj2*sj1))+((r22*x6187))+((cj1*sj2))+(((-1.0)*x6193*x6194))+((x6188*x6191)));
evalcond[4]=((((-1.0)*x6189*x6194))+(((-1.0)*cj0*x6195))+((r02*x6187))+((r01*x6198))+((cj0*x6192)));
evalcond[5]=(((r11*x6198))+(((-1.0)*sj0*x6195))+((sj0*x6192))+(((-1.0)*x6190*x6194))+((r12*x6187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6199=((1.0)*cj5);
CheckValue<IkReal> x6200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6199)))),-1);
if(!x6200.valid){
continue;
}
CheckValue<IkReal> x6201 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6199)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6200.value)))+(x6201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6202=IKsin(j4);
IkReal x6203=IKcos(j4);
IkReal x6204=(cj5*r00);
IkReal x6205=(cj5*r10);
IkReal x6206=(r21*sj5);
IkReal x6207=(sj1*sj2);
IkReal x6208=(cj5*r20);
IkReal x6209=((1.0)*x6203);
IkReal x6210=((1.0)*cj1*cj2);
IkReal x6211=((1.0)*x6202);
IkReal x6212=(sj5*x6202);
IkReal x6213=(sj5*x6203);
evalcond[0]=((((-1.0)*x6208*x6211))+(((-1.0)*r22*x6209))+((x6202*x6206)));
evalcond[1]=((((-1.0)*x6205*x6211))+((r11*x6212))+cj0+(((-1.0)*r12*x6209)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6209))+((r01*x6212))+(((-1.0)*x6204*x6211)));
evalcond[3]=(((cj2*sj1))+((r22*x6202))+(((-1.0)*x6208*x6209))+((cj1*sj2))+((x6203*x6206)));
evalcond[4]=((((-1.0)*cj0*x6210))+((r02*x6202))+((r01*x6213))+(((-1.0)*x6204*x6209))+((cj0*x6207)));
evalcond[5]=(((r11*x6213))+((sj0*x6207))+(((-1.0)*sj0*x6210))+(((-1.0)*x6205*x6209))+((r12*x6202)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6214=r21*r21;
IkReal x6215=cj5*cj5;
IkReal x6216=(cj2*sj1);
IkReal x6217=(cj1*sj2);
IkReal x6218=(r21*sj5);
IkReal x6219=((1.0)*cj5*r20);
CheckValue<IkReal> x6220 = IKatan2WithCheck(IkReal((((r22*x6217))+((r22*x6216)))),IkReal(((((-1.0)*x6216*x6219))+(((-1.0)*x6217*x6219))+((x6217*x6218))+((x6216*x6218)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6220.valid){
continue;
}
CheckValue<IkReal> x6221=IKPowWithIntegerCheck(IKsign(((((-1.0)*x6214))+(((-1.0)*(r22*r22)))+(((-1.0)*x6215*(r20*r20)))+((x6214*x6215))+(((2.0)*cj5*r20*x6218)))),-1);
if(!x6221.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6220.value)+(((1.5707963267949)*(x6221.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x6222=IKsin(j4);
IkReal x6223=IKcos(j4);
IkReal x6224=(r21*sj5);
IkReal x6225=(cj5*r20);
IkReal x6226=((1.0)*x6223);
evalcond[0]=(((x6222*x6224))+(((-1.0)*x6222*x6225))+(((-1.0)*r22*x6226)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((x6223*x6224))+((r22*x6222))+(((-1.0)*x6225*x6226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6227=(cj5*sj4);
IkReal x6228=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x6228))+(((-1.0)*r00*x6227)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x6227))+(((-1.0)*r11*x6228))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x6228))+(((-1.0)*r00*x6227))))+IKsqr((((r10*x6227))+(((-1.0)*r11*x6228))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x6228))+(((-1.0)*r00*x6227))), (((r10*x6227))+(((-1.0)*r11*x6228))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x6229=IKcos(j0);
IkReal x6230=IKsin(j0);
IkReal x6231=(cj5*r01);
IkReal x6232=((1.0)*cj1);
IkReal x6233=((0.39225)*sj1);
IkReal x6234=(r11*sj5);
IkReal x6235=((0.39225)*cj2);
IkReal x6236=((1.0)*sj1);
IkReal x6237=(r00*sj5);
IkReal x6238=(cj5*r11);
IkReal x6239=((1.0)*cj4);
IkReal x6240=(r01*sj5);
IkReal x6241=(r10*sj5);
IkReal x6242=(sj2*x6229);
IkReal x6243=(sj2*x6230);
IkReal x6244=(cj5*x6239);
IkReal x6245=(cj1*x6229);
IkReal x6246=(cj1*x6230);
IkReal x6247=(cj2*x6229);
IkReal x6248=((1.0)*cj5*sj4);
IkReal x6249=(cj2*x6230);
evalcond[0]=((((-1.0)*r12*x6239))+x6229+((sj4*x6234))+(((-1.0)*r10*x6248)));
evalcond[1]=((((-1.0)*r00*x6248))+(((-1.0)*x6230))+((sj4*x6240))+(((-1.0)*r02*x6239)));
evalcond[2]=(x6237+x6231+(((-1.0)*x6232*x6242))+(((-1.0)*x6236*x6247)));
evalcond[3]=(x6241+x6238+(((-1.0)*x6232*x6243))+(((-1.0)*x6236*x6249)));
evalcond[4]=((((-1.0)*x6232*x6247))+((cj4*x6240))+(((-1.0)*r00*x6244))+((r02*sj4))+((sj1*x6242)));
evalcond[5]=((((-1.0)*x6232*x6249))+(((-1.0)*r10*x6244))+((sj1*x6243))+((cj4*x6234))+((r12*sj4)));
evalcond[6]=((((-0.09465)*x6231))+(((-0.09465)*x6237))+((x6235*x6245))+(((0.425)*x6245))+(((-0.10915)*x6230))+(((-1.0)*px))+(((-1.0)*x6233*x6242)));
evalcond[7]=((((-0.09465)*x6238))+(((-0.09465)*x6241))+((x6235*x6246))+(((0.10915)*x6229))+(((0.425)*x6246))+(((-1.0)*py))+(((-1.0)*x6233*x6243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x6250=((1.0)*cj5);
IkReal x6251=((1.0)*sj5);
CheckValue<IkReal> x6252 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x6251))+(((-1.0)*r11*x6250)))),IkReal(((((-1.0)*r00*x6251))+(((-1.0)*r01*x6250)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6252.valid){
continue;
}
CheckValue<IkReal> x6253=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x6253.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x6252.value)+(((1.5707963267949)*(x6253.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x6254=IKcos(j0);
IkReal x6255=IKsin(j0);
IkReal x6256=(cj5*r01);
IkReal x6257=((1.0)*cj1);
IkReal x6258=((0.39225)*sj1);
IkReal x6259=(cj5*r11);
IkReal x6260=(r00*sj5);
IkReal x6261=((0.39225)*cj2);
IkReal x6262=(r10*sj5);
IkReal x6263=(sj2*x6254);
IkReal x6264=(sj2*x6255);
IkReal x6265=(cj1*x6254);
IkReal x6266=((1.0)*cj2*sj1);
IkReal x6267=(cj1*x6255);
evalcond[0]=(x6256+x6260+(((-1.0)*x6257*x6263))+(((-1.0)*x6254*x6266)));
evalcond[1]=(x6259+x6262+(((-1.0)*x6255*x6266))+(((-1.0)*x6257*x6264)));
evalcond[2]=((((-0.09465)*x6256))+(((-0.09465)*x6260))+(((-0.10915)*x6255))+(((-1.0)*x6258*x6263))+((x6261*x6265))+(((-1.0)*px))+(((0.425)*x6265)));
evalcond[3]=((((-0.09465)*x6259))+(((-0.09465)*x6262))+(((-1.0)*x6258*x6264))+((x6261*x6267))+(((-1.0)*py))+(((0.425)*x6267))+(((0.10915)*x6254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6268=((1.0)*cj5);
IkReal x6269=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6268)));
j4eval[0]=x6269;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r20*x6268))+((cj0*r21*sj5))))));
j4eval[2]=IKsign(x6269);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6270=((1.0)*cj5);
IkReal x6271=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6270)));
j4eval[0]=x6271;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6270)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x6271);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
IkReal x6272=((1.0)*sj0);
IkReal x6273=((1.0)*cj0);
IkReal x6274=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x6274;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x6272))+(((-1.0)*r01*sj5*x6273)))))+(IKabs(((((-1.0)*r02*x6273))+(((-1.0)*r12*x6272))))));
j4eval[2]=IKsign(x6274);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x6275=((-1.0)*r20);
IkReal x6277 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6277)==0){
continue;
}
IkReal x6276=pow(x6277,-0.5);
CheckValue<IkReal> x6278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6275),IKFAST_ATAN2_MAGTHRESH);
if(!x6278.valid){
continue;
}
IkReal gconst114=((-1.0)*(x6278.value));
IkReal gconst115=(r21*x6276);
IkReal gconst116=(x6275*x6276);
CheckValue<IkReal> x6279 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6279.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6279.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6280=((-1.0)*r20);
IkReal x6281=x6276;
CheckValue<IkReal> x6283 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6280),IKFAST_ATAN2_MAGTHRESH);
if(!x6283.valid){
continue;
}
IkReal x6282=((-1.0)*(x6283.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6282;
IkReal gconst114=x6282;
IkReal gconst115=(r21*x6281);
IkReal gconst116=(x6280*x6281);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6284=((-1.0)*r20);
IkReal x6285=x6276;
CheckValue<IkReal> x6287 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6284),IKFAST_ATAN2_MAGTHRESH);
if(!x6287.valid){
continue;
}
IkReal x6286=((-1.0)*(x6287.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6286;
IkReal gconst114=x6286;
IkReal gconst115=(r21*x6285);
IkReal gconst116=(x6284*x6285);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x6288=((-1.0)*r20);
IkReal x6289=x6276;
CheckValue<IkReal> x6291 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x6288),IKFAST_ATAN2_MAGTHRESH);
if(!x6291.valid){
continue;
}
IkReal x6290=((-1.0)*(x6291.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst115;
cj5=gconst116;
j5=x6290;
IkReal gconst114=x6290;
IkReal gconst115=(r21*x6289);
IkReal gconst116=(x6288*x6289);
IkReal x6292=((1.0)*(r22*r22));
CheckValue<IkReal> x6296=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x6292))),-1);
if(!x6296.valid){
continue;
}
IkReal x6293=x6296.value;
IkReal x6294=((1.0)*x6293);
IkReal x6295=((((-1.0)*x6294*(r21*r21*r21*r21)))+(((-2.0)*x6293*(r20*r20)*(r21*r21)))+(((-1.0)*x6292))+(((-1.0)*x6294*(r20*r20*r20*r20))));
j4eval[0]=x6295;
j4eval[1]=IKsign(x6295);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6297=(cj2*sj1);
IkReal x6298=(gconst115*r21);
IkReal x6299=(cj1*sj2);
IkReal x6300=((1.0)*gconst116*r20);
CheckValue<IkReal> x6301 = IKatan2WithCheck(IkReal((((r22*x6299))+((r22*x6297)))),IkReal((((x6298*x6299))+(((-1.0)*x6299*x6300))+(((-1.0)*x6297*x6300))+((x6297*x6298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6301.valid){
continue;
}
CheckValue<IkReal> x6302=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6298*x6298)))+(((-1.0)*gconst116*r20*x6300))+(((-1.0)*(r22*r22)))+(((2.0)*gconst116*r20*x6298)))),-1);
if(!x6302.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6301.value)+(((1.5707963267949)*(x6302.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6303=IKsin(j4);
IkReal x6304=IKcos(j4);
IkReal x6305=(sj1*sj2);
IkReal x6306=((1.0)*x6304);
IkReal x6307=((1.0)*cj1*cj2);
IkReal x6308=(gconst115*x6303);
IkReal x6309=(gconst115*x6304);
IkReal x6310=((1.0)*gconst116*x6303);
evalcond[0]=(((r21*x6308))+(((-1.0)*r20*x6310))+(((-1.0)*r22*x6306)));
evalcond[1]=(cj0+(((-1.0)*r12*x6306))+(((-1.0)*r10*x6310))+((r11*x6308)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6306))+((r01*x6308))+(((-1.0)*r00*x6310)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6303))+((r21*x6309))+(((-1.0)*gconst116*r20*x6306)));
evalcond[4]=(((r01*x6309))+((r02*x6303))+((cj0*x6305))+(((-1.0)*gconst116*r00*x6306))+(((-1.0)*cj0*x6307)));
evalcond[5]=(((r11*x6309))+(((-1.0)*sj0*x6307))+((r12*x6303))+(((-1.0)*gconst116*r10*x6306))+((sj0*x6305)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6311=((1.0)*gconst116);
CheckValue<IkReal> x6312=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst115*r10))+(((-1.0)*r11*x6311)))),-1);
if(!x6312.valid){
continue;
}
CheckValue<IkReal> x6313 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst115*r21*sj0))+(((-1.0)*r20*sj0*x6311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6312.value)))+(x6313.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6314=IKsin(j4);
IkReal x6315=IKcos(j4);
IkReal x6316=(sj1*sj2);
IkReal x6317=((1.0)*x6315);
IkReal x6318=((1.0)*cj1*cj2);
IkReal x6319=(gconst115*x6314);
IkReal x6320=(gconst115*x6315);
IkReal x6321=((1.0)*gconst116*x6314);
evalcond[0]=((((-1.0)*r22*x6317))+(((-1.0)*r20*x6321))+((r21*x6319)));
evalcond[1]=(cj0+(((-1.0)*r12*x6317))+((r11*x6319))+(((-1.0)*r10*x6321)));
evalcond[2]=((((-1.0)*r00*x6321))+(((-1.0)*sj0))+(((-1.0)*r02*x6317))+((r01*x6319)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6314))+(((-1.0)*gconst116*r20*x6317))+((r21*x6320)));
evalcond[4]=(((r02*x6314))+((cj0*x6316))+((r01*x6320))+(((-1.0)*gconst116*r00*x6317))+(((-1.0)*cj0*x6318)));
evalcond[5]=(((r11*x6320))+(((-1.0)*sj0*x6318))+(((-1.0)*gconst116*r10*x6317))+((r12*x6314))+((sj0*x6316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6322=((1.0)*gconst116);
CheckValue<IkReal> x6323=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6322))+(((-1.0)*gconst115*r00)))),-1);
if(!x6323.valid){
continue;
}
CheckValue<IkReal> x6324 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6322))+((cj0*gconst115*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6323.value)))+(x6324.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6325=IKsin(j4);
IkReal x6326=IKcos(j4);
IkReal x6327=(sj1*sj2);
IkReal x6328=((1.0)*x6326);
IkReal x6329=((1.0)*cj1*cj2);
IkReal x6330=(gconst115*x6325);
IkReal x6331=(gconst115*x6326);
IkReal x6332=((1.0)*gconst116*x6325);
evalcond[0]=((((-1.0)*r20*x6332))+(((-1.0)*r22*x6328))+((r21*x6330)));
evalcond[1]=(cj0+((r11*x6330))+(((-1.0)*r10*x6332))+(((-1.0)*r12*x6328)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6330))+(((-1.0)*r02*x6328))+(((-1.0)*r00*x6332)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst116*r20*x6328))+((cj1*sj2))+((r21*x6331))+((r22*x6325)));
evalcond[4]=(((r02*x6325))+(((-1.0)*gconst116*r00*x6328))+((cj0*x6327))+(((-1.0)*cj0*x6329))+((r01*x6331)));
evalcond[5]=((((-1.0)*sj0*x6329))+((r12*x6325))+((r11*x6331))+(((-1.0)*gconst116*r10*x6328))+((sj0*x6327)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6333=((-1.0)*r21);
IkReal x6335 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x6335)==0){
continue;
}
IkReal x6334=pow(x6335,-0.5);
CheckValue<IkReal> x6336 = IKatan2WithCheck(IkReal(x6333),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6336.valid){
continue;
}
IkReal gconst117=((3.14159265358979)+(((-1.0)*(x6336.value))));
IkReal gconst118=(x6333*x6334);
IkReal gconst119=((1.0)*r20*x6334);
CheckValue<IkReal> x6337 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6337.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6337.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6338=((-1.0)*r21);
CheckValue<IkReal> x6341 = IKatan2WithCheck(IkReal(x6338),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6341.valid){
continue;
}
IkReal x6339=((1.0)*(x6341.value));
IkReal x6340=x6334;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6339)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6339)));
IkReal gconst118=(x6338*x6340);
IkReal gconst119=((1.0)*r20*x6340);
IkReal x6342=r22*r22;
IkReal x6343=((1.0)*x6342);
CheckValue<IkReal> x6347=IKPowWithIntegerCheck(((-1.0)+x6342),-1);
if(!x6347.valid){
continue;
}
IkReal x6344=x6347.value;
if((((1.0)+(((-1.0)*x6343)))) < -0.00001)
continue;
IkReal x6345=IKsqrt(((1.0)+(((-1.0)*x6343))));
IkReal x6346=(cj0*x6344*x6345);
j4eval[0]=((IKabs((x6346+(((-1.0)*x6343*x6346)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6348=((-1.0)*r21);
CheckValue<IkReal> x6351 = IKatan2WithCheck(IkReal(x6348),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6351.valid){
continue;
}
IkReal x6349=((1.0)*(x6351.value));
IkReal x6350=x6334;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6349)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6349)));
IkReal gconst118=(x6348*x6350);
IkReal gconst119=((1.0)*r20*x6350);
IkReal x6352=r22*r22;
IkReal x6353=((1.0)*x6352);
CheckValue<IkReal> x6357=IKPowWithIntegerCheck(((-1.0)+x6352),-1);
if(!x6357.valid){
continue;
}
IkReal x6354=x6357.value;
if((((1.0)+(((-1.0)*x6353)))) < -0.00001)
continue;
IkReal x6355=IKsqrt(((1.0)+(((-1.0)*x6353))));
IkReal x6356=(sj0*x6354*x6355);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x6356+(((-1.0)*x6353*x6356))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6358=((-1.0)*r21);
CheckValue<IkReal> x6361 = IKatan2WithCheck(IkReal(x6358),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x6361.valid){
continue;
}
IkReal x6359=((1.0)*(x6361.value));
IkReal x6360=x6334;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst118;
cj5=gconst119;
j5=((3.14159265)+(((-1.0)*x6359)));
IkReal gconst117=((3.14159265358979)+(((-1.0)*x6359)));
IkReal gconst118=(x6358*x6360);
IkReal gconst119=((1.0)*r20*x6360);
IkReal x6362=r22*r22;
IkReal x6363=(r12*sj0);
IkReal x6364=(cj0*r02);
CheckValue<IkReal> x6368=IKPowWithIntegerCheck(((-1.0)+x6362),-1);
if(!x6368.valid){
continue;
}
IkReal x6365=x6368.value;
if((((1.0)+(((-1.0)*x6362)))) < -0.00001)
continue;
IkReal x6366=IKsqrt(((1.0)+(((-1.0)*x6362))));
IkReal x6367=(r22*x6365*x6366);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=((IKabs(((((-1.0)*x6364))+(((-1.0)*x6363)))))+(IKabs((((x6363*x6367))+((x6364*x6367))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6369=((1.0)*sj0);
IkReal x6370=((1.0)*gconst118);
CheckValue<IkReal> x6371 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6369)))),IkReal((((gconst119*r10*sj0))+(((-1.0)*gconst118*r11*x6369))+(((-1.0)*cj0*r01*x6370))+((cj0*gconst119*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6371.valid){
continue;
}
CheckValue<IkReal> x6372=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst119*r21))+(((-1.0)*r20*x6370)))),-1);
if(!x6372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6371.value)+(((1.5707963267949)*(x6372.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6373=IKsin(j4);
IkReal x6374=IKcos(j4);
IkReal x6375=(gconst118*r01);
IkReal x6376=(sj1*sj2);
IkReal x6377=(gconst119*r20);
IkReal x6378=(gconst119*r10);
IkReal x6379=(gconst119*r00);
IkReal x6380=(gconst118*r21);
IkReal x6381=(gconst118*r11);
IkReal x6382=((1.0)*x6374);
IkReal x6383=((1.0)*cj1*cj2);
IkReal x6384=((1.0)*x6373);
evalcond[0]=((((-1.0)*x6377*x6384))+(((-1.0)*r22*x6382))+((x6373*x6380)));
evalcond[1]=(cj0+(((-1.0)*x6378*x6384))+(((-1.0)*r12*x6382))+((x6373*x6381)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6379*x6384))+((x6373*x6375))+(((-1.0)*r02*x6382)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6377*x6382))+((r22*x6373))+((x6374*x6380)));
evalcond[4]=((((-1.0)*x6379*x6382))+((x6374*x6375))+(((-1.0)*cj0*x6383))+((cj0*x6376))+((r02*x6373)));
evalcond[5]=((((-1.0)*x6378*x6382))+((r12*x6373))+((sj0*x6376))+(((-1.0)*sj0*x6383))+((x6374*x6381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6385=((1.0)*gconst119);
CheckValue<IkReal> x6386 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6385))+((gconst118*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6386.valid){
continue;
}
CheckValue<IkReal> x6387=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r10))+(((-1.0)*r11*x6385)))),-1);
if(!x6387.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6386.value)+(((1.5707963267949)*(x6387.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6388=IKsin(j4);
IkReal x6389=IKcos(j4);
IkReal x6390=(gconst118*r01);
IkReal x6391=(sj1*sj2);
IkReal x6392=(gconst119*r20);
IkReal x6393=(gconst119*r10);
IkReal x6394=(gconst119*r00);
IkReal x6395=(gconst118*r21);
IkReal x6396=(gconst118*r11);
IkReal x6397=((1.0)*x6389);
IkReal x6398=((1.0)*cj1*cj2);
IkReal x6399=((1.0)*x6388);
evalcond[0]=(((x6388*x6395))+(((-1.0)*r22*x6397))+(((-1.0)*x6392*x6399)));
evalcond[1]=(cj0+((x6388*x6396))+(((-1.0)*r12*x6397))+(((-1.0)*x6393*x6399)));
evalcond[2]=((((-1.0)*sj0))+((x6388*x6390))+(((-1.0)*r02*x6397))+(((-1.0)*x6394*x6399)));
evalcond[3]=(((cj2*sj1))+((r22*x6388))+((cj1*sj2))+(((-1.0)*x6392*x6397))+((x6389*x6395)));
evalcond[4]=(((cj0*x6391))+(((-1.0)*cj0*x6398))+((r02*x6388))+(((-1.0)*x6394*x6397))+((x6389*x6390)));
evalcond[5]=((((-1.0)*sj0*x6398))+((sj0*x6391))+((r12*x6388))+(((-1.0)*x6393*x6397))+((x6389*x6396)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6400=((1.0)*gconst119);
CheckValue<IkReal> x6401=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst118*r00))+(((-1.0)*r01*x6400)))),-1);
if(!x6401.valid){
continue;
}
CheckValue<IkReal> x6402 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst118*r21))+(((-1.0)*cj0*r20*x6400)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6402.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6401.value)))+(x6402.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6403=IKsin(j4);
IkReal x6404=IKcos(j4);
IkReal x6405=(gconst118*r01);
IkReal x6406=(sj1*sj2);
IkReal x6407=(gconst119*r20);
IkReal x6408=(gconst119*r10);
IkReal x6409=(gconst119*r00);
IkReal x6410=(gconst118*r21);
IkReal x6411=(gconst118*r11);
IkReal x6412=((1.0)*x6404);
IkReal x6413=((1.0)*cj1*cj2);
IkReal x6414=((1.0)*x6403);
evalcond[0]=((((-1.0)*x6407*x6414))+(((-1.0)*r22*x6412))+((x6403*x6410)));
evalcond[1]=(cj0+(((-1.0)*x6408*x6414))+(((-1.0)*r12*x6412))+((x6403*x6411)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6412))+(((-1.0)*x6409*x6414))+((x6403*x6405)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6407*x6412))+((cj1*sj2))+((x6404*x6410))+((r22*x6403)));
evalcond[4]=(((r02*x6403))+((x6404*x6405))+((cj0*x6406))+(((-1.0)*x6409*x6412))+(((-1.0)*cj0*x6413)));
evalcond[5]=(((sj0*x6406))+((x6404*x6411))+(((-1.0)*x6408*x6412))+((r12*x6403))+(((-1.0)*sj0*x6413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6415=((-1.0)*r10);
IkReal x6417 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6417)==0){
continue;
}
IkReal x6416=pow(x6417,-0.5);
CheckValue<IkReal> x6418 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6415),IKFAST_ATAN2_MAGTHRESH);
if(!x6418.valid){
continue;
}
IkReal gconst120=((-1.0)*(x6418.value));
IkReal gconst121=(r11*x6416);
IkReal gconst122=(x6415*x6416);
CheckValue<IkReal> x6419 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6419.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6419.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6420=((-1.0)*r10);
IkReal x6421=x6416;
CheckValue<IkReal> x6423 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x6420),IKFAST_ATAN2_MAGTHRESH);
if(!x6423.valid){
continue;
}
IkReal x6422=((-1.0)*(x6423.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst121;
cj5=gconst122;
j5=x6422;
IkReal gconst120=x6422;
IkReal gconst121=(r11*x6421);
IkReal gconst122=(x6420*x6421);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6424=((1.0)*sj0);
IkReal x6425=((1.0)*gconst121);
CheckValue<IkReal> x6426=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst122*r21))+(((-1.0)*r20*x6425)))),-1);
if(!x6426.valid){
continue;
}
CheckValue<IkReal> x6427 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6424)))),IkReal((((cj0*gconst122*r00))+(((-1.0)*gconst121*r11*x6424))+(((-1.0)*cj0*r01*x6425))+((gconst122*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6426.value)))+(x6427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6428=IKsin(j4);
IkReal x6429=IKcos(j4);
IkReal x6430=(gconst121*r11);
IkReal x6431=(sj1*sj2);
IkReal x6432=(gconst122*r00);
IkReal x6433=(gconst122*r10);
IkReal x6434=(gconst122*r20);
IkReal x6435=((1.0)*x6429);
IkReal x6436=((1.0)*cj1*cj2);
IkReal x6437=((1.0)*x6428);
IkReal x6438=(gconst121*x6428);
IkReal x6439=(gconst121*x6429);
evalcond[0]=((((-1.0)*x6434*x6437))+(((-1.0)*r22*x6435))+((r21*x6438)));
evalcond[1]=(cj0+(((-1.0)*r12*x6435))+(((-1.0)*x6433*x6437))+((x6428*x6430)));
evalcond[2]=(((r01*x6438))+(((-1.0)*sj0))+(((-1.0)*r02*x6435))+(((-1.0)*x6432*x6437)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6434*x6435))+((r21*x6439))+((r22*x6428)));
evalcond[4]=(((r01*x6439))+((cj0*x6431))+((r02*x6428))+(((-1.0)*x6432*x6435))+(((-1.0)*cj0*x6436)));
evalcond[5]=(((x6429*x6430))+(((-1.0)*sj0*x6436))+(((-1.0)*x6433*x6435))+((r12*x6428))+((sj0*x6431)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6440=((1.0)*gconst122);
CheckValue<IkReal> x6441 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6440))+((cj0*gconst121*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6441.valid){
continue;
}
CheckValue<IkReal> x6442=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6440))+(((-1.0)*gconst121*r00)))),-1);
if(!x6442.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6441.value)+(((1.5707963267949)*(x6442.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6443=IKsin(j4);
IkReal x6444=IKcos(j4);
IkReal x6445=(gconst121*r11);
IkReal x6446=(sj1*sj2);
IkReal x6447=(gconst122*r00);
IkReal x6448=(gconst122*r10);
IkReal x6449=(gconst122*r20);
IkReal x6450=((1.0)*x6444);
IkReal x6451=((1.0)*cj1*cj2);
IkReal x6452=((1.0)*x6443);
IkReal x6453=(gconst121*x6443);
IkReal x6454=(gconst121*x6444);
evalcond[0]=((((-1.0)*x6449*x6452))+((r21*x6453))+(((-1.0)*r22*x6450)));
evalcond[1]=(cj0+((x6443*x6445))+(((-1.0)*x6448*x6452))+(((-1.0)*r12*x6450)));
evalcond[2]=((((-1.0)*sj0))+((r01*x6453))+(((-1.0)*r02*x6450))+(((-1.0)*x6447*x6452)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6449*x6450))+((cj1*sj2))+((r21*x6454))+((r22*x6443)));
evalcond[4]=(((r01*x6454))+(((-1.0)*x6447*x6450))+((cj0*x6446))+(((-1.0)*cj0*x6451))+((r02*x6443)));
evalcond[5]=(((r12*x6443))+(((-1.0)*sj0*x6451))+((sj0*x6446))+((x6444*x6445))+(((-1.0)*x6448*x6450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6455=((-1.0)*r11);
IkReal x6457 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x6457)==0){
continue;
}
IkReal x6456=pow(x6457,-0.5);
CheckValue<IkReal> x6458 = IKatan2WithCheck(IkReal(x6455),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6458.valid){
continue;
}
IkReal gconst123=((3.14159265358979)+(((-1.0)*(x6458.value))));
IkReal gconst124=(x6455*x6456);
IkReal gconst125=((1.0)*r10*x6456);
CheckValue<IkReal> x6459 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6459.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6459.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6460=((-1.0)*r11);
CheckValue<IkReal> x6463 = IKatan2WithCheck(IkReal(x6460),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6463.valid){
continue;
}
IkReal x6461=((1.0)*(x6463.value));
IkReal x6462=x6456;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6461)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6461)));
IkReal gconst124=(x6460*x6462);
IkReal gconst125=((1.0)*r10*x6462);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6464=((-1.0)*r11);
CheckValue<IkReal> x6467 = IKatan2WithCheck(IkReal(x6464),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6467.valid){
continue;
}
IkReal x6465=((1.0)*(x6467.value));
IkReal x6466=x6456;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6465)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6465)));
IkReal gconst124=(x6464*x6466);
IkReal gconst125=((1.0)*r10*x6466);
IkReal x6468=r12*r12;
IkReal x6469=((1.0)*sj0);
IkReal x6470=(cj0*r02);
IkReal x6471=x6456;
j4eval[0]=((IKabs(((((-1.0)*r12*x6469))+(((-1.0)*x6470)))))+(IKabs((((r12*x6470*x6471))+(((-1.0)*x6469*x6471))+((sj0*x6468*x6471))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6472=((-1.0)*r11);
CheckValue<IkReal> x6475 = IKatan2WithCheck(IkReal(x6472),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x6475.valid){
continue;
}
IkReal x6473=((1.0)*(x6475.value));
IkReal x6474=x6456;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst124;
cj5=gconst125;
j5=((3.14159265)+(((-1.0)*x6473)));
IkReal gconst123=((3.14159265358979)+(((-1.0)*x6473)));
IkReal gconst124=(x6472*x6474);
IkReal gconst125=((1.0)*r10*x6474);
IkReal x6476=r12*r12;
IkReal x6477=((1.0)+(((-1.0)*x6476)));
IkReal x6478=(cj2*r22*sj1);
IkReal x6479=(cj1*r22*sj2);
CheckValue<IkReal> x6486=IKPowWithIntegerCheck(x6477,-1);
if(!x6486.valid){
continue;
}
IkReal x6480=x6486.value;
CheckValue<IkReal> x6487=IKPowWithIntegerCheck(((-1.0)+x6476),-1);
if(!x6487.valid){
continue;
}
IkReal x6481=x6487.value;
IkReal x6482=((1.0)*x6480);
if((x6477) < -0.00001)
continue;
IkReal x6483=IKsqrt(x6477);
IkReal x6484=((1.0)*r12*x6481*x6483);
IkReal x6485=((((-1.0)*x6482*(r11*r11)*(r21*r21)))+(((-1.0)*x6482*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x6480))+(((-1.0)*(r22*r22))));
j4eval[0]=x6485;
j4eval[1]=IKsign(x6485);
j4eval[2]=((IKabs(((((-1.0)*x6478*x6484))+(((-1.0)*x6479*x6484)))))+(IKabs((x6479+x6478))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6488=(gconst124*r21);
IkReal x6489=(cj1*sj2);
IkReal x6490=(cj2*sj1);
IkReal x6491=(gconst125*r20);
CheckValue<IkReal> x6492 = IKatan2WithCheck(IkReal((((r22*x6489))+((r22*x6490)))),IkReal((((x6488*x6489))+(((-1.0)*x6489*x6491))+((x6488*x6490))+(((-1.0)*x6490*x6491)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6492.valid){
continue;
}
CheckValue<IkReal> x6493=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x6491*x6491)))+(((2.0)*x6488*x6491))+(((-1.0)*(x6488*x6488)))+(((-1.0)*(r22*r22))))),-1);
if(!x6493.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6492.value)+(((1.5707963267949)*(x6493.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6494=IKsin(j4);
IkReal x6495=IKcos(j4);
IkReal x6496=(sj1*sj2);
IkReal x6497=(gconst125*r20);
IkReal x6498=(gconst124*r01);
IkReal x6499=(gconst125*r00);
IkReal x6500=(gconst125*r10);
IkReal x6501=((1.0)*x6495);
IkReal x6502=((1.0)*cj1*cj2);
IkReal x6503=((1.0)*x6494);
IkReal x6504=(gconst124*x6494);
IkReal x6505=(gconst124*x6495);
evalcond[0]=(((r21*x6504))+(((-1.0)*x6497*x6503))+(((-1.0)*r22*x6501)));
evalcond[1]=((((-1.0)*r12*x6501))+cj0+(((-1.0)*x6500*x6503))+((r11*x6504)));
evalcond[2]=((((-1.0)*sj0))+((x6494*x6498))+(((-1.0)*r02*x6501))+(((-1.0)*x6499*x6503)));
evalcond[3]=(((cj2*sj1))+((r21*x6505))+((cj1*sj2))+(((-1.0)*x6497*x6501))+((r22*x6494)));
evalcond[4]=(((cj0*x6496))+((r02*x6494))+((x6495*x6498))+(((-1.0)*cj0*x6502))+(((-1.0)*x6499*x6501)));
evalcond[5]=((((-1.0)*x6500*x6501))+((r12*x6494))+(((-1.0)*sj0*x6502))+((sj0*x6496))+((r11*x6505)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6506=((1.0)*sj0);
IkReal x6507=((1.0)*cj0);
CheckValue<IkReal> x6508=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r20))+(((-1.0)*gconst125*r21)))),-1);
if(!x6508.valid){
continue;
}
CheckValue<IkReal> x6509 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6506))+(((-1.0)*r02*x6507)))),IkReal((((gconst125*r10*sj0))+(((-1.0)*gconst124*r01*x6507))+((cj0*gconst125*r00))+(((-1.0)*gconst124*r11*x6506)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6509.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6508.value)))+(x6509.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6510=IKsin(j4);
IkReal x6511=IKcos(j4);
IkReal x6512=(sj1*sj2);
IkReal x6513=(gconst125*r20);
IkReal x6514=(gconst124*r01);
IkReal x6515=(gconst125*r00);
IkReal x6516=(gconst125*r10);
IkReal x6517=((1.0)*x6511);
IkReal x6518=((1.0)*cj1*cj2);
IkReal x6519=((1.0)*x6510);
IkReal x6520=(gconst124*x6510);
IkReal x6521=(gconst124*x6511);
evalcond[0]=((((-1.0)*r22*x6517))+((r21*x6520))+(((-1.0)*x6513*x6519)));
evalcond[1]=((((-1.0)*x6516*x6519))+cj0+(((-1.0)*r12*x6517))+((r11*x6520)));
evalcond[2]=((((-1.0)*r02*x6517))+(((-1.0)*sj0))+((x6510*x6514))+(((-1.0)*x6515*x6519)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6521))+(((-1.0)*x6513*x6517))+((r22*x6510)));
evalcond[4]=((((-1.0)*cj0*x6518))+((cj0*x6512))+((x6511*x6514))+(((-1.0)*x6515*x6517))+((r02*x6510)));
evalcond[5]=((((-1.0)*x6516*x6517))+((r12*x6510))+((sj0*x6512))+((r11*x6521))+(((-1.0)*sj0*x6518)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6522=((1.0)*gconst125);
CheckValue<IkReal> x6523 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6522))+((cj0*gconst124*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6523.valid){
continue;
}
CheckValue<IkReal> x6524=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst124*r00))+(((-1.0)*r01*x6522)))),-1);
if(!x6524.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6523.value)+(((1.5707963267949)*(x6524.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6525=IKsin(j4);
IkReal x6526=IKcos(j4);
IkReal x6527=(sj1*sj2);
IkReal x6528=(gconst125*r20);
IkReal x6529=(gconst124*r01);
IkReal x6530=(gconst125*r00);
IkReal x6531=(gconst125*r10);
IkReal x6532=((1.0)*x6526);
IkReal x6533=((1.0)*cj1*cj2);
IkReal x6534=((1.0)*x6525);
IkReal x6535=(gconst124*x6525);
IkReal x6536=(gconst124*x6526);
evalcond[0]=(((r21*x6535))+(((-1.0)*r22*x6532))+(((-1.0)*x6528*x6534)));
evalcond[1]=(cj0+(((-1.0)*r12*x6532))+(((-1.0)*x6531*x6534))+((r11*x6535)));
evalcond[2]=((((-1.0)*sj0))+((x6525*x6529))+(((-1.0)*r02*x6532))+(((-1.0)*x6530*x6534)));
evalcond[3]=(((cj2*sj1))+((r21*x6536))+((cj1*sj2))+(((-1.0)*x6528*x6532))+((r22*x6525)));
evalcond[4]=((((-1.0)*cj0*x6533))+((r02*x6525))+((cj0*x6527))+(((-1.0)*x6530*x6532))+((x6526*x6529)));
evalcond[5]=((((-1.0)*sj0*x6533))+((r12*x6525))+((sj0*x6527))+(((-1.0)*x6531*x6532))+((r11*x6536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6537=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6537;
j4eval[1]=IKsign(x6537);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6538=((1.0)*cj5);
IkReal x6539=((((-1.0)*r01*x6538))+(((-1.0)*r00*sj5)));
j4eval[0]=x6539;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6538)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6539);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal x6540=cj5*cj5;
IkReal x6541=r11*r11;
IkReal x6542=(cj5*r10);
IkReal x6543=(r11*sj5);
IkReal x6544=((((2.0)*x6542*x6543))+((x6540*x6541))+(((-1.0)*x6540*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x6541)));
j4eval[0]=x6544;
j4eval[1]=IKsign(x6544);
j4eval[2]=((IKabs(r12))+(IKabs((x6543+(((-1.0)*x6542))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6545=cj5*cj5;
IkReal x6546=r11*r11;
IkReal x6547=(cj5*r10);
IkReal x6548=(r11*sj5);
CheckValue<IkReal> x6549 = IKatan2WithCheck(IkReal((x6548+(((-1.0)*x6547)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6549.valid){
continue;
}
CheckValue<IkReal> x6550=IKPowWithIntegerCheck(IKsign((((x6545*x6546))+(((2.0)*x6547*x6548))+(((-1.0)*(r12*r12)))+(((-1.0)*x6545*(r10*r10)))+(((-1.0)*x6546)))),-1);
if(!x6550.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6549.value)+(((1.5707963267949)*(x6550.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6551=IKcos(j4);
IkReal x6552=IKsin(j4);
IkReal x6553=(cj5*r00);
IkReal x6554=(cj5*r10);
IkReal x6555=(r21*sj5);
IkReal x6556=(cj5*r20);
IkReal x6557=((1.0)*x6551);
IkReal x6558=((1.0)*x6552);
IkReal x6559=(sj5*x6552);
IkReal x6560=(sj5*x6551);
evalcond[0]=(((r11*x6560))+(((-1.0)*x6554*x6557))+((r12*x6552)));
evalcond[1]=(((x6552*x6555))+(((-1.0)*r22*x6557))+(((-1.0)*x6556*x6558)));
evalcond[2]=((((-1.0)*x6553*x6558))+(((-1.0)*r02*x6557))+((r01*x6559)));
evalcond[3]=((1.0)+(((-1.0)*r12*x6557))+(((-1.0)*x6554*x6558))+((r11*x6559)));
evalcond[4]=(((cj2*sj1))+((x6551*x6555))+((cj1*sj2))+((r22*x6552))+(((-1.0)*x6556*x6557)));
evalcond[5]=((((-1.0)*x6553*x6557))+((r02*x6552))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x6560)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6561=((1.0)*cj5);
CheckValue<IkReal> x6562=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6561)))),-1);
if(!x6562.valid){
continue;
}
CheckValue<IkReal> x6563 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x6561)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6563.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6562.value)))+(x6563.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6564=IKcos(j4);
IkReal x6565=IKsin(j4);
IkReal x6566=(cj5*r00);
IkReal x6567=(cj5*r10);
IkReal x6568=(r21*sj5);
IkReal x6569=(cj5*r20);
IkReal x6570=((1.0)*x6564);
IkReal x6571=((1.0)*x6565);
IkReal x6572=(sj5*x6565);
IkReal x6573=(sj5*x6564);
evalcond[0]=((((-1.0)*x6567*x6570))+((r12*x6565))+((r11*x6573)));
evalcond[1]=((((-1.0)*r22*x6570))+((x6565*x6568))+(((-1.0)*x6569*x6571)));
evalcond[2]=(((r01*x6572))+(((-1.0)*x6566*x6571))+(((-1.0)*r02*x6570)));
evalcond[3]=((1.0)+(((-1.0)*x6567*x6571))+((r11*x6572))+(((-1.0)*r12*x6570)));
evalcond[4]=(((cj2*sj1))+((r22*x6565))+((x6564*x6568))+((cj1*sj2))+(((-1.0)*x6569*x6570)));
evalcond[5]=(((r01*x6573))+(((-1.0)*x6566*x6570))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x6565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6574=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6574.valid){
continue;
}
CheckValue<IkReal> x6575 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6575.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6574.value)))+(x6575.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6576=IKcos(j4);
IkReal x6577=IKsin(j4);
IkReal x6578=(cj5*r00);
IkReal x6579=(cj5*r10);
IkReal x6580=(r21*sj5);
IkReal x6581=(cj5*r20);
IkReal x6582=((1.0)*x6576);
IkReal x6583=((1.0)*x6577);
IkReal x6584=(sj5*x6577);
IkReal x6585=(sj5*x6576);
evalcond[0]=(((r11*x6585))+((r12*x6577))+(((-1.0)*x6579*x6582)));
evalcond[1]=((((-1.0)*x6581*x6583))+(((-1.0)*r22*x6582))+((x6577*x6580)));
evalcond[2]=((((-1.0)*r02*x6582))+((r01*x6584))+(((-1.0)*x6578*x6583)));
evalcond[3]=((1.0)+((r11*x6584))+(((-1.0)*r12*x6582))+(((-1.0)*x6579*x6583)));
evalcond[4]=(((r22*x6577))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6581*x6582))+((x6576*x6580)));
evalcond[5]=(((r01*x6585))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6578*x6582))+((r02*x6577)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6586=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x6586;
j4eval[1]=IKsign(x6586);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6587=((1.0)*cj5);
IkReal x6588=((((-1.0)*r21*x6587))+(((-1.0)*r20*sj5)));
j4eval[0]=x6588;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x6587))+((r01*sj5))))));
j4eval[2]=IKsign(x6588);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x6589=cj5*cj5;
IkReal x6590=r11*r11;
IkReal x6591=(r11*sj5);
IkReal x6592=(cj5*r10);
IkReal x6593=((r12*r12)+x6590+(((-1.0)*x6589*x6590))+((x6589*(r10*r10)))+(((-2.0)*x6591*x6592)));
j4eval[0]=x6593;
j4eval[1]=IKsign(x6593);
j4eval[2]=((IKabs(r12))+(IKabs((x6591+(((-1.0)*x6592))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6594=cj5*cj5;
IkReal x6595=r11*r11;
IkReal x6596=(cj5*r10);
IkReal x6597=(r11*sj5);
CheckValue<IkReal> x6598=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x6594*(r10*r10)))+(((-1.0)*x6594*x6595))+x6595+(((-2.0)*x6596*x6597)))),-1);
if(!x6598.valid){
continue;
}
CheckValue<IkReal> x6599 = IKatan2WithCheck(IkReal((x6597+(((-1.0)*x6596)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x6599.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6598.value)))+(x6599.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6600=IKcos(j4);
IkReal x6601=IKsin(j4);
IkReal x6602=(cj5*r00);
IkReal x6603=(cj5*r10);
IkReal x6604=(r21*sj5);
IkReal x6605=(cj5*r20);
IkReal x6606=((1.0)*x6600);
IkReal x6607=((1.0)*x6601);
IkReal x6608=(sj5*x6601);
IkReal x6609=(sj5*x6600);
evalcond[0]=((((-1.0)*x6603*x6606))+((r11*x6609))+((r12*x6601)));
evalcond[1]=((((-1.0)*r22*x6606))+((x6601*x6604))+(((-1.0)*x6605*x6607)));
evalcond[2]=(((r01*x6608))+(((-1.0)*r02*x6606))+(((-1.0)*x6602*x6607)));
evalcond[3]=((-1.0)+(((-1.0)*x6603*x6607))+(((-1.0)*r12*x6606))+((r11*x6608)));
evalcond[4]=(((cj2*sj1))+((r22*x6601))+((cj1*sj2))+((x6600*x6604))+(((-1.0)*x6605*x6606)));
evalcond[5]=(((r01*x6609))+(((-1.0)*sj1*sj2))+(((-1.0)*x6602*x6606))+((r02*x6601))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6610=((1.0)*cj5);
CheckValue<IkReal> x6611 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x6610)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6611.valid){
continue;
}
CheckValue<IkReal> x6612=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6610))+(((-1.0)*r20*sj5)))),-1);
if(!x6612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6611.value)+(((1.5707963267949)*(x6612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6613=IKcos(j4);
IkReal x6614=IKsin(j4);
IkReal x6615=(cj5*r00);
IkReal x6616=(cj5*r10);
IkReal x6617=(r21*sj5);
IkReal x6618=(cj5*r20);
IkReal x6619=((1.0)*x6613);
IkReal x6620=((1.0)*x6614);
IkReal x6621=(sj5*x6614);
IkReal x6622=(sj5*x6613);
evalcond[0]=(((r12*x6614))+(((-1.0)*x6616*x6619))+((r11*x6622)));
evalcond[1]=((((-1.0)*x6618*x6620))+(((-1.0)*r22*x6619))+((x6614*x6617)));
evalcond[2]=(((r01*x6621))+(((-1.0)*r02*x6619))+(((-1.0)*x6615*x6620)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x6619))+(((-1.0)*x6616*x6620))+((r11*x6621)));
evalcond[4]=(((cj2*sj1))+((x6613*x6617))+(((-1.0)*x6618*x6619))+((cj1*sj2))+((r22*x6614)));
evalcond[5]=(((r02*x6614))+((r01*x6622))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x6615*x6619)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6623 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6623.valid){
continue;
}
CheckValue<IkReal> x6624=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x6624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6623.value)+(((1.5707963267949)*(x6624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6625=IKcos(j4);
IkReal x6626=IKsin(j4);
IkReal x6627=(cj5*r00);
IkReal x6628=(cj5*r10);
IkReal x6629=(r21*sj5);
IkReal x6630=(cj5*r20);
IkReal x6631=((1.0)*x6625);
IkReal x6632=((1.0)*x6626);
IkReal x6633=(sj5*x6626);
IkReal x6634=(sj5*x6625);
evalcond[0]=((((-1.0)*x6628*x6631))+((r12*x6626))+((r11*x6634)));
evalcond[1]=(((x6626*x6629))+(((-1.0)*r22*x6631))+(((-1.0)*x6630*x6632)));
evalcond[2]=(((r01*x6633))+(((-1.0)*r02*x6631))+(((-1.0)*x6627*x6632)));
evalcond[3]=((-1.0)+(((-1.0)*x6628*x6632))+((r11*x6633))+(((-1.0)*r12*x6631)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6630*x6631))+((r22*x6626))+((x6625*x6629)));
evalcond[5]=(((r02*x6626))+(((-1.0)*sj1*sj2))+((r01*x6634))+((cj1*cj2))+(((-1.0)*x6627*x6631)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6635=((-1.0)*r00);
IkReal x6637 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6637)==0){
continue;
}
IkReal x6636=pow(x6637,-0.5);
CheckValue<IkReal> x6638 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6635),IKFAST_ATAN2_MAGTHRESH);
if(!x6638.valid){
continue;
}
IkReal gconst126=((-1.0)*(x6638.value));
IkReal gconst127=(r01*x6636);
IkReal gconst128=(x6635*x6636);
CheckValue<IkReal> x6639 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6639.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x6639.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x6640=((-1.0)*r00);
IkReal x6641=x6636;
CheckValue<IkReal> x6643 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x6640),IKFAST_ATAN2_MAGTHRESH);
if(!x6643.valid){
continue;
}
IkReal x6642=((-1.0)*(x6643.value));
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst127;
cj5=gconst128;
j5=x6642;
IkReal gconst126=x6642;
IkReal gconst127=(r01*x6641);
IkReal gconst128=(x6640*x6641);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6644=((1.0)*sj0);
IkReal x6645=((1.0)*gconst127);
CheckValue<IkReal> x6646=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst128*r21))+(((-1.0)*r20*x6645)))),-1);
if(!x6646.valid){
continue;
}
CheckValue<IkReal> x6647 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6644)))),IkReal((((gconst128*r10*sj0))+(((-1.0)*gconst127*r11*x6644))+((cj0*gconst128*r00))+(((-1.0)*cj0*r01*x6645)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6647.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6646.value)))+(x6647.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6648=IKsin(j4);
IkReal x6649=IKcos(j4);
IkReal x6650=(gconst127*r01);
IkReal x6651=(sj1*sj2);
IkReal x6652=(gconst128*r10);
IkReal x6653=(gconst128*r00);
IkReal x6654=(gconst128*r20);
IkReal x6655=((1.0)*x6649);
IkReal x6656=((1.0)*cj1*cj2);
IkReal x6657=((1.0)*x6648);
IkReal x6658=(gconst127*x6649);
IkReal x6659=(gconst127*x6648);
evalcond[0]=((((-1.0)*r22*x6655))+(((-1.0)*x6654*x6657))+((r21*x6659)));
evalcond[1]=((((-1.0)*x6652*x6657))+cj0+((r11*x6659))+(((-1.0)*r12*x6655)));
evalcond[2]=((((-1.0)*x6653*x6657))+(((-1.0)*sj0))+(((-1.0)*r02*x6655))+((x6648*x6650)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6648))+(((-1.0)*x6654*x6655))+((r21*x6658)));
evalcond[4]=((((-1.0)*x6653*x6655))+(((-1.0)*cj0*x6656))+((x6649*x6650))+((r02*x6648))+((cj0*x6651)));
evalcond[5]=((((-1.0)*x6652*x6655))+((r11*x6658))+(((-1.0)*sj0*x6656))+((sj0*x6651))+((r12*x6648)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6660=((1.0)*gconst128);
CheckValue<IkReal> x6661 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6660))+((gconst127*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6661.valid){
continue;
}
CheckValue<IkReal> x6662=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6660))+(((-1.0)*gconst127*r10)))),-1);
if(!x6662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6661.value)+(((1.5707963267949)*(x6662.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6663=IKsin(j4);
IkReal x6664=IKcos(j4);
IkReal x6665=(gconst127*r01);
IkReal x6666=(sj1*sj2);
IkReal x6667=(gconst128*r10);
IkReal x6668=(gconst128*r00);
IkReal x6669=(gconst128*r20);
IkReal x6670=((1.0)*x6664);
IkReal x6671=((1.0)*cj1*cj2);
IkReal x6672=((1.0)*x6663);
IkReal x6673=(gconst127*x6664);
IkReal x6674=(gconst127*x6663);
evalcond[0]=((((-1.0)*x6669*x6672))+(((-1.0)*r22*x6670))+((r21*x6674)));
evalcond[1]=(((r11*x6674))+cj0+(((-1.0)*r12*x6670))+(((-1.0)*x6667*x6672)));
evalcond[2]=((((-1.0)*r02*x6670))+(((-1.0)*sj0))+(((-1.0)*x6668*x6672))+((x6663*x6665)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6669*x6670))+((cj1*sj2))+((r22*x6663))+((r21*x6673)));
evalcond[4]=(((x6664*x6665))+(((-1.0)*x6668*x6670))+((r02*x6663))+((cj0*x6666))+(((-1.0)*cj0*x6671)));
evalcond[5]=(((r11*x6673))+((r12*x6663))+((sj0*x6666))+(((-1.0)*sj0*x6671))+(((-1.0)*x6667*x6670)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x6675=((-1.0)*r01);
IkReal x6677 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x6677)==0){
continue;
}
IkReal x6676=pow(x6677,-0.5);
CheckValue<IkReal> x6678 = IKatan2WithCheck(IkReal(x6675),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6678.valid){
continue;
}
IkReal gconst129=((3.14159265358979)+(((-1.0)*(x6678.value))));
IkReal gconst130=(x6675*x6676);
IkReal gconst131=((1.0)*r00*x6676);
CheckValue<IkReal> x6679 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6679.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x6679.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x6680=((-1.0)*r01);
CheckValue<IkReal> x6683 = IKatan2WithCheck(IkReal(x6680),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6683.valid){
continue;
}
IkReal x6681=((1.0)*(x6683.value));
IkReal x6682=x6676;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6681)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6681)));
IkReal gconst130=(x6680*x6682);
IkReal gconst131=((1.0)*r00*x6682);
j4eval[0]=0;
j4eval[1]=cj0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[4]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x6684=((-1.0)*r01);
CheckValue<IkReal> x6687 = IKatan2WithCheck(IkReal(x6684),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6687.valid){
continue;
}
IkReal x6685=((1.0)*(x6687.value));
IkReal x6686=x6676;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6685)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6685)));
IkReal gconst130=(x6684*x6686);
IkReal gconst131=((1.0)*r00*x6686);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6688=((-1.0)*r01);
CheckValue<IkReal> x6691 = IKatan2WithCheck(IkReal(x6688),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x6691.valid){
continue;
}
IkReal x6689=((1.0)*(x6691.value));
IkReal x6690=x6676;
sj3=0;
cj3=1.0;
j3=0;
sj5=gconst130;
cj5=gconst131;
j5=((3.14159265)+(((-1.0)*x6689)));
IkReal gconst129=((3.14159265358979)+(((-1.0)*x6689)));
IkReal gconst130=(x6688*x6690);
IkReal gconst131=((1.0)*r00*x6690);
IkReal x6692=r02*r02;
IkReal x6693=(r12*sj0);
IkReal x6694=((1.0)*cj0);
IkReal x6695=x6676;
j4eval[0]=((IKabs(((((-1.0)*x6693))+(((-1.0)*r02*x6694)))))+(IKabs(((((-1.0)*x6694*x6695))+((cj0*x6692*x6695))+((r02*x6693*x6695))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6696=((1.0)*sj0);
IkReal x6697=((1.0)*gconst130);
CheckValue<IkReal> x6698 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x6696)))),IkReal(((((-1.0)*gconst130*r11*x6696))+((gconst131*r10*sj0))+(((-1.0)*cj0*r01*x6697))+((cj0*gconst131*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6698.valid){
continue;
}
CheckValue<IkReal> x6699=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x6697))+(((-1.0)*gconst131*r21)))),-1);
if(!x6699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6698.value)+(((1.5707963267949)*(x6699.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6700=IKsin(j4);
IkReal x6701=IKcos(j4);
IkReal x6702=(gconst131*r10);
IkReal x6703=(sj1*sj2);
IkReal x6704=(gconst131*r20);
IkReal x6705=(gconst131*r00);
IkReal x6706=((1.0)*x6701);
IkReal x6707=((1.0)*cj1*cj2);
IkReal x6708=(gconst130*x6700);
IkReal x6709=((1.0)*x6700);
IkReal x6710=(gconst130*x6701);
evalcond[0]=(((r21*x6708))+(((-1.0)*r22*x6706))+(((-1.0)*x6704*x6709)));
evalcond[1]=(cj0+(((-1.0)*x6702*x6709))+((r11*x6708))+(((-1.0)*r12*x6706)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6705*x6709))+(((-1.0)*r02*x6706))+((r01*x6708)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x6710))+(((-1.0)*x6704*x6706))+((r22*x6700)));
evalcond[4]=((((-1.0)*cj0*x6707))+(((-1.0)*x6705*x6706))+((cj0*x6703))+((r01*x6710))+((r02*x6700)));
evalcond[5]=(((r11*x6710))+(((-1.0)*x6702*x6706))+((sj0*x6703))+((r12*x6700))+(((-1.0)*sj0*x6707)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6711=((1.0)*gconst131);
CheckValue<IkReal> x6712=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6711))+(((-1.0)*gconst130*r10)))),-1);
if(!x6712.valid){
continue;
}
CheckValue<IkReal> x6713 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6711))+((gconst130*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6713.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6712.value)))+(x6713.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6714=IKsin(j4);
IkReal x6715=IKcos(j4);
IkReal x6716=(gconst131*r10);
IkReal x6717=(sj1*sj2);
IkReal x6718=(gconst131*r20);
IkReal x6719=(gconst131*r00);
IkReal x6720=((1.0)*x6715);
IkReal x6721=((1.0)*cj1*cj2);
IkReal x6722=(gconst130*x6714);
IkReal x6723=((1.0)*x6714);
IkReal x6724=(gconst130*x6715);
evalcond[0]=((((-1.0)*r22*x6720))+(((-1.0)*x6718*x6723))+((r21*x6722)));
evalcond[1]=(((r11*x6722))+cj0+(((-1.0)*r12*x6720))+(((-1.0)*x6716*x6723)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6719*x6723))+(((-1.0)*r02*x6720))+((r01*x6722)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6718*x6720))+((cj1*sj2))+((r22*x6714))+((r21*x6724)));
evalcond[4]=(((cj0*x6717))+(((-1.0)*x6719*x6720))+((r02*x6714))+(((-1.0)*cj0*x6721))+((r01*x6724)));
evalcond[5]=(((r11*x6724))+(((-1.0)*sj0*x6721))+(((-1.0)*x6716*x6720))+((sj0*x6717))+((r12*x6714)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6725=((1.0)*gconst131);
CheckValue<IkReal> x6726 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst130*r21))+(((-1.0)*cj0*r20*x6725)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6726.valid){
continue;
}
CheckValue<IkReal> x6727=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst130*r00))+(((-1.0)*r01*x6725)))),-1);
if(!x6727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6726.value)+(((1.5707963267949)*(x6727.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6728=IKsin(j4);
IkReal x6729=IKcos(j4);
IkReal x6730=(gconst131*r10);
IkReal x6731=(sj1*sj2);
IkReal x6732=(gconst131*r20);
IkReal x6733=(gconst131*r00);
IkReal x6734=((1.0)*x6729);
IkReal x6735=((1.0)*cj1*cj2);
IkReal x6736=(gconst130*x6728);
IkReal x6737=((1.0)*x6728);
IkReal x6738=(gconst130*x6729);
evalcond[0]=(((r21*x6736))+(((-1.0)*r22*x6734))+(((-1.0)*x6732*x6737)));
evalcond[1]=((((-1.0)*x6730*x6737))+cj0+(((-1.0)*r12*x6734))+((r11*x6736)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6733*x6737))+(((-1.0)*r02*x6734))+((r01*x6736)));
evalcond[3]=(((cj2*sj1))+((r21*x6738))+((cj1*sj2))+((r22*x6728))+(((-1.0)*x6732*x6734)));
evalcond[4]=((((-1.0)*cj0*x6735))+(((-1.0)*x6733*x6734))+((r02*x6728))+((r01*x6738))+((cj0*x6731)));
evalcond[5]=((((-1.0)*x6730*x6734))+((r12*x6728))+((sj0*x6731))+((r11*x6738))+(((-1.0)*sj0*x6735)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6739=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x6739;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x6739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6740=((1.0)*cj5);
IkReal x6741=((((-1.0)*r11*x6740))+(((-1.0)*r10*sj5)));
j4eval[0]=x6741;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x6740)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x6742=cj5*cj5;
IkReal x6743=r01*r01;
IkReal x6744=(cj5*r00);
IkReal x6745=(r01*sj5);
IkReal x6746=((((-1.0)*x6742*x6743))+x6743+((x6742*(r00*r00)))+(r02*r02)+(((-2.0)*x6744*x6745)));
j4eval[0]=x6746;
j4eval[1]=IKsign(x6746);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x6744))+x6745))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6747=cj5*cj5;
IkReal x6748=r01*r01;
IkReal x6749=(r01*sj5);
IkReal x6750=(cj5*r00);
CheckValue<IkReal> x6751 = IKatan2WithCheck(IkReal(((((-1.0)*x6750))+x6749)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x6751.valid){
continue;
}
CheckValue<IkReal> x6752=IKPowWithIntegerCheck(IKsign((x6748+(((-2.0)*x6749*x6750))+(((-1.0)*x6747*x6748))+(r02*r02)+((x6747*(r00*r00))))),-1);
if(!x6752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6751.value)+(((1.5707963267949)*(x6752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6753=IKcos(j4);
IkReal x6754=IKsin(j4);
IkReal x6755=(cj5*r00);
IkReal x6756=(cj5*r10);
IkReal x6757=(r21*sj5);
IkReal x6758=(cj5*r20);
IkReal x6759=((1.0)*x6753);
IkReal x6760=((1.0)*x6754);
IkReal x6761=(sj5*x6754);
IkReal x6762=(sj5*x6753);
evalcond[0]=((((-1.0)*x6755*x6759))+((r01*x6762))+((r02*x6754)));
evalcond[1]=((((-1.0)*x6758*x6760))+((x6754*x6757))+(((-1.0)*r22*x6759)));
evalcond[2]=(((r11*x6761))+(((-1.0)*x6756*x6760))+(((-1.0)*r12*x6759)));
evalcond[3]=((-1.0)+(((-1.0)*x6755*x6760))+((r01*x6761))+(((-1.0)*r02*x6759)));
evalcond[4]=(((cj2*sj1))+((r22*x6754))+(((-1.0)*x6758*x6759))+((cj1*sj2))+((x6753*x6757)));
evalcond[5]=(((r12*x6754))+(((-1.0)*cj1*cj2))+((r11*x6762))+((sj1*sj2))+(((-1.0)*x6756*x6759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6763=((1.0)*cj5);
CheckValue<IkReal> x6764 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x6763))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6764.valid){
continue;
}
CheckValue<IkReal> x6765=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6763)))),-1);
if(!x6765.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6764.value)+(((1.5707963267949)*(x6765.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6766=IKcos(j4);
IkReal x6767=IKsin(j4);
IkReal x6768=(cj5*r00);
IkReal x6769=(cj5*r10);
IkReal x6770=(r21*sj5);
IkReal x6771=(cj5*r20);
IkReal x6772=((1.0)*x6766);
IkReal x6773=((1.0)*x6767);
IkReal x6774=(sj5*x6767);
IkReal x6775=(sj5*x6766);
evalcond[0]=((((-1.0)*x6768*x6772))+((r02*x6767))+((r01*x6775)));
evalcond[1]=((((-1.0)*r22*x6772))+(((-1.0)*x6771*x6773))+((x6767*x6770)));
evalcond[2]=(((r11*x6774))+(((-1.0)*x6769*x6773))+(((-1.0)*r12*x6772)));
evalcond[3]=((-1.0)+(((-1.0)*x6768*x6773))+(((-1.0)*r02*x6772))+((r01*x6774)));
evalcond[4]=(((cj2*sj1))+((r22*x6767))+((cj1*sj2))+((x6766*x6770))+(((-1.0)*x6771*x6772)));
evalcond[5]=(((r11*x6775))+((r12*x6767))+(((-1.0)*x6769*x6772))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6776=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x6776.valid){
continue;
}
CheckValue<IkReal> x6777 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6777.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6776.value)))+(x6777.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6778=IKcos(j4);
IkReal x6779=IKsin(j4);
IkReal x6780=(cj5*r00);
IkReal x6781=(cj5*r10);
IkReal x6782=(r21*sj5);
IkReal x6783=(cj5*r20);
IkReal x6784=((1.0)*x6778);
IkReal x6785=((1.0)*x6779);
IkReal x6786=(sj5*x6779);
IkReal x6787=(sj5*x6778);
evalcond[0]=(((r02*x6779))+((r01*x6787))+(((-1.0)*x6780*x6784)));
evalcond[1]=(((x6779*x6782))+(((-1.0)*r22*x6784))+(((-1.0)*x6783*x6785)));
evalcond[2]=(((r11*x6786))+(((-1.0)*r12*x6784))+(((-1.0)*x6781*x6785)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x6784))+((r01*x6786))+(((-1.0)*x6780*x6785)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x6779))+((x6778*x6782))+(((-1.0)*x6783*x6784)));
evalcond[5]=(((r12*x6779))+((r11*x6787))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x6781*x6784)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6788=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6788;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x6788);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6789=((1.0)*cj5);
IkReal x6790=((((-1.0)*r21*x6789))+(((-1.0)*r20*sj5)));
j4eval[0]=x6790;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x6789))))));
j4eval[2]=IKsign(x6790);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x6791=(r01*sj5);
IkReal x6792=(cj1*sj2);
IkReal x6793=(cj2*sj1);
IkReal x6794=((1.0)*r02);
IkReal x6795=((1.0)*cj5*r00);
IkReal x6796=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x6796;
j4eval[1]=((IKabs(((((-1.0)*x6793*x6795))+(((-1.0)*x6792*x6795))+((x6791*x6792))+((x6791*x6793)))))+(IKabs(((((-1.0)*x6793*x6794))+(((-1.0)*x6792*x6794))))));
j4eval[2]=IKsign(x6796);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6797=(r01*sj5);
IkReal x6798=(cj1*sj2);
IkReal x6799=(cj2*sj1);
IkReal x6800=((1.0)*r02);
IkReal x6801=((1.0)*cj5*r00);
CheckValue<IkReal> x6802 = IKatan2WithCheck(IkReal(((((-1.0)*x6798*x6801))+(((-1.0)*x6799*x6801))+((x6797*x6799))+((x6797*x6798)))),IkReal(((((-1.0)*x6798*x6800))+(((-1.0)*x6799*x6800)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6802.valid){
continue;
}
CheckValue<IkReal> x6803=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6803.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6802.value)+(((1.5707963267949)*(x6803.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6804=IKcos(j4);
IkReal x6805=IKsin(j4);
IkReal x6806=(cj5*r00);
IkReal x6807=(cj5*r10);
IkReal x6808=(r21*sj5);
IkReal x6809=(cj5*r20);
IkReal x6810=((1.0)*x6804);
IkReal x6811=((1.0)*x6805);
IkReal x6812=(sj5*x6805);
IkReal x6813=(sj5*x6804);
evalcond[0]=((((-1.0)*x6806*x6810))+((r01*x6813))+((r02*x6805)));
evalcond[1]=(((x6805*x6808))+(((-1.0)*x6809*x6811))+(((-1.0)*r22*x6810)));
evalcond[2]=(((r11*x6812))+(((-1.0)*x6807*x6811))+(((-1.0)*r12*x6810)));
evalcond[3]=((1.0)+(((-1.0)*x6806*x6811))+(((-1.0)*r02*x6810))+((r01*x6812)));
evalcond[4]=(((cj2*sj1))+((r22*x6805))+((cj1*sj2))+(((-1.0)*x6809*x6810))+((x6804*x6808)));
evalcond[5]=(((r11*x6813))+(((-1.0)*sj1*sj2))+(((-1.0)*x6807*x6810))+((r12*x6805))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6814=((1.0)*cj5);
CheckValue<IkReal> x6815=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x6814))+(((-1.0)*r20*sj5)))),-1);
if(!x6815.valid){
continue;
}
CheckValue<IkReal> x6816 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x6814))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6816.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6815.value)))+(x6816.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6817=IKcos(j4);
IkReal x6818=IKsin(j4);
IkReal x6819=(cj5*r00);
IkReal x6820=(cj5*r10);
IkReal x6821=(r21*sj5);
IkReal x6822=(cj5*r20);
IkReal x6823=((1.0)*x6817);
IkReal x6824=((1.0)*x6818);
IkReal x6825=(sj5*x6818);
IkReal x6826=(sj5*x6817);
evalcond[0]=(((r01*x6826))+((r02*x6818))+(((-1.0)*x6819*x6823)));
evalcond[1]=(((x6818*x6821))+(((-1.0)*r22*x6823))+(((-1.0)*x6822*x6824)));
evalcond[2]=((((-1.0)*r12*x6823))+((r11*x6825))+(((-1.0)*x6820*x6824)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6823))+((r01*x6825))+(((-1.0)*x6819*x6824)));
evalcond[4]=(((cj2*sj1))+((x6817*x6821))+((cj1*sj2))+((r22*x6818))+(((-1.0)*x6822*x6823)));
evalcond[5]=(((r12*x6818))+(((-1.0)*sj1*sj2))+((r11*x6826))+(((-1.0)*x6820*x6823))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x6827 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6827.valid){
continue;
}
CheckValue<IkReal> x6828=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x6828.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6827.value)+(((1.5707963267949)*(x6828.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6829=IKcos(j4);
IkReal x6830=IKsin(j4);
IkReal x6831=(cj5*r00);
IkReal x6832=(cj5*r10);
IkReal x6833=(r21*sj5);
IkReal x6834=(cj5*r20);
IkReal x6835=((1.0)*x6829);
IkReal x6836=((1.0)*x6830);
IkReal x6837=(sj5*x6830);
IkReal x6838=(sj5*x6829);
evalcond[0]=(((r02*x6830))+((r01*x6838))+(((-1.0)*x6831*x6835)));
evalcond[1]=(((x6830*x6833))+(((-1.0)*r22*x6835))+(((-1.0)*x6834*x6836)));
evalcond[2]=((((-1.0)*r12*x6835))+((r11*x6837))+(((-1.0)*x6832*x6836)));
evalcond[3]=((1.0)+(((-1.0)*r02*x6835))+((r01*x6837))+(((-1.0)*x6831*x6836)));
evalcond[4]=(((cj2*sj1))+((r22*x6830))+((cj1*sj2))+((x6829*x6833))+(((-1.0)*x6834*x6835)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r11*x6838))+(((-1.0)*x6832*x6835))+((r12*x6830))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x6839=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6839);
rxp1_1=(px*r21);
rxp1_2=(r11*x6839);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6840=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6840);
rxp1_1=(px*r21);
rxp1_2=(r11*x6840);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x6841=((-1.0)*px);
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x6841);
rxp1_1=(px*r21);
rxp1_2=(r11*x6841);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6844=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x6844.valid){
continue;
}
IkReal x6842=x6844.value;
IkReal x6843=(sj0*x6842);
cj4array[0]=((((-1.0)*sj1*sj2*x6843))+((cj1*cj2*x6843)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6845=IKsin(j4);
IkReal x6846=IKcos(j4);
IkReal x6847=(r21*sj5);
IkReal x6848=((1.0)*cj5*r20);
evalcond[0]=(r02*x6845);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x6846)));
evalcond[2]=(((x6845*x6847))+(((-1.0)*x6845*x6848)));
evalcond[3]=(((r11*sj5*x6845))+(((-1.0)*cj5*r10*x6845)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x6846*x6848))+((x6846*x6847)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6851=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x6851.valid){
continue;
}
IkReal x6849=x6851.value;
IkReal x6850=((1.0)*x6849);
cj4array[0]=((((-1.0)*cj2*sj1*x6850))+(((-1.0)*cj1*sj2*x6850)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6852=IKsin(j4);
IkReal x6853=IKcos(j4);
IkReal x6854=((1.0)*sj0);
IkReal x6855=((1.0)*cj5);
IkReal x6856=(sj5*x6852);
evalcond[0]=(r02*x6852);
evalcond[1]=((((-1.0)*r02*x6853))+(((-1.0)*x6854)));
evalcond[2]=((((-1.0)*r20*x6852*x6855))+((r21*x6856)));
evalcond[3]=((((-1.0)*r10*x6852*x6855))+((r11*x6856)));
evalcond[4]=((((-1.0)*cj1*cj2*x6854))+(((-1.0)*r10*x6853*x6855))+((sj0*sj1*sj2))+((r11*sj5*x6853)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x6857=IKPowWithIntegerCheck(r02,-1);
if(!x6857.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x6857.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x6858=IKsin(j4);
IkReal x6859=IKcos(j4);
IkReal x6860=(r21*sj5);
IkReal x6861=((1.0)*cj5);
IkReal x6862=(r11*sj5);
evalcond[0]=(r02*x6858);
evalcond[1]=((((-1.0)*r20*x6858*x6861))+((x6858*x6860)));
evalcond[2]=((((-1.0)*r10*x6858*x6861))+((x6858*x6862)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x6859*x6860))+(((-1.0)*r20*x6859*x6861)));
evalcond[4]=((((-1.0)*cj1*cj2*sj0))+((x6859*x6862))+((sj0*sj1*sj2))+(((-1.0)*r10*x6859*x6861)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6863=((1.0)*sj0);
IkReal x6864=((1.0)*cj0);
CheckValue<IkReal> x6865 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x6863))+(((-1.0)*r02*x6864)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x6864))+(((-1.0)*r11*sj5*x6863)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6865.valid){
continue;
}
CheckValue<IkReal> x6866=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x6866.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6865.value)+(((1.5707963267949)*(x6866.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6867=IKsin(j4);
IkReal x6868=IKcos(j4);
IkReal x6869=(cj5*r00);
IkReal x6870=(cj5*r10);
IkReal x6871=(r21*sj5);
IkReal x6872=(sj1*sj2);
IkReal x6873=(cj5*r20);
IkReal x6874=((1.0)*x6868);
IkReal x6875=((1.0)*cj1*cj2);
IkReal x6876=((1.0)*x6867);
IkReal x6877=(sj5*x6867);
IkReal x6878=(sj5*x6868);
evalcond[0]=((((-1.0)*r22*x6874))+(((-1.0)*x6873*x6876))+((x6867*x6871)));
evalcond[1]=(((r11*x6877))+cj0+(((-1.0)*x6870*x6876))+(((-1.0)*r12*x6874)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x6869*x6876))+(((-1.0)*r02*x6874))+((r01*x6877)));
evalcond[3]=(((cj2*sj1))+((r22*x6867))+((cj1*sj2))+((x6868*x6871))+(((-1.0)*x6873*x6874)));
evalcond[4]=(((r02*x6867))+(((-1.0)*x6869*x6874))+((cj0*x6872))+((r01*x6878))+(((-1.0)*cj0*x6875)));
evalcond[5]=(((sj0*x6872))+((r11*x6878))+((r12*x6867))+(((-1.0)*x6870*x6874))+(((-1.0)*sj0*x6875)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6879=((1.0)*cj5);
CheckValue<IkReal> x6880=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x6879)))),-1);
if(!x6880.valid){
continue;
}
CheckValue<IkReal> x6881 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x6879))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6881.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6880.value)))+(x6881.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6882=IKsin(j4);
IkReal x6883=IKcos(j4);
IkReal x6884=(cj5*r00);
IkReal x6885=(cj5*r10);
IkReal x6886=(r21*sj5);
IkReal x6887=(sj1*sj2);
IkReal x6888=(cj5*r20);
IkReal x6889=((1.0)*x6883);
IkReal x6890=((1.0)*cj1*cj2);
IkReal x6891=((1.0)*x6882);
IkReal x6892=(sj5*x6882);
IkReal x6893=(sj5*x6883);
evalcond[0]=((((-1.0)*x6888*x6891))+((x6882*x6886))+(((-1.0)*r22*x6889)));
evalcond[1]=(cj0+(((-1.0)*x6885*x6891))+(((-1.0)*r12*x6889))+((r11*x6892)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x6889))+(((-1.0)*x6884*x6891))+((r01*x6892)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x6888*x6889))+((cj1*sj2))+((r22*x6882))+((x6883*x6886)));
evalcond[4]=((((-1.0)*cj0*x6890))+(((-1.0)*x6884*x6889))+((cj0*x6887))+((r02*x6882))+((r01*x6893)));
evalcond[5]=(((sj0*x6887))+(((-1.0)*x6885*x6889))+(((-1.0)*sj0*x6890))+((r11*x6893))+((r12*x6882)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6894=((1.0)*cj5);
CheckValue<IkReal> x6895 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6894)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6895.valid){
continue;
}
CheckValue<IkReal> x6896=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x6894))+(((-1.0)*r00*sj5)))),-1);
if(!x6896.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6895.value)+(((1.5707963267949)*(x6896.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6897=IKsin(j4);
IkReal x6898=IKcos(j4);
IkReal x6899=(cj5*r00);
IkReal x6900=(cj5*r10);
IkReal x6901=(r21*sj5);
IkReal x6902=(sj1*sj2);
IkReal x6903=(cj5*r20);
IkReal x6904=((1.0)*x6898);
IkReal x6905=((1.0)*cj1*cj2);
IkReal x6906=((1.0)*x6897);
IkReal x6907=(sj5*x6897);
IkReal x6908=(sj5*x6898);
evalcond[0]=(((x6897*x6901))+(((-1.0)*r22*x6904))+(((-1.0)*x6903*x6906)));
evalcond[1]=((((-1.0)*x6900*x6906))+cj0+(((-1.0)*r12*x6904))+((r11*x6907)));
evalcond[2]=((((-1.0)*r02*x6904))+(((-1.0)*sj0))+((r01*x6907))+(((-1.0)*x6899*x6906)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r22*x6897))+(((-1.0)*x6903*x6904))+((x6898*x6901)));
evalcond[4]=(((r01*x6908))+((r02*x6897))+(((-1.0)*cj0*x6905))+(((-1.0)*x6899*x6904))+((cj0*x6902)));
evalcond[5]=((((-1.0)*x6900*x6904))+((r12*x6897))+((r11*x6908))+(((-1.0)*sj0*x6905))+((sj0*x6902)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6909=((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)));
j0eval[0]=x6909;
j0eval[1]=IKsign(x6909);
j0eval[2]=((IKabs((((r00*sj5))+((cj5*r01)))))+(IKabs((((cj5*r11))+((r10*sj5))))));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  || IKabs(j0eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6910=cj5*cj5;
IkReal x6911=r21*r21;
IkReal x6912=(cj2*sj1);
IkReal x6913=(cj1*sj2);
IkReal x6914=(r21*sj5);
IkReal x6915=((1.0)*cj5*r20);
IkReal x6916=((r22*r22)+(((-1.0)*x6910*x6911))+(((-2.0)*cj5*r20*x6914))+x6911+((x6910*(r20*r20))));
j4eval[0]=x6916;
j4eval[1]=IKsign(x6916);
j4eval[2]=((IKabs(((((-1.0)*x6912*x6915))+((x6913*x6914))+((x6912*x6914))+(((-1.0)*x6913*x6915)))))+(IKabs((((r22*x6912))+((r22*x6913))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j0eval[2];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x6917=cj1*cj1;
IkReal x6918=(cj2*sj2);
IkReal x6919=(cj2*sj1);
IkReal x6920=(cj1*sj1);
j0eval[0]=((((-1.08349267049076)*cj1*x6919))+(((-2.0)*cj1*cj2*x6919))+(((-1.08349267049076)*sj2*x6917))+(((-2.0)*x6917*x6918))+x6920+x6918);
j0eval[1]=((((-1.0)*cj1*sj2))+(((-1.0)*x6919)));
if( IKabs(j0eval[0]) < 0.0000010000000000  || IKabs(j0eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((1.20217186450501)*py))), ((((0.160559264620033)*py))+(((1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6921=IKsin(j0);
IkReal x6922=IKcos(j0);
evalcond[0]=((((0.81725)*x6922))+(((-0.10915)*x6921))+(((-1.0)*px)));
evalcond[1]=((((0.81725)*x6921))+(((-1.0)*py))+(((0.10915)*x6922)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6923=((1.0)*cj5);
IkReal x6924=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6923)));
j4eval[0]=x6924;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x6923)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6924);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6925=((1.0)*cj5);
IkReal x6926=((((-1.0)*r10*sj5))+(((-1.0)*r11*x6925)));
j4eval[0]=x6926;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6925))))));
j4eval[2]=IKsign(x6926);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x6927=cj5*cj5;
IkReal x6928=((1.0)*sj5);
IkReal x6929=(cj5*r20);
IkReal x6930=(r11*r21);
IkReal x6931=((((-1.0)*r11*x6928*x6929))+(((-1.0)*cj5*r10*r21*x6928))+((r12*r22))+(((-1.0)*x6927*x6930))+x6930+((r10*r20*x6927)));
j4eval[0]=x6931;
j4eval[1]=IKsign(x6931);
j4eval[2]=((IKabs(((((-1.0)*cj0*r21*x6928))+((cj0*x6929)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6932=cj5*cj5;
IkReal x6933=((1.0)*sj5);
IkReal x6934=(cj5*r20);
IkReal x6935=(r11*r21);
CheckValue<IkReal> x6936=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*r21*x6933))+(((-1.0)*r11*x6933*x6934))+((r12*r22))+(((-1.0)*x6932*x6935))+x6935+((r10*r20*x6932)))),-1);
if(!x6936.valid){
continue;
}
CheckValue<IkReal> x6937 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x6933))+((cj0*x6934)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x6937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6936.value)))+(x6937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6938=IKsin(j4);
IkReal x6939=IKcos(j4);
IkReal x6940=((1.0)*sj0);
IkReal x6941=(cj5*r00);
IkReal x6942=(r11*sj5);
IkReal x6943=(cj5*r10);
IkReal x6944=(r21*sj5);
IkReal x6945=(cj5*r20);
IkReal x6946=(r01*sj5);
IkReal x6947=((1.0)*x6939);
IkReal x6948=((1.0)*x6938);
evalcond[0]=(((x6938*x6944))+(((-1.0)*x6945*x6948))+(((-1.0)*r22*x6947)));
evalcond[1]=(((x6939*x6945))+(((-1.0)*r22*x6948))+(((-1.0)*x6944*x6947)));
evalcond[2]=((((-1.0)*x6943*x6948))+cj0+(((-1.0)*r12*x6947))+((x6938*x6942)));
evalcond[3]=(((x6938*x6946))+(((-1.0)*x6940))+(((-1.0)*x6941*x6948))+(((-1.0)*r02*x6947)));
evalcond[4]=(((x6939*x6941))+(((-1.0)*r02*x6948))+(((-1.0)*x6946*x6947))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*r12*x6948))+(((-1.0)*x6942*x6947))+(((-1.0)*x6940))+((x6939*x6943)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6949=((1.0)*cj5);
CheckValue<IkReal> x6950=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x6949))+(((-1.0)*r10*sj5)))),-1);
if(!x6950.valid){
continue;
}
CheckValue<IkReal> x6951 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x6949)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6951.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x6950.value)))+(x6951.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6952=IKsin(j4);
IkReal x6953=IKcos(j4);
IkReal x6954=((1.0)*sj0);
IkReal x6955=(cj5*r00);
IkReal x6956=(r11*sj5);
IkReal x6957=(cj5*r10);
IkReal x6958=(r21*sj5);
IkReal x6959=(cj5*r20);
IkReal x6960=(r01*sj5);
IkReal x6961=((1.0)*x6953);
IkReal x6962=((1.0)*x6952);
evalcond[0]=(((x6952*x6958))+(((-1.0)*x6959*x6962))+(((-1.0)*r22*x6961)));
evalcond[1]=((((-1.0)*x6958*x6961))+(((-1.0)*r22*x6962))+((x6953*x6959)));
evalcond[2]=(((x6952*x6956))+cj0+(((-1.0)*r12*x6961))+(((-1.0)*x6957*x6962)));
evalcond[3]=((((-1.0)*r02*x6961))+(((-1.0)*x6954))+((x6952*x6960))+(((-1.0)*x6955*x6962)));
evalcond[4]=((((-1.0)*r02*x6962))+(((-1.0)*x6960*x6961))+((x6953*x6955))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6954))+(((-1.0)*r12*x6962))+((x6953*x6957))+(((-1.0)*x6956*x6961)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6963=((1.0)*cj5);
CheckValue<IkReal> x6964 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x6963))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6964.valid){
continue;
}
CheckValue<IkReal> x6965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x6963)))),-1);
if(!x6965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6964.value)+(((1.5707963267949)*(x6965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6966=IKsin(j4);
IkReal x6967=IKcos(j4);
IkReal x6968=((1.0)*sj0);
IkReal x6969=(cj5*r00);
IkReal x6970=(r11*sj5);
IkReal x6971=(cj5*r10);
IkReal x6972=(r21*sj5);
IkReal x6973=(cj5*r20);
IkReal x6974=(r01*sj5);
IkReal x6975=((1.0)*x6967);
IkReal x6976=((1.0)*x6966);
evalcond[0]=(((x6966*x6972))+(((-1.0)*r22*x6975))+(((-1.0)*x6973*x6976)));
evalcond[1]=(((x6967*x6973))+(((-1.0)*r22*x6976))+(((-1.0)*x6972*x6975)));
evalcond[2]=(cj0+(((-1.0)*r12*x6975))+(((-1.0)*x6971*x6976))+((x6966*x6970)));
evalcond[3]=((((-1.0)*r02*x6975))+(((-1.0)*x6969*x6976))+(((-1.0)*x6968))+((x6966*x6974)));
evalcond[4]=((((-1.0)*x6974*x6975))+(((-1.0)*r02*x6976))+((x6967*x6969))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x6970*x6975))+((x6967*x6971))+(((-1.0)*r12*x6976))+(((-1.0)*x6968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x6977=IKsin(j0);
IkReal x6978=IKcos(j0);
evalcond[0]=((((0.03275)*x6978))+(((-1.0)*px))+(((-0.10915)*x6977)));
evalcond[1]=((((0.10915)*x6978))+(((0.03275)*x6977))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6979=((1.0)*cj5);
IkReal x6980=((((-1.0)*r00*sj5))+(((-1.0)*r01*x6979)));
j4eval[0]=x6980;
j4eval[1]=((IKabs(((((-1.0)*cj0*r20*x6979))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6981=cj5*cj5;
IkReal x6982=((1.0)*r21);
IkReal x6983=(cj5*sj5);
IkReal x6984=((1.0)*r20);
IkReal x6985=(((r00*r20*x6981))+(((-1.0)*r01*x6981*x6982))+((r01*r21))+(((-1.0)*r00*x6982*x6983))+(((-1.0)*r01*x6983*x6984))+((r02*r22)));
j4eval[0]=x6985;
j4eval[1]=((IKabs(((((-1.0)*cj0*cj5*x6984))+((cj0*r21*sj5)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x6985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=0;
sj1=0;
cj1=1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x6986=cj5*cj5;
IkReal x6987=(r21*sj5);
IkReal x6988=(r11*r21);
IkReal x6989=((1.0)*cj5*r20);
IkReal x6990=(((r12*r22))+(((-1.0)*x6986*x6988))+(((-1.0)*r11*sj5*x6989))+(((-1.0)*cj5*r10*x6987))+x6988+((r10*r20*x6986)));
j4eval[0]=x6990;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*sj0*x6989))+((sj0*x6987))))));
j4eval[2]=IKsign(x6990);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x6991=cj5*cj5;
IkReal x6992=(r21*sj5);
IkReal x6993=(r11*r21);
IkReal x6994=((1.0)*cj5*r20);
CheckValue<IkReal> x6995 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x6992))+(((-1.0)*sj0*x6994)))),IKFAST_ATAN2_MAGTHRESH);
if(!x6995.valid){
continue;
}
CheckValue<IkReal> x6996=IKPowWithIntegerCheck(IKsign((((r12*r22))+(((-1.0)*x6991*x6993))+x6993+((r10*r20*x6991))+(((-1.0)*cj5*r10*x6992))+(((-1.0)*r11*sj5*x6994)))),-1);
if(!x6996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x6995.value)+(((1.5707963267949)*(x6996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x6997=IKsin(j4);
IkReal x6998=IKcos(j4);
IkReal x6999=(r11*sj5);
IkReal x7000=(cj5*r00);
IkReal x7001=(cj5*r10);
IkReal x7002=(r21*sj5);
IkReal x7003=(cj5*r20);
IkReal x7004=(r01*sj5);
IkReal x7005=((1.0)*x6998);
IkReal x7006=((1.0)*x6997);
evalcond[0]=((((-1.0)*r22*x7005))+(((-1.0)*x7003*x7006))+((x6997*x7002)));
evalcond[1]=((((-1.0)*r22*x7006))+(((-1.0)*x7002*x7005))+((x6998*x7003)));
evalcond[2]=((((-1.0)*r12*x7005))+cj0+((x6997*x6999))+(((-1.0)*x7001*x7006)));
evalcond[3]=((((-1.0)*r02*x7006))+cj0+((x6998*x7000))+(((-1.0)*x7004*x7005)));
evalcond[4]=((((-1.0)*r12*x7006))+sj0+((x6998*x7001))+(((-1.0)*x6999*x7005)));
evalcond[5]=((((-1.0)*r02*x7005))+(((-1.0)*sj0))+(((-1.0)*x7000*x7006))+((x6997*x7004)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7007=cj5*cj5;
IkReal x7008=((1.0)*r21);
IkReal x7009=(cj5*sj5);
IkReal x7010=((1.0)*r20);
CheckValue<IkReal> x7011=IKPowWithIntegerCheck(IKsign((((r00*r20*x7007))+(((-1.0)*r01*x7009*x7010))+((r01*r21))+(((-1.0)*r00*x7008*x7009))+(((-1.0)*r01*x7007*x7008))+((r02*r22)))),-1);
if(!x7011.valid){
continue;
}
CheckValue<IkReal> x7012 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7010)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7012.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7011.value)))+(x7012.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7013=IKsin(j4);
IkReal x7014=IKcos(j4);
IkReal x7015=(r11*sj5);
IkReal x7016=(cj5*r00);
IkReal x7017=(cj5*r10);
IkReal x7018=(r21*sj5);
IkReal x7019=(cj5*r20);
IkReal x7020=(r01*sj5);
IkReal x7021=((1.0)*x7014);
IkReal x7022=((1.0)*x7013);
evalcond[0]=((((-1.0)*r22*x7021))+((x7013*x7018))+(((-1.0)*x7019*x7022)));
evalcond[1]=((((-1.0)*r22*x7022))+(((-1.0)*x7018*x7021))+((x7014*x7019)));
evalcond[2]=((((-1.0)*r12*x7021))+((x7013*x7015))+cj0+(((-1.0)*x7017*x7022)));
evalcond[3]=(cj0+((x7014*x7016))+(((-1.0)*r02*x7022))+(((-1.0)*x7020*x7021)));
evalcond[4]=((((-1.0)*r12*x7022))+sj0+(((-1.0)*x7015*x7021))+((x7014*x7017)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7021))+((x7013*x7020))+(((-1.0)*x7016*x7022)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7023=((1.0)*cj5);
CheckValue<IkReal> x7024=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7023)))),-1);
if(!x7024.valid){
continue;
}
CheckValue<IkReal> x7025 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7023)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7025.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7024.value)))+(x7025.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7026=IKsin(j4);
IkReal x7027=IKcos(j4);
IkReal x7028=(r11*sj5);
IkReal x7029=(cj5*r00);
IkReal x7030=(cj5*r10);
IkReal x7031=(r21*sj5);
IkReal x7032=(cj5*r20);
IkReal x7033=(r01*sj5);
IkReal x7034=((1.0)*x7027);
IkReal x7035=((1.0)*x7026);
evalcond[0]=((((-1.0)*r22*x7034))+((x7026*x7031))+(((-1.0)*x7032*x7035)));
evalcond[1]=(((x7027*x7032))+(((-1.0)*x7031*x7034))+(((-1.0)*r22*x7035)));
evalcond[2]=(((x7026*x7028))+cj0+(((-1.0)*r12*x7034))+(((-1.0)*x7030*x7035)));
evalcond[3]=((((-1.0)*r02*x7035))+cj0+((x7027*x7029))+(((-1.0)*x7033*x7034)));
evalcond[4]=(((x7027*x7030))+sj0+(((-1.0)*r12*x7035))+(((-1.0)*x7028*x7034)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7034))+((x7026*x7033))+(((-1.0)*x7029*x7035)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7036=((1.0)*sj5);
IkReal x7037=((1.0)*cj5);
if( IKabs(((((-1.0)*r11*x7037))+(((-1.0)*r10*x7036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7037))+(((-1.0)*r00*x7036)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r11*x7037))+(((-1.0)*r10*x7036))))+IKsqr(((((-1.0)*r01*x7037))+(((-1.0)*r00*x7036))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r11*x7037))+(((-1.0)*r10*x7036))), ((((-1.0)*r01*x7037))+(((-1.0)*r00*x7036))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7038=IKsin(j0);
IkReal x7039=IKcos(j0);
IkReal x7040=((1.0)*cj5);
IkReal x7041=((1.0)*sj5);
IkReal x7042=((0.09465)*cj5);
IkReal x7043=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7039))+(((-1.0)*r00*x7041))+(((-1.0)*r01*x7040)));
evalcond[1]=((((-1.0)*r11*x7040))+(((-1.0)*x7038))+(((-1.0)*r10*x7041)));
evalcond[2]=((((-1.0)*r00*x7043))+(((-1.0)*r01*x7042))+(((-1.0)*px))+(((-0.10915)*x7038)));
evalcond[3]=((((-1.0)*r11*x7042))+(((-1.0)*py))+(((0.10915)*x7039))+(((-1.0)*r10*x7043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7044=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7044;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7044);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7045=((1.0)*cj5);
IkReal x7046=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7045)));
j4eval[0]=x7046;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7045))))));
j4eval[2]=IKsign(x7046);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7047=cj5*cj5;
IkReal x7048=r21*r21;
IkReal x7049=(r21*sj5);
IkReal x7050=(cj5*r20);
IkReal x7051=(x7048+((x7047*(r20*r20)))+(r22*r22)+(((-2.0)*x7049*x7050))+(((-1.0)*x7047*x7048)));
j4eval[0]=x7051;
j4eval[1]=IKsign(x7051);
j4eval[2]=((IKabs(r22))+(IKabs((x7049+(((-1.0)*x7050))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7052=cj5*cj5;
IkReal x7053=r21*r21;
IkReal x7054=(r21*sj5);
IkReal x7055=(cj5*r20);
CheckValue<IkReal> x7056 = IKatan2WithCheck(IkReal(r22),IkReal((x7054+(((-1.0)*x7055)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7056.valid){
continue;
}
CheckValue<IkReal> x7057=IKPowWithIntegerCheck(IKsign((x7053+(((-1.0)*x7052*x7053))+(r22*r22)+((x7052*(r20*r20)))+(((-2.0)*x7054*x7055)))),-1);
if(!x7057.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7056.value)+(((1.5707963267949)*(x7057.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7058=IKsin(j4);
IkReal x7059=IKcos(j4);
IkReal x7060=(r11*sj5);
IkReal x7061=(r21*sj5);
IkReal x7062=(cj5*r00);
IkReal x7063=(cj5*r20);
IkReal x7064=(r01*sj5);
IkReal x7065=(cj5*r10);
IkReal x7066=((1.0)*x7059);
IkReal x7067=((1.0)*x7058);
evalcond[0]=((((-1.0)*x7063*x7067))+((x7058*x7061))+(((-1.0)*r22*x7066)));
evalcond[1]=(((x7059*x7062))+(((-1.0)*x7064*x7066))+(((-1.0)*r02*x7067)));
evalcond[2]=(((x7059*x7065))+(((-1.0)*r12*x7067))+(((-1.0)*x7060*x7066)));
evalcond[3]=(cj0+(((-1.0)*x7065*x7067))+(((-1.0)*r12*x7066))+((x7058*x7060)));
evalcond[4]=((1.0)+((x7059*x7063))+(((-1.0)*x7061*x7066))+(((-1.0)*r22*x7067)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7062*x7067))+(((-1.0)*r02*x7066))+((x7058*x7064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7068=((1.0)*cj5);
CheckValue<IkReal> x7069 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7069.valid){
continue;
}
CheckValue<IkReal> x7070=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7068))+(((-1.0)*r00*sj5)))),-1);
if(!x7070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7069.value)+(((1.5707963267949)*(x7070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7071=IKsin(j4);
IkReal x7072=IKcos(j4);
IkReal x7073=(r11*sj5);
IkReal x7074=(r21*sj5);
IkReal x7075=(cj5*r00);
IkReal x7076=(cj5*r20);
IkReal x7077=(r01*sj5);
IkReal x7078=(cj5*r10);
IkReal x7079=((1.0)*x7072);
IkReal x7080=((1.0)*x7071);
evalcond[0]=((((-1.0)*x7076*x7080))+((x7071*x7074))+(((-1.0)*r22*x7079)));
evalcond[1]=(((x7072*x7075))+(((-1.0)*x7077*x7079))+(((-1.0)*r02*x7080)));
evalcond[2]=(((x7072*x7078))+(((-1.0)*x7073*x7079))+(((-1.0)*r12*x7080)));
evalcond[3]=(cj0+((x7071*x7073))+(((-1.0)*r12*x7079))+(((-1.0)*x7078*x7080)));
evalcond[4]=((1.0)+((x7072*x7076))+(((-1.0)*r22*x7080))+(((-1.0)*x7074*x7079)));
evalcond[5]=((((-1.0)*sj0))+((x7071*x7077))+(((-1.0)*r02*x7079))+(((-1.0)*x7075*x7080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7081 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7081.valid){
continue;
}
CheckValue<IkReal> x7082=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7082.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7081.value)+(((1.5707963267949)*(x7082.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7083=IKsin(j4);
IkReal x7084=IKcos(j4);
IkReal x7085=(r11*sj5);
IkReal x7086=(r21*sj5);
IkReal x7087=(cj5*r00);
IkReal x7088=(cj5*r20);
IkReal x7089=(r01*sj5);
IkReal x7090=(cj5*r10);
IkReal x7091=((1.0)*x7084);
IkReal x7092=((1.0)*x7083);
evalcond[0]=((((-1.0)*x7088*x7092))+(((-1.0)*r22*x7091))+((x7083*x7086)));
evalcond[1]=((((-1.0)*x7089*x7091))+(((-1.0)*r02*x7092))+((x7084*x7087)));
evalcond[2]=((((-1.0)*r12*x7092))+((x7084*x7090))+(((-1.0)*x7085*x7091)));
evalcond[3]=(cj0+(((-1.0)*r12*x7091))+(((-1.0)*x7090*x7092))+((x7083*x7085)));
evalcond[4]=((1.0)+(((-1.0)*x7086*x7091))+(((-1.0)*r22*x7092))+((x7084*x7088)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7087*x7092))+((x7083*x7089))+(((-1.0)*r02*x7091)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7093=IKcos(j0);
IkReal x7094=IKsin(j0);
evalcond[0]=((((-0.10915)*x7094))+(((-1.0)*px))+(((-0.39225)*x7093)));
evalcond[1]=((((-1.0)*py))+(((-0.39225)*x7094))+(((0.10915)*x7093)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7095=((1.0)*cj5);
IkReal x7096=((((-1.0)*r01*x7095))+(((-1.0)*r00*sj5)));
j4eval[0]=x7096;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7095)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7096);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7097=cj5*cj5;
IkReal x7098=((1.0)*r21);
IkReal x7099=(cj5*sj5);
IkReal x7100=((1.0)*r20);
IkReal x7101=(((r01*r21))+(((-1.0)*r01*x7097*x7098))+(((-1.0)*r01*x7099*x7100))+((r02*r22))+((r00*r20*x7097))+(((-1.0)*r00*x7098*x7099)));
j4eval[0]=x7101;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7100)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7101);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7102=cj5*cj5;
IkReal x7103=(r21*sj5);
IkReal x7104=(r11*r21);
IkReal x7105=((1.0)*cj5*r20);
IkReal x7106=(x7104+(((-1.0)*x7102*x7104))+((r12*r22))+((r10*r20*x7102))+(((-1.0)*r11*sj5*x7105))+(((-1.0)*cj5*r10*x7103)));
j4eval[0]=x7106;
j4eval[1]=((IKabs((((sj0*x7103))+(((-1.0)*sj0*x7105)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7106);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7107=cj5*cj5;
IkReal x7108=(r21*sj5);
IkReal x7109=(r11*r21);
IkReal x7110=((1.0)*cj5*r20);
CheckValue<IkReal> x7111 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7108))+(((-1.0)*sj0*x7110)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7111.valid){
continue;
}
CheckValue<IkReal> x7112=IKPowWithIntegerCheck(IKsign((x7109+((r12*r22))+((r10*r20*x7107))+(((-1.0)*x7107*x7109))+(((-1.0)*cj5*r10*x7108))+(((-1.0)*r11*sj5*x7110)))),-1);
if(!x7112.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7111.value)+(((1.5707963267949)*(x7112.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7113=IKsin(j4);
IkReal x7114=IKcos(j4);
IkReal x7115=(r11*sj5);
IkReal x7116=(cj5*r00);
IkReal x7117=(cj5*r10);
IkReal x7118=(r21*sj5);
IkReal x7119=(cj5*r20);
IkReal x7120=(r01*sj5);
IkReal x7121=((1.0)*x7114);
IkReal x7122=((1.0)*x7113);
evalcond[0]=(((x7113*x7118))+(((-1.0)*x7119*x7122))+(((-1.0)*r22*x7121)));
evalcond[1]=((((-1.0)*x7118*x7121))+(((-1.0)*r22*x7122))+((x7114*x7119)));
evalcond[2]=(((x7113*x7115))+cj0+(((-1.0)*r12*x7121))+(((-1.0)*x7117*x7122)));
evalcond[3]=((((-1.0)*x7120*x7121))+cj0+(((-1.0)*r02*x7122))+((x7114*x7116)));
evalcond[4]=(sj0+(((-1.0)*x7115*x7121))+(((-1.0)*r12*x7122))+((x7114*x7117)));
evalcond[5]=((((-1.0)*x7116*x7122))+(((-1.0)*sj0))+(((-1.0)*r02*x7121))+((x7113*x7120)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7123=cj5*cj5;
IkReal x7124=((1.0)*r21);
IkReal x7125=(cj5*sj5);
IkReal x7126=((1.0)*r20);
CheckValue<IkReal> x7127 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7126)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7127.valid){
continue;
}
CheckValue<IkReal> x7128=IKPowWithIntegerCheck(IKsign((((r00*r20*x7123))+((r01*r21))+(((-1.0)*r01*x7125*x7126))+(((-1.0)*r00*x7124*x7125))+((r02*r22))+(((-1.0)*r01*x7123*x7124)))),-1);
if(!x7128.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7127.value)+(((1.5707963267949)*(x7128.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7129=IKsin(j4);
IkReal x7130=IKcos(j4);
IkReal x7131=(r11*sj5);
IkReal x7132=(cj5*r00);
IkReal x7133=(cj5*r10);
IkReal x7134=(r21*sj5);
IkReal x7135=(cj5*r20);
IkReal x7136=(r01*sj5);
IkReal x7137=((1.0)*x7130);
IkReal x7138=((1.0)*x7129);
evalcond[0]=((((-1.0)*r22*x7137))+(((-1.0)*x7135*x7138))+((x7129*x7134)));
evalcond[1]=((((-1.0)*r22*x7138))+((x7130*x7135))+(((-1.0)*x7134*x7137)));
evalcond[2]=((((-1.0)*r12*x7137))+cj0+(((-1.0)*x7133*x7138))+((x7129*x7131)));
evalcond[3]=(cj0+(((-1.0)*x7136*x7137))+((x7130*x7132))+(((-1.0)*r02*x7138)));
evalcond[4]=(sj0+(((-1.0)*r12*x7138))+((x7130*x7133))+(((-1.0)*x7131*x7137)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7132*x7138))+((x7129*x7136))+(((-1.0)*r02*x7137)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7139=((1.0)*cj5);
CheckValue<IkReal> x7140 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7139)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7140.valid){
continue;
}
CheckValue<IkReal> x7141=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7139))+(((-1.0)*r00*sj5)))),-1);
if(!x7141.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7140.value)+(((1.5707963267949)*(x7141.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7142=IKsin(j4);
IkReal x7143=IKcos(j4);
IkReal x7144=(r11*sj5);
IkReal x7145=(cj5*r00);
IkReal x7146=(cj5*r10);
IkReal x7147=(r21*sj5);
IkReal x7148=(cj5*r20);
IkReal x7149=(r01*sj5);
IkReal x7150=((1.0)*x7143);
IkReal x7151=((1.0)*x7142);
evalcond[0]=((((-1.0)*r22*x7150))+(((-1.0)*x7148*x7151))+((x7142*x7147)));
evalcond[1]=((((-1.0)*r22*x7151))+((x7143*x7148))+(((-1.0)*x7147*x7150)));
evalcond[2]=((((-1.0)*x7146*x7151))+(((-1.0)*r12*x7150))+cj0+((x7142*x7144)));
evalcond[3]=(cj0+(((-1.0)*x7149*x7150))+(((-1.0)*r02*x7151))+((x7143*x7145)));
evalcond[4]=((((-1.0)*r12*x7151))+sj0+(((-1.0)*x7144*x7150))+((x7143*x7146)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7145*x7151))+(((-1.0)*r02*x7150))+((x7142*x7149)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7152=IKsin(j0);
IkReal x7153=IKcos(j0);
IkReal x7154=((1.0)*cj5);
IkReal x7155=((1.0)*sj5);
IkReal x7156=((0.09465)*cj5);
IkReal x7157=((0.09465)*sj5);
evalcond[0]=(x7153+(((-1.0)*r01*x7154))+(((-1.0)*r00*x7155)));
evalcond[1]=(x7152+(((-1.0)*r10*x7155))+(((-1.0)*r11*x7154)));
evalcond[2]=((((-0.10915)*x7152))+(((-1.0)*r01*x7156))+(((-1.0)*r00*x7157))+(((-1.0)*px)));
evalcond[3]=((((-1.0)*py))+(((-1.0)*r10*x7157))+(((0.10915)*x7153))+(((-1.0)*r11*x7156)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7158=((1.0)*sj5);
IkReal x7159=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7158)));
j4eval[0]=x7159;
j4eval[1]=IKsign(x7159);
j4eval[2]=((IKabs(((((-1.0)*r01*x7158))+((cj5*r00)))))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7160=((1.0)*cj5);
IkReal x7161=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7160)));
j4eval[0]=x7161;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7160)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7161);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7162=r21*r21;
IkReal x7163=cj5*cj5;
IkReal x7164=(r21*sj5);
IkReal x7165=(cj5*r20);
IkReal x7166=(((x7162*x7163))+(((2.0)*x7164*x7165))+(((-1.0)*(r22*r22)))+(((-1.0)*x7162))+(((-1.0)*x7163*(r20*r20))));
j4eval[0]=x7166;
j4eval[1]=((IKabs((x7164+(((-1.0)*x7165)))))+(IKabs(r22)));
j4eval[2]=IKsign(x7166);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7167=r21*r21;
IkReal x7168=cj5*cj5;
IkReal x7169=(r21*sj5);
IkReal x7170=(cj5*r20);
CheckValue<IkReal> x7171 = IKatan2WithCheck(IkReal(r22),IkReal((x7169+(((-1.0)*x7170)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7171.valid){
continue;
}
CheckValue<IkReal> x7172=IKPowWithIntegerCheck(IKsign(((((2.0)*x7169*x7170))+(((-1.0)*x7168*(r20*r20)))+((x7167*x7168))+(((-1.0)*(r22*r22)))+(((-1.0)*x7167)))),-1);
if(!x7172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7171.value)+(((1.5707963267949)*(x7172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7173=IKsin(j4);
IkReal x7174=IKcos(j4);
IkReal x7175=(r11*sj5);
IkReal x7176=(r21*sj5);
IkReal x7177=(cj5*r00);
IkReal x7178=(cj5*r20);
IkReal x7179=(r01*sj5);
IkReal x7180=(cj5*r10);
IkReal x7181=((1.0)*x7174);
IkReal x7182=((1.0)*x7173);
evalcond[0]=((((-1.0)*x7178*x7182))+((x7173*x7176))+(((-1.0)*r22*x7181)));
evalcond[1]=((((-1.0)*x7179*x7181))+(((-1.0)*r02*x7182))+((x7174*x7177)));
evalcond[2]=((((-1.0)*x7175*x7181))+((x7174*x7180))+(((-1.0)*r12*x7182)));
evalcond[3]=(cj0+((x7173*x7175))+(((-1.0)*x7180*x7182))+(((-1.0)*r12*x7181)));
evalcond[4]=((-1.0)+(((-1.0)*r22*x7182))+((x7174*x7178))+(((-1.0)*x7176*x7181)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7177*x7182))+((x7173*x7179))+(((-1.0)*r02*x7181)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7183=((1.0)*cj5);
CheckValue<IkReal> x7184=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7183)))),-1);
if(!x7184.valid){
continue;
}
CheckValue<IkReal> x7185 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7183)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7185.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7184.value)))+(x7185.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7186=IKsin(j4);
IkReal x7187=IKcos(j4);
IkReal x7188=(r11*sj5);
IkReal x7189=(r21*sj5);
IkReal x7190=(cj5*r00);
IkReal x7191=(cj5*r20);
IkReal x7192=(r01*sj5);
IkReal x7193=(cj5*r10);
IkReal x7194=((1.0)*x7187);
IkReal x7195=((1.0)*x7186);
evalcond[0]=(((x7186*x7189))+(((-1.0)*x7191*x7195))+(((-1.0)*r22*x7194)));
evalcond[1]=(((x7187*x7190))+(((-1.0)*r02*x7195))+(((-1.0)*x7192*x7194)));
evalcond[2]=((((-1.0)*x7188*x7194))+(((-1.0)*r12*x7195))+((x7187*x7193)));
evalcond[3]=(((x7186*x7188))+cj0+(((-1.0)*x7193*x7195))+(((-1.0)*r12*x7194)));
evalcond[4]=((-1.0)+(((-1.0)*x7189*x7194))+(((-1.0)*r22*x7195))+((x7187*x7191)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7190*x7195))+(((-1.0)*r02*x7194))+((x7186*x7192)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7196=((1.0)*sj5);
CheckValue<IkReal> x7197 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7196))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7197.valid){
continue;
}
CheckValue<IkReal> x7198=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7196)))),-1);
if(!x7198.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7197.value)+(((1.5707963267949)*(x7198.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7199=IKsin(j4);
IkReal x7200=IKcos(j4);
IkReal x7201=(r11*sj5);
IkReal x7202=(r21*sj5);
IkReal x7203=(cj5*r00);
IkReal x7204=(cj5*r20);
IkReal x7205=(r01*sj5);
IkReal x7206=(cj5*r10);
IkReal x7207=((1.0)*x7200);
IkReal x7208=((1.0)*x7199);
evalcond[0]=(((x7199*x7202))+(((-1.0)*x7204*x7208))+(((-1.0)*r22*x7207)));
evalcond[1]=(((x7200*x7203))+(((-1.0)*x7205*x7207))+(((-1.0)*r02*x7208)));
evalcond[2]=(((x7200*x7206))+(((-1.0)*x7201*x7207))+(((-1.0)*r12*x7208)));
evalcond[3]=(cj0+(((-1.0)*x7206*x7208))+((x7199*x7201))+(((-1.0)*r12*x7207)));
evalcond[4]=((-1.0)+((x7200*x7204))+(((-1.0)*x7202*x7207))+(((-1.0)*r22*x7208)));
evalcond[5]=((((-1.0)*sj0))+((x7199*x7205))+(((-1.0)*x7203*x7208))+(((-1.0)*r02*x7207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7209=IKsin(j0);
IkReal x7210=IKcos(j0);
evalcond[0]=((((-0.10915)*x7209))+(((-1.0)*px))+(((0.39225)*x7210)));
evalcond[1]=((((0.39225)*x7209))+(((-1.0)*py))+(((0.10915)*x7210)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7211=((1.0)*cj5);
IkReal x7212=((((-1.0)*r01*x7211))+(((-1.0)*r00*sj5)));
j4eval[0]=x7212;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7211)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7212);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7213=((1.0)*cj5);
IkReal x7214=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7213)));
j4eval[0]=x7214;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7213))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7214);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7215=cj5*cj5;
IkReal x7216=((1.0)*sj5);
IkReal x7217=(cj5*r20);
IkReal x7218=(r11*r21);
IkReal x7219=((((-1.0)*x7215*x7218))+x7218+((r10*r20*x7215))+(((-1.0)*cj5*r10*r21*x7216))+((r12*r22))+(((-1.0)*r11*x7216*x7217)));
j4eval[0]=x7219;
j4eval[1]=IKsign(x7219);
j4eval[2]=((IKabs((((cj0*x7217))+(((-1.0)*cj0*r21*x7216)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7220=cj5*cj5;
IkReal x7221=((1.0)*sj5);
IkReal x7222=(cj5*r20);
IkReal x7223=(r11*r21);
CheckValue<IkReal> x7224 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7221))+((cj0*x7222)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7224.valid){
continue;
}
CheckValue<IkReal> x7225=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7220*x7223))+((r10*r20*x7220))+(((-1.0)*r11*x7221*x7222))+x7223+((r12*r22))+(((-1.0)*cj5*r10*r21*x7221)))),-1);
if(!x7225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7224.value)+(((1.5707963267949)*(x7225.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7226=IKsin(j4);
IkReal x7227=IKcos(j4);
IkReal x7228=((1.0)*sj0);
IkReal x7229=(cj5*r00);
IkReal x7230=(r11*sj5);
IkReal x7231=(cj5*r10);
IkReal x7232=(r21*sj5);
IkReal x7233=(cj5*r20);
IkReal x7234=(r01*sj5);
IkReal x7235=((1.0)*x7227);
IkReal x7236=((1.0)*x7226);
evalcond[0]=((((-1.0)*x7233*x7236))+(((-1.0)*r22*x7235))+((x7226*x7232)));
evalcond[1]=((((-1.0)*x7232*x7235))+(((-1.0)*r22*x7236))+((x7227*x7233)));
evalcond[2]=((((-1.0)*x7231*x7236))+cj0+((x7226*x7230))+(((-1.0)*r12*x7235)));
evalcond[3]=((((-1.0)*x7229*x7236))+(((-1.0)*x7228))+(((-1.0)*r02*x7235))+((x7226*x7234)));
evalcond[4]=((((-1.0)*x7234*x7235))+(((-1.0)*r02*x7236))+((x7227*x7229))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7230*x7235))+(((-1.0)*x7228))+(((-1.0)*r12*x7236))+((x7227*x7231)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7237=((1.0)*cj5);
CheckValue<IkReal> x7238=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7237)))),-1);
if(!x7238.valid){
continue;
}
CheckValue<IkReal> x7239 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7237))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7238.value)))+(x7239.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7240=IKsin(j4);
IkReal x7241=IKcos(j4);
IkReal x7242=((1.0)*sj0);
IkReal x7243=(cj5*r00);
IkReal x7244=(r11*sj5);
IkReal x7245=(cj5*r10);
IkReal x7246=(r21*sj5);
IkReal x7247=(cj5*r20);
IkReal x7248=(r01*sj5);
IkReal x7249=((1.0)*x7241);
IkReal x7250=((1.0)*x7240);
evalcond[0]=(((x7240*x7246))+(((-1.0)*x7247*x7250))+(((-1.0)*r22*x7249)));
evalcond[1]=((((-1.0)*x7246*x7249))+(((-1.0)*r22*x7250))+((x7241*x7247)));
evalcond[2]=(((x7240*x7244))+(((-1.0)*r12*x7249))+cj0+(((-1.0)*x7245*x7250)));
evalcond[3]=((((-1.0)*x7243*x7250))+((x7240*x7248))+(((-1.0)*r02*x7249))+(((-1.0)*x7242)));
evalcond[4]=((((-1.0)*x7248*x7249))+(((-1.0)*r02*x7250))+((x7241*x7243))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7244*x7249))+(((-1.0)*r12*x7250))+((x7241*x7245))+(((-1.0)*x7242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7251=((1.0)*cj5);
CheckValue<IkReal> x7252=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7251)))),-1);
if(!x7252.valid){
continue;
}
CheckValue<IkReal> x7253 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7251)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7253.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7252.value)))+(x7253.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7254=IKsin(j4);
IkReal x7255=IKcos(j4);
IkReal x7256=((1.0)*sj0);
IkReal x7257=(cj5*r00);
IkReal x7258=(r11*sj5);
IkReal x7259=(cj5*r10);
IkReal x7260=(r21*sj5);
IkReal x7261=(cj5*r20);
IkReal x7262=(r01*sj5);
IkReal x7263=((1.0)*x7255);
IkReal x7264=((1.0)*x7254);
evalcond[0]=((((-1.0)*r22*x7263))+(((-1.0)*x7261*x7264))+((x7254*x7260)));
evalcond[1]=(((x7255*x7261))+(((-1.0)*r22*x7264))+(((-1.0)*x7260*x7263)));
evalcond[2]=(cj0+(((-1.0)*x7259*x7264))+(((-1.0)*r12*x7263))+((x7254*x7258)));
evalcond[3]=((((-1.0)*x7256))+(((-1.0)*x7257*x7264))+(((-1.0)*r02*x7263))+((x7254*x7262)));
evalcond[4]=((((-1.0)*x7262*x7263))+(((-1.0)*r02*x7264))+((x7255*x7257))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7256))+(((-1.0)*x7258*x7263))+(((-1.0)*r12*x7264))+((x7255*x7259)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.160559264620033)*px))+(((-1.20217186450501)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.160559264620033)*py))+(((-1.20217186450501)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))))+IKsqr(((((0.160559264620033)*py))+(((-1.20217186450501)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.160559264620033)*px))+(((-1.20217186450501)*py))), ((((0.160559264620033)*py))+(((-1.20217186450501)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7265=IKcos(j0);
IkReal x7266=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x7266))+(((-0.81725)*x7265)));
evalcond[1]=((((0.10915)*x7265))+(((-1.0)*py))+(((-0.81725)*x7266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7267=((1.0)*cj5);
IkReal x7268=((((-1.0)*r01*x7267))+(((-1.0)*r00*sj5)));
j4eval[0]=x7268;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7267)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7268);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7269=cj5*cj5;
IkReal x7270=((1.0)*r21);
IkReal x7271=(cj5*sj5);
IkReal x7272=((1.0)*r20);
IkReal x7273=((((-1.0)*r01*x7269*x7270))+((r00*r20*x7269))+((r01*r21))+(((-1.0)*r01*x7271*x7272))+((r02*r22))+(((-1.0)*r00*x7270*x7271)));
j4eval[0]=x7273;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7272)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7273);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7274=cj5*cj5;
IkReal x7275=(r21*sj5);
IkReal x7276=(r11*r21);
IkReal x7277=((1.0)*cj5*r20);
IkReal x7278=(x7276+(((-1.0)*r11*sj5*x7277))+((r12*r22))+(((-1.0)*cj5*r10*x7275))+((r10*r20*x7274))+(((-1.0)*x7274*x7276)));
j4eval[0]=x7278;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7275))+(((-1.0)*sj0*x7277))))));
j4eval[2]=IKsign(x7278);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7279=cj5*cj5;
IkReal x7280=(r21*sj5);
IkReal x7281=(r11*r21);
IkReal x7282=((1.0)*cj5*r20);
CheckValue<IkReal> x7283 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7280))+(((-1.0)*sj0*x7282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7283.valid){
continue;
}
CheckValue<IkReal> x7284=IKPowWithIntegerCheck(IKsign((x7281+(((-1.0)*cj5*r10*x7280))+((r12*r22))+(((-1.0)*x7279*x7281))+((r10*r20*x7279))+(((-1.0)*r11*sj5*x7282)))),-1);
if(!x7284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7283.value)+(((1.5707963267949)*(x7284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7285=IKsin(j4);
IkReal x7286=IKcos(j4);
IkReal x7287=(r11*sj5);
IkReal x7288=(cj5*r00);
IkReal x7289=(cj5*r10);
IkReal x7290=(r21*sj5);
IkReal x7291=(cj5*r20);
IkReal x7292=(r01*sj5);
IkReal x7293=((1.0)*x7286);
IkReal x7294=((1.0)*x7285);
evalcond[0]=((((-1.0)*x7291*x7294))+(((-1.0)*r22*x7293))+((x7285*x7290)));
evalcond[1]=((((-1.0)*x7290*x7293))+(((-1.0)*r22*x7294))+((x7286*x7291)));
evalcond[2]=(cj0+(((-1.0)*x7289*x7294))+((x7285*x7287))+(((-1.0)*r12*x7293)));
evalcond[3]=(cj0+((x7286*x7288))+(((-1.0)*r02*x7294))+(((-1.0)*x7292*x7293)));
evalcond[4]=(sj0+((x7286*x7289))+(((-1.0)*r12*x7294))+(((-1.0)*x7287*x7293)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7288*x7294))+((x7285*x7292))+(((-1.0)*r02*x7293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7295=cj5*cj5;
IkReal x7296=((1.0)*r21);
IkReal x7297=(cj5*sj5);
IkReal x7298=((1.0)*r20);
CheckValue<IkReal> x7299=IKPowWithIntegerCheck(IKsign((((r00*r20*x7295))+((r01*r21))+(((-1.0)*r00*x7296*x7297))+((r02*r22))+(((-1.0)*r01*x7297*x7298))+(((-1.0)*r01*x7295*x7296)))),-1);
if(!x7299.valid){
continue;
}
CheckValue<IkReal> x7300 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7298)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7300.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7299.value)))+(x7300.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7301=IKsin(j4);
IkReal x7302=IKcos(j4);
IkReal x7303=(r11*sj5);
IkReal x7304=(cj5*r00);
IkReal x7305=(cj5*r10);
IkReal x7306=(r21*sj5);
IkReal x7307=(cj5*r20);
IkReal x7308=(r01*sj5);
IkReal x7309=((1.0)*x7302);
IkReal x7310=((1.0)*x7301);
evalcond[0]=(((x7301*x7306))+(((-1.0)*r22*x7309))+(((-1.0)*x7307*x7310)));
evalcond[1]=(((x7302*x7307))+(((-1.0)*r22*x7310))+(((-1.0)*x7306*x7309)));
evalcond[2]=(((x7301*x7303))+cj0+(((-1.0)*r12*x7309))+(((-1.0)*x7305*x7310)));
evalcond[3]=(cj0+((x7302*x7304))+(((-1.0)*x7308*x7309))+(((-1.0)*r02*x7310)));
evalcond[4]=(sj0+((x7302*x7305))+(((-1.0)*x7303*x7309))+(((-1.0)*r12*x7310)));
evalcond[5]=((((-1.0)*r02*x7309))+(((-1.0)*sj0))+((x7301*x7308))+(((-1.0)*x7304*x7310)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7311=((1.0)*cj5);
CheckValue<IkReal> x7312 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7311)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7312.valid){
continue;
}
CheckValue<IkReal> x7313=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7311)))),-1);
if(!x7313.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7312.value)+(((1.5707963267949)*(x7313.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7314=IKsin(j4);
IkReal x7315=IKcos(j4);
IkReal x7316=(r11*sj5);
IkReal x7317=(cj5*r00);
IkReal x7318=(cj5*r10);
IkReal x7319=(r21*sj5);
IkReal x7320=(cj5*r20);
IkReal x7321=(r01*sj5);
IkReal x7322=((1.0)*x7315);
IkReal x7323=((1.0)*x7314);
evalcond[0]=((((-1.0)*r22*x7322))+((x7314*x7319))+(((-1.0)*x7320*x7323)));
evalcond[1]=((((-1.0)*r22*x7323))+(((-1.0)*x7319*x7322))+((x7315*x7320)));
evalcond[2]=(cj0+(((-1.0)*x7318*x7323))+((x7314*x7316))+(((-1.0)*r12*x7322)));
evalcond[3]=(cj0+((x7315*x7317))+(((-1.0)*x7321*x7322))+(((-1.0)*r02*x7323)));
evalcond[4]=(sj0+(((-1.0)*x7316*x7322))+((x7315*x7318))+(((-1.0)*r12*x7323)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7317*x7323))+((x7314*x7321))+(((-1.0)*r02*x7322)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-2.52189136462044)*py))+(((-8.4050211434602)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((8.4050211434602)*py))+(((-2.52189136462044)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))))+IKsqr(((((8.4050211434602)*py))+(((-2.52189136462044)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-2.52189136462044)*py))+(((-8.4050211434602)*px))), ((((8.4050211434602)*py))+(((-2.52189136462044)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7324=IKcos(j0);
IkReal x7325=IKsin(j0);
evalcond[0]=((((-0.03275)*x7324))+(((-0.10915)*x7325))+(((-1.0)*px)));
evalcond[1]=((((0.10915)*x7324))+(((-0.03275)*x7325))+(((-1.0)*py)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7326=((1.0)*cj5);
IkReal x7327=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7326)));
j4eval[0]=x7327;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7326)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7327);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7328=((1.0)*cj5);
IkReal x7329=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7328)));
j4eval[0]=x7329;
j4eval[1]=((IKabs(((((-1.0)*r20*sj0*x7328))+((r21*sj0*sj5)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7329);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7330=cj5*cj5;
IkReal x7331=((1.0)*sj5);
IkReal x7332=(cj5*r20);
IkReal x7333=(r11*r21);
IkReal x7334=(x7333+(((-1.0)*r11*x7331*x7332))+(((-1.0)*x7330*x7333))+((r12*r22))+((r10*r20*x7330))+(((-1.0)*cj5*r10*r21*x7331)));
j4eval[0]=x7334;
j4eval[1]=IKsign(x7334);
j4eval[2]=((IKabs((cj0*r22)))+(IKabs(((((-1.0)*cj0*r21*x7331))+((cj0*x7332))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7335=cj5*cj5;
IkReal x7336=((1.0)*sj5);
IkReal x7337=(cj5*r20);
IkReal x7338=(r11*r21);
CheckValue<IkReal> x7339 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r21*x7336))+((cj0*x7337)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7339.valid){
continue;
}
CheckValue<IkReal> x7340=IKPowWithIntegerCheck(IKsign((x7338+(((-1.0)*r11*x7336*x7337))+(((-1.0)*x7335*x7338))+((r12*r22))+((r10*r20*x7335))+(((-1.0)*cj5*r10*r21*x7336)))),-1);
if(!x7340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7339.value)+(((1.5707963267949)*(x7340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7341=IKsin(j4);
IkReal x7342=IKcos(j4);
IkReal x7343=((1.0)*sj0);
IkReal x7344=(cj5*r00);
IkReal x7345=(r11*sj5);
IkReal x7346=(cj5*r10);
IkReal x7347=(r21*sj5);
IkReal x7348=(cj5*r20);
IkReal x7349=(r01*sj5);
IkReal x7350=((1.0)*x7342);
IkReal x7351=((1.0)*x7341);
evalcond[0]=((((-1.0)*r22*x7350))+(((-1.0)*x7348*x7351))+((x7341*x7347)));
evalcond[1]=((((-1.0)*r22*x7351))+((x7342*x7348))+(((-1.0)*x7347*x7350)));
evalcond[2]=(cj0+(((-1.0)*r12*x7350))+(((-1.0)*x7346*x7351))+((x7341*x7345)));
evalcond[3]=((((-1.0)*x7344*x7351))+(((-1.0)*x7343))+(((-1.0)*r02*x7350))+((x7341*x7349)));
evalcond[4]=(((x7342*x7344))+(((-1.0)*x7349*x7350))+(((-1.0)*r02*x7351))+(((-1.0)*cj0)));
evalcond[5]=(((x7342*x7346))+(((-1.0)*r12*x7351))+(((-1.0)*x7343))+(((-1.0)*x7345*x7350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7352=((1.0)*cj5);
CheckValue<IkReal> x7353 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7353.valid){
continue;
}
CheckValue<IkReal> x7354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7352)))),-1);
if(!x7354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7353.value)+(((1.5707963267949)*(x7354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7355=IKsin(j4);
IkReal x7356=IKcos(j4);
IkReal x7357=((1.0)*sj0);
IkReal x7358=(cj5*r00);
IkReal x7359=(r11*sj5);
IkReal x7360=(cj5*r10);
IkReal x7361=(r21*sj5);
IkReal x7362=(cj5*r20);
IkReal x7363=(r01*sj5);
IkReal x7364=((1.0)*x7356);
IkReal x7365=((1.0)*x7355);
evalcond[0]=(((x7355*x7361))+(((-1.0)*r22*x7364))+(((-1.0)*x7362*x7365)));
evalcond[1]=((((-1.0)*r22*x7365))+((x7356*x7362))+(((-1.0)*x7361*x7364)));
evalcond[2]=(cj0+(((-1.0)*r12*x7364))+((x7355*x7359))+(((-1.0)*x7360*x7365)));
evalcond[3]=(((x7355*x7363))+(((-1.0)*x7357))+(((-1.0)*r02*x7364))+(((-1.0)*x7358*x7365)));
evalcond[4]=((((-1.0)*x7363*x7364))+((x7356*x7358))+(((-1.0)*r02*x7365))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7357))+(((-1.0)*r12*x7365))+((x7356*x7360))+(((-1.0)*x7359*x7364)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7366=((1.0)*cj5);
CheckValue<IkReal> x7367 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7366))+((cj0*r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7367.valid){
continue;
}
CheckValue<IkReal> x7368=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7366)))),-1);
if(!x7368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7367.value)+(((1.5707963267949)*(x7368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7369=IKsin(j4);
IkReal x7370=IKcos(j4);
IkReal x7371=((1.0)*sj0);
IkReal x7372=(cj5*r00);
IkReal x7373=(r11*sj5);
IkReal x7374=(cj5*r10);
IkReal x7375=(r21*sj5);
IkReal x7376=(cj5*r20);
IkReal x7377=(r01*sj5);
IkReal x7378=((1.0)*x7370);
IkReal x7379=((1.0)*x7369);
evalcond[0]=((((-1.0)*r22*x7378))+(((-1.0)*x7376*x7379))+((x7369*x7375)));
evalcond[1]=((((-1.0)*r22*x7379))+((x7370*x7376))+(((-1.0)*x7375*x7378)));
evalcond[2]=((((-1.0)*x7374*x7379))+cj0+(((-1.0)*r12*x7378))+((x7369*x7373)));
evalcond[3]=(((x7369*x7377))+(((-1.0)*r02*x7378))+(((-1.0)*x7371))+(((-1.0)*x7372*x7379)));
evalcond[4]=(((x7370*x7372))+(((-1.0)*x7377*x7378))+(((-1.0)*r02*x7379))+(((-1.0)*cj0)));
evalcond[5]=(((x7370*x7374))+(((-1.0)*r12*x7379))+(((-1.0)*x7373*x7378))+(((-1.0)*x7371)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs((((cj5*r11))+((r10*sj5)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r00*sj5))+((cj5*r01)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((cj5*r11))+((r10*sj5))))+IKsqr((((r00*sj5))+((cj5*r01))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2((((cj5*r11))+((r10*sj5))), (((r00*sj5))+((cj5*r01))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7380=IKsin(j0);
IkReal x7381=IKcos(j0);
IkReal x7382=((1.0)*cj5);
IkReal x7383=((1.0)*sj5);
IkReal x7384=((0.09465)*cj5);
IkReal x7385=((0.09465)*sj5);
evalcond[0]=(x7381+(((-1.0)*r01*x7382))+(((-1.0)*r00*x7383)));
evalcond[1]=(x7380+(((-1.0)*r11*x7382))+(((-1.0)*r10*x7383)));
evalcond[2]=((((-0.10915)*x7380))+(((-1.0)*px))+(((-1.0)*r01*x7384))+(((-1.0)*r00*x7385)));
evalcond[3]=((((0.10915)*x7381))+(((-1.0)*py))+(((-1.0)*r11*x7384))+(((-1.0)*r10*x7385)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7386=((1.0)*sj5);
IkReal x7387=((((-1.0)*cj5*r11))+(((-1.0)*r10*x7386)));
j4eval[0]=x7387;
j4eval[1]=IKsign(x7387);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*r01*x7386))+((cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7388=((1.0)*cj5);
IkReal x7389=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7388)));
j4eval[0]=x7389;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7388)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7389);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x7390=r21*r21;
IkReal x7391=cj5*cj5;
IkReal x7392=(r21*sj5);
IkReal x7393=(cj5*r20);
IkReal x7394=((((-1.0)*x7391*(r20*r20)))+(((-1.0)*x7390))+(((-1.0)*(r22*r22)))+((x7390*x7391))+(((2.0)*x7392*x7393)));
j4eval[0]=x7394;
j4eval[1]=((IKabs(r22))+(IKabs((x7392+(((-1.0)*x7393))))));
j4eval[2]=IKsign(x7394);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7395=r21*r21;
IkReal x7396=cj5*cj5;
IkReal x7397=(r21*sj5);
IkReal x7398=(cj5*r20);
CheckValue<IkReal> x7399=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7396*(r20*r20)))+(((2.0)*x7397*x7398))+((x7395*x7396))+(((-1.0)*x7395))+(((-1.0)*(r22*r22))))),-1);
if(!x7399.valid){
continue;
}
CheckValue<IkReal> x7400 = IKatan2WithCheck(IkReal(r22),IkReal((x7397+(((-1.0)*x7398)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7400.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7399.value)))+(x7400.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7401=IKsin(j4);
IkReal x7402=IKcos(j4);
IkReal x7403=(r11*sj5);
IkReal x7404=(r21*sj5);
IkReal x7405=(cj5*r00);
IkReal x7406=(cj5*r20);
IkReal x7407=(r01*sj5);
IkReal x7408=(cj5*r10);
IkReal x7409=((1.0)*x7402);
IkReal x7410=((1.0)*x7401);
evalcond[0]=(((x7401*x7404))+(((-1.0)*r22*x7409))+(((-1.0)*x7406*x7410)));
evalcond[1]=(((x7402*x7405))+(((-1.0)*x7407*x7409))+(((-1.0)*r02*x7410)));
evalcond[2]=((((-1.0)*x7403*x7409))+(((-1.0)*r12*x7410))+((x7402*x7408)));
evalcond[3]=((((-1.0)*r12*x7409))+cj0+((x7401*x7403))+(((-1.0)*x7408*x7410)));
evalcond[4]=((-1.0)+((x7402*x7406))+(((-1.0)*x7404*x7409))+(((-1.0)*r22*x7410)));
evalcond[5]=((((-1.0)*sj0))+((x7401*x7407))+(((-1.0)*x7405*x7410))+(((-1.0)*r02*x7409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7411=((1.0)*cj5);
CheckValue<IkReal> x7412 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7411)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7412.valid){
continue;
}
CheckValue<IkReal> x7413=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7411))+(((-1.0)*r00*sj5)))),-1);
if(!x7413.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7412.value)+(((1.5707963267949)*(x7413.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7414=IKsin(j4);
IkReal x7415=IKcos(j4);
IkReal x7416=(r11*sj5);
IkReal x7417=(r21*sj5);
IkReal x7418=(cj5*r00);
IkReal x7419=(cj5*r20);
IkReal x7420=(r01*sj5);
IkReal x7421=(cj5*r10);
IkReal x7422=((1.0)*x7415);
IkReal x7423=((1.0)*x7414);
evalcond[0]=((((-1.0)*r22*x7422))+(((-1.0)*x7419*x7423))+((x7414*x7417)));
evalcond[1]=(((x7415*x7418))+(((-1.0)*r02*x7423))+(((-1.0)*x7420*x7422)));
evalcond[2]=((((-1.0)*x7416*x7422))+(((-1.0)*r12*x7423))+((x7415*x7421)));
evalcond[3]=((((-1.0)*x7421*x7423))+cj0+(((-1.0)*r12*x7422))+((x7414*x7416)));
evalcond[4]=((-1.0)+((x7415*x7419))+(((-1.0)*r22*x7423))+(((-1.0)*x7417*x7422)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7422))+(((-1.0)*x7418*x7423))+((x7414*x7420)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7424=((1.0)*sj5);
CheckValue<IkReal> x7425 = IKatan2WithCheck(IkReal(((((-1.0)*r01*x7424))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7425.valid){
continue;
}
CheckValue<IkReal> x7426=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r11))+(((-1.0)*r10*x7424)))),-1);
if(!x7426.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7425.value)+(((1.5707963267949)*(x7426.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7427=IKsin(j4);
IkReal x7428=IKcos(j4);
IkReal x7429=(r11*sj5);
IkReal x7430=(r21*sj5);
IkReal x7431=(cj5*r00);
IkReal x7432=(cj5*r20);
IkReal x7433=(r01*sj5);
IkReal x7434=(cj5*r10);
IkReal x7435=((1.0)*x7428);
IkReal x7436=((1.0)*x7427);
evalcond[0]=((((-1.0)*r22*x7435))+((x7427*x7430))+(((-1.0)*x7432*x7436)));
evalcond[1]=((((-1.0)*r02*x7436))+((x7428*x7431))+(((-1.0)*x7433*x7435)));
evalcond[2]=((((-1.0)*x7429*x7435))+(((-1.0)*r12*x7436))+((x7428*x7434)));
evalcond[3]=(cj0+(((-1.0)*r12*x7435))+(((-1.0)*x7434*x7436))+((x7427*x7429)));
evalcond[4]=((-1.0)+(((-1.0)*x7430*x7435))+(((-1.0)*r22*x7436))+((x7428*x7432)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7435))+((x7427*x7433))+(((-1.0)*x7431*x7436)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((2.36617629259053)*py))+(((-0.658427386453172)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((2.36617629259053)*py))+(((-0.658427386453172)*px))))+IKsqr(((((0.658427386453172)*py))+(((2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((2.36617629259053)*py))+(((-0.658427386453172)*px))), ((((0.658427386453172)*py))+(((2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7437=IKsin(j0);
IkReal x7438=IKcos(j0);
evalcond[0]=((((0.39225)*x7438))+(((-1.0)*px))+(((-0.10915)*x7437)));
evalcond[1]=((((0.39225)*x7437))+(((-1.0)*py))+(((0.10915)*x7438)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7439=((1.0)*cj5);
IkReal x7440=((((-1.0)*r01*x7439))+(((-1.0)*r00*sj5)));
j4eval[0]=x7440;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7439)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7440);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7441=((1.0)*cj5);
IkReal x7442=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7441)));
j4eval[0]=x7442;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7441))))));
j4eval[2]=IKsign(x7442);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x7443=cj5*cj5;
IkReal x7444=((1.0)*sj5);
IkReal x7445=(cj5*r20);
IkReal x7446=(r11*r21);
IkReal x7447=((((-1.0)*cj5*r10*r21*x7444))+((r10*r20*x7443))+(((-1.0)*r11*x7444*x7445))+(((-1.0)*x7443*x7446))+((r12*r22))+x7446);
j4eval[0]=x7447;
j4eval[1]=IKsign(x7447);
j4eval[2]=((IKabs((((cj0*x7445))+(((-1.0)*cj0*r21*x7444)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7448=cj5*cj5;
IkReal x7449=((1.0)*sj5);
IkReal x7450=(cj5*r20);
IkReal x7451=(r11*r21);
CheckValue<IkReal> x7452=IKPowWithIntegerCheck(IKsign(((((-1.0)*x7448*x7451))+(((-1.0)*r11*x7449*x7450))+(((-1.0)*cj5*r10*r21*x7449))+((r10*r20*x7448))+((r12*r22))+x7451)),-1);
if(!x7452.valid){
continue;
}
CheckValue<IkReal> x7453 = IKatan2WithCheck(IkReal((((cj0*x7450))+(((-1.0)*cj0*r21*x7449)))),IkReal((cj0*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x7453.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7452.value)))+(x7453.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7454=IKsin(j4);
IkReal x7455=IKcos(j4);
IkReal x7456=((1.0)*sj0);
IkReal x7457=(cj5*r00);
IkReal x7458=(r11*sj5);
IkReal x7459=(cj5*r10);
IkReal x7460=(r21*sj5);
IkReal x7461=(cj5*r20);
IkReal x7462=(r01*sj5);
IkReal x7463=((1.0)*x7455);
IkReal x7464=((1.0)*x7454);
evalcond[0]=((((-1.0)*r22*x7463))+(((-1.0)*x7461*x7464))+((x7454*x7460)));
evalcond[1]=((((-1.0)*r22*x7464))+(((-1.0)*x7460*x7463))+((x7455*x7461)));
evalcond[2]=(((x7454*x7458))+cj0+(((-1.0)*r12*x7463))+(((-1.0)*x7459*x7464)));
evalcond[3]=((((-1.0)*x7456))+(((-1.0)*r02*x7463))+((x7454*x7462))+(((-1.0)*x7457*x7464)));
evalcond[4]=(((x7455*x7457))+(((-1.0)*r02*x7464))+(((-1.0)*x7462*x7463))+(((-1.0)*cj0)));
evalcond[5]=(((x7455*x7459))+(((-1.0)*x7456))+(((-1.0)*x7458*x7463))+(((-1.0)*r12*x7464)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7465=((1.0)*cj5);
CheckValue<IkReal> x7466 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7465))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7466.valid){
continue;
}
CheckValue<IkReal> x7467=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x7465)))),-1);
if(!x7467.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7466.value)+(((1.5707963267949)*(x7467.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7468=IKsin(j4);
IkReal x7469=IKcos(j4);
IkReal x7470=((1.0)*sj0);
IkReal x7471=(cj5*r00);
IkReal x7472=(r11*sj5);
IkReal x7473=(cj5*r10);
IkReal x7474=(r21*sj5);
IkReal x7475=(cj5*r20);
IkReal x7476=(r01*sj5);
IkReal x7477=((1.0)*x7469);
IkReal x7478=((1.0)*x7468);
evalcond[0]=((((-1.0)*x7475*x7478))+(((-1.0)*r22*x7477))+((x7468*x7474)));
evalcond[1]=(((x7469*x7475))+(((-1.0)*x7474*x7477))+(((-1.0)*r22*x7478)));
evalcond[2]=(cj0+(((-1.0)*x7473*x7478))+((x7468*x7472))+(((-1.0)*r12*x7477)));
evalcond[3]=((((-1.0)*r02*x7477))+(((-1.0)*x7470))+((x7468*x7476))+(((-1.0)*x7471*x7478)));
evalcond[4]=((((-1.0)*r02*x7478))+((x7469*x7471))+(((-1.0)*x7476*x7477))+(((-1.0)*cj0)));
evalcond[5]=(((x7469*x7473))+(((-1.0)*x7470))+(((-1.0)*x7472*x7477))+(((-1.0)*r12*x7478)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7479=((1.0)*cj5);
CheckValue<IkReal> x7480=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7479))+(((-1.0)*r00*sj5)))),-1);
if(!x7480.valid){
continue;
}
CheckValue<IkReal> x7481 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7479)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7481.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7480.value)))+(x7481.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7482=IKsin(j4);
IkReal x7483=IKcos(j4);
IkReal x7484=((1.0)*sj0);
IkReal x7485=(cj5*r00);
IkReal x7486=(r11*sj5);
IkReal x7487=(cj5*r10);
IkReal x7488=(r21*sj5);
IkReal x7489=(cj5*r20);
IkReal x7490=(r01*sj5);
IkReal x7491=((1.0)*x7483);
IkReal x7492=((1.0)*x7482);
evalcond[0]=((((-1.0)*x7489*x7492))+(((-1.0)*r22*x7491))+((x7482*x7488)));
evalcond[1]=((((-1.0)*x7488*x7491))+(((-1.0)*r22*x7492))+((x7483*x7489)));
evalcond[2]=(cj0+(((-1.0)*x7487*x7492))+((x7482*x7486))+(((-1.0)*r12*x7491)));
evalcond[3]=((((-1.0)*x7484))+(((-1.0)*r02*x7491))+((x7482*x7490))+(((-1.0)*x7485*x7492)));
evalcond[4]=((((-1.0)*x7490*x7491))+(((-1.0)*r02*x7492))+((x7483*x7485))+(((-1.0)*cj0)));
evalcond[5]=((((-1.0)*x7486*x7491))+(((-1.0)*x7484))+(((-1.0)*r12*x7492))+((x7483*x7487)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7493=((1.0)*sj5);
IkReal x7494=((1.0)*cj5);
if( IKabs(((((-1.0)*r10*x7493))+(((-1.0)*r11*x7494)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r01*x7494))+(((-1.0)*r00*x7493)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*r10*x7493))+(((-1.0)*r11*x7494))))+IKsqr(((((-1.0)*r01*x7494))+(((-1.0)*r00*x7493))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*r10*x7493))+(((-1.0)*r11*x7494))), ((((-1.0)*r01*x7494))+(((-1.0)*r00*x7493))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7495=IKsin(j0);
IkReal x7496=IKcos(j0);
IkReal x7497=((1.0)*cj5);
IkReal x7498=((1.0)*sj5);
IkReal x7499=((0.09465)*cj5);
IkReal x7500=((0.09465)*sj5);
evalcond[0]=((((-1.0)*x7496))+(((-1.0)*r01*x7497))+(((-1.0)*r00*x7498)));
evalcond[1]=((((-1.0)*x7495))+(((-1.0)*r10*x7498))+(((-1.0)*r11*x7497)));
evalcond[2]=((((-1.0)*r00*x7500))+(((-1.0)*px))+(((-1.0)*r01*x7499))+(((-0.10915)*x7495)));
evalcond[3]=((((0.10915)*x7496))+(((-1.0)*py))+(((-1.0)*r11*x7499))+(((-1.0)*r10*x7500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7501=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x7501;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r01*sj5))+((cj5*r00))))));
j4eval[2]=IKsign(x7501);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7502=((1.0)*cj5);
IkReal x7503=((((-1.0)*r01*x7502))+(((-1.0)*r00*sj5)));
j4eval[0]=x7503;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7502))))));
j4eval[2]=IKsign(x7503);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x7504=cj5*cj5;
IkReal x7505=r21*r21;
IkReal x7506=(r21*sj5);
IkReal x7507=(cj5*r20);
IkReal x7508=((((-2.0)*x7506*x7507))+(r22*r22)+(((-1.0)*x7504*x7505))+((x7504*(r20*r20)))+x7505);
j4eval[0]=x7508;
j4eval[1]=IKsign(x7508);
j4eval[2]=((IKabs(r22))+(IKabs(((((-1.0)*x7507))+x7506))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7509=cj5*cj5;
IkReal x7510=r21*r21;
IkReal x7511=(r21*sj5);
IkReal x7512=(cj5*r20);
CheckValue<IkReal> x7513=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x7511*x7512))+((x7509*(r20*r20)))+x7510+(((-1.0)*x7509*x7510)))),-1);
if(!x7513.valid){
continue;
}
CheckValue<IkReal> x7514 = IKatan2WithCheck(IkReal(r22),IkReal((x7511+(((-1.0)*x7512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7513.value)))+(x7514.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7515=IKsin(j4);
IkReal x7516=IKcos(j4);
IkReal x7517=(r11*sj5);
IkReal x7518=(r21*sj5);
IkReal x7519=(cj5*r00);
IkReal x7520=(cj5*r20);
IkReal x7521=(r01*sj5);
IkReal x7522=(cj5*r10);
IkReal x7523=((1.0)*x7516);
IkReal x7524=((1.0)*x7515);
evalcond[0]=(((x7515*x7518))+(((-1.0)*x7520*x7524))+(((-1.0)*r22*x7523)));
evalcond[1]=((((-1.0)*r02*x7524))+(((-1.0)*x7521*x7523))+((x7516*x7519)));
evalcond[2]=(((x7516*x7522))+(((-1.0)*x7517*x7523))+(((-1.0)*r12*x7524)));
evalcond[3]=(((x7515*x7517))+cj0+(((-1.0)*x7522*x7524))+(((-1.0)*r12*x7523)));
evalcond[4]=((1.0)+((x7516*x7520))+(((-1.0)*x7518*x7523))+(((-1.0)*r22*x7524)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7523))+(((-1.0)*x7519*x7524))+((x7515*x7521)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7525=((1.0)*cj5);
CheckValue<IkReal> x7526=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7525))+(((-1.0)*r00*sj5)))),-1);
if(!x7526.valid){
continue;
}
CheckValue<IkReal> x7527 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7525)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7527.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7526.value)))+(x7527.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7528=IKsin(j4);
IkReal x7529=IKcos(j4);
IkReal x7530=(r11*sj5);
IkReal x7531=(r21*sj5);
IkReal x7532=(cj5*r00);
IkReal x7533=(cj5*r20);
IkReal x7534=(r01*sj5);
IkReal x7535=(cj5*r10);
IkReal x7536=((1.0)*x7529);
IkReal x7537=((1.0)*x7528);
evalcond[0]=(((x7528*x7531))+(((-1.0)*r22*x7536))+(((-1.0)*x7533*x7537)));
evalcond[1]=((((-1.0)*x7534*x7536))+((x7529*x7532))+(((-1.0)*r02*x7537)));
evalcond[2]=((((-1.0)*r12*x7537))+(((-1.0)*x7530*x7536))+((x7529*x7535)));
evalcond[3]=(cj0+(((-1.0)*r12*x7536))+((x7528*x7530))+(((-1.0)*x7535*x7537)));
evalcond[4]=((1.0)+(((-1.0)*r22*x7537))+(((-1.0)*x7531*x7536))+((x7529*x7533)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7532*x7537))+((x7528*x7534))+(((-1.0)*r02*x7536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7538 = IKatan2WithCheck(IkReal(((((-1.0)*r01*sj5))+((cj5*r00)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x7538.valid){
continue;
}
CheckValue<IkReal> x7539=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x7539.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7538.value)+(((1.5707963267949)*(x7539.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7540=IKsin(j4);
IkReal x7541=IKcos(j4);
IkReal x7542=(r11*sj5);
IkReal x7543=(r21*sj5);
IkReal x7544=(cj5*r00);
IkReal x7545=(cj5*r20);
IkReal x7546=(r01*sj5);
IkReal x7547=(cj5*r10);
IkReal x7548=((1.0)*x7541);
IkReal x7549=((1.0)*x7540);
evalcond[0]=((((-1.0)*r22*x7548))+(((-1.0)*x7545*x7549))+((x7540*x7543)));
evalcond[1]=(((x7541*x7544))+(((-1.0)*x7546*x7548))+(((-1.0)*r02*x7549)));
evalcond[2]=((((-1.0)*x7542*x7548))+((x7541*x7547))+(((-1.0)*r12*x7549)));
evalcond[3]=(cj0+(((-1.0)*r12*x7548))+(((-1.0)*x7547*x7549))+((x7540*x7542)));
evalcond[4]=((1.0)+(((-1.0)*x7543*x7548))+(((-1.0)*r22*x7549))+((x7541*x7545)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7544*x7549))+((x7540*x7546))+(((-1.0)*r02*x7548)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
if( IKabs(((((-0.658427386453172)*px))+(((-2.36617629259053)*py)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((0.658427386453172)*py))+(((-2.36617629259053)*px)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))))+IKsqr(((((0.658427386453172)*py))+(((-2.36617629259053)*px))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-0.658427386453172)*px))+(((-2.36617629259053)*py))), ((((0.658427386453172)*py))+(((-2.36617629259053)*px))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x7550=IKcos(j0);
IkReal x7551=IKsin(j0);
evalcond[0]=((((-1.0)*px))+(((-0.10915)*x7551))+(((-0.39225)*x7550)));
evalcond[1]=((((-1.0)*py))+(((0.10915)*x7550))+(((-0.39225)*x7551)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7552=((1.0)*cj5);
IkReal x7553=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7552)));
j4eval[0]=x7553;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7552))))));
j4eval[2]=IKsign(x7553);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7554=cj5*cj5;
IkReal x7555=((1.0)*r21);
IkReal x7556=(cj5*sj5);
IkReal x7557=((1.0)*r20);
IkReal x7558=(((r00*r20*x7554))+(((-1.0)*r01*x7556*x7557))+(((-1.0)*r00*x7555*x7556))+((r01*r21))+(((-1.0)*r01*x7554*x7555))+((r02*r22)));
j4eval[0]=x7558;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7557)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7558);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x7559=cj5*cj5;
IkReal x7560=(r21*sj5);
IkReal x7561=(r11*r21);
IkReal x7562=((1.0)*cj5*r20);
IkReal x7563=((((-1.0)*cj5*r10*x7560))+((r10*r20*x7559))+((r12*r22))+x7561+(((-1.0)*r11*sj5*x7562))+(((-1.0)*x7559*x7561)));
j4eval[0]=x7563;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((sj0*x7560))+(((-1.0)*sj0*x7562))))));
j4eval[2]=IKsign(x7563);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7564=cj5*cj5;
IkReal x7565=(r21*sj5);
IkReal x7566=(r11*r21);
IkReal x7567=((1.0)*cj5*r20);
CheckValue<IkReal> x7568 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((sj0*x7565))+(((-1.0)*sj0*x7567)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7568.valid){
continue;
}
CheckValue<IkReal> x7569=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r10*x7565))+((r10*r20*x7564))+((r12*r22))+(((-1.0)*x7564*x7566))+x7566+(((-1.0)*r11*sj5*x7567)))),-1);
if(!x7569.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7568.value)+(((1.5707963267949)*(x7569.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7570=IKsin(j4);
IkReal x7571=IKcos(j4);
IkReal x7572=(r11*sj5);
IkReal x7573=(cj5*r00);
IkReal x7574=(cj5*r10);
IkReal x7575=(r21*sj5);
IkReal x7576=(cj5*r20);
IkReal x7577=(r01*sj5);
IkReal x7578=((1.0)*x7571);
IkReal x7579=((1.0)*x7570);
evalcond[0]=((((-1.0)*x7576*x7579))+((x7570*x7575))+(((-1.0)*r22*x7578)));
evalcond[1]=(((x7571*x7576))+(((-1.0)*x7575*x7578))+(((-1.0)*r22*x7579)));
evalcond[2]=(cj0+(((-1.0)*x7574*x7579))+((x7570*x7572))+(((-1.0)*r12*x7578)));
evalcond[3]=(cj0+(((-1.0)*x7577*x7578))+((x7571*x7573))+(((-1.0)*r02*x7579)));
evalcond[4]=(sj0+((x7571*x7574))+(((-1.0)*r12*x7579))+(((-1.0)*x7572*x7578)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*r02*x7578))+((x7570*x7577))+(((-1.0)*x7573*x7579)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7580=cj5*cj5;
IkReal x7581=((1.0)*r21);
IkReal x7582=(cj5*sj5);
IkReal x7583=((1.0)*r20);
CheckValue<IkReal> x7584=IKPowWithIntegerCheck(IKsign((((r00*r20*x7580))+(((-1.0)*r01*x7582*x7583))+((r01*r21))+(((-1.0)*r00*x7581*x7582))+((r02*r22))+(((-1.0)*r01*x7580*x7581)))),-1);
if(!x7584.valid){
continue;
}
CheckValue<IkReal> x7585 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*cj5*x7583)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7585.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7584.value)))+(x7585.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7586=IKsin(j4);
IkReal x7587=IKcos(j4);
IkReal x7588=(r11*sj5);
IkReal x7589=(cj5*r00);
IkReal x7590=(cj5*r10);
IkReal x7591=(r21*sj5);
IkReal x7592=(cj5*r20);
IkReal x7593=(r01*sj5);
IkReal x7594=((1.0)*x7587);
IkReal x7595=((1.0)*x7586);
evalcond[0]=((((-1.0)*x7592*x7595))+((x7586*x7591))+(((-1.0)*r22*x7594)));
evalcond[1]=((((-1.0)*x7591*x7594))+(((-1.0)*r22*x7595))+((x7587*x7592)));
evalcond[2]=(cj0+(((-1.0)*x7590*x7595))+(((-1.0)*r12*x7594))+((x7586*x7588)));
evalcond[3]=(cj0+(((-1.0)*r02*x7595))+(((-1.0)*x7593*x7594))+((x7587*x7589)));
evalcond[4]=(sj0+(((-1.0)*r12*x7595))+(((-1.0)*x7588*x7594))+((x7587*x7590)));
evalcond[5]=((((-1.0)*sj0))+(((-1.0)*x7589*x7595))+((x7586*x7593))+(((-1.0)*r02*x7594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7596=((1.0)*cj5);
CheckValue<IkReal> x7597 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7596)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7597.valid){
continue;
}
CheckValue<IkReal> x7598=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7596)))),-1);
if(!x7598.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7597.value)+(((1.5707963267949)*(x7598.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7599=IKsin(j4);
IkReal x7600=IKcos(j4);
IkReal x7601=(r11*sj5);
IkReal x7602=(cj5*r00);
IkReal x7603=(cj5*r10);
IkReal x7604=(r21*sj5);
IkReal x7605=(cj5*r20);
IkReal x7606=(r01*sj5);
IkReal x7607=((1.0)*x7600);
IkReal x7608=((1.0)*x7599);
evalcond[0]=(((x7599*x7604))+(((-1.0)*r22*x7607))+(((-1.0)*x7605*x7608)));
evalcond[1]=((((-1.0)*r22*x7608))+((x7600*x7605))+(((-1.0)*x7604*x7607)));
evalcond[2]=(((x7599*x7601))+cj0+(((-1.0)*x7603*x7608))+(((-1.0)*r12*x7607)));
evalcond[3]=(((x7600*x7602))+cj0+(((-1.0)*x7606*x7607))+(((-1.0)*r02*x7608)));
evalcond[4]=(sj0+((x7600*x7603))+(((-1.0)*x7601*x7607))+(((-1.0)*r12*x7608)));
evalcond[5]=(((x7599*x7606))+(((-1.0)*sj0))+(((-1.0)*r02*x7607))+(((-1.0)*x7602*x7608)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x7609=cj1*cj1;
IkReal x7610=(cj1*sj1);
IkReal x7611=(cj1*sj2);
IkReal x7612=(r00*sj5);
IkReal x7613=(cj2*sj1);
IkReal x7614=(cj5*r01);
IkReal x7615=((20000.0)*py);
IkReal x7616=((1893.0)*r10*sj5);
IkReal x7617=((1893.0)*cj5*r11);
IkReal x7618=(sj2*x7609);
CheckValue<IkReal> x7619=IKPowWithIntegerCheck(((((-8500.0)*cj2*x7610))+(((-8500.0)*x7618))+(((-15690.0)*cj2*x7618))+(((-15690.0)*x7610*(cj2*cj2)))+(((7845.0)*cj2*sj2))+(((7845.0)*x7610))),-1);
if(!x7619.valid){
continue;
}
CheckValue<IkReal> x7620=IKPowWithIntegerCheck(((((-1.0)*x7611))+(((-1.0)*x7613))),-1);
if(!x7620.valid){
continue;
}
if( IKabs(((x7619.value)*(((((-1.0)*x7611*x7617))+(((-1.0)*x7611*x7616))+(((-1.0)*x7611*x7615))+(((-1.0)*x7613*x7615))+(((-1.0)*x7613*x7616))+(((-1.0)*x7613*x7617))+(((-2183.0)*x7612))+(((-2183.0)*x7614)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x7620.value)*((x7614+x7612)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x7619.value)*(((((-1.0)*x7611*x7617))+(((-1.0)*x7611*x7616))+(((-1.0)*x7611*x7615))+(((-1.0)*x7613*x7615))+(((-1.0)*x7613*x7616))+(((-1.0)*x7613*x7617))+(((-2183.0)*x7612))+(((-2183.0)*x7614))))))+IKsqr(((x7620.value)*((x7614+x7612))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((x7619.value)*(((((-1.0)*x7611*x7617))+(((-1.0)*x7611*x7616))+(((-1.0)*x7611*x7615))+(((-1.0)*x7613*x7615))+(((-1.0)*x7613*x7616))+(((-1.0)*x7613*x7617))+(((-2183.0)*x7612))+(((-2183.0)*x7614))))), ((x7620.value)*((x7614+x7612))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x7621=IKcos(j0);
IkReal x7622=IKsin(j0);
IkReal x7623=((1.0)*cj1);
IkReal x7624=((0.39225)*sj1);
IkReal x7625=(cj5*r11);
IkReal x7626=((1.0)*sj5);
IkReal x7627=(cj5*r01);
IkReal x7628=((1.0)*sj1);
IkReal x7629=((0.09465)*sj5);
IkReal x7630=((0.39225)*cj1);
IkReal x7631=((0.425)*cj1);
IkReal x7632=(sj2*x7621);
IkReal x7633=(sj2*x7622);
IkReal x7634=(cj2*x7621);
IkReal x7635=(cj2*x7622);
evalcond[0]=((((-1.0)*x7627))+(((-1.0)*r00*x7626))+(((-1.0)*x7628*x7634))+(((-1.0)*x7623*x7632)));
evalcond[1]=((((-1.0)*x7625))+(((-1.0)*x7628*x7635))+(((-1.0)*r10*x7626))+(((-1.0)*x7623*x7633)));
evalcond[2]=(((x7630*x7634))+(((-1.0)*r00*x7629))+(((-1.0)*px))+((x7621*x7631))+(((-0.09465)*x7627))+(((-0.10915)*x7622))+(((-1.0)*x7624*x7632)));
evalcond[3]=(((x7630*x7635))+((x7622*x7631))+(((-1.0)*py))+(((-1.0)*r10*x7629))+(((-0.09465)*x7625))+(((-1.0)*x7624*x7633))+(((0.10915)*x7621)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7636=((1.0)*cj5);
IkReal x7637=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7636)));
j4eval[0]=x7637;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x7636)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x7637);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7638=((1.0)*cj5);
IkReal x7639=((((-1.0)*r10*sj5))+(((-1.0)*r11*x7638)));
j4eval[0]=x7639;
j4eval[1]=((IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x7638)))))+(IKabs((r22*sj0))));
j4eval[2]=IKsign(x7639);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x7640=((1.0)*sj0);
IkReal x7641=((1.0)*cj0);
IkReal x7642=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x7642;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x7641))+(((-1.0)*r11*sj5*x7640)))))+(IKabs(((((-1.0)*r02*x7641))+(((-1.0)*r12*x7640))))));
j4eval[2]=IKsign(x7642);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x7643=((-1.0)*r20);
IkReal x7645 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7645)==0){
continue;
}
IkReal x7644=pow(x7645,-0.5);
CheckValue<IkReal> x7646 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7643),IKFAST_ATAN2_MAGTHRESH);
if(!x7646.valid){
continue;
}
IkReal gconst132=((-1.0)*(x7646.value));
IkReal gconst133=(r21*x7644);
IkReal gconst134=(x7643*x7644);
CheckValue<IkReal> x7647 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7647.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7647.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7648=((-1.0)*r20);
IkReal x7649=x7644;
CheckValue<IkReal> x7651 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7648),IKFAST_ATAN2_MAGTHRESH);
if(!x7651.valid){
continue;
}
IkReal x7650=((-1.0)*(x7651.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7650;
IkReal gconst132=x7650;
IkReal gconst133=(r21*x7649);
IkReal gconst134=(x7648*x7649);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7652=((-1.0)*r20);
IkReal x7653=x7644;
CheckValue<IkReal> x7655 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7652),IKFAST_ATAN2_MAGTHRESH);
if(!x7655.valid){
continue;
}
IkReal x7654=((-1.0)*(x7655.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7654;
IkReal gconst132=x7654;
IkReal gconst133=(r21*x7653);
IkReal gconst134=(x7652*x7653);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x7656=((-1.0)*r20);
IkReal x7657=x7644;
CheckValue<IkReal> x7659 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x7656),IKFAST_ATAN2_MAGTHRESH);
if(!x7659.valid){
continue;
}
IkReal x7658=((-1.0)*(x7659.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x7658;
IkReal gconst132=x7658;
IkReal gconst133=(r21*x7657);
IkReal gconst134=(x7656*x7657);
IkReal x7660=r22*r22;
CheckValue<IkReal> x7663=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x7660))),-1);
if(!x7663.valid){
continue;
}
IkReal x7661=x7663.value;
IkReal x7662=(((x7661*(r21*r21*r21*r21)))+((x7661*(r20*r20*r20*r20)))+(((2.0)*x7661*(r20*r20)*(r21*r21)))+x7660);
j4eval[0]=x7662;
j4eval[1]=IKsign(x7662);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7664=(gconst133*r21);
IkReal x7665=(cj1*sj2);
IkReal x7666=(gconst134*r20);
IkReal x7667=(cj2*sj1);
CheckValue<IkReal> x7668 = IKatan2WithCheck(IkReal((((r22*x7665))+((r22*x7667)))),IkReal(((((-1.0)*x7665*x7666))+((x7664*x7665))+((x7664*x7667))+(((-1.0)*x7666*x7667)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7668.valid){
continue;
}
CheckValue<IkReal> x7669=IKPowWithIntegerCheck(IKsign(((x7666*x7666)+(r22*r22)+(x7664*x7664)+(((-2.0)*x7664*x7666)))),-1);
if(!x7669.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7668.value)+(((1.5707963267949)*(x7669.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7670=IKsin(j4);
IkReal x7671=IKcos(j4);
IkReal x7672=(sj1*sj2);
IkReal x7673=(gconst133*r11);
IkReal x7674=(gconst133*r21);
IkReal x7675=(gconst133*r01);
IkReal x7676=((1.0)*x7671);
IkReal x7677=(gconst134*x7671);
IkReal x7678=((1.0)*x7670);
IkReal x7679=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7678))+((x7670*x7674))+(((-1.0)*r22*x7676)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7678))+(((-1.0)*r12*x7676))+((x7670*x7673)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7676))+(((-1.0)*gconst134*r00*x7678))+((x7670*x7675)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7674*x7676))+((cj1*sj2))+((r20*x7677))+(((-1.0)*r22*x7678)));
evalcond[4]=((((-1.0)*r02*x7678))+(((-1.0)*cj0*x7679))+((cj0*x7672))+((r00*x7677))+(((-1.0)*x7675*x7676)));
evalcond[5]=(((sj0*x7672))+(((-1.0)*sj0*x7679))+(((-1.0)*x7673*x7676))+(((-1.0)*r12*x7678))+((r10*x7677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7680=((1.0)*gconst134);
CheckValue<IkReal> x7681=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x7680)))),-1);
if(!x7681.valid){
continue;
}
CheckValue<IkReal> x7682 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7680))+((gconst133*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7682.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7681.value)))+(x7682.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7683=IKsin(j4);
IkReal x7684=IKcos(j4);
IkReal x7685=(sj1*sj2);
IkReal x7686=(gconst133*r11);
IkReal x7687=(gconst133*r21);
IkReal x7688=(gconst133*r01);
IkReal x7689=((1.0)*x7684);
IkReal x7690=(gconst134*x7684);
IkReal x7691=((1.0)*x7683);
IkReal x7692=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x7691))+(((-1.0)*r22*x7689))+((x7683*x7687)));
evalcond[1]=((((-1.0)*gconst134*r10*x7691))+cj0+((x7683*x7686))+(((-1.0)*r12*x7689)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst134*r00*x7691))+((x7683*x7688))+(((-1.0)*r02*x7689)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7687*x7689))+((cj1*sj2))+(((-1.0)*r22*x7691))+((r20*x7690)));
evalcond[4]=((((-1.0)*r02*x7691))+(((-1.0)*cj0*x7692))+((cj0*x7685))+((r00*x7690))+(((-1.0)*x7688*x7689)));
evalcond[5]=(((sj0*x7685))+((r10*x7690))+(((-1.0)*x7686*x7689))+(((-1.0)*r12*x7691))+(((-1.0)*sj0*x7692)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7693=((1.0)*gconst134);
CheckValue<IkReal> x7694=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x7693)))),-1);
if(!x7694.valid){
continue;
}
CheckValue<IkReal> x7695 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst133*r21))+(((-1.0)*cj0*r20*x7693)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7695.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7694.value)))+(x7695.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7696=IKsin(j4);
IkReal x7697=IKcos(j4);
IkReal x7698=(sj1*sj2);
IkReal x7699=(gconst133*r11);
IkReal x7700=(gconst133*r21);
IkReal x7701=(gconst133*r01);
IkReal x7702=((1.0)*x7697);
IkReal x7703=(gconst134*x7697);
IkReal x7704=((1.0)*x7696);
IkReal x7705=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x7702))+((x7696*x7700))+(((-1.0)*gconst134*r20*x7704)));
evalcond[1]=(cj0+(((-1.0)*gconst134*r10*x7704))+(((-1.0)*r12*x7702))+((x7696*x7699)));
evalcond[2]=((((-1.0)*sj0))+((x7696*x7701))+(((-1.0)*r02*x7702))+(((-1.0)*gconst134*r00*x7704)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7704))+((cj1*sj2))+((r20*x7703))+(((-1.0)*x7700*x7702)));
evalcond[4]=(((cj0*x7698))+(((-1.0)*x7701*x7702))+(((-1.0)*r02*x7704))+((r00*x7703))+(((-1.0)*cj0*x7705)));
evalcond[5]=(((sj0*x7698))+(((-1.0)*r12*x7704))+((r10*x7703))+(((-1.0)*x7699*x7702))+(((-1.0)*sj0*x7705)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7706=((-1.0)*r21);
IkReal x7708 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x7708)==0){
continue;
}
IkReal x7707=pow(x7708,-0.5);
CheckValue<IkReal> x7709 = IKatan2WithCheck(IkReal(x7706),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7709.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x7709.value))));
IkReal gconst136=(x7706*x7707);
IkReal gconst137=((1.0)*r20*x7707);
CheckValue<IkReal> x7710 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7710.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7710.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x7711=((-1.0)*r21);
CheckValue<IkReal> x7714 = IKatan2WithCheck(IkReal(x7711),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7714.valid){
continue;
}
IkReal x7712=((1.0)*(x7714.value));
IkReal x7713=x7707;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7712)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7712)));
IkReal gconst136=(x7711*x7713);
IkReal gconst137=((1.0)*r20*x7713);
IkReal x7715=r22*r22;
IkReal x7716=((1.0)*x7715);
CheckValue<IkReal> x7720=IKPowWithIntegerCheck(((-1.0)+x7715),-1);
if(!x7720.valid){
continue;
}
IkReal x7717=x7720.value;
if((((1.0)+(((-1.0)*x7716)))) < -0.00001)
continue;
IkReal x7718=IKsqrt(((1.0)+(((-1.0)*x7716))));
IkReal x7719=(cj0*x7717*x7718);
j4eval[0]=((IKabs(((((-1.0)*x7716*x7719))+x7719)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7721=((-1.0)*r21);
CheckValue<IkReal> x7724 = IKatan2WithCheck(IkReal(x7721),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7724.valid){
continue;
}
IkReal x7722=((1.0)*(x7724.value));
IkReal x7723=x7707;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7722)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7722)));
IkReal gconst136=(x7721*x7723);
IkReal gconst137=((1.0)*r20*x7723);
IkReal x7725=r22*r22;
IkReal x7726=((1.0)*x7725);
CheckValue<IkReal> x7730=IKPowWithIntegerCheck(((-1.0)+x7725),-1);
if(!x7730.valid){
continue;
}
IkReal x7727=x7730.value;
if((((1.0)+(((-1.0)*x7726)))) < -0.00001)
continue;
IkReal x7728=IKsqrt(((1.0)+(((-1.0)*x7726))));
IkReal x7729=(sj0*x7727*x7728);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x7726*x7729))+x7729))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x7731=((-1.0)*r21);
CheckValue<IkReal> x7734 = IKatan2WithCheck(IkReal(x7731),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x7734.valid){
continue;
}
IkReal x7732=((1.0)*(x7734.value));
IkReal x7733=x7707;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x7732)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x7732)));
IkReal gconst136=(x7731*x7733);
IkReal gconst137=((1.0)*r20*x7733);
IkReal x7735=r22*r22;
IkReal x7736=(r12*sj0);
IkReal x7737=(cj0*r02);
CheckValue<IkReal> x7741=IKPowWithIntegerCheck(((-1.0)+x7735),-1);
if(!x7741.valid){
continue;
}
IkReal x7738=x7741.value;
if((((1.0)+(((-1.0)*x7735)))) < -0.00001)
continue;
IkReal x7739=IKsqrt(((1.0)+(((-1.0)*x7735))));
IkReal x7740=(r22*x7738*x7739);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x7737))+(((-1.0)*x7736)))))+(IKabs((((x7737*x7740))+((x7736*x7740))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7742=((1.0)*sj0);
IkReal x7743=((1.0)*cj0);
CheckValue<IkReal> x7744=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x7744.valid){
continue;
}
CheckValue<IkReal> x7745 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x7743))+(((-1.0)*r12*x7742)))),IkReal((((gconst137*r10*sj0))+(((-1.0)*gconst136*r11*x7742))+((cj0*gconst137*r00))+(((-1.0)*gconst136*r01*x7743)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7744.value)))+(x7745.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7746=IKsin(j4);
IkReal x7747=IKcos(j4);
IkReal x7748=(gconst136*r01);
IkReal x7749=(gconst137*r10);
IkReal x7750=(sj1*sj2);
IkReal x7751=(gconst137*r20);
IkReal x7752=(gconst136*r11);
IkReal x7753=(gconst136*r21);
IkReal x7754=(gconst137*r00);
IkReal x7755=((1.0)*x7747);
IkReal x7756=((1.0)*cj1*cj2);
IkReal x7757=((1.0)*x7746);
evalcond[0]=((((-1.0)*r22*x7755))+((x7746*x7753))+(((-1.0)*x7751*x7757)));
evalcond[1]=(cj0+(((-1.0)*r12*x7755))+((x7746*x7752))+(((-1.0)*x7749*x7757)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7754*x7757))+(((-1.0)*r02*x7755))+((x7746*x7748)));
evalcond[3]=((((-1.0)*r22*x7757))+((cj2*sj1))+((cj1*sj2))+((x7747*x7751))+(((-1.0)*x7753*x7755)));
evalcond[4]=((((-1.0)*r02*x7757))+(((-1.0)*cj0*x7756))+((cj0*x7750))+((x7747*x7754))+(((-1.0)*x7748*x7755)));
evalcond[5]=((((-1.0)*x7752*x7755))+((sj0*x7750))+(((-1.0)*r12*x7757))+(((-1.0)*sj0*x7756))+((x7747*x7749)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7758=((1.0)*gconst137);
CheckValue<IkReal> x7759=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r10))+(((-1.0)*r11*x7758)))),-1);
if(!x7759.valid){
continue;
}
CheckValue<IkReal> x7760 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x7758))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7760.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7759.value)))+(x7760.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7761=IKsin(j4);
IkReal x7762=IKcos(j4);
IkReal x7763=(gconst136*r01);
IkReal x7764=(gconst137*r10);
IkReal x7765=(sj1*sj2);
IkReal x7766=(gconst137*r20);
IkReal x7767=(gconst136*r11);
IkReal x7768=(gconst136*r21);
IkReal x7769=(gconst137*r00);
IkReal x7770=((1.0)*x7762);
IkReal x7771=((1.0)*cj1*cj2);
IkReal x7772=((1.0)*x7761);
evalcond[0]=((((-1.0)*x7766*x7772))+(((-1.0)*r22*x7770))+((x7761*x7768)));
evalcond[1]=(cj0+(((-1.0)*x7764*x7772))+((x7761*x7767))+(((-1.0)*r12*x7770)));
evalcond[2]=((((-1.0)*r02*x7770))+(((-1.0)*sj0))+(((-1.0)*x7769*x7772))+((x7761*x7763)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7772))+(((-1.0)*x7768*x7770))+((cj1*sj2))+((x7762*x7766)));
evalcond[4]=((((-1.0)*r02*x7772))+(((-1.0)*cj0*x7771))+((cj0*x7765))+((x7762*x7769))+(((-1.0)*x7763*x7770)));
evalcond[5]=((((-1.0)*x7767*x7770))+((sj0*x7765))+(((-1.0)*sj0*x7771))+((x7762*x7764))+(((-1.0)*r12*x7772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7773=((1.0)*gconst137);
CheckValue<IkReal> x7774 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x7773)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7774.valid){
continue;
}
CheckValue<IkReal> x7775=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7773))+(((-1.0)*gconst136*r00)))),-1);
if(!x7775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7774.value)+(((1.5707963267949)*(x7775.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7776=IKsin(j4);
IkReal x7777=IKcos(j4);
IkReal x7778=(gconst136*r01);
IkReal x7779=(gconst137*r10);
IkReal x7780=(sj1*sj2);
IkReal x7781=(gconst137*r20);
IkReal x7782=(gconst136*r11);
IkReal x7783=(gconst136*r21);
IkReal x7784=(gconst137*r00);
IkReal x7785=((1.0)*x7777);
IkReal x7786=((1.0)*cj1*cj2);
IkReal x7787=((1.0)*x7776);
evalcond[0]=(((x7776*x7783))+(((-1.0)*r22*x7785))+(((-1.0)*x7781*x7787)));
evalcond[1]=((((-1.0)*x7779*x7787))+cj0+((x7776*x7782))+(((-1.0)*r12*x7785)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x7784*x7787))+(((-1.0)*r02*x7785))+((x7776*x7778)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x7783*x7785))+((cj1*sj2))+((x7777*x7781))+(((-1.0)*r22*x7787)));
evalcond[4]=(((x7777*x7784))+(((-1.0)*r02*x7787))+(((-1.0)*cj0*x7786))+((cj0*x7780))+(((-1.0)*x7778*x7785)));
evalcond[5]=((((-1.0)*x7782*x7785))+((sj0*x7780))+((x7777*x7779))+(((-1.0)*sj0*x7786))+(((-1.0)*r12*x7787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7788=((-1.0)*r10);
IkReal x7790 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7790)==0){
continue;
}
IkReal x7789=pow(x7790,-0.5);
CheckValue<IkReal> x7791 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7788),IKFAST_ATAN2_MAGTHRESH);
if(!x7791.valid){
continue;
}
IkReal gconst138=((-1.0)*(x7791.value));
IkReal gconst139=(r11*x7789);
IkReal gconst140=(x7788*x7789);
CheckValue<IkReal> x7792 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7792.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7792.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7793=((-1.0)*r10);
IkReal x7794=x7789;
CheckValue<IkReal> x7796 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x7793),IKFAST_ATAN2_MAGTHRESH);
if(!x7796.valid){
continue;
}
IkReal x7795=((-1.0)*(x7796.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x7795;
IkReal gconst138=x7795;
IkReal gconst139=(r11*x7794);
IkReal gconst140=(x7793*x7794);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7797=((1.0)*sj0);
IkReal x7798=((1.0)*gconst139);
CheckValue<IkReal> x7799=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x7798)))),-1);
if(!x7799.valid){
continue;
}
CheckValue<IkReal> x7800 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7797))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*gconst139*r11*x7797))+((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x7798))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7800.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7799.value)))+(x7800.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7801=IKsin(j4);
IkReal x7802=IKcos(j4);
IkReal x7803=(gconst140*r00);
IkReal x7804=(sj1*sj2);
IkReal x7805=(gconst139*r11);
IkReal x7806=(gconst139*r01);
IkReal x7807=(gconst139*r21);
IkReal x7808=((1.0)*x7802);
IkReal x7809=((1.0)*x7801);
IkReal x7810=((1.0)*cj1*cj2);
IkReal x7811=(gconst140*x7802);
evalcond[0]=((((-1.0)*gconst140*r20*x7809))+(((-1.0)*r22*x7808))+((x7801*x7807)));
evalcond[1]=(cj0+(((-1.0)*r12*x7808))+(((-1.0)*gconst140*r10*x7809))+((x7801*x7805)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7808))+(((-1.0)*x7803*x7809))+((x7801*x7806)));
evalcond[3]=(((cj2*sj1))+((r20*x7811))+((cj1*sj2))+(((-1.0)*x7807*x7808))+(((-1.0)*r22*x7809)));
evalcond[4]=(((x7802*x7803))+((cj0*x7804))+(((-1.0)*r02*x7809))+(((-1.0)*cj0*x7810))+(((-1.0)*x7806*x7808)));
evalcond[5]=((((-1.0)*x7805*x7808))+((r10*x7811))+(((-1.0)*r12*x7809))+((sj0*x7804))+(((-1.0)*sj0*x7810)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7812=((1.0)*gconst140);
CheckValue<IkReal> x7813=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x7812)))),-1);
if(!x7813.valid){
continue;
}
CheckValue<IkReal> x7814 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst139*r21))+(((-1.0)*cj0*r20*x7812)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7814.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7813.value)))+(x7814.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7815=IKsin(j4);
IkReal x7816=IKcos(j4);
IkReal x7817=(gconst140*r00);
IkReal x7818=(sj1*sj2);
IkReal x7819=(gconst139*r11);
IkReal x7820=(gconst139*r01);
IkReal x7821=(gconst139*r21);
IkReal x7822=((1.0)*x7816);
IkReal x7823=((1.0)*x7815);
IkReal x7824=((1.0)*cj1*cj2);
IkReal x7825=(gconst140*x7816);
evalcond[0]=(((x7815*x7821))+(((-1.0)*r22*x7822))+(((-1.0)*gconst140*r20*x7823)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x7823))+((x7815*x7819))+(((-1.0)*r12*x7822)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7822))+((x7815*x7820))+(((-1.0)*x7817*x7823)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r20*x7825))+(((-1.0)*r22*x7823))+(((-1.0)*x7821*x7822)));
evalcond[4]=((((-1.0)*x7820*x7822))+((x7816*x7817))+(((-1.0)*r02*x7823))+(((-1.0)*cj0*x7824))+((cj0*x7818)));
evalcond[5]=(((r10*x7825))+((sj0*x7818))+(((-1.0)*sj0*x7824))+(((-1.0)*r12*x7823))+(((-1.0)*x7819*x7822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7826=((-1.0)*r11);
IkReal x7828 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x7828)==0){
continue;
}
IkReal x7827=pow(x7828,-0.5);
CheckValue<IkReal> x7829 = IKatan2WithCheck(IkReal(x7826),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7829.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x7829.value))));
IkReal gconst142=(x7826*x7827);
IkReal gconst143=((1.0)*r10*x7827);
CheckValue<IkReal> x7830 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7830.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x7830.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7831=((-1.0)*r11);
CheckValue<IkReal> x7834 = IKatan2WithCheck(IkReal(x7831),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7834.valid){
continue;
}
IkReal x7832=((1.0)*(x7834.value));
IkReal x7833=x7827;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7832)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7832)));
IkReal gconst142=(x7831*x7833);
IkReal gconst143=((1.0)*r10*x7833);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7835=((-1.0)*r11);
CheckValue<IkReal> x7838 = IKatan2WithCheck(IkReal(x7835),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7838.valid){
continue;
}
IkReal x7836=((1.0)*(x7838.value));
IkReal x7837=x7827;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7836)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7836)));
IkReal gconst142=(x7835*x7837);
IkReal gconst143=((1.0)*r10*x7837);
IkReal x7839=r12*r12;
IkReal x7840=((1.0)*sj0);
IkReal x7841=(cj0*r02);
IkReal x7842=x7827;
j4eval[0]=((IKabs(((((-1.0)*r12*x7840))+(((-1.0)*x7841)))))+(IKabs((((sj0*x7839*x7842))+(((-1.0)*x7840*x7842))+((r12*x7841*x7842))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x7843=((-1.0)*r11);
CheckValue<IkReal> x7846 = IKatan2WithCheck(IkReal(x7843),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x7846.valid){
continue;
}
IkReal x7844=((1.0)*(x7846.value));
IkReal x7845=x7827;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x7844)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x7844)));
IkReal gconst142=(x7843*x7845);
IkReal gconst143=((1.0)*r10*x7845);
IkReal x7847=r12*r12;
IkReal x7848=(cj1*r22*sj2);
IkReal x7849=(cj2*r22*sj1);
CheckValue<IkReal> x7853=IKPowWithIntegerCheck(((-1.0)+x7847),-1);
if(!x7853.valid){
continue;
}
IkReal x7850=x7853.value;
if((((1.0)+(((-1.0)*x7847)))) < -0.00001)
continue;
IkReal x7851=IKsqrt(((1.0)+(((-1.0)*x7847))));
IkReal x7852=((1.0)*r12*x7850*x7851);
j4eval[0]=((IKabs(((((-1.0)*x7849*x7852))+(((-1.0)*x7848*x7852)))))+(IKabs((x7849+x7848))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7854=(gconst142*r21);
IkReal x7855=(cj1*sj2);
IkReal x7856=(cj2*sj1);
IkReal x7857=(gconst143*r20);
CheckValue<IkReal> x7858 = IKatan2WithCheck(IkReal((((r22*x7856))+((r22*x7855)))),IkReal(((((-1.0)*x7855*x7857))+(((-1.0)*x7856*x7857))+((x7854*x7856))+((x7854*x7855)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7858.valid){
continue;
}
CheckValue<IkReal> x7859=IKPowWithIntegerCheck(IKsign(((x7854*x7854)+(x7857*x7857)+(r22*r22)+(((-2.0)*x7854*x7857)))),-1);
if(!x7859.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7858.value)+(((1.5707963267949)*(x7859.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7860=IKsin(j4);
IkReal x7861=IKcos(j4);
IkReal x7862=(sj1*sj2);
IkReal x7863=(gconst143*r20);
IkReal x7864=((1.0)*x7861);
IkReal x7865=((1.0)*cj1*cj2);
IkReal x7866=((1.0)*x7860);
IkReal x7867=(gconst142*x7860);
IkReal x7868=(gconst143*x7861);
evalcond[0]=((((-1.0)*x7863*x7866))+((r21*x7867))+(((-1.0)*r22*x7864)));
evalcond[1]=(cj0+((r11*x7867))+(((-1.0)*r12*x7864))+(((-1.0)*gconst143*r10*x7866)));
evalcond[2]=((((-1.0)*gconst143*r00*x7866))+(((-1.0)*sj0))+((r01*x7867))+(((-1.0)*r02*x7864)));
evalcond[3]=(((cj2*sj1))+((x7861*x7863))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7864))+(((-1.0)*r22*x7866)));
evalcond[4]=(((cj0*x7862))+(((-1.0)*gconst142*r01*x7864))+((r00*x7868))+(((-1.0)*r02*x7866))+(((-1.0)*cj0*x7865)));
evalcond[5]=(((sj0*x7862))+(((-1.0)*r12*x7866))+(((-1.0)*sj0*x7865))+((r10*x7868))+(((-1.0)*gconst142*r11*x7864)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7869=((1.0)*sj0);
IkReal x7870=((1.0)*gconst142);
CheckValue<IkReal> x7871=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7870))+(((-1.0)*gconst143*r21)))),-1);
if(!x7871.valid){
continue;
}
CheckValue<IkReal> x7872 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x7869)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x7870))+((gconst143*r10*sj0))+(((-1.0)*gconst142*r11*x7869)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7872.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7871.value)))+(x7872.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7873=IKsin(j4);
IkReal x7874=IKcos(j4);
IkReal x7875=(sj1*sj2);
IkReal x7876=(gconst143*r20);
IkReal x7877=((1.0)*x7874);
IkReal x7878=((1.0)*cj1*cj2);
IkReal x7879=((1.0)*x7873);
IkReal x7880=(gconst142*x7873);
IkReal x7881=(gconst143*x7874);
evalcond[0]=((((-1.0)*r22*x7877))+(((-1.0)*x7876*x7879))+((r21*x7880)));
evalcond[1]=(cj0+(((-1.0)*r12*x7877))+((r11*x7880))+(((-1.0)*gconst143*r10*x7879)));
evalcond[2]=((((-1.0)*sj0))+((r01*x7880))+(((-1.0)*r02*x7877))+(((-1.0)*gconst143*r00*x7879)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x7879))+((x7874*x7876))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7877)));
evalcond[4]=(((cj0*x7875))+((r00*x7881))+(((-1.0)*gconst142*r01*x7877))+(((-1.0)*r02*x7879))+(((-1.0)*cj0*x7878)));
evalcond[5]=((((-1.0)*gconst142*r11*x7877))+((r10*x7881))+(((-1.0)*r12*x7879))+((sj0*x7875))+(((-1.0)*sj0*x7878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7882=((1.0)*gconst143);
CheckValue<IkReal> x7883=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x7882))+(((-1.0)*gconst142*r00)))),-1);
if(!x7883.valid){
continue;
}
CheckValue<IkReal> x7884 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x7882))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7884.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7883.value)))+(x7884.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7885=IKsin(j4);
IkReal x7886=IKcos(j4);
IkReal x7887=(sj1*sj2);
IkReal x7888=(gconst143*r20);
IkReal x7889=((1.0)*x7886);
IkReal x7890=((1.0)*cj1*cj2);
IkReal x7891=((1.0)*x7885);
IkReal x7892=(gconst142*x7885);
IkReal x7893=(gconst143*x7886);
evalcond[0]=(((r21*x7892))+(((-1.0)*r22*x7889))+(((-1.0)*x7888*x7891)));
evalcond[1]=(cj0+(((-1.0)*gconst143*r10*x7891))+(((-1.0)*r12*x7889))+((r11*x7892)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x7889))+(((-1.0)*gconst143*r00*x7891))+((r01*x7892)));
evalcond[3]=(((cj2*sj1))+((x7886*x7888))+((cj1*sj2))+(((-1.0)*gconst142*r21*x7889))+(((-1.0)*r22*x7891)));
evalcond[4]=(((cj0*x7887))+(((-1.0)*cj0*x7890))+(((-1.0)*gconst142*r01*x7889))+((r00*x7893))+(((-1.0)*r02*x7891)));
evalcond[5]=((((-1.0)*r12*x7891))+((sj0*x7887))+(((-1.0)*sj0*x7890))+(((-1.0)*gconst142*r11*x7889))+((r10*x7893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7894=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x7894;
j4eval[1]=IKsign(x7894);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7895=((1.0)*cj5);
IkReal x7896=((((-1.0)*r00*sj5))+(((-1.0)*r01*x7895)));
j4eval[0]=x7896;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x7895))))));
j4eval[2]=IKsign(x7896);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x7897=cj5*cj5;
IkReal x7898=r11*r11;
IkReal x7899=(r11*sj5);
IkReal x7900=(cj5*r10);
IkReal x7901=((r12*r12)+((x7897*(r10*r10)))+(((-1.0)*x7897*x7898))+x7898+(((-2.0)*x7899*x7900)));
j4eval[0]=x7901;
j4eval[1]=IKsign(x7901);
j4eval[2]=((IKabs(r12))+(IKabs((x7900+(((-1.0)*x7899))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7902=cj5*cj5;
IkReal x7903=r11*r11;
IkReal x7904=(cj5*r10);
IkReal x7905=(r11*sj5);
CheckValue<IkReal> x7906=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x7904*x7905))+(((-1.0)*x7902*x7903))+x7903+((x7902*(r10*r10))))),-1);
if(!x7906.valid){
continue;
}
CheckValue<IkReal> x7907 = IKatan2WithCheck(IkReal(((((-1.0)*x7905))+x7904)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7907.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7906.value)))+(x7907.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7908=IKsin(j4);
IkReal x7909=IKcos(j4);
IkReal x7910=(cj5*r10);
IkReal x7911=(r01*sj5);
IkReal x7912=(cj5*r00);
IkReal x7913=(cj5*r20);
IkReal x7914=((1.0)*x7909);
IkReal x7915=((1.0)*x7908);
IkReal x7916=(sj5*x7908);
evalcond[0]=(((r21*x7916))+(((-1.0)*x7913*x7915))+(((-1.0)*r22*x7914)));
evalcond[1]=((((-1.0)*r02*x7914))+(((-1.0)*x7912*x7915))+((x7908*x7911)));
evalcond[2]=((((-1.0)*r11*sj5*x7914))+(((-1.0)*r12*x7915))+((x7909*x7910)));
evalcond[3]=((1.0)+(((-1.0)*x7910*x7915))+((r11*x7916))+(((-1.0)*r12*x7914)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7915))+(((-1.0)*r21*sj5*x7914))+((x7909*x7913)));
evalcond[5]=((((-1.0)*r02*x7915))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7911*x7914))+((x7909*x7912)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7917=((1.0)*cj5);
CheckValue<IkReal> x7918=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x7917)))),-1);
if(!x7918.valid){
continue;
}
CheckValue<IkReal> x7919 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x7917)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7919.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7918.value)))+(x7919.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7920=IKsin(j4);
IkReal x7921=IKcos(j4);
IkReal x7922=(cj5*r10);
IkReal x7923=(r01*sj5);
IkReal x7924=(cj5*r00);
IkReal x7925=(cj5*r20);
IkReal x7926=((1.0)*x7921);
IkReal x7927=((1.0)*x7920);
IkReal x7928=(sj5*x7920);
evalcond[0]=((((-1.0)*x7925*x7927))+(((-1.0)*r22*x7926))+((r21*x7928)));
evalcond[1]=((((-1.0)*r02*x7926))+(((-1.0)*x7924*x7927))+((x7920*x7923)));
evalcond[2]=(((x7921*x7922))+(((-1.0)*r11*sj5*x7926))+(((-1.0)*r12*x7927)));
evalcond[3]=((1.0)+(((-1.0)*x7922*x7927))+(((-1.0)*r12*x7926))+((r11*x7928)));
evalcond[4]=(((x7921*x7925))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x7927))+(((-1.0)*r21*sj5*x7926)));
evalcond[5]=(((x7921*x7924))+(((-1.0)*r02*x7927))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x7923*x7926)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7929=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x7929.valid){
continue;
}
CheckValue<IkReal> x7930 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7930.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7929.value)))+(x7930.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7931=IKsin(j4);
IkReal x7932=IKcos(j4);
IkReal x7933=(cj5*r10);
IkReal x7934=(r01*sj5);
IkReal x7935=(cj5*r00);
IkReal x7936=(cj5*r20);
IkReal x7937=((1.0)*x7932);
IkReal x7938=((1.0)*x7931);
IkReal x7939=(sj5*x7931);
evalcond[0]=(((r21*x7939))+(((-1.0)*r22*x7937))+(((-1.0)*x7936*x7938)));
evalcond[1]=((((-1.0)*x7935*x7938))+(((-1.0)*r02*x7937))+((x7931*x7934)));
evalcond[2]=((((-1.0)*r11*sj5*x7937))+((x7932*x7933))+(((-1.0)*r12*x7938)));
evalcond[3]=((1.0)+(((-1.0)*r12*x7937))+((r11*x7939))+(((-1.0)*x7933*x7938)));
evalcond[4]=(((cj2*sj1))+((x7932*x7936))+(((-1.0)*r22*x7938))+(((-1.0)*r21*sj5*x7937))+((cj1*sj2)));
evalcond[5]=(((x7932*x7935))+(((-1.0)*x7934*x7937))+(((-1.0)*r02*x7938))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7940=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x7940;
j4eval[1]=IKsign(x7940);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7941=((1.0)*cj5);
IkReal x7942=((((-1.0)*r21*x7941))+(((-1.0)*r20*sj5)));
j4eval[0]=x7942;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x7941))+((r01*sj5))))));
j4eval[2]=IKsign(x7942);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x7943=cj5*cj5;
IkReal x7944=r11*r11;
IkReal x7945=(cj5*r10);
IkReal x7946=(r11*sj5);
IkReal x7947=((((-1.0)*x7944))+(((2.0)*x7945*x7946))+(((-1.0)*x7943*(r10*r10)))+((x7943*x7944))+(((-1.0)*(r12*r12))));
j4eval[0]=x7947;
j4eval[1]=((IKabs(r12))+(IKabs((x7945+(((-1.0)*x7946))))));
j4eval[2]=IKsign(x7947);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7948=cj5*cj5;
IkReal x7949=r11*r11;
IkReal x7950=(cj5*r10);
IkReal x7951=(r11*sj5);
CheckValue<IkReal> x7952 = IKatan2WithCheck(IkReal(((((-1.0)*x7951))+x7950)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x7952.valid){
continue;
}
CheckValue<IkReal> x7953=IKPowWithIntegerCheck(IKsign((((x7948*x7949))+(((-1.0)*x7949))+(((-1.0)*(r12*r12)))+(((-1.0)*x7948*(r10*r10)))+(((2.0)*x7950*x7951)))),-1);
if(!x7953.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7952.value)+(((1.5707963267949)*(x7953.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7954=IKsin(j4);
IkReal x7955=IKcos(j4);
IkReal x7956=(cj5*r10);
IkReal x7957=(r01*sj5);
IkReal x7958=(cj5*r00);
IkReal x7959=(cj5*r20);
IkReal x7960=((1.0)*x7955);
IkReal x7961=((1.0)*x7954);
IkReal x7962=(sj5*x7954);
evalcond[0]=(((r21*x7962))+(((-1.0)*r22*x7960))+(((-1.0)*x7959*x7961)));
evalcond[1]=((((-1.0)*x7958*x7961))+((x7954*x7957))+(((-1.0)*r02*x7960)));
evalcond[2]=(((x7955*x7956))+(((-1.0)*r11*sj5*x7960))+(((-1.0)*r12*x7961)));
evalcond[3]=((-1.0)+(((-1.0)*x7956*x7961))+((r11*x7962))+(((-1.0)*r12*x7960)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7961))+((x7955*x7959))+((cj1*sj2))+(((-1.0)*r21*sj5*x7960)));
evalcond[5]=((((-1.0)*x7957*x7960))+((x7955*x7958))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x7961))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7963=((1.0)*cj5);
CheckValue<IkReal> x7964 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x7963)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7964.valid){
continue;
}
CheckValue<IkReal> x7965=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x7963))+(((-1.0)*r20*sj5)))),-1);
if(!x7965.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7964.value)+(((1.5707963267949)*(x7965.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7966=IKsin(j4);
IkReal x7967=IKcos(j4);
IkReal x7968=(cj5*r10);
IkReal x7969=(r01*sj5);
IkReal x7970=(cj5*r00);
IkReal x7971=(cj5*r20);
IkReal x7972=((1.0)*x7967);
IkReal x7973=((1.0)*x7966);
IkReal x7974=(sj5*x7966);
evalcond[0]=((((-1.0)*r22*x7972))+(((-1.0)*x7971*x7973))+((r21*x7974)));
evalcond[1]=((((-1.0)*x7970*x7973))+(((-1.0)*r02*x7972))+((x7966*x7969)));
evalcond[2]=((((-1.0)*r11*sj5*x7972))+((x7967*x7968))+(((-1.0)*r12*x7973)));
evalcond[3]=((-1.0)+(((-1.0)*x7968*x7973))+((r11*x7974))+(((-1.0)*r12*x7972)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x7973))+((cj1*sj2))+(((-1.0)*r21*sj5*x7972))+((x7967*x7971)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x7967*x7970))+(((-1.0)*r02*x7973))+((cj1*cj2))+(((-1.0)*x7969*x7972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x7975 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7975.valid){
continue;
}
CheckValue<IkReal> x7976=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x7976.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x7975.value)+(((1.5707963267949)*(x7976.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7977=IKsin(j4);
IkReal x7978=IKcos(j4);
IkReal x7979=(cj5*r10);
IkReal x7980=(r01*sj5);
IkReal x7981=(cj5*r00);
IkReal x7982=(cj5*r20);
IkReal x7983=((1.0)*x7978);
IkReal x7984=((1.0)*x7977);
IkReal x7985=(sj5*x7977);
evalcond[0]=((((-1.0)*r22*x7983))+(((-1.0)*x7982*x7984))+((r21*x7985)));
evalcond[1]=(((x7977*x7980))+(((-1.0)*x7981*x7984))+(((-1.0)*r02*x7983)));
evalcond[2]=((((-1.0)*r12*x7984))+(((-1.0)*r11*sj5*x7983))+((x7978*x7979)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x7983))+(((-1.0)*x7979*x7984))+((r11*x7985)));
evalcond[4]=((((-1.0)*r22*x7984))+((cj2*sj1))+(((-1.0)*r21*sj5*x7983))+((cj1*sj2))+((x7978*x7982)));
evalcond[5]=((((-1.0)*x7980*x7983))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r02*x7984))+((x7978*x7981)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x7986=((-1.0)*r00);
IkReal x7988 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x7988)==0){
continue;
}
IkReal x7987=pow(x7988,-0.5);
CheckValue<IkReal> x7989 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7986),IKFAST_ATAN2_MAGTHRESH);
if(!x7989.valid){
continue;
}
IkReal gconst144=((-1.0)*(x7989.value));
IkReal gconst145=(r01*x7987);
IkReal gconst146=(x7986*x7987);
CheckValue<IkReal> x7990 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x7990.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x7990.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x7991=((-1.0)*r00);
IkReal x7992=x7987;
CheckValue<IkReal> x7994 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x7991),IKFAST_ATAN2_MAGTHRESH);
if(!x7994.valid){
continue;
}
IkReal x7993=((-1.0)*(x7994.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x7993;
IkReal gconst144=x7993;
IkReal gconst145=(r01*x7992);
IkReal gconst146=(x7991*x7992);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x7995=((1.0)*sj0);
IkReal x7996=((1.0)*gconst145);
CheckValue<IkReal> x7997=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x7996))+(((-1.0)*gconst146*r21)))),-1);
if(!x7997.valid){
continue;
}
CheckValue<IkReal> x7998 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x7995))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+((gconst146*r10*sj0))+(((-1.0)*gconst145*r11*x7995))+(((-1.0)*cj0*r01*x7996)))),IKFAST_ATAN2_MAGTHRESH);
if(!x7998.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x7997.value)))+(x7998.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x7999=IKsin(j4);
IkReal x8000=IKcos(j4);
IkReal x8001=(gconst146*r10);
IkReal x8002=(sj1*sj2);
IkReal x8003=(gconst146*r20);
IkReal x8004=(gconst146*r00);
IkReal x8005=((1.0)*x8000);
IkReal x8006=((1.0)*x7999);
IkReal x8007=(gconst145*x7999);
IkReal x8008=((1.0)*cj1*cj2);
evalcond[0]=(((r21*x8007))+(((-1.0)*x8003*x8006))+(((-1.0)*r22*x8005)));
evalcond[1]=(cj0+((r11*x8007))+(((-1.0)*r12*x8005))+(((-1.0)*x8001*x8006)));
evalcond[2]=(((r01*x8007))+(((-1.0)*sj0))+(((-1.0)*x8004*x8006))+(((-1.0)*r02*x8005)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst145*r21*x8005))+((x8000*x8003))+((cj1*sj2))+(((-1.0)*r22*x8006)));
evalcond[4]=((((-1.0)*cj0*x8008))+((x8000*x8004))+((cj0*x8002))+(((-1.0)*gconst145*r01*x8005))+(((-1.0)*r02*x8006)));
evalcond[5]=(((sj0*x8002))+((x8000*x8001))+(((-1.0)*gconst145*r11*x8005))+(((-1.0)*r12*x8006))+(((-1.0)*sj0*x8008)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8009=((1.0)*gconst146);
CheckValue<IkReal> x8010 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst145*r21*sj0))+(((-1.0)*r20*sj0*x8009)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8010.valid){
continue;
}
CheckValue<IkReal> x8011=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8009))+(((-1.0)*gconst145*r10)))),-1);
if(!x8011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8010.value)+(((1.5707963267949)*(x8011.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8012=IKsin(j4);
IkReal x8013=IKcos(j4);
IkReal x8014=(gconst146*r10);
IkReal x8015=(sj1*sj2);
IkReal x8016=(gconst146*r20);
IkReal x8017=(gconst146*r00);
IkReal x8018=((1.0)*x8013);
IkReal x8019=((1.0)*x8012);
IkReal x8020=(gconst145*x8012);
IkReal x8021=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8018))+(((-1.0)*x8016*x8019))+((r21*x8020)));
evalcond[1]=(cj0+(((-1.0)*x8014*x8019))+((r11*x8020))+(((-1.0)*r12*x8018)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8018))+(((-1.0)*x8017*x8019))+((r01*x8020)));
evalcond[3]=((((-1.0)*r22*x8019))+((cj2*sj1))+((cj1*sj2))+((x8013*x8016))+(((-1.0)*gconst145*r21*x8018)));
evalcond[4]=((((-1.0)*r02*x8019))+((cj0*x8015))+((x8013*x8017))+(((-1.0)*gconst145*r01*x8018))+(((-1.0)*cj0*x8021)));
evalcond[5]=((((-1.0)*sj0*x8021))+(((-1.0)*gconst145*r11*x8018))+((x8013*x8014))+((sj0*x8015))+(((-1.0)*r12*x8019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8022=((-1.0)*r01);
IkReal x8024 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8024)==0){
continue;
}
IkReal x8023=pow(x8024,-0.5);
CheckValue<IkReal> x8025 = IKatan2WithCheck(IkReal(x8022),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8025.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8025.value))));
IkReal gconst148=(x8022*x8023);
IkReal gconst149=((1.0)*r00*x8023);
CheckValue<IkReal> x8026 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8026.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8026.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8027=((-1.0)*r01);
CheckValue<IkReal> x8030 = IKatan2WithCheck(IkReal(x8027),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8030.valid){
continue;
}
IkReal x8028=((1.0)*(x8030.value));
IkReal x8029=x8023;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8028)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8028)));
IkReal gconst148=(x8027*x8029);
IkReal gconst149=((1.0)*r00*x8029);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8031=((-1.0)*r01);
CheckValue<IkReal> x8034 = IKatan2WithCheck(IkReal(x8031),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8034.valid){
continue;
}
IkReal x8032=((1.0)*(x8034.value));
IkReal x8033=x8023;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8032)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8032)));
IkReal gconst148=(x8031*x8033);
IkReal gconst149=((1.0)*r00*x8033);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8035=((-1.0)*r01);
CheckValue<IkReal> x8038 = IKatan2WithCheck(IkReal(x8035),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8038.valid){
continue;
}
IkReal x8036=((1.0)*(x8038.value));
IkReal x8037=x8023;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8036)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8036)));
IkReal gconst148=(x8035*x8037);
IkReal gconst149=((1.0)*r00*x8037);
IkReal x8039=r02*r02;
IkReal x8040=(r12*sj0);
IkReal x8041=((1.0)*cj0);
IkReal x8042=x8023;
j4eval[0]=((IKabs(((((-1.0)*x8040))+(((-1.0)*r02*x8041)))))+(IKabs((((r02*x8040*x8042))+(((-1.0)*x8041*x8042))+((cj0*x8039*x8042))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8043=((1.0)*sj0);
IkReal x8044=((1.0)*gconst148);
CheckValue<IkReal> x8045=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8044))+(((-1.0)*gconst149*r21)))),-1);
if(!x8045.valid){
continue;
}
CheckValue<IkReal> x8046 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8043)))),IkReal(((((-1.0)*cj0*r01*x8044))+(((-1.0)*gconst148*r11*x8043))+((gconst149*r10*sj0))+((cj0*gconst149*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8046.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8045.value)))+(x8046.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8047=IKsin(j4);
IkReal x8048=IKcos(j4);
IkReal x8049=(gconst148*r11);
IkReal x8050=(sj1*sj2);
IkReal x8051=((1.0)*x8048);
IkReal x8052=(gconst149*x8048);
IkReal x8053=(gconst148*x8047);
IkReal x8054=((1.0)*cj1*cj2);
IkReal x8055=((1.0)*x8047);
evalcond[0]=((((-1.0)*gconst149*r20*x8055))+(((-1.0)*r22*x8051))+((r21*x8053)));
evalcond[1]=(((x8047*x8049))+(((-1.0)*r12*x8051))+cj0+(((-1.0)*gconst149*r10*x8055)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8051))+(((-1.0)*gconst149*r00*x8055))+((r01*x8053)));
evalcond[3]=(((cj2*sj1))+((r20*x8052))+(((-1.0)*gconst148*r21*x8051))+((cj1*sj2))+(((-1.0)*r22*x8055)));
evalcond[4]=(((r00*x8052))+(((-1.0)*gconst148*r01*x8051))+((cj0*x8050))+(((-1.0)*r02*x8055))+(((-1.0)*cj0*x8054)));
evalcond[5]=((((-1.0)*r12*x8055))+(((-1.0)*sj0*x8054))+((r10*x8052))+((sj0*x8050))+(((-1.0)*x8049*x8051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8056=((1.0)*gconst149);
CheckValue<IkReal> x8057=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r10))+(((-1.0)*r11*x8056)))),-1);
if(!x8057.valid){
continue;
}
CheckValue<IkReal> x8058 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8056))+((gconst148*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8057.value)))+(x8058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8059=IKsin(j4);
IkReal x8060=IKcos(j4);
IkReal x8061=(gconst148*r11);
IkReal x8062=(sj1*sj2);
IkReal x8063=((1.0)*x8060);
IkReal x8064=(gconst149*x8060);
IkReal x8065=(gconst148*x8059);
IkReal x8066=((1.0)*cj1*cj2);
IkReal x8067=((1.0)*x8059);
evalcond[0]=(((r21*x8065))+(((-1.0)*gconst149*r20*x8067))+(((-1.0)*r22*x8063)));
evalcond[1]=(cj0+(((-1.0)*r12*x8063))+((x8059*x8061))+(((-1.0)*gconst149*r10*x8067)));
evalcond[2]=((((-1.0)*sj0))+((r01*x8065))+(((-1.0)*gconst149*r00*x8067))+(((-1.0)*r02*x8063)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst148*r21*x8063))+((r20*x8064))+(((-1.0)*r22*x8067)));
evalcond[4]=((((-1.0)*cj0*x8066))+((r00*x8064))+((cj0*x8062))+(((-1.0)*gconst148*r01*x8063))+(((-1.0)*r02*x8067)));
evalcond[5]=(((r10*x8064))+(((-1.0)*sj0*x8066))+(((-1.0)*r12*x8067))+(((-1.0)*x8061*x8063))+((sj0*x8062)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8068=((1.0)*gconst149);
CheckValue<IkReal> x8069 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8068)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8069.valid){
continue;
}
CheckValue<IkReal> x8070=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8068)))),-1);
if(!x8070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8069.value)+(((1.5707963267949)*(x8070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8071=IKsin(j4);
IkReal x8072=IKcos(j4);
IkReal x8073=(gconst148*r11);
IkReal x8074=(sj1*sj2);
IkReal x8075=((1.0)*x8072);
IkReal x8076=(gconst149*x8072);
IkReal x8077=(gconst148*x8071);
IkReal x8078=((1.0)*cj1*cj2);
IkReal x8079=((1.0)*x8071);
evalcond[0]=((((-1.0)*gconst149*r20*x8079))+((r21*x8077))+(((-1.0)*r22*x8075)));
evalcond[1]=(cj0+(((-1.0)*gconst149*r10*x8079))+((x8071*x8073))+(((-1.0)*r12*x8075)));
evalcond[2]=((((-1.0)*gconst149*r00*x8079))+(((-1.0)*sj0))+(((-1.0)*r02*x8075))+((r01*x8077)));
evalcond[3]=(((cj2*sj1))+((r20*x8076))+((cj1*sj2))+(((-1.0)*r22*x8079))+(((-1.0)*gconst148*r21*x8075)));
evalcond[4]=((((-1.0)*r02*x8079))+(((-1.0)*cj0*x8078))+((r00*x8076))+(((-1.0)*gconst148*r01*x8075))+((cj0*x8074)));
evalcond[5]=(((r10*x8076))+((sj0*x8074))+(((-1.0)*x8073*x8075))+(((-1.0)*sj0*x8078))+(((-1.0)*r12*x8079)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8080=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8080;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8080);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8081=((1.0)*cj5);
IkReal x8082=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8081)));
j4eval[0]=x8082;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8081)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8082);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8083=cj5*cj5;
IkReal x8084=r01*r01;
IkReal x8085=(r01*sj5);
IkReal x8086=(cj5*r00);
IkReal x8087=((((-1.0)*x8084))+(((-1.0)*(r02*r02)))+(((-1.0)*x8083*(r00*r00)))+(((2.0)*x8085*x8086))+((x8083*x8084)));
j4eval[0]=x8087;
j4eval[1]=IKsign(x8087);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x8085))+x8086))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8088=cj5*cj5;
IkReal x8089=r01*r01;
IkReal x8090=(r01*sj5);
IkReal x8091=(cj5*r00);
CheckValue<IkReal> x8092=IKPowWithIntegerCheck(IKsign(((((-1.0)*x8089))+(((-1.0)*(r02*r02)))+((x8088*x8089))+(((-1.0)*x8088*(r00*r00)))+(((2.0)*x8090*x8091)))),-1);
if(!x8092.valid){
continue;
}
CheckValue<IkReal> x8093 = IKatan2WithCheck(IkReal(((((-1.0)*x8090))+x8091)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8093.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8092.value)))+(x8093.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8094=IKsin(j4);
IkReal x8095=IKcos(j4);
IkReal x8096=(cj5*r10);
IkReal x8097=(r01*sj5);
IkReal x8098=(cj5*r00);
IkReal x8099=(cj5*r20);
IkReal x8100=((1.0)*x8095);
IkReal x8101=((1.0)*x8094);
IkReal x8102=(sj5*x8094);
evalcond[0]=((((-1.0)*x8099*x8101))+(((-1.0)*r22*x8100))+((r21*x8102)));
evalcond[1]=((((-1.0)*x8096*x8101))+((r11*x8102))+(((-1.0)*r12*x8100)));
evalcond[2]=(((x8095*x8098))+(((-1.0)*r02*x8101))+(((-1.0)*x8097*x8100)));
evalcond[3]=((-1.0)+(((-1.0)*x8098*x8101))+(((-1.0)*r02*x8100))+((x8094*x8097)));
evalcond[4]=((((-1.0)*r21*sj5*x8100))+((cj2*sj1))+((x8095*x8099))+((cj1*sj2))+(((-1.0)*r22*x8101)));
evalcond[5]=(((x8095*x8096))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8100))+(((-1.0)*r12*x8101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8103=((1.0)*cj5);
CheckValue<IkReal> x8104 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x8103)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8104.valid){
continue;
}
CheckValue<IkReal> x8105=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8103))+(((-1.0)*r10*sj5)))),-1);
if(!x8105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8104.value)+(((1.5707963267949)*(x8105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8106=IKsin(j4);
IkReal x8107=IKcos(j4);
IkReal x8108=(cj5*r10);
IkReal x8109=(r01*sj5);
IkReal x8110=(cj5*r00);
IkReal x8111=(cj5*r20);
IkReal x8112=((1.0)*x8107);
IkReal x8113=((1.0)*x8106);
IkReal x8114=(sj5*x8106);
evalcond[0]=((((-1.0)*x8111*x8113))+((r21*x8114))+(((-1.0)*r22*x8112)));
evalcond[1]=((((-1.0)*r12*x8112))+(((-1.0)*x8108*x8113))+((r11*x8114)));
evalcond[2]=((((-1.0)*x8109*x8112))+(((-1.0)*r02*x8113))+((x8107*x8110)));
evalcond[3]=((-1.0)+((x8106*x8109))+(((-1.0)*x8110*x8113))+(((-1.0)*r02*x8112)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8112))+((cj1*sj2))+(((-1.0)*r22*x8113))+((x8107*x8111)));
evalcond[5]=((((-1.0)*r11*sj5*x8112))+(((-1.0)*r12*x8113))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x8107*x8108)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8115=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8115.valid){
continue;
}
CheckValue<IkReal> x8116 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8116.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8115.value)))+(x8116.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8117=IKsin(j4);
IkReal x8118=IKcos(j4);
IkReal x8119=(cj5*r10);
IkReal x8120=(r01*sj5);
IkReal x8121=(cj5*r00);
IkReal x8122=(cj5*r20);
IkReal x8123=((1.0)*x8118);
IkReal x8124=((1.0)*x8117);
IkReal x8125=(sj5*x8117);
evalcond[0]=((((-1.0)*x8122*x8124))+((r21*x8125))+(((-1.0)*r22*x8123)));
evalcond[1]=((((-1.0)*r12*x8123))+((r11*x8125))+(((-1.0)*x8119*x8124)));
evalcond[2]=(((x8118*x8121))+(((-1.0)*r02*x8124))+(((-1.0)*x8120*x8123)));
evalcond[3]=((-1.0)+(((-1.0)*x8121*x8124))+((x8117*x8120))+(((-1.0)*r02*x8123)));
evalcond[4]=(((cj2*sj1))+((x8118*x8122))+(((-1.0)*r21*sj5*x8123))+((cj1*sj2))+(((-1.0)*r22*x8124)));
evalcond[5]=((((-1.0)*r11*sj5*x8123))+(((-1.0)*r12*x8124))+((x8118*x8119))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8126=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8126;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8126);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8127=((1.0)*cj5);
IkReal x8128=((((-1.0)*r21*x8127))+(((-1.0)*r20*sj5)));
j4eval[0]=x8128;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8127))))));
j4eval[2]=IKsign(x8128);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8129=cj5*cj5;
IkReal x8130=r01*r01;
IkReal x8131=(cj5*r00);
IkReal x8132=(r01*sj5);
IkReal x8133=((((-2.0)*x8131*x8132))+((x8129*(r00*r00)))+(r02*r02)+x8130+(((-1.0)*x8129*x8130)));
j4eval[0]=x8133;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*x8132))+x8131))));
j4eval[2]=IKsign(x8133);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8134=cj5*cj5;
IkReal x8135=r01*r01;
IkReal x8136=(r01*sj5);
IkReal x8137=(cj5*r00);
CheckValue<IkReal> x8138=IKPowWithIntegerCheck(IKsign((((x8134*(r00*r00)))+(r02*r02)+(((-2.0)*x8136*x8137))+x8135+(((-1.0)*x8134*x8135)))),-1);
if(!x8138.valid){
continue;
}
CheckValue<IkReal> x8139 = IKatan2WithCheck(IkReal(((((-1.0)*x8136))+x8137)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8139.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8138.value)))+(x8139.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8140=IKsin(j4);
IkReal x8141=IKcos(j4);
IkReal x8142=(cj5*r10);
IkReal x8143=(r01*sj5);
IkReal x8144=(cj5*r00);
IkReal x8145=(cj5*r20);
IkReal x8146=((1.0)*x8141);
IkReal x8147=((1.0)*x8140);
IkReal x8148=(sj5*x8140);
evalcond[0]=((((-1.0)*x8145*x8147))+(((-1.0)*r22*x8146))+((r21*x8148)));
evalcond[1]=(((r11*x8148))+(((-1.0)*r12*x8146))+(((-1.0)*x8142*x8147)));
evalcond[2]=(((x8141*x8144))+(((-1.0)*x8143*x8146))+(((-1.0)*r02*x8147)));
evalcond[3]=((1.0)+((x8140*x8143))+(((-1.0)*x8144*x8147))+(((-1.0)*r02*x8146)));
evalcond[4]=(((cj2*sj1))+((x8141*x8145))+((cj1*sj2))+(((-1.0)*r22*x8147))+(((-1.0)*r21*sj5*x8146)));
evalcond[5]=((((-1.0)*r11*sj5*x8146))+((x8141*x8142))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x8147))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8149=((1.0)*cj5);
CheckValue<IkReal> x8150=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8149))+(((-1.0)*r20*sj5)))),-1);
if(!x8150.valid){
continue;
}
CheckValue<IkReal> x8151 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8149))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8151.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8150.value)))+(x8151.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8152=IKsin(j4);
IkReal x8153=IKcos(j4);
IkReal x8154=(cj5*r10);
IkReal x8155=(r01*sj5);
IkReal x8156=(cj5*r00);
IkReal x8157=(cj5*r20);
IkReal x8158=((1.0)*x8153);
IkReal x8159=((1.0)*x8152);
IkReal x8160=(sj5*x8152);
evalcond[0]=(((r21*x8160))+(((-1.0)*x8157*x8159))+(((-1.0)*r22*x8158)));
evalcond[1]=(((r11*x8160))+(((-1.0)*r12*x8158))+(((-1.0)*x8154*x8159)));
evalcond[2]=(((x8153*x8156))+(((-1.0)*r02*x8159))+(((-1.0)*x8155*x8158)));
evalcond[3]=((1.0)+(((-1.0)*x8156*x8159))+((x8152*x8155))+(((-1.0)*r02*x8158)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8153*x8157))+(((-1.0)*r21*sj5*x8158))+(((-1.0)*r22*x8159)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8153*x8154))+(((-1.0)*r11*sj5*x8158))+((cj1*cj2))+(((-1.0)*r12*x8159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8161 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8161.valid){
continue;
}
CheckValue<IkReal> x8162=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8161.value)+(((1.5707963267949)*(x8162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8163=IKsin(j4);
IkReal x8164=IKcos(j4);
IkReal x8165=(cj5*r10);
IkReal x8166=(r01*sj5);
IkReal x8167=(cj5*r00);
IkReal x8168=(cj5*r20);
IkReal x8169=((1.0)*x8164);
IkReal x8170=((1.0)*x8163);
IkReal x8171=(sj5*x8163);
evalcond[0]=((((-1.0)*x8168*x8170))+((r21*x8171))+(((-1.0)*r22*x8169)));
evalcond[1]=(((r11*x8171))+(((-1.0)*r12*x8169))+(((-1.0)*x8165*x8170)));
evalcond[2]=((((-1.0)*x8166*x8169))+((x8164*x8167))+(((-1.0)*r02*x8170)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8169))+((x8163*x8166))+(((-1.0)*x8167*x8170)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r21*sj5*x8169))+((cj1*sj2))+((x8164*x8168))+(((-1.0)*r22*x8170)));
evalcond[5]=((((-1.0)*r12*x8170))+((x8164*x8165))+(((-1.0)*sj1*sj2))+(((-1.0)*r11*sj5*x8169))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8172=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8172);
rxp1_1=(px*r21);
rxp1_2=(r11*x8172);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8173=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8173);
rxp1_1=(px*r21);
rxp1_2=(r11*x8173);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8174=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8174);
rxp1_1=(px*r21);
rxp1_2=(r11*x8174);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8177=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8177.valid){
continue;
}
IkReal x8175=x8177.value;
IkReal x8176=(sj0*x8175);
cj4array[0]=((((-1.0)*sj1*sj2*x8176))+((cj1*cj2*x8176)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8178=IKsin(j4);
IkReal x8179=IKcos(j4);
IkReal x8180=(r21*sj5);
IkReal x8181=(cj5*r20);
IkReal x8182=((1.0)*x8178);
IkReal x8183=((1.0)*x8179);
evalcond[0]=((-1.0)*r02*x8178);
evalcond[1]=((((-1.0)*r02*x8183))+(((-1.0)*sj0)));
evalcond[2]=(((x8178*x8180))+(((-1.0)*x8181*x8182)));
evalcond[3]=(((r11*sj5*x8178))+(((-1.0)*cj5*r10*x8182)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8179*x8181))+(((-1.0)*x8180*x8183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8186=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8186.valid){
continue;
}
IkReal x8184=x8186.value;
IkReal x8185=((1.0)*x8184);
cj4array[0]=((((-1.0)*cj2*sj1*x8185))+(((-1.0)*cj1*sj2*x8185)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8187=IKsin(j4);
IkReal x8188=IKcos(j4);
IkReal x8189=(r11*sj5);
IkReal x8190=((1.0)*sj0);
IkReal x8191=((1.0)*x8188);
IkReal x8192=((1.0)*cj5*x8187);
evalcond[0]=((-1.0)*r02*x8187);
evalcond[1]=((((-1.0)*r02*x8191))+(((-1.0)*x8190)));
evalcond[2]=(((r21*sj5*x8187))+(((-1.0)*r20*x8192)));
evalcond[3]=(((x8187*x8189))+(((-1.0)*r10*x8192)));
evalcond[4]=((((-1.0)*cj1*cj2*x8190))+((sj0*sj1*sj2))+((cj5*r10*x8188))+(((-1.0)*x8189*x8191)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8193=IKPowWithIntegerCheck(r02,-1);
if(!x8193.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8193.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8194=IKsin(j4);
IkReal x8195=IKcos(j4);
IkReal x8196=(cj5*x8195);
IkReal x8197=(sj5*x8194);
IkReal x8198=((1.0)*sj5*x8195);
IkReal x8199=((1.0)*cj5*x8194);
evalcond[0]=((-1.0)*r02*x8194);
evalcond[1]=(((r21*x8197))+(((-1.0)*r20*x8199)));
evalcond[2]=(((r11*x8197))+(((-1.0)*r10*x8199)));
evalcond[3]=(((r20*x8196))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8198)));
evalcond[4]=(((r10*x8196))+(((-1.0)*cj1*cj2*sj0))+(((-1.0)*r11*x8198))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8200=((1.0)*sj0);
IkReal x8201=((1.0)*cj0);
CheckValue<IkReal> x8202 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8201))+(((-1.0)*r12*x8200)))),IkReal(((((-1.0)*r01*sj5*x8201))+((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8200)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8202.valid){
continue;
}
CheckValue<IkReal> x8203=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8203.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8202.value)+(((1.5707963267949)*(x8203.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8204=IKsin(j4);
IkReal x8205=IKcos(j4);
IkReal x8206=(cj5*r10);
IkReal x8207=(sj1*sj2);
IkReal x8208=(r01*sj5);
IkReal x8209=(cj5*r00);
IkReal x8210=(cj5*r20);
IkReal x8211=((1.0)*x8205);
IkReal x8212=((1.0)*cj1*cj2);
IkReal x8213=((1.0)*x8204);
IkReal x8214=(sj5*x8204);
evalcond[0]=((((-1.0)*x8210*x8213))+(((-1.0)*r22*x8211))+((r21*x8214)));
evalcond[1]=(((r11*x8214))+cj0+(((-1.0)*r12*x8211))+(((-1.0)*x8206*x8213)));
evalcond[2]=((((-1.0)*sj0))+((x8204*x8208))+(((-1.0)*x8209*x8213))+(((-1.0)*r02*x8211)));
evalcond[3]=(((cj2*sj1))+((x8205*x8210))+((cj1*sj2))+(((-1.0)*r21*sj5*x8211))+(((-1.0)*r22*x8213)));
evalcond[4]=((((-1.0)*cj0*x8212))+((x8205*x8209))+((cj0*x8207))+(((-1.0)*r02*x8213))+(((-1.0)*x8208*x8211)));
evalcond[5]=(((sj0*x8207))+((x8205*x8206))+(((-1.0)*r12*x8213))+(((-1.0)*sj0*x8212))+(((-1.0)*r11*sj5*x8211)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8215=((1.0)*cj5);
CheckValue<IkReal> x8216=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8215)))),-1);
if(!x8216.valid){
continue;
}
CheckValue<IkReal> x8217 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8215)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8217.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8216.value)))+(x8217.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8218=IKsin(j4);
IkReal x8219=IKcos(j4);
IkReal x8220=(cj5*r10);
IkReal x8221=(sj1*sj2);
IkReal x8222=(r01*sj5);
IkReal x8223=(cj5*r00);
IkReal x8224=(cj5*r20);
IkReal x8225=((1.0)*x8219);
IkReal x8226=((1.0)*cj1*cj2);
IkReal x8227=((1.0)*x8218);
IkReal x8228=(sj5*x8218);
evalcond[0]=((((-1.0)*x8224*x8227))+((r21*x8228))+(((-1.0)*r22*x8225)));
evalcond[1]=((((-1.0)*x8220*x8227))+cj0+((r11*x8228))+(((-1.0)*r12*x8225)));
evalcond[2]=((((-1.0)*x8223*x8227))+(((-1.0)*sj0))+((x8218*x8222))+(((-1.0)*r02*x8225)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((x8219*x8224))+(((-1.0)*r21*sj5*x8225))+(((-1.0)*r22*x8227)));
evalcond[4]=(((cj0*x8221))+(((-1.0)*r02*x8227))+((x8219*x8223))+(((-1.0)*cj0*x8226))+(((-1.0)*x8222*x8225)));
evalcond[5]=((((-1.0)*r11*sj5*x8225))+(((-1.0)*r12*x8227))+((x8219*x8220))+(((-1.0)*sj0*x8226))+((sj0*x8221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8229=((1.0)*cj5);
CheckValue<IkReal> x8230 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8229)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8230.valid){
continue;
}
CheckValue<IkReal> x8231=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8229)))),-1);
if(!x8231.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8230.value)+(((1.5707963267949)*(x8231.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8232=IKsin(j4);
IkReal x8233=IKcos(j4);
IkReal x8234=(cj5*r10);
IkReal x8235=(sj1*sj2);
IkReal x8236=(r01*sj5);
IkReal x8237=(cj5*r00);
IkReal x8238=(cj5*r20);
IkReal x8239=((1.0)*x8233);
IkReal x8240=((1.0)*cj1*cj2);
IkReal x8241=((1.0)*x8232);
IkReal x8242=(sj5*x8232);
evalcond[0]=((((-1.0)*x8238*x8241))+((r21*x8242))+(((-1.0)*r22*x8239)));
evalcond[1]=(cj0+(((-1.0)*r12*x8239))+((r11*x8242))+(((-1.0)*x8234*x8241)));
evalcond[2]=((((-1.0)*sj0))+((x8232*x8236))+(((-1.0)*r02*x8239))+(((-1.0)*x8237*x8241)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8241))+(((-1.0)*r21*sj5*x8239))+((x8233*x8238)));
evalcond[4]=(((cj0*x8235))+(((-1.0)*x8236*x8239))+(((-1.0)*cj0*x8240))+(((-1.0)*r02*x8241))+((x8233*x8237)));
evalcond[5]=((((-1.0)*r11*sj5*x8239))+(((-1.0)*sj0*x8240))+(((-1.0)*r12*x8241))+((sj0*x8235))+((x8233*x8234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8243=cj5*cj5;
IkReal x8244=r21*r21;
IkReal x8245=(cj2*sj1);
IkReal x8246=(cj1*sj2);
IkReal x8247=(r21*sj5);
IkReal x8248=((1.0)*cj5*r20);
CheckValue<IkReal> x8249=IKPowWithIntegerCheck(IKsign(((((-2.0)*cj5*r20*x8247))+(r22*r22)+(((-1.0)*x8243*x8244))+((x8243*(r20*r20)))+x8244)),-1);
if(!x8249.valid){
continue;
}
CheckValue<IkReal> x8250 = IKatan2WithCheck(IkReal((((r22*x8246))+((r22*x8245)))),IkReal(((((-1.0)*x8245*x8248))+((x8246*x8247))+(((-1.0)*x8246*x8248))+((x8245*x8247)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8250.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8249.value)))+(x8250.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x8251=IKsin(j4);
IkReal x8252=IKcos(j4);
IkReal x8253=(r21*sj5);
IkReal x8254=(cj5*r20);
IkReal x8255=((1.0)*x8252);
IkReal x8256=((1.0)*x8251);
evalcond[0]=(((x8251*x8253))+(((-1.0)*r22*x8255))+(((-1.0)*x8254*x8256)));
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8256))+(((-1.0)*x8253*x8255))+((x8252*x8254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8257=(cj5*sj4);
IkReal x8258=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x8258))+(((-1.0)*r00*x8257)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x8257))+(((-1.0)*r11*x8258))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x8258))+(((-1.0)*r00*x8257))))+IKsqr((((r10*x8257))+(((-1.0)*r11*x8258))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x8258))+(((-1.0)*r00*x8257))), (((r10*x8257))+(((-1.0)*r11*x8258))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x8259=IKcos(j0);
IkReal x8260=IKsin(j0);
IkReal x8261=(cj4*cj5);
IkReal x8262=((1.0)*cj1);
IkReal x8263=((0.39225)*sj1);
IkReal x8264=(r11*sj5);
IkReal x8265=(cj5*r11);
IkReal x8266=((1.0)*sj5);
IkReal x8267=((1.0)*sj4);
IkReal x8268=((1.0)*sj1);
IkReal x8269=((0.09465)*sj5);
IkReal x8270=(cj5*r01);
IkReal x8271=((0.425)*cj1);
IkReal x8272=((1.0)*cj4);
IkReal x8273=(sj2*x8259);
IkReal x8274=(sj2*x8260);
IkReal x8275=((0.39225)*cj1*cj2);
IkReal x8276=(cj2*x8259);
IkReal x8277=(cj2*x8260);
evalcond[0]=(((sj4*x8264))+(((-1.0)*cj5*r10*x8267))+(((-1.0)*r12*x8272))+x8259);
evalcond[1]=((((-1.0)*cj5*r00*x8267))+((r01*sj4*sj5))+(((-1.0)*r02*x8272))+(((-1.0)*x8260)));
evalcond[2]=((((-1.0)*x8262*x8273))+(((-1.0)*x8268*x8276))+(((-1.0)*r00*x8266))+(((-1.0)*x8270)));
evalcond[3]=((((-1.0)*x8262*x8274))+(((-1.0)*r10*x8266))+(((-1.0)*x8268*x8277))+(((-1.0)*x8265)));
evalcond[4]=((((-1.0)*cj4*r01*x8266))+(((-1.0)*x8262*x8276))+(((-1.0)*r02*x8267))+((sj1*x8273))+((r00*x8261)));
evalcond[5]=((((-1.0)*r12*x8267))+(((-1.0)*x8262*x8277))+(((-1.0)*x8264*x8272))+((sj1*x8274))+((r10*x8261)));
evalcond[6]=(((x8259*x8275))+((x8259*x8271))+(((-1.0)*px))+(((-0.10915)*x8260))+(((-1.0)*r00*x8269))+(((-1.0)*x8263*x8273))+(((-0.09465)*x8270)));
evalcond[7]=((((-1.0)*r10*x8269))+(((-1.0)*py))+(((0.10915)*x8259))+(((-1.0)*x8263*x8274))+(((-0.09465)*x8265))+((x8260*x8271))+((x8260*x8275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
CheckValue<IkReal> x8278 = IKatan2WithCheck(IkReal((((cj5*r11))+((r10*sj5)))),IkReal((((r00*sj5))+((cj5*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8278.valid){
continue;
}
CheckValue<IkReal> x8279=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))),-1);
if(!x8279.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(x8278.value)+(((1.5707963267949)*(x8279.value))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[4];
IkReal x8280=IKcos(j0);
IkReal x8281=IKsin(j0);
IkReal x8282=((1.0)*cj1);
IkReal x8283=((0.39225)*sj1);
IkReal x8284=(cj5*r11);
IkReal x8285=((1.0)*sj5);
IkReal x8286=(cj5*r01);
IkReal x8287=((1.0)*sj1);
IkReal x8288=((0.09465)*sj5);
IkReal x8289=((0.39225)*cj1);
IkReal x8290=((0.425)*cj1);
IkReal x8291=(sj2*x8280);
IkReal x8292=(sj2*x8281);
IkReal x8293=(cj2*x8280);
IkReal x8294=(cj2*x8281);
evalcond[0]=((((-1.0)*x8286))+(((-1.0)*r00*x8285))+(((-1.0)*x8287*x8293))+(((-1.0)*x8282*x8291)));
evalcond[1]=((((-1.0)*x8284))+(((-1.0)*r10*x8285))+(((-1.0)*x8287*x8294))+(((-1.0)*x8282*x8292)));
evalcond[2]=((((-1.0)*x8283*x8291))+(((-0.09465)*x8286))+(((-0.10915)*x8281))+((x8289*x8293))+(((-1.0)*r00*x8288))+(((-1.0)*px))+((x8280*x8290)));
evalcond[3]=((((0.10915)*x8280))+(((-1.0)*x8283*x8292))+(((-0.09465)*x8284))+((x8289*x8294))+(((-1.0)*py))+(((-1.0)*r10*x8288))+((x8281*x8290)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8295=((1.0)*cj5);
IkReal x8296=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8295)));
j4eval[0]=x8296;
j4eval[1]=((IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8295)))))+(IKabs((cj0*r22))));
j4eval[2]=IKsign(x8296);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8297=((1.0)*cj5);
IkReal x8298=((((-1.0)*r11*x8297))+(((-1.0)*r10*sj5)));
j4eval[0]=x8298;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8297))))));
j4eval[2]=IKsign(x8298);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal x8299=((1.0)*sj0);
IkReal x8300=((1.0)*cj0);
IkReal x8301=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8301;
j4eval[1]=((IKabs((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r01*sj5*x8300))+(((-1.0)*r11*sj5*x8299)))))+(IKabs(((((-1.0)*r12*x8299))+(((-1.0)*r02*x8300))))));
j4eval[2]=IKsign(x8301);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8302=((-1.0)*r20);
IkReal x8304 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8304)==0){
continue;
}
IkReal x8303=pow(x8304,-0.5);
CheckValue<IkReal> x8305 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8302),IKFAST_ATAN2_MAGTHRESH);
if(!x8305.valid){
continue;
}
IkReal gconst132=((-1.0)*(x8305.value));
IkReal gconst133=(r21*x8303);
IkReal gconst134=(x8302*x8303);
CheckValue<IkReal> x8306 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8306.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8306.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8307=((-1.0)*r20);
IkReal x8308=x8303;
CheckValue<IkReal> x8310 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8307),IKFAST_ATAN2_MAGTHRESH);
if(!x8310.valid){
continue;
}
IkReal x8309=((-1.0)*(x8310.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8309;
IkReal gconst132=x8309;
IkReal gconst133=(r21*x8308);
IkReal gconst134=(x8307*x8308);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8311=((-1.0)*r20);
IkReal x8312=x8303;
CheckValue<IkReal> x8314 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8311),IKFAST_ATAN2_MAGTHRESH);
if(!x8314.valid){
continue;
}
IkReal x8313=((-1.0)*(x8314.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8313;
IkReal gconst132=x8313;
IkReal gconst133=(r21*x8312);
IkReal gconst134=(x8311*x8312);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8315=((-1.0)*r20);
IkReal x8316=x8303;
CheckValue<IkReal> x8318 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8315),IKFAST_ATAN2_MAGTHRESH);
if(!x8318.valid){
continue;
}
IkReal x8317=((-1.0)*(x8318.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst133;
cj5=gconst134;
j5=x8317;
IkReal gconst132=x8317;
IkReal gconst133=(r21*x8316);
IkReal gconst134=(x8315*x8316);
IkReal x8319=r22*r22;
CheckValue<IkReal> x8322=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8319))),-1);
if(!x8322.valid){
continue;
}
IkReal x8320=x8322.value;
IkReal x8321=(x8319+(((2.0)*x8320*(r20*r20)*(r21*r21)))+((x8320*(r21*r21*r21*r21)))+((x8320*(r20*r20*r20*r20))));
j4eval[0]=x8321;
j4eval[1]=IKsign(x8321);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8323=(gconst133*r21);
IkReal x8324=(cj1*sj2);
IkReal x8325=(gconst134*r20);
IkReal x8326=(cj2*sj1);
CheckValue<IkReal> x8327=IKPowWithIntegerCheck(IKsign(((r22*r22)+(((-2.0)*x8323*x8325))+(x8323*x8323)+(x8325*x8325))),-1);
if(!x8327.valid){
continue;
}
CheckValue<IkReal> x8328 = IKatan2WithCheck(IkReal((((r22*x8324))+((r22*x8326)))),IkReal((((x8323*x8326))+((x8323*x8324))+(((-1.0)*x8324*x8325))+(((-1.0)*x8325*x8326)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8327.value)))+(x8328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8329=IKsin(j4);
IkReal x8330=IKcos(j4);
IkReal x8331=(sj1*sj2);
IkReal x8332=(gconst133*r11);
IkReal x8333=(gconst133*r21);
IkReal x8334=(gconst133*r01);
IkReal x8335=((1.0)*x8330);
IkReal x8336=(gconst134*x8330);
IkReal x8337=((1.0)*x8329);
IkReal x8338=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8335))+((x8329*x8333))+(((-1.0)*gconst134*r20*x8337)));
evalcond[1]=(((x8329*x8332))+cj0+(((-1.0)*r12*x8335))+(((-1.0)*gconst134*r10*x8337)));
evalcond[2]=((((-1.0)*gconst134*r00*x8337))+(((-1.0)*sj0))+((x8329*x8334))+(((-1.0)*r02*x8335)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8337))+((cj1*sj2))+((r20*x8336))+(((-1.0)*x8333*x8335)));
evalcond[4]=(((r00*x8336))+(((-1.0)*r02*x8337))+((cj0*x8331))+(((-1.0)*cj0*x8338))+(((-1.0)*x8334*x8335)));
evalcond[5]=((((-1.0)*x8332*x8335))+(((-1.0)*r12*x8337))+((r10*x8336))+(((-1.0)*sj0*x8338))+((sj0*x8331)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8339=((1.0)*gconst134);
CheckValue<IkReal> x8340=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r10))+(((-1.0)*r11*x8339)))),-1);
if(!x8340.valid){
continue;
}
CheckValue<IkReal> x8341 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst133*r21*sj0))+(((-1.0)*r20*sj0*x8339)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8341.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8340.value)))+(x8341.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8342=IKsin(j4);
IkReal x8343=IKcos(j4);
IkReal x8344=(sj1*sj2);
IkReal x8345=(gconst133*r11);
IkReal x8346=(gconst133*r21);
IkReal x8347=(gconst133*r01);
IkReal x8348=((1.0)*x8343);
IkReal x8349=(gconst134*x8343);
IkReal x8350=((1.0)*x8342);
IkReal x8351=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*gconst134*r20*x8350))+((x8342*x8346))+(((-1.0)*r22*x8348)));
evalcond[1]=(cj0+((x8342*x8345))+(((-1.0)*gconst134*r10*x8350))+(((-1.0)*r12*x8348)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8348))+((x8342*x8347))+(((-1.0)*gconst134*r00*x8350)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8350))+((cj1*sj2))+((r20*x8349))+(((-1.0)*x8346*x8348)));
evalcond[4]=((((-1.0)*r02*x8350))+(((-1.0)*cj0*x8351))+((cj0*x8344))+(((-1.0)*x8347*x8348))+((r00*x8349)));
evalcond[5]=((((-1.0)*x8345*x8348))+((sj0*x8344))+(((-1.0)*r12*x8350))+(((-1.0)*sj0*x8351))+((r10*x8349)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8352=((1.0)*gconst134);
CheckValue<IkReal> x8353 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8352))+((cj0*gconst133*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8353.valid){
continue;
}
CheckValue<IkReal> x8354=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst133*r00))+(((-1.0)*r01*x8352)))),-1);
if(!x8354.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8353.value)+(((1.5707963267949)*(x8354.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8355=IKsin(j4);
IkReal x8356=IKcos(j4);
IkReal x8357=(sj1*sj2);
IkReal x8358=(gconst133*r11);
IkReal x8359=(gconst133*r21);
IkReal x8360=(gconst133*r01);
IkReal x8361=((1.0)*x8356);
IkReal x8362=(gconst134*x8356);
IkReal x8363=((1.0)*x8355);
IkReal x8364=((1.0)*cj1*cj2);
evalcond[0]=(((x8355*x8359))+(((-1.0)*gconst134*r20*x8363))+(((-1.0)*r22*x8361)));
evalcond[1]=((((-1.0)*gconst134*r10*x8363))+cj0+((x8355*x8358))+(((-1.0)*r12*x8361)));
evalcond[2]=((((-1.0)*gconst134*r00*x8363))+(((-1.0)*sj0))+((x8355*x8360))+(((-1.0)*r02*x8361)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8359*x8361))+(((-1.0)*r22*x8363))+((r20*x8362)));
evalcond[4]=(((r00*x8362))+((cj0*x8357))+(((-1.0)*r02*x8363))+(((-1.0)*cj0*x8364))+(((-1.0)*x8360*x8361)));
evalcond[5]=((((-1.0)*r12*x8363))+((sj0*x8357))+(((-1.0)*sj0*x8364))+(((-1.0)*x8358*x8361))+((r10*x8362)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8365=((-1.0)*r21);
IkReal x8367 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8367)==0){
continue;
}
IkReal x8366=pow(x8367,-0.5);
CheckValue<IkReal> x8368 = IKatan2WithCheck(IkReal(x8365),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8368.valid){
continue;
}
IkReal gconst135=((3.14159265358979)+(((-1.0)*(x8368.value))));
IkReal gconst136=(x8365*x8366);
IkReal gconst137=((1.0)*r20*x8366);
CheckValue<IkReal> x8369 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8369.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8369.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8370=((-1.0)*r21);
CheckValue<IkReal> x8373 = IKatan2WithCheck(IkReal(x8370),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8373.valid){
continue;
}
IkReal x8371=((1.0)*(x8373.value));
IkReal x8372=x8366;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8371)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8371)));
IkReal gconst136=(x8370*x8372);
IkReal gconst137=((1.0)*r20*x8372);
IkReal x8374=r22*r22;
IkReal x8375=((1.0)*x8374);
CheckValue<IkReal> x8379=IKPowWithIntegerCheck(((-1.0)+x8374),-1);
if(!x8379.valid){
continue;
}
IkReal x8376=x8379.value;
if((((1.0)+(((-1.0)*x8375)))) < -0.00001)
continue;
IkReal x8377=IKsqrt(((1.0)+(((-1.0)*x8375))));
IkReal x8378=(cj0*x8376*x8377);
j4eval[0]=((IKabs((x8378+(((-1.0)*x8375*x8378)))))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8380=((-1.0)*r21);
CheckValue<IkReal> x8383 = IKatan2WithCheck(IkReal(x8380),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8383.valid){
continue;
}
IkReal x8381=((1.0)*(x8383.value));
IkReal x8382=x8366;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8381)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8381)));
IkReal gconst136=(x8380*x8382);
IkReal gconst137=((1.0)*r20*x8382);
IkReal x8384=r22*r22;
IkReal x8385=((1.0)*x8384);
CheckValue<IkReal> x8389=IKPowWithIntegerCheck(((-1.0)+x8384),-1);
if(!x8389.valid){
continue;
}
IkReal x8386=x8389.value;
if((((1.0)+(((-1.0)*x8385)))) < -0.00001)
continue;
IkReal x8387=IKsqrt(((1.0)+(((-1.0)*x8385))));
IkReal x8388=(sj0*x8386*x8387);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs((x8388+(((-1.0)*x8385*x8388))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8390=((-1.0)*r21);
CheckValue<IkReal> x8393 = IKatan2WithCheck(IkReal(x8390),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8393.valid){
continue;
}
IkReal x8391=((1.0)*(x8393.value));
IkReal x8392=x8366;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst136;
cj5=gconst137;
j5=((3.14159265)+(((-1.0)*x8391)));
IkReal gconst135=((3.14159265358979)+(((-1.0)*x8391)));
IkReal gconst136=(x8390*x8392);
IkReal gconst137=((1.0)*r20*x8392);
IkReal x8394=r22*r22;
IkReal x8395=(r12*sj0);
IkReal x8396=(cj0*r02);
CheckValue<IkReal> x8400=IKPowWithIntegerCheck(((-1.0)+x8394),-1);
if(!x8400.valid){
continue;
}
IkReal x8397=x8400.value;
if((((1.0)+(((-1.0)*x8394)))) < -0.00001)
continue;
IkReal x8398=IKsqrt(((1.0)+(((-1.0)*x8394))));
IkReal x8399=(r22*x8397*x8398);
j4eval[0]=0;
j4eval[1]=((IKabs(((((-1.0)*x8395))+(((-1.0)*x8396)))))+(IKabs((((x8395*x8399))+((x8396*x8399))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8401=((1.0)*sj0);
IkReal x8402=((1.0)*cj0);
CheckValue<IkReal> x8403=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst136*r20))+(((-1.0)*gconst137*r21)))),-1);
if(!x8403.valid){
continue;
}
CheckValue<IkReal> x8404 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x8402))+(((-1.0)*r12*x8401)))),IkReal(((((-1.0)*gconst136*r11*x8401))+((gconst137*r10*sj0))+(((-1.0)*gconst136*r01*x8402))+((cj0*gconst137*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8404.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8403.value)))+(x8404.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8405=IKsin(j4);
IkReal x8406=IKcos(j4);
IkReal x8407=(gconst136*r01);
IkReal x8408=(gconst137*r10);
IkReal x8409=(sj1*sj2);
IkReal x8410=(gconst137*r20);
IkReal x8411=(gconst136*r11);
IkReal x8412=(gconst136*r21);
IkReal x8413=(gconst137*r00);
IkReal x8414=((1.0)*x8406);
IkReal x8415=((1.0)*cj1*cj2);
IkReal x8416=((1.0)*x8405);
evalcond[0]=(((x8405*x8412))+(((-1.0)*x8410*x8416))+(((-1.0)*r22*x8414)));
evalcond[1]=((((-1.0)*r12*x8414))+(((-1.0)*x8408*x8416))+cj0+((x8405*x8411)));
evalcond[2]=((((-1.0)*sj0))+((x8405*x8407))+(((-1.0)*r02*x8414))+(((-1.0)*x8413*x8416)));
evalcond[3]=(((cj2*sj1))+((x8406*x8410))+((cj1*sj2))+(((-1.0)*x8412*x8414))+(((-1.0)*r22*x8416)));
evalcond[4]=(((x8406*x8413))+(((-1.0)*cj0*x8415))+(((-1.0)*r02*x8416))+(((-1.0)*x8407*x8414))+((cj0*x8409)));
evalcond[5]=((((-1.0)*r12*x8416))+((sj0*x8409))+((x8406*x8408))+(((-1.0)*sj0*x8415))+(((-1.0)*x8411*x8414)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8417=((1.0)*gconst137);
CheckValue<IkReal> x8418 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8417))+((gconst136*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8418.valid){
continue;
}
CheckValue<IkReal> x8419=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8417))+(((-1.0)*gconst136*r10)))),-1);
if(!x8419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8418.value)+(((1.5707963267949)*(x8419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8420=IKsin(j4);
IkReal x8421=IKcos(j4);
IkReal x8422=(gconst136*r01);
IkReal x8423=(gconst137*r10);
IkReal x8424=(sj1*sj2);
IkReal x8425=(gconst137*r20);
IkReal x8426=(gconst136*r11);
IkReal x8427=(gconst136*r21);
IkReal x8428=(gconst137*r00);
IkReal x8429=((1.0)*x8421);
IkReal x8430=((1.0)*cj1*cj2);
IkReal x8431=((1.0)*x8420);
evalcond[0]=((((-1.0)*r22*x8429))+(((-1.0)*x8425*x8431))+((x8420*x8427)));
evalcond[1]=(cj0+((x8420*x8426))+(((-1.0)*r12*x8429))+(((-1.0)*x8423*x8431)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8429))+((x8420*x8422))+(((-1.0)*x8428*x8431)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8427*x8429))+((cj1*sj2))+((x8421*x8425))+(((-1.0)*r22*x8431)));
evalcond[4]=(((cj0*x8424))+((x8421*x8428))+(((-1.0)*x8422*x8429))+(((-1.0)*r02*x8431))+(((-1.0)*cj0*x8430)));
evalcond[5]=((((-1.0)*x8426*x8429))+(((-1.0)*sj0*x8430))+(((-1.0)*r12*x8431))+((x8421*x8423))+((sj0*x8424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8432=((1.0)*gconst137);
CheckValue<IkReal> x8433 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst136*r21))+(((-1.0)*cj0*r20*x8432)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8433.valid){
continue;
}
CheckValue<IkReal> x8434=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8432))+(((-1.0)*gconst136*r00)))),-1);
if(!x8434.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8433.value)+(((1.5707963267949)*(x8434.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8435=IKsin(j4);
IkReal x8436=IKcos(j4);
IkReal x8437=(gconst136*r01);
IkReal x8438=(gconst137*r10);
IkReal x8439=(sj1*sj2);
IkReal x8440=(gconst137*r20);
IkReal x8441=(gconst136*r11);
IkReal x8442=(gconst136*r21);
IkReal x8443=(gconst137*r00);
IkReal x8444=((1.0)*x8436);
IkReal x8445=((1.0)*cj1*cj2);
IkReal x8446=((1.0)*x8435);
evalcond[0]=((((-1.0)*x8440*x8446))+((x8435*x8442))+(((-1.0)*r22*x8444)));
evalcond[1]=((((-1.0)*x8438*x8446))+cj0+(((-1.0)*r12*x8444))+((x8435*x8441)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8443*x8446))+((x8435*x8437))+(((-1.0)*r02*x8444)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x8442*x8444))+(((-1.0)*r22*x8446))+((x8436*x8440)));
evalcond[4]=((((-1.0)*x8437*x8444))+((x8436*x8443))+(((-1.0)*cj0*x8445))+(((-1.0)*r02*x8446))+((cj0*x8439)));
evalcond[5]=((((-1.0)*r12*x8446))+((sj0*x8439))+(((-1.0)*sj0*x8445))+((x8436*x8438))+(((-1.0)*x8441*x8444)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8447=((-1.0)*r10);
IkReal x8449 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8449)==0){
continue;
}
IkReal x8448=pow(x8449,-0.5);
CheckValue<IkReal> x8450 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8447),IKFAST_ATAN2_MAGTHRESH);
if(!x8450.valid){
continue;
}
IkReal gconst138=((-1.0)*(x8450.value));
IkReal gconst139=(r11*x8448);
IkReal gconst140=(x8447*x8448);
CheckValue<IkReal> x8451 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8451.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8451.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8452=((-1.0)*r10);
IkReal x8453=x8448;
CheckValue<IkReal> x8455 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x8452),IKFAST_ATAN2_MAGTHRESH);
if(!x8455.valid){
continue;
}
IkReal x8454=((-1.0)*(x8455.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst139;
cj5=gconst140;
j5=x8454;
IkReal gconst138=x8454;
IkReal gconst139=(r11*x8453);
IkReal gconst140=(x8452*x8453);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8456=((1.0)*sj0);
IkReal x8457=((1.0)*gconst139);
CheckValue<IkReal> x8458=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst140*r21))+(((-1.0)*r20*x8457)))),-1);
if(!x8458.valid){
continue;
}
CheckValue<IkReal> x8459 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8456))+(((-1.0)*cj0*r02)))),IkReal((((gconst140*r10*sj0))+(((-1.0)*cj0*r01*x8457))+(((-1.0)*gconst139*r11*x8456))+((cj0*gconst140*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8459.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8458.value)))+(x8459.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8460=IKsin(j4);
IkReal x8461=IKcos(j4);
IkReal x8462=(gconst140*r00);
IkReal x8463=(sj1*sj2);
IkReal x8464=(gconst139*r11);
IkReal x8465=(gconst139*r01);
IkReal x8466=(gconst139*r21);
IkReal x8467=((1.0)*x8461);
IkReal x8468=((1.0)*x8460);
IkReal x8469=((1.0)*cj1*cj2);
IkReal x8470=(gconst140*x8461);
evalcond[0]=((((-1.0)*gconst140*r20*x8468))+((x8460*x8466))+(((-1.0)*r22*x8467)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8468))+((x8460*x8464))+(((-1.0)*r12*x8467)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8467))+((x8460*x8465))+(((-1.0)*x8462*x8468)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8468))+(((-1.0)*x8466*x8467))+((r20*x8470)));
evalcond[4]=((((-1.0)*r02*x8468))+(((-1.0)*x8465*x8467))+((cj0*x8463))+((x8461*x8462))+(((-1.0)*cj0*x8469)));
evalcond[5]=((((-1.0)*sj0*x8469))+((r10*x8470))+(((-1.0)*r12*x8468))+((sj0*x8463))+(((-1.0)*x8464*x8467)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8471=((1.0)*gconst140);
CheckValue<IkReal> x8472 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8471))+((cj0*gconst139*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8472.valid){
continue;
}
CheckValue<IkReal> x8473=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst139*r00))+(((-1.0)*r01*x8471)))),-1);
if(!x8473.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8472.value)+(((1.5707963267949)*(x8473.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8474=IKsin(j4);
IkReal x8475=IKcos(j4);
IkReal x8476=(gconst140*r00);
IkReal x8477=(sj1*sj2);
IkReal x8478=(gconst139*r11);
IkReal x8479=(gconst139*r01);
IkReal x8480=(gconst139*r21);
IkReal x8481=((1.0)*x8475);
IkReal x8482=((1.0)*x8474);
IkReal x8483=((1.0)*cj1*cj2);
IkReal x8484=(gconst140*x8475);
evalcond[0]=((((-1.0)*gconst140*r20*x8482))+(((-1.0)*r22*x8481))+((x8474*x8480)));
evalcond[1]=(cj0+(((-1.0)*gconst140*r10*x8482))+(((-1.0)*r12*x8481))+((x8474*x8478)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8481))+(((-1.0)*x8476*x8482))+((x8474*x8479)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*x8480*x8481))+((cj1*sj2))+(((-1.0)*r22*x8482))+((r20*x8484)));
evalcond[4]=(((x8475*x8476))+(((-1.0)*cj0*x8483))+(((-1.0)*r02*x8482))+((cj0*x8477))+(((-1.0)*x8479*x8481)));
evalcond[5]=(((r10*x8484))+(((-1.0)*sj0*x8483))+(((-1.0)*r12*x8482))+(((-1.0)*x8478*x8481))+((sj0*x8477)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8485=((-1.0)*r11);
IkReal x8487 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x8487)==0){
continue;
}
IkReal x8486=pow(x8487,-0.5);
CheckValue<IkReal> x8488 = IKatan2WithCheck(IkReal(x8485),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8488.valid){
continue;
}
IkReal gconst141=((3.14159265358979)+(((-1.0)*(x8488.value))));
IkReal gconst142=(x8485*x8486);
IkReal gconst143=((1.0)*r10*x8486);
CheckValue<IkReal> x8489 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8489.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8489.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8490=((-1.0)*r11);
CheckValue<IkReal> x8493 = IKatan2WithCheck(IkReal(x8490),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8493.valid){
continue;
}
IkReal x8491=((1.0)*(x8493.value));
IkReal x8492=x8486;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8491)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8491)));
IkReal gconst142=(x8490*x8492);
IkReal gconst143=((1.0)*r10*x8492);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8494=((-1.0)*r11);
CheckValue<IkReal> x8497 = IKatan2WithCheck(IkReal(x8494),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8497.valid){
continue;
}
IkReal x8495=((1.0)*(x8497.value));
IkReal x8496=x8486;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8495)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8495)));
IkReal gconst142=(x8494*x8496);
IkReal gconst143=((1.0)*r10*x8496);
IkReal x8498=r12*r12;
IkReal x8499=((1.0)*sj0);
IkReal x8500=(cj0*r02);
IkReal x8501=x8486;
j4eval[0]=((IKabs(((((-1.0)*x8500))+(((-1.0)*r12*x8499)))))+(IKabs(((((-1.0)*x8499*x8501))+((sj0*x8498*x8501))+((r12*x8500*x8501))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8502=((-1.0)*r11);
CheckValue<IkReal> x8505 = IKatan2WithCheck(IkReal(x8502),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x8505.valid){
continue;
}
IkReal x8503=((1.0)*(x8505.value));
IkReal x8504=x8486;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst142;
cj5=gconst143;
j5=((3.14159265)+(((-1.0)*x8503)));
IkReal gconst141=((3.14159265358979)+(((-1.0)*x8503)));
IkReal gconst142=(x8502*x8504);
IkReal gconst143=((1.0)*r10*x8504);
IkReal x8506=r12*r12;
IkReal x8507=(cj1*r22*sj2);
IkReal x8508=(cj2*r22*sj1);
CheckValue<IkReal> x8512=IKPowWithIntegerCheck(((-1.0)+x8506),-1);
if(!x8512.valid){
continue;
}
IkReal x8509=x8512.value;
if((((1.0)+(((-1.0)*x8506)))) < -0.00001)
continue;
IkReal x8510=IKsqrt(((1.0)+(((-1.0)*x8506))));
IkReal x8511=((1.0)*r12*x8509*x8510);
j4eval[0]=((IKabs(((((-1.0)*x8508*x8511))+(((-1.0)*x8507*x8511)))))+(IKabs((x8507+x8508))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8513=(gconst142*r21);
IkReal x8514=(cj1*sj2);
IkReal x8515=(cj2*sj1);
IkReal x8516=(gconst143*r20);
CheckValue<IkReal> x8517 = IKatan2WithCheck(IkReal((((r22*x8514))+((r22*x8515)))),IkReal(((((-1.0)*x8514*x8516))+((x8513*x8515))+((x8513*x8514))+(((-1.0)*x8515*x8516)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8517.valid){
continue;
}
CheckValue<IkReal> x8518=IKPowWithIntegerCheck(IKsign(((((-2.0)*x8513*x8516))+(x8516*x8516)+(r22*r22)+(x8513*x8513))),-1);
if(!x8518.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8517.value)+(((1.5707963267949)*(x8518.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8519=IKsin(j4);
IkReal x8520=IKcos(j4);
IkReal x8521=(sj1*sj2);
IkReal x8522=(gconst143*r20);
IkReal x8523=((1.0)*x8520);
IkReal x8524=((1.0)*cj1*cj2);
IkReal x8525=((1.0)*x8519);
IkReal x8526=(gconst142*x8519);
IkReal x8527=(gconst143*x8520);
evalcond[0]=(((r21*x8526))+(((-1.0)*r22*x8523))+(((-1.0)*x8522*x8525)));
evalcond[1]=((((-1.0)*gconst143*r10*x8525))+cj0+((r11*x8526))+(((-1.0)*r12*x8523)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8523))+((r01*x8526))+(((-1.0)*gconst143*r00*x8525)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst142*r21*x8523))+((cj1*sj2))+((x8520*x8522))+(((-1.0)*r22*x8525)));
evalcond[4]=((((-1.0)*r02*x8525))+(((-1.0)*cj0*x8524))+((r00*x8527))+((cj0*x8521))+(((-1.0)*gconst142*r01*x8523)));
evalcond[5]=(((sj0*x8521))+(((-1.0)*gconst142*r11*x8523))+(((-1.0)*sj0*x8524))+(((-1.0)*r12*x8525))+((r10*x8527)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8528=((1.0)*sj0);
IkReal x8529=((1.0)*gconst142);
CheckValue<IkReal> x8530=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8529))+(((-1.0)*gconst143*r21)))),-1);
if(!x8530.valid){
continue;
}
CheckValue<IkReal> x8531 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8528)))),IkReal((((cj0*gconst143*r00))+(((-1.0)*cj0*r01*x8529))+(((-1.0)*gconst142*r11*x8528))+((gconst143*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8530.value)))+(x8531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8532=IKsin(j4);
IkReal x8533=IKcos(j4);
IkReal x8534=(sj1*sj2);
IkReal x8535=(gconst143*r20);
IkReal x8536=((1.0)*x8533);
IkReal x8537=((1.0)*cj1*cj2);
IkReal x8538=((1.0)*x8532);
IkReal x8539=(gconst142*x8532);
IkReal x8540=(gconst143*x8533);
evalcond[0]=((((-1.0)*r22*x8536))+((r21*x8539))+(((-1.0)*x8535*x8538)));
evalcond[1]=(cj0+(((-1.0)*r12*x8536))+(((-1.0)*gconst143*r10*x8538))+((r11*x8539)));
evalcond[2]=((((-1.0)*r02*x8536))+(((-1.0)*sj0))+((r01*x8539))+(((-1.0)*gconst143*r00*x8538)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8538))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8536))+((x8533*x8535)));
evalcond[4]=((((-1.0)*r02*x8538))+(((-1.0)*cj0*x8537))+((r00*x8540))+(((-1.0)*gconst142*r01*x8536))+((cj0*x8534)));
evalcond[5]=((((-1.0)*sj0*x8537))+(((-1.0)*gconst142*r11*x8536))+((r10*x8540))+(((-1.0)*r12*x8538))+((sj0*x8534)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8541=((1.0)*gconst143);
CheckValue<IkReal> x8542=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x8541))+(((-1.0)*gconst142*r00)))),-1);
if(!x8542.valid){
continue;
}
CheckValue<IkReal> x8543 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x8541))+((cj0*gconst142*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8542.value)))+(x8543.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8544=IKsin(j4);
IkReal x8545=IKcos(j4);
IkReal x8546=(sj1*sj2);
IkReal x8547=(gconst143*r20);
IkReal x8548=((1.0)*x8545);
IkReal x8549=((1.0)*cj1*cj2);
IkReal x8550=((1.0)*x8544);
IkReal x8551=(gconst142*x8544);
IkReal x8552=(gconst143*x8545);
evalcond[0]=(((r21*x8551))+(((-1.0)*x8547*x8550))+(((-1.0)*r22*x8548)));
evalcond[1]=(((r11*x8551))+cj0+(((-1.0)*gconst143*r10*x8550))+(((-1.0)*r12*x8548)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8548))+((r01*x8551))+(((-1.0)*gconst143*r00*x8550)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8550))+((cj1*sj2))+(((-1.0)*gconst142*r21*x8548))+((x8545*x8547)));
evalcond[4]=(((r00*x8552))+(((-1.0)*cj0*x8549))+(((-1.0)*gconst142*r01*x8548))+((cj0*x8546))+(((-1.0)*r02*x8550)));
evalcond[5]=((((-1.0)*r12*x8550))+(((-1.0)*sj0*x8549))+((r10*x8552))+(((-1.0)*gconst142*r11*x8548))+((sj0*x8546)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8553=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8553;
j4eval[1]=IKsign(x8553);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8554=((1.0)*cj5);
IkReal x8555=((((-1.0)*r01*x8554))+(((-1.0)*r00*sj5)));
j4eval[0]=x8555;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x8554)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8555);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal x8556=cj5*cj5;
IkReal x8557=r11*r11;
IkReal x8558=(r11*sj5);
IkReal x8559=(cj5*r10);
IkReal x8560=((r12*r12)+(((-1.0)*x8556*x8557))+x8557+(((-2.0)*x8558*x8559))+((x8556*(r10*r10))));
j4eval[0]=x8560;
j4eval[1]=IKsign(x8560);
j4eval[2]=((IKabs((x8559+(((-1.0)*x8558)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8561=cj5*cj5;
IkReal x8562=r11*r11;
IkReal x8563=(cj5*r10);
IkReal x8564=(r11*sj5);
CheckValue<IkReal> x8565 = IKatan2WithCheck(IkReal((x8563+(((-1.0)*x8564)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8565.valid){
continue;
}
CheckValue<IkReal> x8566=IKPowWithIntegerCheck(IKsign(((r12*r12)+x8562+(((-2.0)*x8563*x8564))+((x8561*(r10*r10)))+(((-1.0)*x8561*x8562)))),-1);
if(!x8566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8565.value)+(((1.5707963267949)*(x8566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8567=IKsin(j4);
IkReal x8568=IKcos(j4);
IkReal x8569=(cj5*r10);
IkReal x8570=(r01*sj5);
IkReal x8571=(cj5*r00);
IkReal x8572=(cj5*r20);
IkReal x8573=((1.0)*x8568);
IkReal x8574=((1.0)*x8567);
IkReal x8575=(sj5*x8567);
evalcond[0]=(((r21*x8575))+(((-1.0)*x8572*x8574))+(((-1.0)*r22*x8573)));
evalcond[1]=((((-1.0)*x8571*x8574))+(((-1.0)*r02*x8573))+((x8567*x8570)));
evalcond[2]=((((-1.0)*r11*sj5*x8573))+((x8568*x8569))+(((-1.0)*r12*x8574)));
evalcond[3]=((1.0)+(((-1.0)*x8569*x8574))+((r11*x8575))+(((-1.0)*r12*x8573)));
evalcond[4]=((((-1.0)*r21*sj5*x8573))+((cj2*sj1))+((cj1*sj2))+((x8568*x8572))+(((-1.0)*r22*x8574)));
evalcond[5]=((((-1.0)*r02*x8574))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8570*x8573))+((x8568*x8571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8576=((1.0)*cj5);
CheckValue<IkReal> x8577 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8576))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8577.valid){
continue;
}
CheckValue<IkReal> x8578=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8576)))),-1);
if(!x8578.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8577.value)+(((1.5707963267949)*(x8578.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8579=IKsin(j4);
IkReal x8580=IKcos(j4);
IkReal x8581=(cj5*r10);
IkReal x8582=(r01*sj5);
IkReal x8583=(cj5*r00);
IkReal x8584=(cj5*r20);
IkReal x8585=((1.0)*x8580);
IkReal x8586=((1.0)*x8579);
IkReal x8587=(sj5*x8579);
evalcond[0]=((((-1.0)*r22*x8585))+(((-1.0)*x8584*x8586))+((r21*x8587)));
evalcond[1]=((((-1.0)*x8583*x8586))+(((-1.0)*r02*x8585))+((x8579*x8582)));
evalcond[2]=(((x8580*x8581))+(((-1.0)*r12*x8586))+(((-1.0)*r11*sj5*x8585)));
evalcond[3]=((1.0)+(((-1.0)*x8581*x8586))+((r11*x8587))+(((-1.0)*r12*x8585)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8586))+(((-1.0)*r21*sj5*x8585))+((cj1*sj2))+((x8580*x8584)));
evalcond[5]=((((-1.0)*x8582*x8585))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x8586))+((x8580*x8583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8588=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8588.valid){
continue;
}
CheckValue<IkReal> x8589 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8589.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8588.value)))+(x8589.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8590=IKsin(j4);
IkReal x8591=IKcos(j4);
IkReal x8592=(cj5*r10);
IkReal x8593=(r01*sj5);
IkReal x8594=(cj5*r00);
IkReal x8595=(cj5*r20);
IkReal x8596=((1.0)*x8591);
IkReal x8597=((1.0)*x8590);
IkReal x8598=(sj5*x8590);
evalcond[0]=((((-1.0)*r22*x8596))+(((-1.0)*x8595*x8597))+((r21*x8598)));
evalcond[1]=((((-1.0)*r02*x8596))+((x8590*x8593))+(((-1.0)*x8594*x8597)));
evalcond[2]=((((-1.0)*r11*sj5*x8596))+(((-1.0)*r12*x8597))+((x8591*x8592)));
evalcond[3]=((1.0)+(((-1.0)*r12*x8596))+(((-1.0)*x8592*x8597))+((r11*x8598)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x8597))+((cj1*sj2))+((x8591*x8595))+(((-1.0)*r21*sj5*x8596)));
evalcond[5]=((((-1.0)*r02*x8597))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x8593*x8596))+((x8591*x8594)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8599=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x8599;
j4eval[1]=IKsign(x8599);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8600=((1.0)*cj5);
IkReal x8601=((((-1.0)*r21*x8600))+(((-1.0)*r20*sj5)));
j4eval[0]=x8601;
j4eval[1]=((IKabs(r02))+(IKabs(((((-1.0)*r00*x8600))+((r01*sj5))))));
j4eval[2]=IKsign(x8601);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x8602=cj5*cj5;
IkReal x8603=r11*r11;
IkReal x8604=(cj5*r10);
IkReal x8605=(r11*sj5);
IkReal x8606=(((x8602*x8603))+(((-1.0)*x8602*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8603))+(((2.0)*x8604*x8605)));
j4eval[0]=x8606;
j4eval[1]=((IKabs(r12))+(IKabs((x8604+(((-1.0)*x8605))))));
j4eval[2]=IKsign(x8606);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8607=cj5*cj5;
IkReal x8608=r11*r11;
IkReal x8609=(cj5*r10);
IkReal x8610=(r11*sj5);
CheckValue<IkReal> x8611 = IKatan2WithCheck(IkReal((x8609+(((-1.0)*x8610)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x8611.valid){
continue;
}
CheckValue<IkReal> x8612=IKPowWithIntegerCheck(IKsign((((x8607*x8608))+(((-1.0)*x8607*(r10*r10)))+(((-1.0)*(r12*r12)))+(((-1.0)*x8608))+(((2.0)*x8609*x8610)))),-1);
if(!x8612.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8611.value)+(((1.5707963267949)*(x8612.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8613=IKsin(j4);
IkReal x8614=IKcos(j4);
IkReal x8615=(cj5*r10);
IkReal x8616=(r01*sj5);
IkReal x8617=(cj5*r00);
IkReal x8618=(cj5*r20);
IkReal x8619=((1.0)*x8614);
IkReal x8620=((1.0)*x8613);
IkReal x8621=(sj5*x8613);
evalcond[0]=((((-1.0)*x8618*x8620))+((r21*x8621))+(((-1.0)*r22*x8619)));
evalcond[1]=((((-1.0)*r02*x8619))+((x8613*x8616))+(((-1.0)*x8617*x8620)));
evalcond[2]=((((-1.0)*r12*x8620))+((x8614*x8615))+(((-1.0)*r11*sj5*x8619)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8619))+(((-1.0)*x8615*x8620))+((r11*x8621)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8614*x8618))+(((-1.0)*r21*sj5*x8619))+(((-1.0)*r22*x8620)));
evalcond[5]=((((-1.0)*sj1*sj2))+((x8614*x8617))+((cj1*cj2))+(((-1.0)*x8616*x8619))+(((-1.0)*r02*x8620)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8622=((1.0)*cj5);
CheckValue<IkReal> x8623 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x8622)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8623.valid){
continue;
}
CheckValue<IkReal> x8624=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8622))+(((-1.0)*r20*sj5)))),-1);
if(!x8624.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8623.value)+(((1.5707963267949)*(x8624.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8625=IKsin(j4);
IkReal x8626=IKcos(j4);
IkReal x8627=(cj5*r10);
IkReal x8628=(r01*sj5);
IkReal x8629=(cj5*r00);
IkReal x8630=(cj5*r20);
IkReal x8631=((1.0)*x8626);
IkReal x8632=((1.0)*x8625);
IkReal x8633=(sj5*x8625);
evalcond[0]=(((r21*x8633))+(((-1.0)*r22*x8631))+(((-1.0)*x8630*x8632)));
evalcond[1]=((((-1.0)*x8629*x8632))+(((-1.0)*r02*x8631))+((x8625*x8628)));
evalcond[2]=((((-1.0)*r12*x8632))+((x8626*x8627))+(((-1.0)*r11*sj5*x8631)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x8631))+(((-1.0)*x8627*x8632))+((r11*x8633)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8626*x8630))+(((-1.0)*r21*sj5*x8631))+(((-1.0)*r22*x8632)));
evalcond[5]=((((-1.0)*x8628*x8631))+(((-1.0)*sj1*sj2))+((x8626*x8629))+((cj1*cj2))+(((-1.0)*r02*x8632)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8634 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8634.valid){
continue;
}
CheckValue<IkReal> x8635=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x8635.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8634.value)+(((1.5707963267949)*(x8635.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8636=IKsin(j4);
IkReal x8637=IKcos(j4);
IkReal x8638=(cj5*r10);
IkReal x8639=(r01*sj5);
IkReal x8640=(cj5*r00);
IkReal x8641=(cj5*r20);
IkReal x8642=((1.0)*x8637);
IkReal x8643=((1.0)*x8636);
IkReal x8644=(sj5*x8636);
evalcond[0]=((((-1.0)*r22*x8642))+((r21*x8644))+(((-1.0)*x8641*x8643)));
evalcond[1]=(((x8636*x8639))+(((-1.0)*r02*x8642))+(((-1.0)*x8640*x8643)));
evalcond[2]=(((x8637*x8638))+(((-1.0)*r11*sj5*x8642))+(((-1.0)*r12*x8643)));
evalcond[3]=((-1.0)+(((-1.0)*x8638*x8643))+((r11*x8644))+(((-1.0)*r12*x8642)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8643))+((x8637*x8641))+(((-1.0)*r21*sj5*x8642)));
evalcond[5]=((((-1.0)*x8639*x8642))+(((-1.0)*sj1*sj2))+(((-1.0)*r02*x8643))+((x8637*x8640))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8645=((-1.0)*r00);
IkReal x8647 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8647)==0){
continue;
}
IkReal x8646=pow(x8647,-0.5);
CheckValue<IkReal> x8648 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8645),IKFAST_ATAN2_MAGTHRESH);
if(!x8648.valid){
continue;
}
IkReal gconst144=((-1.0)*(x8648.value));
IkReal gconst145=(r01*x8646);
IkReal gconst146=(x8645*x8646);
CheckValue<IkReal> x8649 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8649.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8649.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x8650=((-1.0)*r00);
IkReal x8651=x8646;
CheckValue<IkReal> x8653 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x8650),IKFAST_ATAN2_MAGTHRESH);
if(!x8653.valid){
continue;
}
IkReal x8652=((-1.0)*(x8653.value));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst145;
cj5=gconst146;
j5=x8652;
IkReal gconst144=x8652;
IkReal gconst145=(r01*x8651);
IkReal gconst146=(x8650*x8651);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8654=((1.0)*sj0);
IkReal x8655=((1.0)*gconst145);
CheckValue<IkReal> x8656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x8655))+(((-1.0)*gconst146*r21)))),-1);
if(!x8656.valid){
continue;
}
CheckValue<IkReal> x8657 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8654))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst146*r00))+(((-1.0)*gconst145*r11*x8654))+((gconst146*r10*sj0))+(((-1.0)*cj0*r01*x8655)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8657.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8656.value)))+(x8657.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8658=IKsin(j4);
IkReal x8659=IKcos(j4);
IkReal x8660=(gconst146*r10);
IkReal x8661=(sj1*sj2);
IkReal x8662=(gconst146*r20);
IkReal x8663=(gconst146*r00);
IkReal x8664=((1.0)*x8659);
IkReal x8665=((1.0)*x8658);
IkReal x8666=(gconst145*x8658);
IkReal x8667=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*x8662*x8665))+(((-1.0)*r22*x8664))+((r21*x8666)));
evalcond[1]=(cj0+(((-1.0)*r12*x8664))+((r11*x8666))+(((-1.0)*x8660*x8665)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8664))+((r01*x8666))+(((-1.0)*x8663*x8665)));
evalcond[3]=(((cj2*sj1))+((x8659*x8662))+((cj1*sj2))+(((-1.0)*r22*x8665))+(((-1.0)*gconst145*r21*x8664)));
evalcond[4]=(((x8659*x8663))+((cj0*x8661))+(((-1.0)*cj0*x8667))+(((-1.0)*r02*x8665))+(((-1.0)*gconst145*r01*x8664)));
evalcond[5]=((((-1.0)*sj0*x8667))+((x8659*x8660))+((sj0*x8661))+(((-1.0)*gconst145*r11*x8664))+(((-1.0)*r12*x8665)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8668=((1.0)*gconst146);
CheckValue<IkReal> x8669=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8668))+(((-1.0)*gconst145*r10)))),-1);
if(!x8669.valid){
continue;
}
CheckValue<IkReal> x8670 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x8668))+((gconst145*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8670.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8669.value)))+(x8670.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8671=IKsin(j4);
IkReal x8672=IKcos(j4);
IkReal x8673=(gconst146*r10);
IkReal x8674=(sj1*sj2);
IkReal x8675=(gconst146*r20);
IkReal x8676=(gconst146*r00);
IkReal x8677=((1.0)*x8672);
IkReal x8678=((1.0)*x8671);
IkReal x8679=(gconst145*x8671);
IkReal x8680=((1.0)*cj1*cj2);
evalcond[0]=((((-1.0)*r22*x8677))+(((-1.0)*x8675*x8678))+((r21*x8679)));
evalcond[1]=(cj0+(((-1.0)*r12*x8677))+((r11*x8679))+(((-1.0)*x8673*x8678)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8677))+((r01*x8679))+(((-1.0)*x8676*x8678)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x8678))+((cj1*sj2))+((x8672*x8675))+(((-1.0)*gconst145*r21*x8677)));
evalcond[4]=((((-1.0)*cj0*x8680))+((cj0*x8674))+(((-1.0)*r02*x8678))+((x8672*x8676))+(((-1.0)*gconst145*r01*x8677)));
evalcond[5]=((((-1.0)*gconst145*r11*x8677))+(((-1.0)*r12*x8678))+((x8672*x8673))+(((-1.0)*sj0*x8680))+((sj0*x8674)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x8681=((-1.0)*r01);
IkReal x8683 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x8683)==0){
continue;
}
IkReal x8682=pow(x8683,-0.5);
CheckValue<IkReal> x8684 = IKatan2WithCheck(IkReal(x8681),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8684.valid){
continue;
}
IkReal gconst147=((3.14159265358979)+(((-1.0)*(x8684.value))));
IkReal gconst148=(x8681*x8682);
IkReal gconst149=((1.0)*r00*x8682);
CheckValue<IkReal> x8685 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8685.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x8685.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x8686=((-1.0)*r01);
CheckValue<IkReal> x8689 = IKatan2WithCheck(IkReal(x8686),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8689.valid){
continue;
}
IkReal x8687=((1.0)*(x8689.value));
IkReal x8688=x8682;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8687)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8687)));
IkReal gconst148=(x8686*x8688);
IkReal gconst149=((1.0)*r00*x8688);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8690=((-1.0)*r01);
CheckValue<IkReal> x8693 = IKatan2WithCheck(IkReal(x8690),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8693.valid){
continue;
}
IkReal x8691=((1.0)*(x8693.value));
IkReal x8692=x8682;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8691)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8691)));
IkReal gconst148=(x8690*x8692);
IkReal gconst149=((1.0)*r00*x8692);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8694=((-1.0)*r01);
CheckValue<IkReal> x8697 = IKatan2WithCheck(IkReal(x8694),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x8697.valid){
continue;
}
IkReal x8695=((1.0)*(x8697.value));
IkReal x8696=x8682;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj5=gconst148;
cj5=gconst149;
j5=((3.14159265)+(((-1.0)*x8695)));
IkReal gconst147=((3.14159265358979)+(((-1.0)*x8695)));
IkReal gconst148=(x8694*x8696);
IkReal gconst149=((1.0)*r00*x8696);
IkReal x8698=r02*r02;
IkReal x8699=(r12*sj0);
IkReal x8700=((1.0)*cj0);
IkReal x8701=x8682;
j4eval[0]=((IKabs(((((-1.0)*x8699))+(((-1.0)*r02*x8700)))))+(IKabs(((((-1.0)*x8700*x8701))+((cj0*x8698*x8701))+((r02*x8699*x8701))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8702=((1.0)*sj0);
IkReal x8703=((1.0)*gconst148);
CheckValue<IkReal> x8704 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x8702)))),IkReal((((gconst149*r10*sj0))+((cj0*gconst149*r00))+(((-1.0)*cj0*r01*x8703))+(((-1.0)*gconst148*r11*x8702)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8704.valid){
continue;
}
CheckValue<IkReal> x8705=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst149*r21))+(((-1.0)*r20*x8703)))),-1);
if(!x8705.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8704.value)+(((1.5707963267949)*(x8705.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8706=IKsin(j4);
IkReal x8707=IKcos(j4);
IkReal x8708=(gconst148*r11);
IkReal x8709=(sj1*sj2);
IkReal x8710=((1.0)*x8707);
IkReal x8711=(gconst149*x8707);
IkReal x8712=(gconst148*x8706);
IkReal x8713=((1.0)*cj1*cj2);
IkReal x8714=((1.0)*x8706);
evalcond[0]=((((-1.0)*r22*x8710))+(((-1.0)*gconst149*r20*x8714))+((r21*x8712)));
evalcond[1]=(cj0+(((-1.0)*r12*x8710))+((x8706*x8708))+(((-1.0)*gconst149*r10*x8714)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8710))+(((-1.0)*gconst149*r00*x8714))+((r01*x8712)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8710))+((cj1*sj2))+(((-1.0)*r22*x8714))+((r20*x8711)));
evalcond[4]=((((-1.0)*gconst148*r01*x8710))+(((-1.0)*r02*x8714))+((cj0*x8709))+((r00*x8711))+(((-1.0)*cj0*x8713)));
evalcond[5]=((((-1.0)*sj0*x8713))+(((-1.0)*x8708*x8710))+(((-1.0)*r12*x8714))+((r10*x8711))+((sj0*x8709)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8715=((1.0)*gconst149);
CheckValue<IkReal> x8716 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst148*r21*sj0))+(((-1.0)*r20*sj0*x8715)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8716.valid){
continue;
}
CheckValue<IkReal> x8717=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x8715))+(((-1.0)*gconst148*r10)))),-1);
if(!x8717.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8716.value)+(((1.5707963267949)*(x8717.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8718=IKsin(j4);
IkReal x8719=IKcos(j4);
IkReal x8720=(gconst148*r11);
IkReal x8721=(sj1*sj2);
IkReal x8722=((1.0)*x8719);
IkReal x8723=(gconst149*x8719);
IkReal x8724=(gconst148*x8718);
IkReal x8725=((1.0)*cj1*cj2);
IkReal x8726=((1.0)*x8718);
evalcond[0]=(((r21*x8724))+(((-1.0)*gconst149*r20*x8726))+(((-1.0)*r22*x8722)));
evalcond[1]=((((-1.0)*gconst149*r10*x8726))+cj0+((x8718*x8720))+(((-1.0)*r12*x8722)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8726))+(((-1.0)*r02*x8722))+((r01*x8724)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8722))+((cj1*sj2))+((r20*x8723))+(((-1.0)*r22*x8726)));
evalcond[4]=((((-1.0)*cj0*x8725))+((cj0*x8721))+(((-1.0)*gconst148*r01*x8722))+(((-1.0)*r02*x8726))+((r00*x8723)));
evalcond[5]=((((-1.0)*x8720*x8722))+((r10*x8723))+(((-1.0)*sj0*x8725))+((sj0*x8721))+(((-1.0)*r12*x8726)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8727=((1.0)*gconst149);
CheckValue<IkReal> x8728 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst148*r21))+(((-1.0)*cj0*r20*x8727)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8728.valid){
continue;
}
CheckValue<IkReal> x8729=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst148*r00))+(((-1.0)*r01*x8727)))),-1);
if(!x8729.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8728.value)+(((1.5707963267949)*(x8729.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8730=IKsin(j4);
IkReal x8731=IKcos(j4);
IkReal x8732=(gconst148*r11);
IkReal x8733=(sj1*sj2);
IkReal x8734=((1.0)*x8731);
IkReal x8735=(gconst149*x8731);
IkReal x8736=(gconst148*x8730);
IkReal x8737=((1.0)*cj1*cj2);
IkReal x8738=((1.0)*x8730);
evalcond[0]=(((r21*x8736))+(((-1.0)*gconst149*r20*x8738))+(((-1.0)*r22*x8734)));
evalcond[1]=((((-1.0)*gconst149*r10*x8738))+cj0+((x8730*x8732))+(((-1.0)*r12*x8734)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*gconst149*r00*x8738))+(((-1.0)*r02*x8734))+((r01*x8736)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*gconst148*r21*x8734))+((cj1*sj2))+((r20*x8735))+(((-1.0)*r22*x8738)));
evalcond[4]=((((-1.0)*cj0*x8737))+(((-1.0)*gconst148*r01*x8734))+((cj0*x8733))+(((-1.0)*r02*x8738))+((r00*x8735)));
evalcond[5]=(((r10*x8735))+(((-1.0)*x8732*x8734))+(((-1.0)*sj0*x8737))+(((-1.0)*r12*x8738))+((sj0*x8733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8739=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x8739;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x8739);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8740=((1.0)*cj5);
IkReal x8741=((((-1.0)*r11*x8740))+(((-1.0)*r10*sj5)));
j4eval[0]=x8741;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x8740))))));
j4eval[2]=IKsign(x8741);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x8742=cj5*cj5;
IkReal x8743=r01*r01;
IkReal x8744=(r01*sj5);
IkReal x8745=(cj5*r00);
IkReal x8746=((((-1.0)*(r02*r02)))+((x8742*x8743))+(((-1.0)*x8742*(r00*r00)))+(((2.0)*x8744*x8745))+(((-1.0)*x8743)));
j4eval[0]=x8746;
j4eval[1]=IKsign(x8746);
j4eval[2]=((IKabs(r02))+(IKabs((x8745+(((-1.0)*x8744))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8747=cj5*cj5;
IkReal x8748=r01*r01;
IkReal x8749=(r01*sj5);
IkReal x8750=(cj5*r00);
CheckValue<IkReal> x8751 = IKatan2WithCheck(IkReal((x8750+(((-1.0)*x8749)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8751.valid){
continue;
}
CheckValue<IkReal> x8752=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+((x8747*x8748))+(((-1.0)*x8748))+(((2.0)*x8749*x8750))+(((-1.0)*x8747*(r00*r00))))),-1);
if(!x8752.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8751.value)+(((1.5707963267949)*(x8752.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8753=IKsin(j4);
IkReal x8754=IKcos(j4);
IkReal x8755=(cj5*r10);
IkReal x8756=(r01*sj5);
IkReal x8757=(cj5*r00);
IkReal x8758=(cj5*r20);
IkReal x8759=((1.0)*x8754);
IkReal x8760=((1.0)*x8753);
IkReal x8761=(sj5*x8753);
evalcond[0]=((((-1.0)*r22*x8759))+((r21*x8761))+(((-1.0)*x8758*x8760)));
evalcond[1]=((((-1.0)*x8755*x8760))+(((-1.0)*r12*x8759))+((r11*x8761)));
evalcond[2]=((((-1.0)*r02*x8760))+(((-1.0)*x8756*x8759))+((x8754*x8757)));
evalcond[3]=((-1.0)+(((-1.0)*x8757*x8760))+((x8753*x8756))+(((-1.0)*r02*x8759)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x8760))+(((-1.0)*r21*sj5*x8759))+((x8754*x8758)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r11*sj5*x8759))+(((-1.0)*r12*x8760))+((x8754*x8755)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8762=((1.0)*cj5);
CheckValue<IkReal> x8763=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8762)))),-1);
if(!x8763.valid){
continue;
}
CheckValue<IkReal> x8764 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x8762))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8764.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8763.value)))+(x8764.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8765=IKsin(j4);
IkReal x8766=IKcos(j4);
IkReal x8767=(cj5*r10);
IkReal x8768=(r01*sj5);
IkReal x8769=(cj5*r00);
IkReal x8770=(cj5*r20);
IkReal x8771=((1.0)*x8766);
IkReal x8772=((1.0)*x8765);
IkReal x8773=(sj5*x8765);
evalcond[0]=((((-1.0)*r22*x8771))+((r21*x8773))+(((-1.0)*x8770*x8772)));
evalcond[1]=((((-1.0)*x8767*x8772))+(((-1.0)*r12*x8771))+((r11*x8773)));
evalcond[2]=((((-1.0)*r02*x8772))+((x8766*x8769))+(((-1.0)*x8768*x8771)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x8771))+((x8765*x8768))+(((-1.0)*x8769*x8772)));
evalcond[4]=(((cj2*sj1))+((x8766*x8770))+((cj1*sj2))+(((-1.0)*r22*x8772))+(((-1.0)*r21*sj5*x8771)));
evalcond[5]=((((-1.0)*r11*sj5*x8771))+((x8766*x8767))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x8772)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8774=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x8774.valid){
continue;
}
CheckValue<IkReal> x8775 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8775.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8774.value)))+(x8775.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8776=IKsin(j4);
IkReal x8777=IKcos(j4);
IkReal x8778=(cj5*r10);
IkReal x8779=(r01*sj5);
IkReal x8780=(cj5*r00);
IkReal x8781=(cj5*r20);
IkReal x8782=((1.0)*x8777);
IkReal x8783=((1.0)*x8776);
IkReal x8784=(sj5*x8776);
evalcond[0]=(((r21*x8784))+(((-1.0)*x8781*x8783))+(((-1.0)*r22*x8782)));
evalcond[1]=(((r11*x8784))+(((-1.0)*x8778*x8783))+(((-1.0)*r12*x8782)));
evalcond[2]=(((x8777*x8780))+(((-1.0)*x8779*x8782))+(((-1.0)*r02*x8783)));
evalcond[3]=((-1.0)+(((-1.0)*x8780*x8783))+(((-1.0)*r02*x8782))+((x8776*x8779)));
evalcond[4]=(((cj2*sj1))+((x8777*x8781))+((cj1*sj2))+(((-1.0)*r22*x8783))+(((-1.0)*r21*sj5*x8782)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x8777*x8778))+(((-1.0)*r12*x8783))+(((-1.0)*r11*sj5*x8782)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8785=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x8785;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x8785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8786=((1.0)*cj5);
IkReal x8787=((((-1.0)*r21*x8786))+(((-1.0)*r20*sj5)));
j4eval[0]=x8787;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x8786))))));
j4eval[2]=IKsign(x8787);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x8788=cj5*cj5;
IkReal x8789=r01*r01;
IkReal x8790=(cj5*r00);
IkReal x8791=(r01*sj5);
IkReal x8792=(((x8788*(r00*r00)))+x8789+(((-2.0)*x8790*x8791))+(r02*r02)+(((-1.0)*x8788*x8789)));
j4eval[0]=x8792;
j4eval[1]=((IKabs(r02))+(IKabs((x8790+(((-1.0)*x8791))))));
j4eval[2]=IKsign(x8792);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8793=cj5*cj5;
IkReal x8794=r01*r01;
IkReal x8795=(r01*sj5);
IkReal x8796=(cj5*r00);
CheckValue<IkReal> x8797 = IKatan2WithCheck(IkReal((x8796+(((-1.0)*x8795)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x8797.valid){
continue;
}
CheckValue<IkReal> x8798=IKPowWithIntegerCheck(IKsign((x8794+(((-2.0)*x8795*x8796))+((x8793*(r00*r00)))+(((-1.0)*x8793*x8794))+(r02*r02))),-1);
if(!x8798.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8797.value)+(((1.5707963267949)*(x8798.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8799=IKsin(j4);
IkReal x8800=IKcos(j4);
IkReal x8801=(cj5*r10);
IkReal x8802=(r01*sj5);
IkReal x8803=(cj5*r00);
IkReal x8804=(cj5*r20);
IkReal x8805=((1.0)*x8800);
IkReal x8806=((1.0)*x8799);
IkReal x8807=(sj5*x8799);
evalcond[0]=(((r21*x8807))+(((-1.0)*r22*x8805))+(((-1.0)*x8804*x8806)));
evalcond[1]=((((-1.0)*r12*x8805))+((r11*x8807))+(((-1.0)*x8801*x8806)));
evalcond[2]=(((x8800*x8803))+(((-1.0)*r02*x8806))+(((-1.0)*x8802*x8805)));
evalcond[3]=((1.0)+(((-1.0)*x8803*x8806))+(((-1.0)*r02*x8805))+((x8799*x8802)));
evalcond[4]=(((cj2*sj1))+((x8800*x8804))+(((-1.0)*r22*x8806))+((cj1*sj2))+(((-1.0)*r21*sj5*x8805)));
evalcond[5]=((((-1.0)*r12*x8806))+((x8800*x8801))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*r11*sj5*x8805)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8808=((1.0)*cj5);
CheckValue<IkReal> x8809=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x8808))+(((-1.0)*r20*sj5)))),-1);
if(!x8809.valid){
continue;
}
CheckValue<IkReal> x8810 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x8808))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8810.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8809.value)))+(x8810.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8811=IKsin(j4);
IkReal x8812=IKcos(j4);
IkReal x8813=(cj5*r10);
IkReal x8814=(r01*sj5);
IkReal x8815=(cj5*r00);
IkReal x8816=(cj5*r20);
IkReal x8817=((1.0)*x8812);
IkReal x8818=((1.0)*x8811);
IkReal x8819=(sj5*x8811);
evalcond[0]=(((r21*x8819))+(((-1.0)*r22*x8817))+(((-1.0)*x8816*x8818)));
evalcond[1]=((((-1.0)*r12*x8817))+((r11*x8819))+(((-1.0)*x8813*x8818)));
evalcond[2]=((((-1.0)*r02*x8818))+((x8812*x8815))+(((-1.0)*x8814*x8817)));
evalcond[3]=((1.0)+(((-1.0)*r02*x8817))+((x8811*x8814))+(((-1.0)*x8815*x8818)));
evalcond[4]=((((-1.0)*r22*x8818))+((cj2*sj1))+((cj1*sj2))+((x8812*x8816))+(((-1.0)*r21*sj5*x8817)));
evalcond[5]=((((-1.0)*r12*x8818))+(((-1.0)*sj1*sj2))+((x8812*x8813))+((cj1*cj2))+(((-1.0)*r11*sj5*x8817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x8820 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8820.valid){
continue;
}
CheckValue<IkReal> x8821=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x8821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8820.value)+(((1.5707963267949)*(x8821.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8822=IKsin(j4);
IkReal x8823=IKcos(j4);
IkReal x8824=(cj5*r10);
IkReal x8825=(r01*sj5);
IkReal x8826=(cj5*r00);
IkReal x8827=(cj5*r20);
IkReal x8828=((1.0)*x8823);
IkReal x8829=((1.0)*x8822);
IkReal x8830=(sj5*x8822);
evalcond[0]=((((-1.0)*x8827*x8829))+((r21*x8830))+(((-1.0)*r22*x8828)));
evalcond[1]=((((-1.0)*r12*x8828))+((r11*x8830))+(((-1.0)*x8824*x8829)));
evalcond[2]=(((x8823*x8826))+(((-1.0)*r02*x8829))+(((-1.0)*x8825*x8828)));
evalcond[3]=((1.0)+(((-1.0)*x8826*x8829))+(((-1.0)*r02*x8828))+((x8822*x8825)));
evalcond[4]=(((x8823*x8827))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8828))+(((-1.0)*r22*x8829)));
evalcond[5]=(((x8823*x8824))+(((-1.0)*r11*sj5*x8828))+(((-1.0)*r12*x8829))+(((-1.0)*sj1*sj2))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8831=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8831);
rxp1_1=(px*r21);
rxp1_2=(r11*x8831);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8832=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8832);
rxp1_1=(px*r21);
rxp1_2=(r11*x8832);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8833=((-1.0)*px);
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x8833);
rxp1_1=(px*r21);
rxp1_2=(r11*x8833);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8836=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x8836.valid){
continue;
}
IkReal x8834=x8836.value;
IkReal x8835=(sj0*x8834);
cj4array[0]=(((cj1*cj2*x8835))+(((-1.0)*sj1*sj2*x8835)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8837=IKsin(j4);
IkReal x8838=IKcos(j4);
IkReal x8839=(r21*sj5);
IkReal x8840=(cj5*r20);
IkReal x8841=((1.0)*x8837);
IkReal x8842=((1.0)*x8838);
evalcond[0]=((-1.0)*r02*x8837);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x8842)));
evalcond[2]=(((x8837*x8839))+(((-1.0)*x8840*x8841)));
evalcond[3]=((((-1.0)*cj5*r10*x8841))+((r11*sj5*x8837)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x8838*x8840))+(((-1.0)*x8839*x8842)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8845=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x8845.valid){
continue;
}
IkReal x8843=x8845.value;
IkReal x8844=((1.0)*x8843);
cj4array[0]=((((-1.0)*cj1*sj2*x8844))+(((-1.0)*cj2*sj1*x8844)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8846=IKsin(j4);
IkReal x8847=IKcos(j4);
IkReal x8848=(r11*sj5);
IkReal x8849=((1.0)*sj0);
IkReal x8850=((1.0)*x8847);
IkReal x8851=((1.0)*cj5*x8846);
evalcond[0]=((-1.0)*r02*x8846);
evalcond[1]=((((-1.0)*x8849))+(((-1.0)*r02*x8850)));
evalcond[2]=(((r21*sj5*x8846))+(((-1.0)*r20*x8851)));
evalcond[3]=(((x8846*x8848))+(((-1.0)*r10*x8851)));
evalcond[4]=((((-1.0)*cj1*cj2*x8849))+(((-1.0)*x8848*x8850))+((cj5*r10*x8847))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x8852=IKPowWithIntegerCheck(r02,-1);
if(!x8852.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x8852.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x8853=IKsin(j4);
IkReal x8854=IKcos(j4);
IkReal x8855=(cj5*x8854);
IkReal x8856=(sj5*x8853);
IkReal x8857=((1.0)*sj5*x8854);
IkReal x8858=((1.0)*cj5*x8853);
evalcond[0]=((-1.0)*r02*x8853);
evalcond[1]=(((r21*x8856))+(((-1.0)*r20*x8858)));
evalcond[2]=((((-1.0)*r10*x8858))+((r11*x8856)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*x8857))+((r20*x8855)));
evalcond[4]=((((-1.0)*r11*x8857))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((r10*x8855)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8859=((1.0)*sj0);
IkReal x8860=((1.0)*cj0);
CheckValue<IkReal> x8861 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x8859))+(((-1.0)*r02*x8860)))),IkReal((((cj0*cj5*r00))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8859))+(((-1.0)*r01*sj5*x8860)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8861.valid){
continue;
}
CheckValue<IkReal> x8862=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x8862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8861.value)+(((1.5707963267949)*(x8862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8863=IKsin(j4);
IkReal x8864=IKcos(j4);
IkReal x8865=(cj5*r10);
IkReal x8866=(sj1*sj2);
IkReal x8867=(r01*sj5);
IkReal x8868=(cj5*r00);
IkReal x8869=(cj5*r20);
IkReal x8870=((1.0)*x8864);
IkReal x8871=((1.0)*cj1*cj2);
IkReal x8872=((1.0)*x8863);
IkReal x8873=(sj5*x8863);
evalcond[0]=((((-1.0)*r22*x8870))+(((-1.0)*x8869*x8872))+((r21*x8873)));
evalcond[1]=(cj0+(((-1.0)*x8865*x8872))+((r11*x8873))+(((-1.0)*r12*x8870)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8870))+(((-1.0)*x8868*x8872))+((x8863*x8867)));
evalcond[3]=(((cj2*sj1))+((x8864*x8869))+(((-1.0)*r21*sj5*x8870))+(((-1.0)*r22*x8872))+((cj1*sj2)));
evalcond[4]=((((-1.0)*r02*x8872))+((x8864*x8868))+(((-1.0)*x8867*x8870))+((cj0*x8866))+(((-1.0)*cj0*x8871)));
evalcond[5]=((((-1.0)*r11*sj5*x8870))+((x8864*x8865))+(((-1.0)*r12*x8872))+((sj0*x8866))+(((-1.0)*sj0*x8871)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8874=((1.0)*cj5);
CheckValue<IkReal> x8875 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((r21*sj0*sj5))+(((-1.0)*r20*sj0*x8874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8875.valid){
continue;
}
CheckValue<IkReal> x8876=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x8874)))),-1);
if(!x8876.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8875.value)+(((1.5707963267949)*(x8876.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8877=IKsin(j4);
IkReal x8878=IKcos(j4);
IkReal x8879=(cj5*r10);
IkReal x8880=(sj1*sj2);
IkReal x8881=(r01*sj5);
IkReal x8882=(cj5*r00);
IkReal x8883=(cj5*r20);
IkReal x8884=((1.0)*x8878);
IkReal x8885=((1.0)*cj1*cj2);
IkReal x8886=((1.0)*x8877);
IkReal x8887=(sj5*x8877);
evalcond[0]=((((-1.0)*r22*x8884))+((r21*x8887))+(((-1.0)*x8883*x8886)));
evalcond[1]=(cj0+(((-1.0)*r12*x8884))+(((-1.0)*x8879*x8886))+((r11*x8887)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x8882*x8886))+(((-1.0)*r02*x8884))+((x8877*x8881)));
evalcond[3]=((((-1.0)*r22*x8886))+((cj2*sj1))+((x8878*x8883))+((cj1*sj2))+(((-1.0)*r21*sj5*x8884)));
evalcond[4]=((((-1.0)*x8881*x8884))+((x8878*x8882))+(((-1.0)*cj0*x8885))+(((-1.0)*r02*x8886))+((cj0*x8880)));
evalcond[5]=((((-1.0)*r12*x8886))+((sj0*x8880))+(((-1.0)*r11*sj5*x8884))+(((-1.0)*sj0*x8885))+((x8878*x8879)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8888=((1.0)*cj5);
CheckValue<IkReal> x8889 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8888)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8889.valid){
continue;
}
CheckValue<IkReal> x8890=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x8888)))),-1);
if(!x8890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x8889.value)+(((1.5707963267949)*(x8890.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x8891=IKsin(j4);
IkReal x8892=IKcos(j4);
IkReal x8893=(cj5*r10);
IkReal x8894=(sj1*sj2);
IkReal x8895=(r01*sj5);
IkReal x8896=(cj5*r00);
IkReal x8897=(cj5*r20);
IkReal x8898=((1.0)*x8892);
IkReal x8899=((1.0)*cj1*cj2);
IkReal x8900=((1.0)*x8891);
IkReal x8901=(sj5*x8891);
evalcond[0]=(((r21*x8901))+(((-1.0)*x8897*x8900))+(((-1.0)*r22*x8898)));
evalcond[1]=(((r11*x8901))+cj0+(((-1.0)*x8893*x8900))+(((-1.0)*r12*x8898)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*r02*x8898))+(((-1.0)*x8896*x8900))+((x8891*x8895)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r21*sj5*x8898))+(((-1.0)*r22*x8900))+((x8892*x8897)));
evalcond[4]=((((-1.0)*cj0*x8899))+(((-1.0)*x8895*x8898))+(((-1.0)*r02*x8900))+((cj0*x8894))+((x8892*x8896)));
evalcond[5]=(((sj0*x8894))+(((-1.0)*sj0*x8899))+(((-1.0)*r11*sj5*x8898))+(((-1.0)*r12*x8900))+((x8892*x8893)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j0, j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x8902=cj1*cj1;
IkReal x8903=cj2*cj2;
IkReal x8904=(sj1*sj2);
IkReal x8905=((156900000.0)*py);
IkReal x8906=(cj1*cj5);
IkReal x8907=((14850585.0)*cj2);
IkReal x8908=(r00*sj5);
IkReal x8909=((16090500.0)*cj1);
IkReal x8910=((4132419.0)*cj5);
IkReal x8911=(r10*sj5);
IkReal x8912=((170000000.0)*cj1);
IkReal x8913=((156900000.0)*px);
IkReal x8914=(cj1*cj2);
IkReal x8915=((14850585.0)*cj5);
CheckValue<IkReal> x8916=IKPowWithIntegerCheck(IKsign(((66309514.0)+(((133365000.0)*cj2*x8902))+(((-61544025.0)*x8903))+(((-133365000.0)*cj1*x8904))+(((123088050.0)*x8902*x8903))+(((-123088050.0)*x8904*x8914))+(((10705975.0)*x8902)))),-1);
if(!x8916.valid){
continue;
}
CheckValue<IkReal> x8917 = IKatan2WithCheck(IkReal(((((-43660000.0)*px))+(((-1.0)*r11*x8904*x8915))+((r11*x8906*x8907))+(((-1.0)*r01*x8910))+((cj1*x8907*x8911))+(((-1.0)*x8904*x8905))+((x8905*x8914))+((x8909*x8911))+(((-14850585.0)*x8904*x8911))+(((16090500.0)*r11*x8906))+((py*x8912))+(((-4132419.0)*x8908)))),IkReal((((cj1*x8907*x8908))+((r01*x8906*x8907))+((x8913*x8914))+(((16090500.0)*r01*x8906))+(((-1.0)*x8904*x8913))+(((43660000.0)*py))+(((4132419.0)*x8911))+((px*x8912))+((x8908*x8909))+(((-1.0)*r01*x8904*x8915))+(((-14850585.0)*x8904*x8908))+((r11*x8910)))),IKFAST_ATAN2_MAGTHRESH);
if(!x8917.valid){
continue;
}
j0array[0]=((-1.5707963267949)+(((1.5707963267949)*(x8916.value)))+(x8917.value));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x8918=IKcos(j0);
IkReal x8919=IKsin(j0);
IkReal x8920=((0.425)*cj1);
IkReal x8921=(cj1*cj2);
IkReal x8922=(sj1*sj2);
IkReal x8923=((0.09465)*cj5);
IkReal x8924=((0.09465)*sj5);
IkReal x8925=((0.39225)*x8919);
IkReal x8926=((0.39225)*x8918);
evalcond[0]=((((-1.0)*x8922*x8926))+((x8921*x8926))+(((-0.10915)*x8919))+(((-1.0)*px))+((x8918*x8920))+(((-1.0)*r00*x8924))+(((-1.0)*r01*x8923)));
evalcond[1]=((((-1.0)*x8922*x8925))+((x8921*x8925))+(((-1.0)*py))+(((-1.0)*r11*x8923))+(((-1.0)*r10*x8924))+((x8919*x8920))+(((0.10915)*x8918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j4eval[3];
IkReal x8927=((1.0)*cj5);
IkReal x8928=((((-1.0)*r00*sj5))+(((-1.0)*r01*x8927)));
j4eval[0]=x8928;
j4eval[1]=((IKabs((cj0*r22)))+(IKabs((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x8927))))));
j4eval[2]=IKsign(x8928);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8929=((1.0)*cj5);
IkReal x8930=((((-1.0)*r10*sj5))+(((-1.0)*r11*x8929)));
j4eval[0]=x8930;
j4eval[1]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*r20*sj0*x8929))+((r21*sj0*sj5))))));
j4eval[2]=IKsign(x8930);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x8931=((1.0)*sj0);
IkReal x8932=((1.0)*cj0);
IkReal x8933=((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)));
j4eval[0]=x8933;
j4eval[1]=((IKabs((((cj0*cj5*r00))+(((-1.0)*r01*sj5*x8932))+((cj5*r10*sj0))+(((-1.0)*r11*sj5*x8931)))))+(IKabs(((((-1.0)*r12*x8931))+(((-1.0)*r02*x8932))))));
j4eval[2]=IKsign(x8933);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x8934=((-1.0)*r20);
IkReal x8936 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x8936)==0){
continue;
}
IkReal x8935=pow(x8936,-0.5);
CheckValue<IkReal> x8937 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8934),IKFAST_ATAN2_MAGTHRESH);
if(!x8937.valid){
continue;
}
IkReal gconst0=((-1.0)*(x8937.value));
IkReal gconst1=(r21*x8935);
IkReal gconst2=(x8934*x8935);
CheckValue<IkReal> x8938 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x8938.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x8938.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8939=((-1.0)*r20);
IkReal x8940=x8935;
CheckValue<IkReal> x8942 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8939),IKFAST_ATAN2_MAGTHRESH);
if(!x8942.valid){
continue;
}
IkReal x8941=((-1.0)*(x8942.value));
sj5=gconst1;
cj5=gconst2;
j5=x8941;
IkReal gconst0=x8941;
IkReal gconst1=(r21*x8940);
IkReal gconst2=(x8939*x8940);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8943=((-1.0)*r20);
IkReal x8944=x8935;
CheckValue<IkReal> x8946 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8943),IKFAST_ATAN2_MAGTHRESH);
if(!x8946.valid){
continue;
}
IkReal x8945=((-1.0)*(x8946.value));
sj5=gconst1;
cj5=gconst2;
j5=x8945;
IkReal gconst0=x8945;
IkReal gconst1=(r21*x8944);
IkReal gconst2=(x8943*x8944);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8947=((-1.0)*r20);
IkReal x8948=x8935;
CheckValue<IkReal> x8950 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8947),IKFAST_ATAN2_MAGTHRESH);
if(!x8950.valid){
continue;
}
IkReal x8949=((-1.0)*(x8950.value));
sj5=gconst1;
cj5=gconst2;
j5=x8949;
IkReal gconst0=x8949;
IkReal gconst1=(r21*x8948);
IkReal gconst2=(x8947*x8948);
IkReal x8951=r22*r22;
CheckValue<IkReal> x8955=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8951))),-1);
if(!x8955.valid){
continue;
}
IkReal x8952=x8955.value;
IkReal x8953=(sj3*x8952);
IkReal x8954=((((2.0)*x8953*(r20*r20)*(r21*r21)))+((x8953*(r21*r21*r21*r21)))+((sj3*x8951))+((x8953*(r20*r20*r20*r20))));
j4eval[0]=x8954;
j4eval[1]=IKsign(x8954);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8956=((-1.0)*r20);
IkReal x8957=x8935;
CheckValue<IkReal> x8959 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8956),IKFAST_ATAN2_MAGTHRESH);
if(!x8959.valid){
continue;
}
IkReal x8958=((-1.0)*(x8959.value));
sj5=gconst1;
cj5=gconst2;
j5=x8958;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8958;
IkReal gconst1=(r21*x8957);
IkReal gconst2=(x8956*x8957);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8960=((-1.0)*r20);
IkReal x8961=x8935;
CheckValue<IkReal> x8963 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8960),IKFAST_ATAN2_MAGTHRESH);
if(!x8963.valid){
continue;
}
IkReal x8962=((-1.0)*(x8963.value));
sj5=gconst1;
cj5=gconst2;
j5=x8962;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8962;
IkReal gconst1=(r21*x8961);
IkReal gconst2=(x8960*x8961);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x8964=((-1.0)*r20);
IkReal x8965=x8935;
CheckValue<IkReal> x8967 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8964),IKFAST_ATAN2_MAGTHRESH);
if(!x8967.valid){
continue;
}
IkReal x8966=((-1.0)*(x8967.value));
sj5=gconst1;
cj5=gconst2;
j5=x8966;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst0=x8966;
IkReal gconst1=(r21*x8965);
IkReal gconst2=(x8964*x8965);
IkReal x8968=((1.0)*(r22*r22));
CheckValue<IkReal> x8972=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x8968))),-1);
if(!x8972.valid){
continue;
}
IkReal x8969=x8972.value;
IkReal x8970=((1.0)*x8969);
IkReal x8971=((((-1.0)*x8970*(r20*r20*r20*r20)))+(((-2.0)*x8969*(r20*r20)*(r21*r21)))+(((-1.0)*x8970*(r21*r21*r21*r21)))+(((-1.0)*x8968)));
j4eval[0]=x8971;
j4eval[1]=IKsign(x8971);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x8973=((-1.0)*r20);
IkReal x8974=x8935;
CheckValue<IkReal> x8976 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8973),IKFAST_ATAN2_MAGTHRESH);
if(!x8976.valid){
continue;
}
IkReal x8975=((-1.0)*(x8976.value));
sj5=gconst1;
cj5=gconst2;
j5=x8975;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8975;
IkReal gconst1=(r21*x8974);
IkReal gconst2=(x8973*x8974);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x8977=((-1.0)*r20);
IkReal x8978=x8935;
CheckValue<IkReal> x8980 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8977),IKFAST_ATAN2_MAGTHRESH);
if(!x8980.valid){
continue;
}
IkReal x8979=((-1.0)*(x8980.value));
sj5=gconst1;
cj5=gconst2;
j5=x8979;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8979;
IkReal gconst1=(r21*x8978);
IkReal gconst2=(x8977*x8978);
IkReal x8981=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x8985=IKPowWithIntegerCheck(x8981,-1);
if(!x8985.valid){
continue;
}
IkReal x8982=x8985.value;
IkReal x8983=((1.0)*x8982);
IkReal x8984=((((-1.0)*x8983*(r10*r10)*(r20*r20)))+(((-2.0)*r10*r11*r20*r21*x8982))+(((-1.0)*(r12*r12)))+(((-1.0)*x8983*(r11*r11)*(r21*r21))));
j4eval[0]=x8984;
j4eval[1]=r12;
j4eval[2]=x8981;
j4eval[3]=IKsign(x8984);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x8986=((-1.0)*r20);
IkReal x8987=x8935;
CheckValue<IkReal> x8989 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x8986),IKFAST_ATAN2_MAGTHRESH);
if(!x8989.valid){
continue;
}
IkReal x8988=((-1.0)*(x8989.value));
sj5=gconst1;
cj5=gconst2;
j5=x8988;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x8988;
IkReal gconst1=(r21*x8987);
IkReal gconst2=(x8986*x8987);
IkReal x8990=r22*r22;
IkReal x8991=(cj1*r12*sj2);
IkReal x8992=(cj2*r12*sj1);
CheckValue<IkReal> x8996=IKPowWithIntegerCheck(((-1.0)+x8990),-1);
if(!x8996.valid){
continue;
}
IkReal x8993=x8996.value;
if((((1.0)+(((-1.0)*x8990)))) < -0.00001)
continue;
IkReal x8994=IKsqrt(((1.0)+(((-1.0)*x8990))));
IkReal x8995=(r22*x8993*x8994);
j4eval[0]=((IKabs((((x8991*x8995))+((x8992*x8995)))))+(IKabs(((((-1.0)*x8992))+(((-1.0)*x8991))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x8997=(cj1*sj2);
IkReal x8998=(cj2*sj1);
IkReal x8999=((1.0)*r12);
IkReal x9000=(gconst1*r11);
IkReal x9001=((1.0)*gconst2*r10);
CheckValue<IkReal> x9002=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9002.valid){
continue;
}
CheckValue<IkReal> x9003 = IKatan2WithCheck(IkReal(((((-1.0)*x8998*x9001))+(((-1.0)*x8997*x9001))+((x8998*x9000))+((x8997*x9000)))),IkReal(((((-1.0)*x8997*x8999))+(((-1.0)*x8998*x8999)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9003.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9002.value)))+(x9003.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9004=IKcos(j4);
IkReal x9005=IKsin(j4);
IkReal x9006=((1.0)*x9004);
IkReal x9007=(gconst1*x9004);
IkReal x9008=(gconst1*x9005);
IkReal x9009=((1.0)*gconst2*x9005);
evalcond[0]=((((-1.0)*gconst2*r10*x9006))+((r11*x9007))+((r12*x9005)));
evalcond[1]=((((-1.0)*r22*x9006))+((r21*x9008))+(((-1.0)*r20*x9009)));
evalcond[2]=((((-1.0)*r02*x9006))+(((-1.0)*r00*x9009))+((r01*x9008)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9006))+(((-1.0)*r10*x9009))+((r11*x9008)));
evalcond[4]=(((cj2*sj1))+((r21*x9007))+((r22*x9005))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9006)));
evalcond[5]=(((r02*x9005))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r00*x9006))+((r01*x9007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9010=(gconst2*r10);
IkReal x9011=(gconst1*r11);
CheckValue<IkReal> x9012=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9010*x9010)))+(((-1.0)*(r12*r12)))+(((-1.0)*(x9011*x9011)))+(((2.0)*x9010*x9011)))),-1);
if(!x9012.valid){
continue;
}
CheckValue<IkReal> x9013 = IKatan2WithCheck(IkReal(((((-1.0)*x9010))+x9011)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9013.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9012.value)))+(x9013.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9014=IKcos(j4);
IkReal x9015=IKsin(j4);
IkReal x9016=((1.0)*x9014);
IkReal x9017=(gconst1*x9014);
IkReal x9018=(gconst1*x9015);
IkReal x9019=((1.0)*gconst2*x9015);
evalcond[0]=(((r12*x9015))+(((-1.0)*gconst2*r10*x9016))+((r11*x9017)));
evalcond[1]=((((-1.0)*r22*x9016))+(((-1.0)*r20*x9019))+((r21*x9018)));
evalcond[2]=((((-1.0)*r00*x9019))+(((-1.0)*r02*x9016))+((r01*x9018)));
evalcond[3]=((1.0)+(((-1.0)*r10*x9019))+(((-1.0)*r12*x9016))+((r11*x9018)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9016))+((cj1*sj2))+((r22*x9015))+((r21*x9017)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9015))+((r01*x9017))+(((-1.0)*gconst2*r00*x9016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9020=((1.0)*gconst2);
CheckValue<IkReal> x9021 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9020))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9021.valid){
continue;
}
CheckValue<IkReal> x9022=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9020)))),-1);
if(!x9022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9021.value)+(((1.5707963267949)*(x9022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9023=IKcos(j4);
IkReal x9024=IKsin(j4);
IkReal x9025=((1.0)*x9023);
IkReal x9026=(gconst1*x9023);
IkReal x9027=(gconst1*x9024);
IkReal x9028=((1.0)*gconst2*x9024);
evalcond[0]=((((-1.0)*gconst2*r10*x9025))+((r11*x9026))+((r12*x9024)));
evalcond[1]=(((r21*x9027))+(((-1.0)*r20*x9028))+(((-1.0)*r22*x9025)));
evalcond[2]=(((r01*x9027))+(((-1.0)*r02*x9025))+(((-1.0)*r00*x9028)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9025))+((r11*x9027))+(((-1.0)*r10*x9028)));
evalcond[4]=((((-1.0)*gconst2*r20*x9025))+((cj2*sj1))+((cj1*sj2))+((r21*x9026))+((r22*x9024)));
evalcond[5]=((((-1.0)*gconst2*r00*x9025))+((r01*x9026))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x9024)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9029=((-1.0)*r20);
IkReal x9030=x8935;
CheckValue<IkReal> x9032 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9029),IKFAST_ATAN2_MAGTHRESH);
if(!x9032.valid){
continue;
}
IkReal x9031=((-1.0)*(x9032.value));
sj5=gconst1;
cj5=gconst2;
j5=x9031;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9031;
IkReal gconst1=(r21*x9030);
IkReal gconst2=(x9029*x9030);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9033=((-1.0)*r20);
IkReal x9034=x8935;
CheckValue<IkReal> x9036 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9033),IKFAST_ATAN2_MAGTHRESH);
if(!x9036.valid){
continue;
}
IkReal x9035=((-1.0)*(x9036.value));
sj5=gconst1;
cj5=gconst2;
j5=x9035;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9035;
IkReal gconst1=(r21*x9034);
IkReal gconst2=(x9033*x9034);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9037=((-1.0)*r20);
IkReal x9038=x8935;
CheckValue<IkReal> x9040 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9037),IKFAST_ATAN2_MAGTHRESH);
if(!x9040.valid){
continue;
}
IkReal x9039=((-1.0)*(x9040.value));
sj5=gconst1;
cj5=gconst2;
j5=x9039;
sj3=0;
cj3=1.0;
j3=0;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9039;
IkReal gconst1=(r21*x9038);
IkReal gconst2=(x9037*x9038);
IkReal x9041=r22*r22;
IkReal x9042=(cj1*r12*sj2);
IkReal x9043=(cj2*r12*sj1);
CheckValue<IkReal> x9047=IKPowWithIntegerCheck(((-1.0)+x9041),-1);
if(!x9047.valid){
continue;
}
IkReal x9044=x9047.value;
if((((1.0)+(((-1.0)*x9041)))) < -0.00001)
continue;
IkReal x9045=IKsqrt(((1.0)+(((-1.0)*x9041))));
IkReal x9046=(r22*x9044*x9045);
j4eval[0]=((IKabs((((x9042*x9046))+((x9043*x9046)))))+(IKabs(((((-1.0)*x9043))+(((-1.0)*x9042))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9048=(cj1*sj2);
IkReal x9049=(cj2*sj1);
IkReal x9050=((1.0)*r12);
IkReal x9051=(gconst1*r11);
IkReal x9052=((1.0)*gconst2*r10);
CheckValue<IkReal> x9053=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*gconst2*r01)))),-1);
if(!x9053.valid){
continue;
}
CheckValue<IkReal> x9054 = IKatan2WithCheck(IkReal(((((-1.0)*x9049*x9052))+((x9049*x9051))+((x9048*x9051))+(((-1.0)*x9048*x9052)))),IkReal(((((-1.0)*x9049*x9050))+(((-1.0)*x9048*x9050)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9054.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9053.value)))+(x9054.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9055=IKcos(j4);
IkReal x9056=IKsin(j4);
IkReal x9057=((1.0)*x9055);
IkReal x9058=(gconst1*x9055);
IkReal x9059=(gconst1*x9056);
IkReal x9060=((1.0)*gconst2*x9056);
evalcond[0]=((((-1.0)*gconst2*r10*x9057))+((r12*x9056))+((r11*x9058)));
evalcond[1]=((((-1.0)*r20*x9060))+(((-1.0)*r22*x9057))+((r21*x9059)));
evalcond[2]=((((-1.0)*r02*x9057))+((r01*x9059))+(((-1.0)*r00*x9060)));
evalcond[3]=((-1.0)+(((-1.0)*r10*x9060))+(((-1.0)*r12*x9057))+((r11*x9059)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9056))+(((-1.0)*gconst2*r20*x9057))+((r21*x9058)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r01*x9058))+((cj1*cj2))+(((-1.0)*gconst2*r00*x9057))+((r02*x9056)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9061=(gconst1*r11);
IkReal x9062=(gconst2*r10);
CheckValue<IkReal> x9063 = IKatan2WithCheck(IkReal((x9061+(((-1.0)*x9062)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x9063.valid){
continue;
}
CheckValue<IkReal> x9064=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9062*x9062)+(x9061*x9061)+(((-2.0)*x9061*x9062)))),-1);
if(!x9064.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9063.value)+(((1.5707963267949)*(x9064.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9065=IKcos(j4);
IkReal x9066=IKsin(j4);
IkReal x9067=((1.0)*x9065);
IkReal x9068=(gconst1*x9065);
IkReal x9069=(gconst1*x9066);
IkReal x9070=((1.0)*gconst2*x9066);
evalcond[0]=(((r11*x9068))+((r12*x9066))+(((-1.0)*gconst2*r10*x9067)));
evalcond[1]=(((r21*x9069))+(((-1.0)*r20*x9070))+(((-1.0)*r22*x9067)));
evalcond[2]=(((r01*x9069))+(((-1.0)*r00*x9070))+(((-1.0)*r02*x9067)));
evalcond[3]=((-1.0)+((r11*x9069))+(((-1.0)*r10*x9070))+(((-1.0)*r12*x9067)));
evalcond[4]=(((cj2*sj1))+((r22*x9066))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9067))+((r21*x9068)));
evalcond[5]=(((r01*x9068))+(((-1.0)*gconst2*r00*x9067))+(((-1.0)*sj1*sj2))+((r02*x9066))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9071 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9071.valid){
continue;
}
CheckValue<IkReal> x9072=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9072.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9071.value)+(((1.5707963267949)*(x9072.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9073=IKcos(j4);
IkReal x9074=IKsin(j4);
IkReal x9075=((1.0)*x9073);
IkReal x9076=(gconst1*x9073);
IkReal x9077=(gconst1*x9074);
IkReal x9078=((1.0)*gconst2*x9074);
evalcond[0]=((((-1.0)*gconst2*r10*x9075))+((r11*x9076))+((r12*x9074)));
evalcond[1]=(((r21*x9077))+(((-1.0)*r22*x9075))+(((-1.0)*r20*x9078)));
evalcond[2]=((((-1.0)*r02*x9075))+(((-1.0)*r00*x9078))+((r01*x9077)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x9075))+((r11*x9077))+(((-1.0)*r10*x9078)));
evalcond[4]=(((cj2*sj1))+((r21*x9076))+((cj1*sj2))+((r22*x9074))+(((-1.0)*gconst2*r20*x9075)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r00*x9075))+((r01*x9076))+((cj1*cj2))+((r02*x9074)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9079=((-1.0)*r20);
IkReal x9080=x8935;
CheckValue<IkReal> x9082 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9079),IKFAST_ATAN2_MAGTHRESH);
if(!x9082.valid){
continue;
}
IkReal x9081=((-1.0)*(x9082.value));
sj5=gconst1;
cj5=gconst2;
j5=x9081;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9081;
IkReal gconst1=(r21*x9080);
IkReal gconst2=(x9079*x9080);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9083=((-1.0)*r20);
IkReal x9084=x8935;
CheckValue<IkReal> x9086 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9083),IKFAST_ATAN2_MAGTHRESH);
if(!x9086.valid){
continue;
}
IkReal x9085=((-1.0)*(x9086.value));
sj5=gconst1;
cj5=gconst2;
j5=x9085;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9085;
IkReal gconst1=(r21*x9084);
IkReal gconst2=(x9083*x9084);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9087=((-1.0)*r20);
IkReal x9088=x8935;
CheckValue<IkReal> x9090 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9087),IKFAST_ATAN2_MAGTHRESH);
if(!x9090.valid){
continue;
}
IkReal x9089=((-1.0)*(x9090.value));
sj5=gconst1;
cj5=gconst2;
j5=x9089;
sj3=0;
cj3=1.0;
j3=0;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9089;
IkReal gconst1=(r21*x9088);
IkReal gconst2=(x9087*x9088);
IkReal x9091=r22*r22;
IkReal x9092=((1.0)*r02);
IkReal x9093=(cj1*sj2);
IkReal x9094=(cj2*sj1);
CheckValue<IkReal> x9098=IKPowWithIntegerCheck(((-1.0)+x9091),-1);
if(!x9098.valid){
continue;
}
IkReal x9095=x9098.value;
if((((1.0)+(((-1.0)*x9091)))) < -0.00001)
continue;
IkReal x9096=IKsqrt(((1.0)+(((-1.0)*x9091))));
IkReal x9097=(r02*r22*x9095*x9096);
j4eval[0]=((IKabs((((x9094*x9097))+((x9093*x9097)))))+(IKabs(((((-1.0)*x9092*x9094))+(((-1.0)*x9092*x9093))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9099=(cj1*sj2);
IkReal x9100=(gconst1*r01);
IkReal x9101=((1.0)*r02);
IkReal x9102=(cj2*sj1);
IkReal x9103=((1.0)*gconst2*r00);
CheckValue<IkReal> x9104 = IKatan2WithCheck(IkReal(((((-1.0)*x9099*x9103))+(((-1.0)*x9102*x9103))+((x9100*x9102))+((x9099*x9100)))),IkReal(((((-1.0)*x9101*x9102))+(((-1.0)*x9099*x9101)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9104.valid){
continue;
}
CheckValue<IkReal> x9105=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9105.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9104.value)+(((1.5707963267949)*(x9105.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9106=IKcos(j4);
IkReal x9107=IKsin(j4);
IkReal x9108=((1.0)*x9106);
IkReal x9109=(gconst1*x9106);
IkReal x9110=(gconst1*x9107);
IkReal x9111=((1.0)*gconst2*x9107);
evalcond[0]=(((r02*x9107))+(((-1.0)*gconst2*r00*x9108))+((r01*x9109)));
evalcond[1]=(((r21*x9110))+(((-1.0)*r22*x9108))+(((-1.0)*r20*x9111)));
evalcond[2]=((((-1.0)*r10*x9111))+((r11*x9110))+(((-1.0)*r12*x9108)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9108))+((r01*x9110))+(((-1.0)*r00*x9111)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9107))+((r21*x9109))+(((-1.0)*gconst2*r20*x9108)));
evalcond[5]=((((-1.0)*gconst2*r10*x9108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x9107))+((r11*x9109)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9112=(gconst1*r01);
IkReal x9113=(gconst2*r00);
CheckValue<IkReal> x9114=IKPowWithIntegerCheck(IKsign(((((-2.0)*x9112*x9113))+(x9113*x9113)+(x9112*x9112)+(r02*r02))),-1);
if(!x9114.valid){
continue;
}
CheckValue<IkReal> x9115 = IKatan2WithCheck(IkReal((x9112+(((-1.0)*x9113)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9115.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9114.value)))+(x9115.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9116=IKcos(j4);
IkReal x9117=IKsin(j4);
IkReal x9118=((1.0)*x9116);
IkReal x9119=(gconst1*x9116);
IkReal x9120=(gconst1*x9117);
IkReal x9121=((1.0)*gconst2*x9117);
evalcond[0]=((((-1.0)*gconst2*r00*x9118))+((r01*x9119))+((r02*x9117)));
evalcond[1]=((((-1.0)*r20*x9121))+(((-1.0)*r22*x9118))+((r21*x9120)));
evalcond[2]=((((-1.0)*r10*x9121))+(((-1.0)*r12*x9118))+((r11*x9120)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9118))+((r01*x9120))+(((-1.0)*r00*x9121)));
evalcond[4]=(((r21*x9119))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst2*r20*x9118))+((r22*x9117)));
evalcond[5]=(((r12*x9117))+((r11*x9119))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9122=((1.0)*gconst2);
CheckValue<IkReal> x9123 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9122))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9123.valid){
continue;
}
CheckValue<IkReal> x9124=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9122))+(((-1.0)*gconst1*r10)))),-1);
if(!x9124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9123.value)+(((1.5707963267949)*(x9124.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9125=IKcos(j4);
IkReal x9126=IKsin(j4);
IkReal x9127=((1.0)*x9125);
IkReal x9128=(gconst1*x9125);
IkReal x9129=(gconst1*x9126);
IkReal x9130=((1.0)*gconst2*x9126);
evalcond[0]=((((-1.0)*gconst2*r00*x9127))+((r02*x9126))+((r01*x9128)));
evalcond[1]=((((-1.0)*r20*x9130))+(((-1.0)*r22*x9127))+((r21*x9129)));
evalcond[2]=((((-1.0)*r12*x9127))+(((-1.0)*r10*x9130))+((r11*x9129)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x9127))+(((-1.0)*r00*x9130))+((r01*x9129)));
evalcond[4]=(((r22*x9126))+((cj2*sj1))+(((-1.0)*gconst2*r20*x9127))+((cj1*sj2))+((r21*x9128)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst2*r10*x9127))+((r11*x9128))+((r12*x9126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9131=((-1.0)*r20);
IkReal x9132=x8935;
CheckValue<IkReal> x9134 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9131),IKFAST_ATAN2_MAGTHRESH);
if(!x9134.valid){
continue;
}
IkReal x9133=((-1.0)*(x9134.value));
sj5=gconst1;
cj5=gconst2;
j5=x9133;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9133;
IkReal gconst1=(r21*x9132);
IkReal gconst2=(x9131*x9132);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9135=((-1.0)*r20);
IkReal x9136=x8935;
CheckValue<IkReal> x9138 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9135),IKFAST_ATAN2_MAGTHRESH);
if(!x9138.valid){
continue;
}
IkReal x9137=((-1.0)*(x9138.value));
sj5=gconst1;
cj5=gconst2;
j5=x9137;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9137;
IkReal gconst1=(r21*x9136);
IkReal gconst2=(x9135*x9136);
IkReal x9139=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9143=IKPowWithIntegerCheck(x9139,-1);
if(!x9143.valid){
continue;
}
IkReal x9140=x9143.value;
IkReal x9141=((1.0)*x9140);
IkReal x9142=((((-1.0)*x9141*(r00*r00)*(r20*r20)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x9140))+(((-1.0)*x9141*(r01*r01)*(r21*r21))));
j4eval[0]=x9142;
j4eval[1]=IKsign(x9142);
j4eval[2]=r02;
j4eval[3]=x9139;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9144=((-1.0)*r20);
IkReal x9145=x8935;
CheckValue<IkReal> x9147 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9144),IKFAST_ATAN2_MAGTHRESH);
if(!x9147.valid){
continue;
}
IkReal x9146=((-1.0)*(x9147.value));
sj5=gconst1;
cj5=gconst2;
j5=x9146;
sj3=0;
cj3=1.0;
j3=0;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9146;
IkReal gconst1=(r21*x9145);
IkReal gconst2=(x9144*x9145);
IkReal x9148=r22*r22;
IkReal x9149=((1.0)*r02);
IkReal x9150=(cj1*sj2);
IkReal x9151=(cj2*sj1);
CheckValue<IkReal> x9155=IKPowWithIntegerCheck(((-1.0)+x9148),-1);
if(!x9155.valid){
continue;
}
IkReal x9152=x9155.value;
if((((1.0)+(((-1.0)*x9148)))) < -0.00001)
continue;
IkReal x9153=IKsqrt(((1.0)+(((-1.0)*x9148))));
IkReal x9154=(r02*r22*x9152*x9153);
j4eval[0]=((IKabs((((x9150*x9154))+((x9151*x9154)))))+(IKabs(((((-1.0)*x9149*x9150))+(((-1.0)*x9149*x9151))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9156=(cj1*sj2);
IkReal x9157=(gconst1*r01);
IkReal x9158=((1.0)*r02);
IkReal x9159=(cj2*sj1);
IkReal x9160=((1.0)*gconst2*r00);
CheckValue<IkReal> x9161 = IKatan2WithCheck(IkReal(((((-1.0)*x9159*x9160))+(((-1.0)*x9156*x9160))+((x9157*x9159))+((x9156*x9157)))),IkReal(((((-1.0)*x9158*x9159))+(((-1.0)*x9156*x9158)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9161.valid){
continue;
}
CheckValue<IkReal> x9162=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9162.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9161.value)+(((1.5707963267949)*(x9162.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9163=IKcos(j4);
IkReal x9164=IKsin(j4);
IkReal x9165=((1.0)*x9163);
IkReal x9166=(gconst1*x9163);
IkReal x9167=(gconst1*x9164);
IkReal x9168=((1.0)*gconst2*x9164);
evalcond[0]=(((r01*x9166))+((r02*x9164))+(((-1.0)*gconst2*r00*x9165)));
evalcond[1]=((((-1.0)*r22*x9165))+((r21*x9167))+(((-1.0)*r20*x9168)));
evalcond[2]=((((-1.0)*r12*x9165))+(((-1.0)*r10*x9168))+((r11*x9167)));
evalcond[3]=((1.0)+((r01*x9167))+(((-1.0)*r02*x9165))+(((-1.0)*r00*x9168)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x9164))+((r21*x9166))+(((-1.0)*gconst2*r20*x9165)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9165))+((r11*x9166))+((r12*x9164))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9169=(gconst1*r01);
IkReal x9170=(gconst2*r00);
CheckValue<IkReal> x9171 = IKatan2WithCheck(IkReal(((((-1.0)*x9170))+x9169)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x9171.valid){
continue;
}
CheckValue<IkReal> x9172=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9170*x9170)))+(((-1.0)*(r02*r02)))+(((2.0)*x9169*x9170))+(((-1.0)*(x9169*x9169))))),-1);
if(!x9172.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9171.value)+(((1.5707963267949)*(x9172.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9173=IKcos(j4);
IkReal x9174=IKsin(j4);
IkReal x9175=((1.0)*x9173);
IkReal x9176=(gconst1*x9173);
IkReal x9177=(gconst1*x9174);
IkReal x9178=((1.0)*gconst2*x9174);
evalcond[0]=((((-1.0)*gconst2*r00*x9175))+((r02*x9174))+((r01*x9176)));
evalcond[1]=(((r21*x9177))+(((-1.0)*r22*x9175))+(((-1.0)*r20*x9178)));
evalcond[2]=((((-1.0)*r10*x9178))+(((-1.0)*r12*x9175))+((r11*x9177)));
evalcond[3]=((1.0)+((r01*x9177))+(((-1.0)*r02*x9175))+(((-1.0)*r00*x9178)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9175))+((cj1*sj2))+((r21*x9176))+((r22*x9174)));
evalcond[5]=((((-1.0)*gconst2*r10*x9175))+(((-1.0)*sj1*sj2))+((cj1*cj2))+((r12*x9174))+((r11*x9176)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9179 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9179.valid){
continue;
}
CheckValue<IkReal> x9180=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9180.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9179.value)+(((1.5707963267949)*(x9180.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9181=IKcos(j4);
IkReal x9182=IKsin(j4);
IkReal x9183=((1.0)*x9181);
IkReal x9184=(gconst1*x9181);
IkReal x9185=(gconst1*x9182);
IkReal x9186=((1.0)*gconst2*x9182);
evalcond[0]=((((-1.0)*gconst2*r00*x9183))+((r02*x9182))+((r01*x9184)));
evalcond[1]=((((-1.0)*r20*x9186))+(((-1.0)*r22*x9183))+((r21*x9185)));
evalcond[2]=((((-1.0)*r12*x9183))+((r11*x9185))+(((-1.0)*r10*x9186)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9183))+(((-1.0)*r00*x9186))+((r01*x9185)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst2*r20*x9183))+((cj1*sj2))+((r22*x9182))+((r21*x9184)));
evalcond[5]=(((r11*x9184))+((r12*x9182))+(((-1.0)*sj1*sj2))+(((-1.0)*gconst2*r10*x9183))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9187=((-1.0)*r20);
IkReal x9188=((-1.0)*px);
CheckValue<IkReal> x9190 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9187),IKFAST_ATAN2_MAGTHRESH);
if(!x9190.valid){
continue;
}
IkReal x9189=((-1.0)*(x9190.value));
sj5=gconst1;
cj5=gconst2;
j5=x9189;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9188);
rxp1_1=(px*r21);
rxp1_2=(r11*x9188);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9189;
IkReal gconst1=r21;
IkReal gconst2=x9187;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9191=((-1.0)*r20);
IkReal x9192=((-1.0)*px);
CheckValue<IkReal> x9194 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9191),IKFAST_ATAN2_MAGTHRESH);
if(!x9194.valid){
continue;
}
IkReal x9193=((-1.0)*(x9194.value));
sj5=gconst1;
cj5=gconst2;
j5=x9193;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9192);
rxp1_1=(px*r21);
rxp1_2=(r11*x9192);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9193;
IkReal gconst1=r21;
IkReal gconst2=x9191;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9195=((-1.0)*r20);
IkReal x9196=((-1.0)*px);
CheckValue<IkReal> x9198 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9195),IKFAST_ATAN2_MAGTHRESH);
if(!x9198.valid){
continue;
}
IkReal x9197=((-1.0)*(x9198.value));
sj5=gconst1;
cj5=gconst2;
j5=x9197;
sj3=0;
cj3=1.0;
j3=0;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9196);
rxp1_1=(px*r21);
rxp1_2=(r11*x9196);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9197;
IkReal gconst1=r21;
IkReal gconst2=x9195;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9201=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x9201.valid){
continue;
}
IkReal x9199=x9201.value;
IkReal x9200=(sj0*x9199);
cj4array[0]=((((-1.0)*sj1*sj2*x9200))+((cj1*cj2*x9200)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9202=IKsin(j4);
IkReal x9203=IKcos(j4);
IkReal x9204=((1.0)*gconst2);
IkReal x9205=(gconst1*r21);
evalcond[0]=(r02*x9202);
evalcond[1]=((((-1.0)*r02*x9203))+(((-1.0)*sj0)));
evalcond[2]=(((x9202*x9205))+(((-1.0)*r20*x9202*x9204)));
evalcond[3]=(((gconst1*r11*x9202))+(((-1.0)*r10*x9202*x9204)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r20*x9203*x9204))+((x9203*x9205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9208=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x9208.valid){
continue;
}
IkReal x9206=x9208.value;
IkReal x9207=((1.0)*x9206);
cj4array[0]=((((-1.0)*cj2*sj1*x9207))+(((-1.0)*cj1*sj2*x9207)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9209=IKsin(j4);
IkReal x9210=IKcos(j4);
IkReal x9211=((1.0)*sj0);
IkReal x9212=(gconst1*x9209);
IkReal x9213=((1.0)*x9210);
IkReal x9214=((1.0)*gconst2*x9209);
evalcond[0]=(r02*x9209);
evalcond[1]=((((-1.0)*r02*x9213))+(((-1.0)*x9211)));
evalcond[2]=(((r21*x9212))+(((-1.0)*r20*x9214)));
evalcond[3]=((((-1.0)*r10*x9214))+((r11*x9212)));
evalcond[4]=(((gconst1*r11*x9210))+(((-1.0)*gconst2*r10*x9213))+(((-1.0)*cj1*cj2*x9211))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9215=IKPowWithIntegerCheck(r02,-1);
if(!x9215.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9215.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9216=IKsin(j4);
IkReal x9217=IKcos(j4);
IkReal x9218=(gconst1*r21);
IkReal x9219=(gconst1*r11);
IkReal x9220=((1.0)*gconst2*r10);
IkReal x9221=((1.0)*gconst2*r20);
evalcond[0]=(r02*x9216);
evalcond[1]=((((-1.0)*x9216*x9221))+((x9216*x9218)));
evalcond[2]=((((-1.0)*x9216*x9220))+((x9216*x9219)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9217*x9221))+((x9217*x9218)));
evalcond[4]=((((-1.0)*x9217*x9220))+(((-1.0)*cj1*cj2*sj0))+((x9217*x9219))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9222=(cj2*sj1);
IkReal x9223=(cj1*sj2);
IkReal x9224=(gconst1*r21);
IkReal x9225=((1.0)*gconst2*r20);
CheckValue<IkReal> x9226 = IKatan2WithCheck(IkReal((((r22*x9223))+((r22*x9222)))),IkReal(((((-1.0)*x9223*x9225))+((x9222*x9224))+(((-1.0)*x9222*x9225))+((x9223*x9224)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9226.valid){
continue;
}
CheckValue<IkReal> x9227=IKPowWithIntegerCheck(IKsign(((((2.0)*gconst2*r20*x9224))+(((-1.0)*gconst2*r20*x9225))+(((-1.0)*(x9224*x9224)))+(((-1.0)*(r22*r22))))),-1);
if(!x9227.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9226.value)+(((1.5707963267949)*(x9227.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9228=IKsin(j4);
IkReal x9229=IKcos(j4);
IkReal x9230=(sj1*sj2);
IkReal x9231=(gconst2*r10);
IkReal x9232=(gconst2*r00);
IkReal x9233=(gconst2*r20);
IkReal x9234=((1.0)*x9229);
IkReal x9235=(gconst1*x9229);
IkReal x9236=((1.0)*cj1*cj2);
IkReal x9237=(gconst1*x9228);
IkReal x9238=((1.0)*x9228);
evalcond[0]=(((r21*x9237))+(((-1.0)*x9233*x9238))+(((-1.0)*r22*x9234)));
evalcond[1]=(cj0+(((-1.0)*r12*x9234))+((r11*x9237))+(((-1.0)*x9231*x9238)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9232*x9238))+((r01*x9237))+(((-1.0)*r02*x9234)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+((r21*x9235))+((r22*x9228))+(((-1.0)*x9233*x9234)));
evalcond[4]=((((-1.0)*cj0*x9236))+((cj0*x9230))+((r02*x9228))+(((-1.0)*x9232*x9234))+((r01*x9235)));
evalcond[5]=((((-1.0)*sj0*x9236))+((r12*x9228))+((r11*x9235))+((sj0*x9230))+(((-1.0)*x9231*x9234)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9239=((1.0)*gconst2);
CheckValue<IkReal> x9240=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9239))+(((-1.0)*gconst1*r10)))),-1);
if(!x9240.valid){
continue;
}
CheckValue<IkReal> x9241 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9239))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9240.value)))+(x9241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9242=IKsin(j4);
IkReal x9243=IKcos(j4);
IkReal x9244=(sj1*sj2);
IkReal x9245=(gconst2*r10);
IkReal x9246=(gconst2*r00);
IkReal x9247=(gconst2*r20);
IkReal x9248=((1.0)*x9243);
IkReal x9249=(gconst1*x9243);
IkReal x9250=((1.0)*cj1*cj2);
IkReal x9251=(gconst1*x9242);
IkReal x9252=((1.0)*x9242);
evalcond[0]=((((-1.0)*r22*x9248))+(((-1.0)*x9247*x9252))+((r21*x9251)));
evalcond[1]=(cj0+(((-1.0)*r12*x9248))+(((-1.0)*x9245*x9252))+((r11*x9251)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9246*x9252))+((r01*x9251))+(((-1.0)*r02*x9248)));
evalcond[3]=((((-1.0)*x9247*x9248))+((cj2*sj1))+((cj1*sj2))+((r21*x9249))+((r22*x9242)));
evalcond[4]=((((-1.0)*cj0*x9250))+((cj0*x9244))+(((-1.0)*x9246*x9248))+((r02*x9242))+((r01*x9249)));
evalcond[5]=((((-1.0)*x9245*x9248))+((r12*x9242))+((sj0*x9244))+((r11*x9249))+(((-1.0)*sj0*x9250)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9253=((1.0)*gconst2);
CheckValue<IkReal> x9254=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9253)))),-1);
if(!x9254.valid){
continue;
}
CheckValue<IkReal> x9255 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x9253))+((cj0*gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9255.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9254.value)))+(x9255.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9256=IKsin(j4);
IkReal x9257=IKcos(j4);
IkReal x9258=(sj1*sj2);
IkReal x9259=(gconst2*r10);
IkReal x9260=(gconst2*r00);
IkReal x9261=(gconst2*r20);
IkReal x9262=((1.0)*x9257);
IkReal x9263=(gconst1*x9257);
IkReal x9264=((1.0)*cj1*cj2);
IkReal x9265=(gconst1*x9256);
IkReal x9266=((1.0)*x9256);
evalcond[0]=((((-1.0)*r22*x9262))+(((-1.0)*x9261*x9266))+((r21*x9265)));
evalcond[1]=((((-1.0)*x9259*x9266))+cj0+(((-1.0)*r12*x9262))+((r11*x9265)));
evalcond[2]=((((-1.0)*sj0))+(((-1.0)*x9260*x9266))+((r01*x9265))+(((-1.0)*r02*x9262)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9261*x9262))+((r22*x9256))+((r21*x9263)));
evalcond[4]=(((cj0*x9258))+(((-1.0)*x9260*x9262))+((r02*x9256))+((r01*x9263))+(((-1.0)*cj0*x9264)));
evalcond[5]=((((-1.0)*x9259*x9262))+(((-1.0)*sj0*x9264))+((r12*x9256))+((sj0*x9258))+((r11*x9263)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9267=((-1.0)*r20);
IkReal x9268=x8935;
CheckValue<IkReal> x9270 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9267),IKFAST_ATAN2_MAGTHRESH);
if(!x9270.valid){
continue;
}
IkReal x9269=((-1.0)*(x9270.value));
sj5=gconst1;
cj5=gconst2;
j5=x9269;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9269;
IkReal gconst1=(r21*x9268);
IkReal gconst2=(x9267*x9268);
j4eval[0]=cj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9271=((-1.0)*r20);
IkReal x9272=x8935;
CheckValue<IkReal> x9274 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9271),IKFAST_ATAN2_MAGTHRESH);
if(!x9274.valid){
continue;
}
IkReal x9273=((-1.0)*(x9274.value));
sj5=gconst1;
cj5=gconst2;
j5=x9273;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9273;
IkReal gconst1=(r21*x9272);
IkReal gconst2=(x9271*x9272);
j4eval[0]=sj0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9275=((-1.0)*r20);
IkReal x9276=x8935;
CheckValue<IkReal> x9278 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9275),IKFAST_ATAN2_MAGTHRESH);
if(!x9278.valid){
continue;
}
IkReal x9277=((-1.0)*(x9278.value));
sj5=gconst1;
cj5=gconst2;
j5=x9277;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst0=x9277;
IkReal gconst1=(r21*x9276);
IkReal gconst2=(x9275*x9276);
IkReal x9279=r22*r22;
CheckValue<IkReal> x9282=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x9279))),-1);
if(!x9282.valid){
continue;
}
IkReal x9280=x9282.value;
IkReal x9281=(x9279+((x9280*(r21*r21*r21*r21)))+(((2.0)*x9280*(r20*r20)*(r21*r21)))+((x9280*(r20*r20*r20*r20))));
j4eval[0]=x9281;
j4eval[1]=IKsign(x9281);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9283=((-1.0)*r20);
IkReal x9284=x8935;
CheckValue<IkReal> x9286 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9283),IKFAST_ATAN2_MAGTHRESH);
if(!x9286.valid){
continue;
}
IkReal x9285=((-1.0)*(x9286.value));
sj5=gconst1;
cj5=gconst2;
j5=x9285;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9285;
IkReal gconst1=(r21*x9284);
IkReal gconst2=(x9283*x9284);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9287=((-1.0)*r20);
IkReal x9288=x8935;
CheckValue<IkReal> x9290 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9287),IKFAST_ATAN2_MAGTHRESH);
if(!x9290.valid){
continue;
}
IkReal x9289=((-1.0)*(x9290.value));
sj5=gconst1;
cj5=gconst2;
j5=x9289;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9289;
IkReal gconst1=(r21*x9288);
IkReal gconst2=(x9287*x9288);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9291=((-1.0)*r20);
IkReal x9292=x8935;
CheckValue<IkReal> x9294 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9291),IKFAST_ATAN2_MAGTHRESH);
if(!x9294.valid){
continue;
}
IkReal x9293=((-1.0)*(x9294.value));
sj5=gconst1;
cj5=gconst2;
j5=x9293;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9293;
IkReal gconst1=(r21*x9292);
IkReal gconst2=(x9291*x9292);
IkReal x9295=r22*r22;
IkReal x9296=(cj1*r12*sj2);
IkReal x9297=(cj2*r12*sj1);
CheckValue<IkReal> x9301=IKPowWithIntegerCheck(((-1.0)+x9295),-1);
if(!x9301.valid){
continue;
}
IkReal x9298=x9301.value;
if((((1.0)+(((-1.0)*x9295)))) < -0.00001)
continue;
IkReal x9299=IKsqrt(((1.0)+(((-1.0)*x9295))));
IkReal x9300=((1.0)*r22*x9298*x9299);
j4eval[0]=((IKabs(((((-1.0)*x9297*x9300))+(((-1.0)*x9296*x9300)))))+(IKabs((x9296+x9297))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9302=((1.0)*gconst1);
IkReal x9303=(cj2*sj1);
IkReal x9304=(gconst2*r10);
IkReal x9305=(cj1*sj2);
CheckValue<IkReal> x9306=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*x9302))+(((-1.0)*gconst2*r01)))),-1);
if(!x9306.valid){
continue;
}
CheckValue<IkReal> x9307 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9302*x9303))+(((-1.0)*r11*x9302*x9305))+((x9304*x9305))+((x9303*x9304)))),IkReal((((r12*x9303))+((r12*x9305)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9307.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9306.value)))+(x9307.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9308=IKsin(j4);
IkReal x9309=IKcos(j4);
IkReal x9310=((1.0)*x9309);
IkReal x9311=(gconst2*x9309);
IkReal x9312=(gconst1*x9308);
IkReal x9313=((1.0)*x9308);
evalcond[0]=(((r21*x9312))+(((-1.0)*r22*x9310))+(((-1.0)*gconst2*r20*x9313)));
evalcond[1]=((((-1.0)*gconst2*r00*x9313))+((r01*x9312))+(((-1.0)*r02*x9310)));
evalcond[2]=((((-1.0)*gconst1*r11*x9310))+((r10*x9311))+(((-1.0)*r12*x9313)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r10*x9313))+((r11*x9312))+(((-1.0)*r12*x9310)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9310))+((cj1*sj2))+((r20*x9311))+(((-1.0)*r22*x9313)));
evalcond[5]=((((-1.0)*gconst1*r01*x9310))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x9313))+((r00*x9311)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9314=(gconst1*r11);
IkReal x9315=(gconst2*r10);
CheckValue<IkReal> x9316 = IKatan2WithCheck(IkReal((x9315+(((-1.0)*x9314)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9316.valid){
continue;
}
CheckValue<IkReal> x9317=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x9315*x9315)+(((-2.0)*x9314*x9315))+(x9314*x9314))),-1);
if(!x9317.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9316.value)+(((1.5707963267949)*(x9317.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9318=IKsin(j4);
IkReal x9319=IKcos(j4);
IkReal x9320=((1.0)*x9319);
IkReal x9321=(gconst2*x9319);
IkReal x9322=(gconst1*x9318);
IkReal x9323=((1.0)*x9318);
evalcond[0]=((((-1.0)*r22*x9320))+(((-1.0)*gconst2*r20*x9323))+((r21*x9322)));
evalcond[1]=((((-1.0)*r02*x9320))+((r01*x9322))+(((-1.0)*gconst2*r00*x9323)));
evalcond[2]=((((-1.0)*r12*x9323))+((r10*x9321))+(((-1.0)*gconst1*r11*x9320)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9320))+(((-1.0)*gconst2*r10*x9323))+((r11*x9322)));
evalcond[4]=(((cj2*sj1))+((r20*x9321))+(((-1.0)*r22*x9323))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9320)));
evalcond[5]=((((-1.0)*gconst1*r01*x9320))+(((-1.0)*r02*x9323))+((r00*x9321))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9324=((1.0)*gconst2);
CheckValue<IkReal> x9325=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9324))+(((-1.0)*gconst1*r00)))),-1);
if(!x9325.valid){
continue;
}
CheckValue<IkReal> x9326 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9324))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9326.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9325.value)))+(x9326.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9327=IKsin(j4);
IkReal x9328=IKcos(j4);
IkReal x9329=((1.0)*x9328);
IkReal x9330=(gconst2*x9328);
IkReal x9331=(gconst1*x9327);
IkReal x9332=((1.0)*x9327);
evalcond[0]=((((-1.0)*r22*x9329))+(((-1.0)*gconst2*r20*x9332))+((r21*x9331)));
evalcond[1]=((((-1.0)*r02*x9329))+((r01*x9331))+(((-1.0)*gconst2*r00*x9332)));
evalcond[2]=((((-1.0)*r12*x9332))+((r10*x9330))+(((-1.0)*gconst1*r11*x9329)));
evalcond[3]=((1.0)+(((-1.0)*r12*x9329))+(((-1.0)*gconst2*r10*x9332))+((r11*x9331)));
evalcond[4]=(((cj2*sj1))+((r20*x9330))+(((-1.0)*r22*x9332))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9329)));
evalcond[5]=((((-1.0)*gconst1*r01*x9329))+(((-1.0)*r02*x9332))+((r00*x9330))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9333=((-1.0)*r20);
IkReal x9334=x8935;
CheckValue<IkReal> x9336 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9333),IKFAST_ATAN2_MAGTHRESH);
if(!x9336.valid){
continue;
}
IkReal x9335=((-1.0)*(x9336.value));
sj5=gconst1;
cj5=gconst2;
j5=x9335;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9335;
IkReal gconst1=(r21*x9334);
IkReal gconst2=(x9333*x9334);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9337=((-1.0)*r20);
IkReal x9338=x8935;
CheckValue<IkReal> x9340 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9337),IKFAST_ATAN2_MAGTHRESH);
if(!x9340.valid){
continue;
}
IkReal x9339=((-1.0)*(x9340.value));
sj5=gconst1;
cj5=gconst2;
j5=x9339;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9339;
IkReal gconst1=(r21*x9338);
IkReal gconst2=(x9337*x9338);
IkReal x9341=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9345=IKPowWithIntegerCheck(x9341,-1);
if(!x9345.valid){
continue;
}
IkReal x9342=x9345.value;
IkReal x9343=((1.0)*x9342);
IkReal x9344=((((-1.0)*x9343*(r10*r10)*(r20*r20)))+(((-1.0)*x9343*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x9342)));
j4eval[0]=x9344;
j4eval[1]=r12;
j4eval[2]=x9341;
j4eval[3]=IKsign(x9344);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9346=((-1.0)*r20);
IkReal x9347=x8935;
CheckValue<IkReal> x9349 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9346),IKFAST_ATAN2_MAGTHRESH);
if(!x9349.valid){
continue;
}
IkReal x9348=((-1.0)*(x9349.value));
sj5=gconst1;
cj5=gconst2;
j5=x9348;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9348;
IkReal gconst1=(r21*x9347);
IkReal gconst2=(x9346*x9347);
IkReal x9350=r22*r22;
IkReal x9351=(cj1*r12*sj2);
IkReal x9352=(cj2*r12*sj1);
CheckValue<IkReal> x9356=IKPowWithIntegerCheck(((-1.0)+x9350),-1);
if(!x9356.valid){
continue;
}
IkReal x9353=x9356.value;
if((((1.0)+(((-1.0)*x9350)))) < -0.00001)
continue;
IkReal x9354=IKsqrt(((1.0)+(((-1.0)*x9350))));
IkReal x9355=((1.0)*r22*x9353*x9354);
j4eval[0]=((IKabs(((((-1.0)*x9351*x9355))+(((-1.0)*x9352*x9355)))))+(IKabs((x9352+x9351))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9357=((1.0)*gconst1);
IkReal x9358=(cj2*sj1);
IkReal x9359=(gconst2*r10);
IkReal x9360=(cj1*sj2);
CheckValue<IkReal> x9361=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst2*r01))+(((-1.0)*r00*x9357)))),-1);
if(!x9361.valid){
continue;
}
CheckValue<IkReal> x9362 = IKatan2WithCheck(IkReal(((((-1.0)*r11*x9357*x9358))+((x9358*x9359))+((x9359*x9360))+(((-1.0)*r11*x9357*x9360)))),IkReal((((r12*x9360))+((r12*x9358)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9362.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9361.value)))+(x9362.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9363=IKsin(j4);
IkReal x9364=IKcos(j4);
IkReal x9365=((1.0)*x9364);
IkReal x9366=(gconst2*x9364);
IkReal x9367=(gconst1*x9363);
IkReal x9368=((1.0)*x9363);
evalcond[0]=(((r21*x9367))+(((-1.0)*r22*x9365))+(((-1.0)*gconst2*r20*x9368)));
evalcond[1]=((((-1.0)*r02*x9365))+((r01*x9367))+(((-1.0)*gconst2*r00*x9368)));
evalcond[2]=((((-1.0)*gconst1*r11*x9365))+(((-1.0)*r12*x9368))+((r10*x9366)));
evalcond[3]=((-1.0)+((r11*x9367))+(((-1.0)*gconst2*r10*x9368))+(((-1.0)*r12*x9365)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9365))+((cj1*sj2))+(((-1.0)*r22*x9368))+((r20*x9366)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9368))+(((-1.0)*gconst1*r01*x9365))+((cj1*cj2))+((r00*x9366)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9369=(gconst1*r11);
IkReal x9370=(gconst2*r10);
CheckValue<IkReal> x9371=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x9369*x9369)))+(((-1.0)*(x9370*x9370)))+(((-1.0)*(r12*r12)))+(((2.0)*x9369*x9370)))),-1);
if(!x9371.valid){
continue;
}
CheckValue<IkReal> x9372 = IKatan2WithCheck(IkReal((x9370+(((-1.0)*x9369)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x9372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9371.value)))+(x9372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9373=IKsin(j4);
IkReal x9374=IKcos(j4);
IkReal x9375=((1.0)*x9374);
IkReal x9376=(gconst2*x9374);
IkReal x9377=(gconst1*x9373);
IkReal x9378=((1.0)*x9373);
evalcond[0]=(((r21*x9377))+(((-1.0)*r22*x9375))+(((-1.0)*gconst2*r20*x9378)));
evalcond[1]=((((-1.0)*r02*x9375))+(((-1.0)*gconst2*r00*x9378))+((r01*x9377)));
evalcond[2]=((((-1.0)*r12*x9378))+((r10*x9376))+(((-1.0)*gconst1*r11*x9375)));
evalcond[3]=((-1.0)+(((-1.0)*gconst2*r10*x9378))+((r11*x9377))+(((-1.0)*r12*x9375)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst1*r21*x9375))+((cj1*sj2))+(((-1.0)*r22*x9378))+((r20*x9376)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9378))+((cj1*cj2))+((r00*x9376))+(((-1.0)*gconst1*r01*x9375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9379 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9379.valid){
continue;
}
CheckValue<IkReal> x9380=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9380.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9379.value)+(((1.5707963267949)*(x9380.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9381=IKsin(j4);
IkReal x9382=IKcos(j4);
IkReal x9383=((1.0)*x9382);
IkReal x9384=(gconst2*x9382);
IkReal x9385=(gconst1*x9381);
IkReal x9386=((1.0)*x9381);
evalcond[0]=(((r21*x9385))+(((-1.0)*gconst2*r20*x9386))+(((-1.0)*r22*x9383)));
evalcond[1]=((((-1.0)*r02*x9383))+(((-1.0)*gconst2*r00*x9386))+((r01*x9385)));
evalcond[2]=(((r10*x9384))+(((-1.0)*gconst1*r11*x9383))+(((-1.0)*r12*x9386)));
evalcond[3]=((-1.0)+((r11*x9385))+(((-1.0)*r12*x9383))+(((-1.0)*gconst2*r10*x9386)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9386))+((r20*x9384))+(((-1.0)*gconst1*r21*x9383)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x9386))+((cj1*cj2))+((r00*x9384))+(((-1.0)*gconst1*r01*x9383)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9387=((-1.0)*r20);
IkReal x9388=x8935;
CheckValue<IkReal> x9390 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9387),IKFAST_ATAN2_MAGTHRESH);
if(!x9390.valid){
continue;
}
IkReal x9389=((-1.0)*(x9390.value));
sj5=gconst1;
cj5=gconst2;
j5=x9389;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9389;
IkReal gconst1=(r21*x9388);
IkReal gconst2=(x9387*x9388);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x9391=((-1.0)*r20);
IkReal x9392=x8935;
CheckValue<IkReal> x9394 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9391),IKFAST_ATAN2_MAGTHRESH);
if(!x9394.valid){
continue;
}
IkReal x9393=((-1.0)*(x9394.value));
sj5=gconst1;
cj5=gconst2;
j5=x9393;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9393;
IkReal gconst1=(r21*x9392);
IkReal gconst2=(x9391*x9392);
IkReal x9395=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x9399=IKPowWithIntegerCheck(x9395,-1);
if(!x9399.valid){
continue;
}
IkReal x9396=x9399.value;
IkReal x9397=((1.0)*x9396);
IkReal x9398=((((-1.0)*(r02*r02)))+(((-1.0)*x9397*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x9396))+(((-1.0)*x9397*(r01*r01)*(r21*r21))));
j4eval[0]=x9398;
j4eval[1]=IKsign(x9398);
j4eval[2]=r02;
j4eval[3]=x9395;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9400=((-1.0)*r20);
IkReal x9401=x8935;
CheckValue<IkReal> x9403 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9400),IKFAST_ATAN2_MAGTHRESH);
if(!x9403.valid){
continue;
}
IkReal x9402=((-1.0)*(x9403.value));
sj5=gconst1;
cj5=gconst2;
j5=x9402;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9402;
IkReal gconst1=(r21*x9401);
IkReal gconst2=(x9400*x9401);
IkReal x9404=r22*r22;
IkReal x9405=(cj1*r02*sj2);
IkReal x9406=(cj2*r02*sj1);
CheckValue<IkReal> x9410=IKPowWithIntegerCheck(((-1.0)+x9404),-1);
if(!x9410.valid){
continue;
}
IkReal x9407=x9410.value;
if((((1.0)+(((-1.0)*x9404)))) < -0.00001)
continue;
IkReal x9408=IKsqrt(((1.0)+(((-1.0)*x9404))));
IkReal x9409=((1.0)*r22*x9407*x9408);
j4eval[0]=((IKabs(((((-1.0)*x9406*x9409))+(((-1.0)*x9405*x9409)))))+(IKabs((x9406+x9405))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9411=(cj2*sj1);
IkReal x9412=(cj1*sj2);
IkReal x9413=(gconst2*r00);
IkReal x9414=((1.0)*gconst1*r01);
CheckValue<IkReal> x9415 = IKatan2WithCheck(IkReal((((x9412*x9413))+(((-1.0)*x9411*x9414))+(((-1.0)*x9412*x9414))+((x9411*x9413)))),IkReal((((r02*x9411))+((r02*x9412)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9415.valid){
continue;
}
CheckValue<IkReal> x9416=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9416.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9415.value)+(((1.5707963267949)*(x9416.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9417=IKsin(j4);
IkReal x9418=IKcos(j4);
IkReal x9419=(gconst1*r11);
IkReal x9420=(gconst1*r21);
IkReal x9421=(gconst1*r01);
IkReal x9422=((1.0)*x9418);
IkReal x9423=(gconst2*x9418);
IkReal x9424=((1.0)*x9417);
evalcond[0]=(((x9417*x9420))+(((-1.0)*gconst2*r20*x9424))+(((-1.0)*r22*x9422)));
evalcond[1]=((((-1.0)*gconst2*r10*x9424))+(((-1.0)*r12*x9422))+((x9417*x9419)));
evalcond[2]=(((r00*x9423))+(((-1.0)*x9421*x9422))+(((-1.0)*r02*x9424)));
evalcond[3]=((-1.0)+((x9417*x9421))+(((-1.0)*r02*x9422))+(((-1.0)*gconst2*r00*x9424)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9420*x9422))+((cj1*sj2))+((r20*x9423))+(((-1.0)*r22*x9424)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9424))+((r10*x9423))+(((-1.0)*x9419*x9422)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9425=(gconst2*r00);
IkReal x9426=(gconst1*r01);
CheckValue<IkReal> x9427=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x9425*x9425)))+(((2.0)*x9425*x9426))+(((-1.0)*(x9426*x9426))))),-1);
if(!x9427.valid){
continue;
}
CheckValue<IkReal> x9428 = IKatan2WithCheck(IkReal(((((-1.0)*x9426))+x9425)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9428.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9427.value)))+(x9428.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9429=IKsin(j4);
IkReal x9430=IKcos(j4);
IkReal x9431=(gconst1*r11);
IkReal x9432=(gconst1*r21);
IkReal x9433=(gconst1*r01);
IkReal x9434=((1.0)*x9430);
IkReal x9435=(gconst2*x9430);
IkReal x9436=((1.0)*x9429);
evalcond[0]=(((x9429*x9432))+(((-1.0)*gconst2*r20*x9436))+(((-1.0)*r22*x9434)));
evalcond[1]=(((x9429*x9431))+(((-1.0)*gconst2*r10*x9436))+(((-1.0)*r12*x9434)));
evalcond[2]=((((-1.0)*x9433*x9434))+(((-1.0)*r02*x9436))+((r00*x9435)));
evalcond[3]=((-1.0)+((x9429*x9433))+(((-1.0)*gconst2*r00*x9436))+(((-1.0)*r02*x9434)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x9435))+(((-1.0)*x9432*x9434))+(((-1.0)*r22*x9436)));
evalcond[5]=((((-1.0)*x9431*x9434))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9436))+((r10*x9435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9437=((1.0)*gconst2);
CheckValue<IkReal> x9438 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9437))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9438.valid){
continue;
}
CheckValue<IkReal> x9439=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9437)))),-1);
if(!x9439.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9438.value)+(((1.5707963267949)*(x9439.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9440=IKsin(j4);
IkReal x9441=IKcos(j4);
IkReal x9442=(gconst1*r11);
IkReal x9443=(gconst1*r21);
IkReal x9444=(gconst1*r01);
IkReal x9445=((1.0)*x9441);
IkReal x9446=(gconst2*x9441);
IkReal x9447=((1.0)*x9440);
evalcond[0]=(((x9440*x9443))+(((-1.0)*gconst2*r20*x9447))+(((-1.0)*r22*x9445)));
evalcond[1]=(((x9440*x9442))+(((-1.0)*gconst2*r10*x9447))+(((-1.0)*r12*x9445)));
evalcond[2]=(((r00*x9446))+(((-1.0)*x9444*x9445))+(((-1.0)*r02*x9447)));
evalcond[3]=((-1.0)+((x9440*x9444))+(((-1.0)*gconst2*r00*x9447))+(((-1.0)*r02*x9445)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9443*x9445))+((cj1*sj2))+(((-1.0)*r22*x9447))+((r20*x9446)));
evalcond[5]=(((r10*x9446))+(((-1.0)*x9442*x9445))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x9447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9448=((-1.0)*r20);
IkReal x9449=x8935;
CheckValue<IkReal> x9451 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9448),IKFAST_ATAN2_MAGTHRESH);
if(!x9451.valid){
continue;
}
IkReal x9450=((-1.0)*(x9451.value));
sj5=gconst1;
cj5=gconst2;
j5=x9450;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9450;
IkReal gconst1=(r21*x9449);
IkReal gconst2=(x9448*x9449);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9452=((-1.0)*r20);
IkReal x9453=x8935;
CheckValue<IkReal> x9455 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9452),IKFAST_ATAN2_MAGTHRESH);
if(!x9455.valid){
continue;
}
IkReal x9454=((-1.0)*(x9455.value));
sj5=gconst1;
cj5=gconst2;
j5=x9454;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9454;
IkReal gconst1=(r21*x9453);
IkReal gconst2=(x9452*x9453);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9456=((-1.0)*r20);
IkReal x9457=x8935;
CheckValue<IkReal> x9459 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9456),IKFAST_ATAN2_MAGTHRESH);
if(!x9459.valid){
continue;
}
IkReal x9458=((-1.0)*(x9459.value));
sj5=gconst1;
cj5=gconst2;
j5=x9458;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9458;
IkReal gconst1=(r21*x9457);
IkReal gconst2=(x9456*x9457);
IkReal x9460=r22*r22;
IkReal x9461=(cj1*r02*sj2);
IkReal x9462=(cj2*r02*sj1);
CheckValue<IkReal> x9466=IKPowWithIntegerCheck(((-1.0)+x9460),-1);
if(!x9466.valid){
continue;
}
IkReal x9463=x9466.value;
if((((1.0)+(((-1.0)*x9460)))) < -0.00001)
continue;
IkReal x9464=IKsqrt(((1.0)+(((-1.0)*x9460))));
IkReal x9465=((1.0)*r22*x9463*x9464);
j4eval[0]=((IKabs((x9461+x9462)))+(IKabs(((((-1.0)*x9462*x9465))+(((-1.0)*x9461*x9465))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9467=(cj2*sj1);
IkReal x9468=(cj1*sj2);
IkReal x9469=(gconst2*r00);
IkReal x9470=((1.0)*gconst1*r01);
CheckValue<IkReal> x9471 = IKatan2WithCheck(IkReal(((((-1.0)*x9468*x9470))+(((-1.0)*x9467*x9470))+((x9467*x9469))+((x9468*x9469)))),IkReal((((r02*x9467))+((r02*x9468)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9471.valid){
continue;
}
CheckValue<IkReal> x9472=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9472.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9471.value)+(((1.5707963267949)*(x9472.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9473=IKsin(j4);
IkReal x9474=IKcos(j4);
IkReal x9475=(gconst1*r11);
IkReal x9476=(gconst1*r21);
IkReal x9477=(gconst1*r01);
IkReal x9478=((1.0)*x9474);
IkReal x9479=(gconst2*x9474);
IkReal x9480=((1.0)*x9473);
evalcond[0]=((((-1.0)*r22*x9478))+(((-1.0)*gconst2*r20*x9480))+((x9473*x9476)));
evalcond[1]=((((-1.0)*r12*x9478))+((x9473*x9475))+(((-1.0)*gconst2*r10*x9480)));
evalcond[2]=((((-1.0)*x9477*x9478))+(((-1.0)*r02*x9480))+((r00*x9479)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9478))+(((-1.0)*gconst2*r00*x9480))+((x9473*x9477)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9476*x9478))+((cj1*sj2))+(((-1.0)*r22*x9480))+((r20*x9479)));
evalcond[5]=(((r10*x9479))+(((-1.0)*sj1*sj2))+(((-1.0)*x9475*x9478))+((cj1*cj2))+(((-1.0)*r12*x9480)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9481=(gconst1*r01);
IkReal x9482=(gconst2*r00);
CheckValue<IkReal> x9483=IKPowWithIntegerCheck(IKsign(((x9481*x9481)+(x9482*x9482)+(r02*r02)+(((-2.0)*x9481*x9482)))),-1);
if(!x9483.valid){
continue;
}
CheckValue<IkReal> x9484 = IKatan2WithCheck(IkReal(((((-1.0)*x9481))+x9482)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x9484.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9483.value)))+(x9484.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9485=IKsin(j4);
IkReal x9486=IKcos(j4);
IkReal x9487=(gconst1*r11);
IkReal x9488=(gconst1*r21);
IkReal x9489=(gconst1*r01);
IkReal x9490=((1.0)*x9486);
IkReal x9491=(gconst2*x9486);
IkReal x9492=((1.0)*x9485);
evalcond[0]=((((-1.0)*gconst2*r20*x9492))+((x9485*x9488))+(((-1.0)*r22*x9490)));
evalcond[1]=(((x9485*x9487))+(((-1.0)*gconst2*r10*x9492))+(((-1.0)*r12*x9490)));
evalcond[2]=((((-1.0)*r02*x9492))+(((-1.0)*x9489*x9490))+((r00*x9491)));
evalcond[3]=((1.0)+(((-1.0)*r02*x9490))+((x9485*x9489))+(((-1.0)*gconst2*r00*x9492)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r22*x9492))+((cj1*sj2))+(((-1.0)*x9488*x9490))+((r20*x9491)));
evalcond[5]=(((r10*x9491))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9492))+(((-1.0)*x9487*x9490))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9493 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9493.valid){
continue;
}
CheckValue<IkReal> x9494=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9494.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9493.value)+(((1.5707963267949)*(x9494.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9495=IKsin(j4);
IkReal x9496=IKcos(j4);
IkReal x9497=(gconst1*r11);
IkReal x9498=(gconst1*r21);
IkReal x9499=(gconst1*r01);
IkReal x9500=((1.0)*x9496);
IkReal x9501=(gconst2*x9496);
IkReal x9502=((1.0)*x9495);
evalcond[0]=((((-1.0)*r22*x9500))+((x9495*x9498))+(((-1.0)*gconst2*r20*x9502)));
evalcond[1]=((((-1.0)*r12*x9500))+(((-1.0)*gconst2*r10*x9502))+((x9495*x9497)));
evalcond[2]=((((-1.0)*x9499*x9500))+(((-1.0)*r02*x9502))+((r00*x9501)));
evalcond[3]=((1.0)+(((-1.0)*gconst2*r00*x9502))+((x9495*x9499))+(((-1.0)*r02*x9500)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x9498*x9500))+((cj1*sj2))+(((-1.0)*r22*x9502))+((r20*x9501)));
evalcond[5]=(((r10*x9501))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x9502))+((cj1*cj2))+(((-1.0)*x9497*x9500)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9503=((-1.0)*r20);
IkReal x9504=((-1.0)*px);
CheckValue<IkReal> x9506 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9503),IKFAST_ATAN2_MAGTHRESH);
if(!x9506.valid){
continue;
}
IkReal x9505=((-1.0)*(x9506.value));
sj5=gconst1;
cj5=gconst2;
j5=x9505;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9504);
rxp1_1=(px*r21);
rxp1_2=(r11*x9504);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9505;
IkReal gconst1=r21;
IkReal gconst2=x9503;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9507=((-1.0)*r20);
IkReal x9508=((-1.0)*px);
CheckValue<IkReal> x9510 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9507),IKFAST_ATAN2_MAGTHRESH);
if(!x9510.valid){
continue;
}
IkReal x9509=((-1.0)*(x9510.value));
sj5=gconst1;
cj5=gconst2;
j5=x9509;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9508);
rxp1_1=(px*r21);
rxp1_2=(r11*x9508);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9509;
IkReal gconst1=r21;
IkReal gconst2=x9507;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9511=((-1.0)*r20);
IkReal x9512=((-1.0)*px);
CheckValue<IkReal> x9514 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9511),IKFAST_ATAN2_MAGTHRESH);
if(!x9514.valid){
continue;
}
IkReal x9513=((-1.0)*(x9514.value));
sj5=gconst1;
cj5=gconst2;
j5=x9513;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9512);
rxp1_1=(px*r21);
rxp1_2=(r11*x9512);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9513;
IkReal gconst1=r21;
IkReal gconst2=x9511;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9517=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9517.valid){
continue;
}
IkReal x9515=x9517.value;
IkReal x9516=(sj0*x9515);
cj4array[0]=(((cj1*cj2*x9516))+(((-1.0)*sj1*sj2*x9516)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9518=IKsin(j4);
IkReal x9519=IKcos(j4);
IkReal x9520=(gconst1*x9518);
IkReal x9521=((1.0)*x9519);
IkReal x9522=((1.0)*gconst2*x9518);
evalcond[0]=((-1.0)*r02*x9518);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9521)));
evalcond[2]=((((-1.0)*r20*x9522))+((r21*x9520)));
evalcond[3]=((((-1.0)*r10*x9522))+((r11*x9520)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst1*r21*x9521))+((gconst2*r20*x9519)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9525=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9525.valid){
continue;
}
IkReal x9523=x9525.value;
IkReal x9524=((1.0)*x9523);
cj4array[0]=((((-1.0)*cj2*sj1*x9524))+(((-1.0)*cj1*sj2*x9524)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9526=IKsin(j4);
IkReal x9527=IKcos(j4);
IkReal x9528=(gconst2*r10);
IkReal x9529=((1.0)*sj0);
IkReal x9530=(gconst1*r11);
IkReal x9531=((1.0)*x9526);
IkReal x9532=((1.0)*x9527);
evalcond[0]=((-1.0)*r02*x9526);
evalcond[1]=((((-1.0)*r02*x9532))+(((-1.0)*x9529)));
evalcond[2]=(((gconst1*r21*x9526))+(((-1.0)*gconst2*r20*x9531)));
evalcond[3]=(((x9526*x9530))+(((-1.0)*x9528*x9531)));
evalcond[4]=((((-1.0)*cj1*cj2*x9529))+((x9527*x9528))+(((-1.0)*x9530*x9532))+((sj0*sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9533=IKPowWithIntegerCheck(r02,-1);
if(!x9533.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9533.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9534=IKsin(j4);
IkReal x9535=IKcos(j4);
IkReal x9536=(gconst2*r10);
IkReal x9537=(gconst1*r11);
IkReal x9538=(gconst1*r21);
IkReal x9539=(gconst2*r20);
IkReal x9540=((1.0)*x9534);
IkReal x9541=((1.0)*x9535);
evalcond[0]=((-1.0)*r02*x9534);
evalcond[1]=((((-1.0)*x9539*x9540))+((x9534*x9538)));
evalcond[2]=((((-1.0)*x9536*x9540))+((x9534*x9537)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x9538*x9541))+((x9535*x9539)));
evalcond[4]=((((-1.0)*x9537*x9541))+(((-1.0)*cj1*cj2*sj0))+((sj0*sj1*sj2))+((x9535*x9536)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9542=(cj2*sj1);
IkReal x9543=(cj1*sj2);
IkReal x9544=(gconst1*r21);
IkReal x9545=((1.0)*gconst2*r20);
CheckValue<IkReal> x9546=IKPowWithIntegerCheck(IKsign(((((-2.0)*gconst2*r20*x9544))+(r22*r22)+(x9544*x9544)+(((gconst2*gconst2)*(r20*r20))))),-1);
if(!x9546.valid){
continue;
}
CheckValue<IkReal> x9547 = IKatan2WithCheck(IkReal((((r22*x9542))+((r22*x9543)))),IkReal(((((-1.0)*x9543*x9545))+(((-1.0)*x9542*x9545))+((x9542*x9544))+((x9543*x9544)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9547.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9546.value)))+(x9547.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9548=IKsin(j4);
IkReal x9549=IKcos(j4);
IkReal x9550=(gconst1*r11);
IkReal x9551=(sj1*sj2);
IkReal x9552=(gconst1*r21);
IkReal x9553=(gconst1*r01);
IkReal x9554=((1.0)*x9549);
IkReal x9555=(gconst2*x9549);
IkReal x9556=((1.0)*cj1*cj2);
IkReal x9557=((1.0)*x9548);
evalcond[0]=(((x9548*x9552))+(((-1.0)*r22*x9554))+(((-1.0)*gconst2*r20*x9557)));
evalcond[1]=(cj0+((x9548*x9550))+(((-1.0)*gconst2*r10*x9557))+(((-1.0)*r12*x9554)));
evalcond[2]=((((-1.0)*sj0))+((x9548*x9553))+(((-1.0)*r02*x9554))+(((-1.0)*gconst2*r00*x9557)));
evalcond[3]=(((cj2*sj1))+(((-1.0)*r22*x9557))+((cj1*sj2))+((r20*x9555))+(((-1.0)*x9552*x9554)));
evalcond[4]=((((-1.0)*cj0*x9556))+(((-1.0)*r02*x9557))+(((-1.0)*x9553*x9554))+((r00*x9555))+((cj0*x9551)));
evalcond[5]=(((sj0*x9551))+(((-1.0)*sj0*x9556))+(((-1.0)*x9550*x9554))+((r10*x9555))+(((-1.0)*r12*x9557)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9558=((1.0)*gconst2);
CheckValue<IkReal> x9559 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x9558))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9559.valid){
continue;
}
CheckValue<IkReal> x9560=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9558)))),-1);
if(!x9560.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9559.value)+(((1.5707963267949)*(x9560.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9561=IKsin(j4);
IkReal x9562=IKcos(j4);
IkReal x9563=(gconst1*r11);
IkReal x9564=(sj1*sj2);
IkReal x9565=(gconst1*r21);
IkReal x9566=(gconst1*r01);
IkReal x9567=((1.0)*x9562);
IkReal x9568=(gconst2*x9562);
IkReal x9569=((1.0)*cj1*cj2);
IkReal x9570=((1.0)*x9561);
evalcond[0]=((((-1.0)*gconst2*r20*x9570))+((x9561*x9565))+(((-1.0)*r22*x9567)));
evalcond[1]=(cj0+((x9561*x9563))+(((-1.0)*gconst2*r10*x9570))+(((-1.0)*r12*x9567)));
evalcond[2]=((((-1.0)*sj0))+((x9561*x9566))+(((-1.0)*gconst2*r00*x9570))+(((-1.0)*r02*x9567)));
evalcond[3]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x9570))+(((-1.0)*x9565*x9567))+((r20*x9568)));
evalcond[4]=(((cj0*x9564))+((r00*x9568))+(((-1.0)*r02*x9570))+(((-1.0)*x9566*x9567))+(((-1.0)*cj0*x9569)));
evalcond[5]=(((sj0*x9564))+(((-1.0)*x9563*x9567))+(((-1.0)*r12*x9570))+(((-1.0)*sj0*x9569))+((r10*x9568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9571=((1.0)*gconst2);
CheckValue<IkReal> x9572 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x9571)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9572.valid){
continue;
}
CheckValue<IkReal> x9573=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x9571)))),-1);
if(!x9573.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9572.value)+(((1.5707963267949)*(x9573.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x9574=IKsin(j4);
IkReal x9575=IKcos(j4);
IkReal x9576=(gconst1*r11);
IkReal x9577=(sj1*sj2);
IkReal x9578=(gconst1*r21);
IkReal x9579=(gconst1*r01);
IkReal x9580=((1.0)*x9575);
IkReal x9581=(gconst2*x9575);
IkReal x9582=((1.0)*cj1*cj2);
IkReal x9583=((1.0)*x9574);
evalcond[0]=(((x9574*x9578))+(((-1.0)*r22*x9580))+(((-1.0)*gconst2*r20*x9583)));
evalcond[1]=(((x9574*x9576))+cj0+(((-1.0)*gconst2*r10*x9583))+(((-1.0)*r12*x9580)));
evalcond[2]=((((-1.0)*sj0))+((x9574*x9579))+(((-1.0)*gconst2*r00*x9583))+(((-1.0)*r02*x9580)));
evalcond[3]=(((cj2*sj1))+((r20*x9581))+((cj1*sj2))+(((-1.0)*r22*x9583))+(((-1.0)*x9578*x9580)));
evalcond[4]=(((r00*x9581))+((cj0*x9577))+(((-1.0)*cj0*x9582))+(((-1.0)*x9579*x9580))+(((-1.0)*r02*x9583)));
evalcond[5]=(((r10*x9581))+(((-1.0)*x9576*x9580))+((sj0*x9577))+(((-1.0)*r12*x9583))+(((-1.0)*sj0*x9582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9584=((-1.0)*r20);
IkReal x9585=x8935;
CheckValue<IkReal> x9587 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9584),IKFAST_ATAN2_MAGTHRESH);
if(!x9587.valid){
continue;
}
IkReal x9586=((-1.0)*(x9587.value));
sj5=gconst1;
cj5=gconst2;
j5=x9586;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9586;
IkReal gconst1=(r21*x9585);
IkReal gconst2=(x9584*x9585);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9588=((-1.0)*r20);
IkReal x9589=x8935;
CheckValue<IkReal> x9591 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9588),IKFAST_ATAN2_MAGTHRESH);
if(!x9591.valid){
continue;
}
IkReal x9590=((-1.0)*(x9591.value));
sj5=gconst1;
cj5=gconst2;
j5=x9590;
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst0=x9590;
IkReal gconst1=(r21*x9589);
IkReal gconst2=(x9588*x9589);
CheckValue<IkReal> x9599=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9599.valid){
continue;
}
IkReal x9592=x9599.value;
IkReal x9593=(sj3*x9592);
IkReal x9594=(r11*x9593);
IkReal x9595=(r00*x9593);
IkReal x9596=(r01*x9593);
IkReal x9597=(r10*x9593);
IkReal x9598=(r20*r21*x9593);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*r20*r21*x9596))+((r01*x9594*(r21*r21)))+((r10*x9595*(r20*r20)))+((r00*r20*r21*x9594))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9600=gconst2*gconst2;
IkReal x9601=gconst1*gconst1;
IkReal x9602=((1.0)*cj3);
IkReal x9603=((1.0)*sj3);
IkReal x9604=(r11*sj3);
IkReal x9605=(r10*sj3);
IkReal x9606=(gconst1*gconst2*r00);
IkReal x9607=(gconst1*gconst2*r01);
IkReal x9608=(r00*x9600);
IkReal x9609=(r01*x9601);
CheckValue<IkReal> x9610=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9602*x9609))+(((-1.0)*r02*r12*x9602))+((cj3*r11*x9606))+(((-1.0)*r10*x9602*x9608))+((cj3*r10*x9607)))),-1);
if(!x9610.valid){
continue;
}
CheckValue<IkReal> x9611 = IKatan2WithCheck(IkReal((((gconst1*r02*x9605))+((gconst2*r02*x9604)))),IkReal((((x9604*x9607))+(((-1.0)*r11*x9603*x9608))+((x9605*x9609))+(((-1.0)*r10*x9603*x9606)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9611.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9610.value)))+(x9611.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9612=IKsin(j4);
IkReal x9613=IKcos(j4);
IkReal x9614=(sj1*sj2);
IkReal x9615=(gconst1*sj3);
IkReal x9616=(cj3*gconst1);
IkReal x9617=(cj3*gconst2);
IkReal x9618=((1.0)*cj2);
IkReal x9619=(cj1*sj2);
IkReal x9620=(gconst2*sj3);
IkReal x9621=(cj1*x9618);
IkReal x9622=((1.0)*x9613);
IkReal x9623=((1.0)*x9612);
IkReal x9624=(gconst1*x9612);
IkReal x9625=(cj3*x9612);
IkReal x9626=(x9613*x9620);
evalcond[0]=((((-1.0)*r22*x9622))+((r21*x9624))+(((-1.0)*gconst2*r20*x9623)));
evalcond[1]=(((r01*x9624))+(((-1.0)*gconst2*r00*x9623))+(((-1.0)*r02*x9622)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9622))+((r11*x9624))+(((-1.0)*gconst2*r10*x9623)));
evalcond[3]=(((r10*x9615))+((r11*x9613*x9616))+((r12*x9625))+(((-1.0)*r10*x9617*x9622))+((r11*x9620)));
evalcond[4]=(((r10*x9626))+((r10*x9616))+(((-1.0)*r12*sj3*x9623))+((r11*x9617))+(((-1.0)*r11*x9615*x9622)));
evalcond[5]=(((cj2*sj1))+((r20*x9615))+(((-1.0)*r20*x9617*x9622))+((r21*x9620))+((r22*x9625))+x9619+((r21*x9613*x9616)));
evalcond[6]=(((r01*x9620))+((r00*x9615))+(((-1.0)*r00*x9617*x9622))+((r02*x9625))+x9614+(((-1.0)*x9621))+((r01*x9613*x9616)));
evalcond[7]=(((r20*x9616))+((r20*x9626))+(((-1.0)*r22*sj3*x9623))+(((-1.0)*r21*x9615*x9622))+((r21*x9617))+x9614+(((-1.0)*x9621)));
evalcond[8]=((((-1.0)*r01*x9615*x9622))+((r00*x9626))+((r00*x9616))+((r01*x9617))+(((-1.0)*x9619))+(((-1.0)*r02*sj3*x9623))+(((-1.0)*sj1*x9618)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9627=gconst2*gconst2;
IkReal x9628=gconst1*gconst1;
IkReal x9629=(gconst2*r11);
IkReal x9630=(cj3*r02);
IkReal x9631=(gconst1*r01);
IkReal x9632=(cj3*r10);
IkReal x9633=(r10*sj3);
IkReal x9634=((1.0)*gconst1*r00);
IkReal x9635=(r01*x9628);
IkReal x9636=(r00*x9627);
CheckValue<IkReal> x9637 = IKatan2WithCheck(IkReal((((x9629*x9630))+((gconst1*r10*x9630)))),IkReal((((cj3*x9629*x9631))+((x9632*x9635))+(((-1.0)*gconst2*x9632*x9634))+(((-1.0)*cj3*r11*x9636)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9637.valid){
continue;
}
CheckValue<IkReal> x9638=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r11*sj3*x9635))+(((-1.0)*sj3*x9629*x9634))+((x9633*x9636))+(((-1.0)*gconst2*x9631*x9633)))),-1);
if(!x9638.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9637.value)+(((1.5707963267949)*(x9638.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9639=IKsin(j4);
IkReal x9640=IKcos(j4);
IkReal x9641=(sj1*sj2);
IkReal x9642=(gconst1*sj3);
IkReal x9643=(cj3*gconst1);
IkReal x9644=(cj3*gconst2);
IkReal x9645=((1.0)*cj2);
IkReal x9646=(cj1*sj2);
IkReal x9647=(gconst2*sj3);
IkReal x9648=(cj1*x9645);
IkReal x9649=((1.0)*x9640);
IkReal x9650=((1.0)*x9639);
IkReal x9651=(gconst1*x9639);
IkReal x9652=(cj3*x9639);
IkReal x9653=(x9640*x9647);
evalcond[0]=((((-1.0)*gconst2*r20*x9650))+((r21*x9651))+(((-1.0)*r22*x9649)));
evalcond[1]=(((r01*x9651))+(((-1.0)*gconst2*r00*x9650))+(((-1.0)*r02*x9649)));
evalcond[2]=((1.0)+(((-1.0)*r12*x9649))+((r11*x9651))+(((-1.0)*gconst2*r10*x9650)));
evalcond[3]=(((r11*x9647))+(((-1.0)*r10*x9644*x9649))+((r12*x9652))+((r10*x9642))+((r11*x9640*x9643)));
evalcond[4]=(((r11*x9644))+(((-1.0)*r11*x9642*x9649))+((r10*x9643))+((r10*x9653))+(((-1.0)*r12*sj3*x9650)));
evalcond[5]=(((cj2*sj1))+((r21*x9640*x9643))+(((-1.0)*r20*x9644*x9649))+x9646+((r20*x9642))+((r22*x9652))+((r21*x9647)));
evalcond[6]=((((-1.0)*r00*x9644*x9649))+(((-1.0)*x9648))+((r00*x9642))+((r01*x9647))+x9641+((r02*x9652))+((r01*x9640*x9643)));
evalcond[7]=((((-1.0)*r21*x9642*x9649))+((r20*x9653))+(((-1.0)*x9648))+x9641+((r20*x9643))+(((-1.0)*r22*sj3*x9650))+((r21*x9644)));
evalcond[8]=((((-1.0)*sj1*x9645))+(((-1.0)*r02*sj3*x9650))+((r00*x9653))+((r00*x9643))+((r01*x9644))+(((-1.0)*x9646))+(((-1.0)*r01*x9642*x9649)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9654=((1.0)*gconst2);
CheckValue<IkReal> x9655 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9654))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9655.valid){
continue;
}
CheckValue<IkReal> x9656=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x9654))+(((-1.0)*gconst1*r00)))),-1);
if(!x9656.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9655.value)+(((1.5707963267949)*(x9656.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9657=IKsin(j4);
IkReal x9658=IKcos(j4);
IkReal x9659=(sj1*sj2);
IkReal x9660=(gconst1*sj3);
IkReal x9661=(cj3*gconst1);
IkReal x9662=(cj3*gconst2);
IkReal x9663=((1.0)*cj2);
IkReal x9664=(cj1*sj2);
IkReal x9665=(gconst2*sj3);
IkReal x9666=(cj1*x9663);
IkReal x9667=((1.0)*x9658);
IkReal x9668=((1.0)*x9657);
IkReal x9669=(gconst1*x9657);
IkReal x9670=(cj3*x9657);
IkReal x9671=(x9658*x9665);
evalcond[0]=((((-1.0)*gconst2*r20*x9668))+((r21*x9669))+(((-1.0)*r22*x9667)));
evalcond[1]=(((r01*x9669))+(((-1.0)*gconst2*r00*x9668))+(((-1.0)*r02*x9667)));
evalcond[2]=((1.0)+((r11*x9669))+(((-1.0)*r12*x9667))+(((-1.0)*gconst2*r10*x9668)));
evalcond[3]=(((r12*x9670))+((r11*x9665))+((r11*x9658*x9661))+((r10*x9660))+(((-1.0)*r10*x9662*x9667)));
evalcond[4]=((((-1.0)*r11*x9660*x9667))+((r11*x9662))+((r10*x9671))+((r10*x9661))+(((-1.0)*r12*sj3*x9668)));
evalcond[5]=(((cj2*sj1))+((r21*x9665))+((r20*x9660))+x9664+((r21*x9658*x9661))+((r22*x9670))+(((-1.0)*r20*x9662*x9667)));
evalcond[6]=((((-1.0)*x9666))+((r01*x9658*x9661))+((r00*x9660))+x9659+((r01*x9665))+(((-1.0)*r00*x9662*x9667))+((r02*x9670)));
evalcond[7]=((((-1.0)*x9666))+((r21*x9662))+((r20*x9661))+((r20*x9671))+(((-1.0)*r21*x9660*x9667))+x9659+(((-1.0)*r22*sj3*x9668)));
evalcond[8]=((((-1.0)*sj1*x9663))+(((-1.0)*r02*sj3*x9668))+((r00*x9671))+((r00*x9661))+((r01*x9662))+(((-1.0)*x9664))+(((-1.0)*r01*x9660*x9667)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9672=((-1.0)*r20);
IkReal x9673=x8935;
CheckValue<IkReal> x9675 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9672),IKFAST_ATAN2_MAGTHRESH);
if(!x9675.valid){
continue;
}
IkReal x9674=((-1.0)*(x9675.value));
sj5=gconst1;
cj5=gconst2;
j5=x9674;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9674;
IkReal gconst1=(r21*x9673);
IkReal gconst2=(x9672*x9673);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9676=((-1.0)*r20);
IkReal x9677=x8935;
CheckValue<IkReal> x9679 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9676),IKFAST_ATAN2_MAGTHRESH);
if(!x9679.valid){
continue;
}
IkReal x9678=((-1.0)*(x9679.value));
sj5=gconst1;
cj5=gconst2;
j5=x9678;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst0=x9678;
IkReal gconst1=(r21*x9677);
IkReal gconst2=(x9676*x9677);
CheckValue<IkReal> x9687=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9687.valid){
continue;
}
IkReal x9680=x9687.value;
IkReal x9681=(sj3*x9680);
IkReal x9682=(r11*x9681);
IkReal x9683=(r00*x9681);
IkReal x9684=(r01*x9681);
IkReal x9685=(r10*x9681);
IkReal x9686=(r20*r21*x9681);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x9683*(r20*r20)))+((r01*x9682*(r21*r21)))+((r00*r20*r21*x9682))+((r10*r20*r21*x9684))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9688=gconst2*gconst2;
IkReal x9689=gconst1*gconst1;
IkReal x9690=((1.0)*cj3);
IkReal x9691=((1.0)*sj3);
IkReal x9692=(r11*sj3);
IkReal x9693=(r10*sj3);
IkReal x9694=(gconst1*gconst2*r00);
IkReal x9695=(gconst1*gconst2*r01);
IkReal x9696=(r00*x9688);
IkReal x9697=(r01*x9689);
CheckValue<IkReal> x9698=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x9690*x9697))+((cj3*r11*x9694))+((cj3*r10*x9695))+(((-1.0)*r10*x9690*x9696))+(((-1.0)*r02*r12*x9690)))),-1);
if(!x9698.valid){
continue;
}
CheckValue<IkReal> x9699 = IKatan2WithCheck(IkReal((((gconst1*r02*x9693))+((gconst2*r02*x9692)))),IkReal(((((-1.0)*r10*x9691*x9694))+(((-1.0)*r11*x9691*x9696))+((x9692*x9695))+((x9693*x9697)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9699.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9698.value)))+(x9699.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9700=IKsin(j4);
IkReal x9701=IKcos(j4);
IkReal x9702=(cj2*sj1);
IkReal x9703=(cj1*sj2);
IkReal x9704=(gconst1*sj3);
IkReal x9705=(cj3*gconst1);
IkReal x9706=(sj1*sj2);
IkReal x9707=(cj3*gconst2);
IkReal x9708=(cj1*cj2);
IkReal x9709=(gconst2*sj3);
IkReal x9710=((1.0)*x9701);
IkReal x9711=((1.0)*x9700);
IkReal x9712=(gconst1*x9700);
IkReal x9713=(cj3*x9700);
IkReal x9714=(x9702+x9703);
IkReal x9715=(x9701*x9709);
evalcond[0]=((((-1.0)*gconst2*r20*x9711))+((r21*x9712))+(((-1.0)*r22*x9710)));
evalcond[1]=((((-1.0)*r02*x9710))+(((-1.0)*gconst2*r00*x9711))+((r01*x9712)));
evalcond[2]=((-1.0)+((r11*x9712))+(((-1.0)*gconst2*r10*x9711))+(((-1.0)*r12*x9710)));
evalcond[3]=(((r10*x9704))+((r11*x9701*x9705))+(((-1.0)*r10*x9707*x9710))+((r12*x9713))+((r11*x9709)));
evalcond[4]=(((r10*x9705))+(((-1.0)*r12*sj3*x9711))+((r11*x9707))+(((-1.0)*r11*x9704*x9710))+((r10*x9715)));
evalcond[5]=(((r22*x9713))+((r20*x9704))+((r21*x9709))+((r21*x9701*x9705))+x9714+(((-1.0)*r20*x9707*x9710)));
evalcond[6]=((((-1.0)*x9706))+(((-1.0)*r00*x9707*x9710))+((r02*x9713))+((r01*x9709))+((r00*x9704))+x9708+((r01*x9701*x9705)));
evalcond[7]=((((-1.0)*r02*sj3*x9711))+((r01*x9707))+((r00*x9705))+x9714+((r00*x9715))+(((-1.0)*r01*x9704*x9710)));
evalcond[8]=((((-1.0)*x9708))+(((-1.0)*r21*x9704*x9710))+((r20*x9705))+(((-1.0)*r22*sj3*x9711))+((r21*x9707))+x9706+((r20*x9715)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9716=gconst2*gconst2;
IkReal x9717=gconst1*gconst1;
IkReal x9718=(gconst2*r11);
IkReal x9719=(cj3*r02);
IkReal x9720=(gconst1*r01);
IkReal x9721=(cj3*r10);
IkReal x9722=(r10*sj3);
IkReal x9723=((1.0)*gconst1*r00);
IkReal x9724=(r01*x9717);
IkReal x9725=(r00*x9716);
CheckValue<IkReal> x9726=IKPowWithIntegerCheck(IKsign((((x9722*x9725))+((r02*r12*sj3))+(((-1.0)*sj3*x9718*x9723))+(((-1.0)*gconst2*x9720*x9722))+((r11*sj3*x9724)))),-1);
if(!x9726.valid){
continue;
}
CheckValue<IkReal> x9727 = IKatan2WithCheck(IkReal((((x9718*x9719))+((gconst1*r10*x9719)))),IkReal((((cj3*x9718*x9720))+(((-1.0)*cj3*r11*x9725))+((x9721*x9724))+(((-1.0)*gconst2*x9721*x9723)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9727.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9726.value)))+(x9727.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9728=IKsin(j4);
IkReal x9729=IKcos(j4);
IkReal x9730=(cj2*sj1);
IkReal x9731=(cj1*sj2);
IkReal x9732=(gconst1*sj3);
IkReal x9733=(cj3*gconst1);
IkReal x9734=(sj1*sj2);
IkReal x9735=(cj3*gconst2);
IkReal x9736=(cj1*cj2);
IkReal x9737=(gconst2*sj3);
IkReal x9738=((1.0)*x9729);
IkReal x9739=((1.0)*x9728);
IkReal x9740=(gconst1*x9728);
IkReal x9741=(cj3*x9728);
IkReal x9742=(x9731+x9730);
IkReal x9743=(x9729*x9737);
evalcond[0]=(((r21*x9740))+(((-1.0)*r22*x9738))+(((-1.0)*gconst2*r20*x9739)));
evalcond[1]=((((-1.0)*r02*x9738))+(((-1.0)*gconst2*r00*x9739))+((r01*x9740)));
evalcond[2]=((-1.0)+((r11*x9740))+(((-1.0)*r12*x9738))+(((-1.0)*gconst2*r10*x9739)));
evalcond[3]=((((-1.0)*r10*x9735*x9738))+((r11*x9737))+((r11*x9729*x9733))+((r12*x9741))+((r10*x9732)));
evalcond[4]=(((r11*x9735))+(((-1.0)*r12*sj3*x9739))+(((-1.0)*r11*x9732*x9738))+((r10*x9743))+((r10*x9733)));
evalcond[5]=(((r22*x9741))+((r20*x9732))+x9742+((r21*x9737))+(((-1.0)*r20*x9735*x9738))+((r21*x9729*x9733)));
evalcond[6]=(((r01*x9729*x9733))+((r02*x9741))+x9736+(((-1.0)*r00*x9735*x9738))+((r01*x9737))+(((-1.0)*x9734))+((r00*x9732)));
evalcond[7]=((((-1.0)*r02*sj3*x9739))+x9742+((r00*x9743))+(((-1.0)*r01*x9732*x9738))+((r01*x9735))+((r00*x9733)));
evalcond[8]=((((-1.0)*r21*x9732*x9738))+((r20*x9733))+x9734+(((-1.0)*r22*sj3*x9739))+((r20*x9743))+((r21*x9735))+(((-1.0)*x9736)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9744 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9744.valid){
continue;
}
CheckValue<IkReal> x9745=IKPowWithIntegerCheck(IKsign((((gconst1*r00))+((gconst2*r01)))),-1);
if(!x9745.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9744.value)+(((1.5707963267949)*(x9745.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9746=IKsin(j4);
IkReal x9747=IKcos(j4);
IkReal x9748=(cj2*sj1);
IkReal x9749=(cj1*sj2);
IkReal x9750=(gconst1*sj3);
IkReal x9751=(cj3*gconst1);
IkReal x9752=(sj1*sj2);
IkReal x9753=(cj3*gconst2);
IkReal x9754=(cj1*cj2);
IkReal x9755=(gconst2*sj3);
IkReal x9756=((1.0)*x9747);
IkReal x9757=((1.0)*x9746);
IkReal x9758=(gconst1*x9746);
IkReal x9759=(cj3*x9746);
IkReal x9760=(x9748+x9749);
IkReal x9761=(x9747*x9755);
evalcond[0]=(((r21*x9758))+(((-1.0)*r22*x9756))+(((-1.0)*gconst2*r20*x9757)));
evalcond[1]=(((r01*x9758))+(((-1.0)*r02*x9756))+(((-1.0)*gconst2*r00*x9757)));
evalcond[2]=((-1.0)+((r11*x9758))+(((-1.0)*gconst2*r10*x9757))+(((-1.0)*r12*x9756)));
evalcond[3]=(((r10*x9750))+((r11*x9755))+((r11*x9747*x9751))+(((-1.0)*r10*x9753*x9756))+((r12*x9759)));
evalcond[4]=(((r10*x9751))+((r11*x9753))+((r10*x9761))+(((-1.0)*r12*sj3*x9757))+(((-1.0)*r11*x9750*x9756)));
evalcond[5]=(((r22*x9759))+((r21*x9755))+x9760+(((-1.0)*r20*x9753*x9756))+((r20*x9750))+((r21*x9747*x9751)));
evalcond[6]=(((r01*x9755))+(((-1.0)*x9752))+((r00*x9750))+(((-1.0)*r00*x9753*x9756))+x9754+((r02*x9759))+((r01*x9747*x9751)));
evalcond[7]=(((r01*x9753))+((r00*x9751))+((r00*x9761))+(((-1.0)*r01*x9750*x9756))+x9760+(((-1.0)*r02*sj3*x9757)));
evalcond[8]=((((-1.0)*x9754))+((r21*x9753))+x9752+(((-1.0)*r21*x9750*x9756))+(((-1.0)*r22*sj3*x9757))+((r20*x9761))+((r20*x9751)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9762=((-1.0)*r20);
IkReal x9763=x8935;
CheckValue<IkReal> x9765 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9762),IKFAST_ATAN2_MAGTHRESH);
if(!x9765.valid){
continue;
}
IkReal x9764=((-1.0)*(x9765.value));
sj5=gconst1;
cj5=gconst2;
j5=x9764;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9764;
IkReal gconst1=(r21*x9763);
IkReal gconst2=(x9762*x9763);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9766=((-1.0)*r20);
IkReal x9767=x8935;
CheckValue<IkReal> x9769 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9766),IKFAST_ATAN2_MAGTHRESH);
if(!x9769.valid){
continue;
}
IkReal x9768=((-1.0)*(x9769.value));
sj5=gconst1;
cj5=gconst2;
j5=x9768;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst0=x9768;
IkReal gconst1=(r21*x9767);
IkReal gconst2=(x9766*x9767);
CheckValue<IkReal> x9777=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9777.valid){
continue;
}
IkReal x9770=x9777.value;
IkReal x9771=(sj3*x9770);
IkReal x9772=(r11*x9771);
IkReal x9773=(r00*x9771);
IkReal x9774=(r01*x9771);
IkReal x9775=(r10*x9771);
IkReal x9776=(r20*r21*x9771);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9772))+((r10*x9773*(r20*r20)))+((r10*r20*r21*x9774))+((r01*x9772*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9778=gconst1*gconst1;
IkReal x9779=gconst2*gconst2;
IkReal x9780=((1.0)*cj3);
IkReal x9781=(gconst2*r10);
IkReal x9782=(r01*sj3);
IkReal x9783=(gconst1*r00*sj3);
IkReal x9784=(gconst1*gconst2*r11);
IkReal x9785=(r10*x9779);
IkReal x9786=(r11*x9778);
CheckValue<IkReal> x9787 = IKatan2WithCheck(IkReal((((gconst2*r12*x9782))+((r12*x9783)))),IkReal((((x9782*x9784))+(((-1.0)*x9782*x9785))+((r00*sj3*x9786))+(((-1.0)*x9781*x9783)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9787.valid){
continue;
}
CheckValue<IkReal> x9788=IKPowWithIntegerCheck(IKsign((((cj3*r00*x9784))+(((-1.0)*r00*x9780*x9785))+(((-1.0)*r01*x9780*x9786))+(((-1.0)*r02*r12*x9780))+((cj3*gconst1*r01*x9781)))),-1);
if(!x9788.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9787.value)+(((1.5707963267949)*(x9788.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9789=IKsin(j4);
IkReal x9790=IKcos(j4);
IkReal x9791=(sj1*sj2);
IkReal x9792=(gconst1*sj3);
IkReal x9793=(cj3*gconst1);
IkReal x9794=(cj3*gconst2);
IkReal x9795=((1.0)*cj2);
IkReal x9796=(cj1*sj2);
IkReal x9797=(gconst2*sj3);
IkReal x9798=(cj1*x9795);
IkReal x9799=((1.0)*x9790);
IkReal x9800=((1.0)*x9789);
IkReal x9801=(gconst1*x9789);
IkReal x9802=(cj3*x9789);
IkReal x9803=(x9790*x9797);
evalcond[0]=(((r21*x9801))+(((-1.0)*gconst2*r20*x9800))+(((-1.0)*r22*x9799)));
evalcond[1]=((((-1.0)*gconst2*r10*x9800))+((r11*x9801))+(((-1.0)*r12*x9799)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9800))+(((-1.0)*r02*x9799))+((r01*x9801)));
evalcond[3]=(((r01*x9790*x9793))+(((-1.0)*r00*x9794*x9799))+((r00*x9792))+((r02*x9802))+((r01*x9797)));
evalcond[4]=(((r00*x9803))+((r00*x9793))+((r01*x9794))+(((-1.0)*r01*x9792*x9799))+(((-1.0)*r02*sj3*x9800)));
evalcond[5]=(((cj2*sj1))+((r20*x9792))+((r22*x9802))+(((-1.0)*r20*x9794*x9799))+x9796+((r21*x9797))+((r21*x9790*x9793)));
evalcond[6]=(((r12*x9802))+((r11*x9797))+((r10*x9792))+(((-1.0)*r10*x9794*x9799))+(((-1.0)*x9798))+x9791+((r11*x9790*x9793)));
evalcond[7]=((((-1.0)*r22*sj3*x9800))+(((-1.0)*r21*x9792*x9799))+((r20*x9793))+(((-1.0)*x9798))+x9791+((r21*x9794))+((r20*x9803)));
evalcond[8]=(((r10*x9803))+(((-1.0)*sj1*x9795))+((r11*x9794))+((r10*x9793))+(((-1.0)*x9796))+(((-1.0)*r11*x9792*x9799))+(((-1.0)*r12*sj3*x9800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9804=gconst2*gconst2;
IkReal x9805=gconst1*gconst1;
IkReal x9806=(gconst1*r00);
IkReal x9807=(r11*sj3);
IkReal x9808=((1.0)*gconst2);
IkReal x9809=(cj3*r12);
IkReal x9810=(cj3*r11);
IkReal x9811=(gconst2*r01);
IkReal x9812=(cj3*r10);
IkReal x9813=(r10*sj3);
CheckValue<IkReal> x9814 = IKatan2WithCheck(IkReal((((x9809*x9811))+((x9806*x9809)))),IkReal((((gconst1*x9810*x9811))+(((-1.0)*r01*x9804*x9812))+(((-1.0)*x9806*x9808*x9812))+((r00*x9805*x9810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9814.valid){
continue;
}
CheckValue<IkReal> x9815=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r01*x9805*x9807))+(((-1.0)*gconst1*r01*x9808*x9813))+(((-1.0)*x9806*x9807*x9808))+((r00*x9804*x9813)))),-1);
if(!x9815.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9814.value)+(((1.5707963267949)*(x9815.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9816=IKsin(j4);
IkReal x9817=IKcos(j4);
IkReal x9818=(sj1*sj2);
IkReal x9819=(gconst1*sj3);
IkReal x9820=(cj3*gconst1);
IkReal x9821=(cj3*gconst2);
IkReal x9822=((1.0)*cj2);
IkReal x9823=(cj1*sj2);
IkReal x9824=(gconst2*sj3);
IkReal x9825=(cj1*x9822);
IkReal x9826=((1.0)*x9817);
IkReal x9827=((1.0)*x9816);
IkReal x9828=(gconst1*x9816);
IkReal x9829=(cj3*x9816);
IkReal x9830=(x9817*x9824);
evalcond[0]=((((-1.0)*gconst2*r20*x9827))+((r21*x9828))+(((-1.0)*r22*x9826)));
evalcond[1]=(((r11*x9828))+(((-1.0)*r12*x9826))+(((-1.0)*gconst2*r10*x9827)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9827))+(((-1.0)*r02*x9826))+((r01*x9828)));
evalcond[3]=(((r01*x9817*x9820))+(((-1.0)*r00*x9821*x9826))+((r01*x9824))+((r02*x9829))+((r00*x9819)));
evalcond[4]=(((r00*x9830))+((r00*x9820))+((r01*x9821))+(((-1.0)*r02*sj3*x9827))+(((-1.0)*r01*x9819*x9826)));
evalcond[5]=(((cj2*sj1))+((r22*x9829))+((r21*x9824))+(((-1.0)*r20*x9821*x9826))+((r21*x9817*x9820))+x9823+((r20*x9819)));
evalcond[6]=(((r11*x9824))+(((-1.0)*x9825))+((r12*x9829))+(((-1.0)*r10*x9821*x9826))+((r11*x9817*x9820))+x9818+((r10*x9819)));
evalcond[7]=(((r20*x9820))+(((-1.0)*x9825))+(((-1.0)*r22*sj3*x9827))+(((-1.0)*r21*x9819*x9826))+((r21*x9821))+((r20*x9830))+x9818);
evalcond[8]=((((-1.0)*r11*x9819*x9826))+((r10*x9830))+((r11*x9821))+(((-1.0)*r12*sj3*x9827))+(((-1.0)*x9823))+((r10*x9820))+(((-1.0)*sj1*x9822)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9831=((1.0)*gconst2);
CheckValue<IkReal> x9832 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x9831))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9832.valid){
continue;
}
CheckValue<IkReal> x9833=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x9831)))),-1);
if(!x9833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9832.value)+(((1.5707963267949)*(x9833.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9834=IKsin(j4);
IkReal x9835=IKcos(j4);
IkReal x9836=(sj1*sj2);
IkReal x9837=(gconst1*sj3);
IkReal x9838=(cj3*gconst1);
IkReal x9839=(cj3*gconst2);
IkReal x9840=((1.0)*cj2);
IkReal x9841=(cj1*sj2);
IkReal x9842=(gconst2*sj3);
IkReal x9843=(cj1*x9840);
IkReal x9844=((1.0)*x9835);
IkReal x9845=((1.0)*x9834);
IkReal x9846=(gconst1*x9834);
IkReal x9847=(cj3*x9834);
IkReal x9848=(x9835*x9842);
evalcond[0]=((((-1.0)*gconst2*r20*x9845))+(((-1.0)*r22*x9844))+((r21*x9846)));
evalcond[1]=(((r11*x9846))+(((-1.0)*r12*x9844))+(((-1.0)*gconst2*r10*x9845)));
evalcond[2]=((-1.0)+(((-1.0)*gconst2*r00*x9845))+(((-1.0)*r02*x9844))+((r01*x9846)));
evalcond[3]=(((r00*x9837))+((r02*x9847))+(((-1.0)*r00*x9839*x9844))+((r01*x9835*x9838))+((r01*x9842)));
evalcond[4]=(((r00*x9838))+((r01*x9839))+(((-1.0)*r02*sj3*x9845))+(((-1.0)*r01*x9837*x9844))+((r00*x9848)));
evalcond[5]=(((cj2*sj1))+((r21*x9835*x9838))+(((-1.0)*r20*x9839*x9844))+((r20*x9837))+x9841+((r22*x9847))+((r21*x9842)));
evalcond[6]=(((r11*x9842))+((r10*x9837))+(((-1.0)*r10*x9839*x9844))+((r11*x9835*x9838))+(((-1.0)*x9843))+((r12*x9847))+x9836);
evalcond[7]=((((-1.0)*r21*x9837*x9844))+((r21*x9839))+((r20*x9848))+(((-1.0)*r22*sj3*x9845))+(((-1.0)*x9843))+((r20*x9838))+x9836);
evalcond[8]=((((-1.0)*r12*sj3*x9845))+((r11*x9839))+((r10*x9848))+((r10*x9838))+(((-1.0)*x9841))+(((-1.0)*r11*x9837*x9844))+(((-1.0)*sj1*x9840)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9849=((-1.0)*r20);
IkReal x9850=x8935;
CheckValue<IkReal> x9852 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9849),IKFAST_ATAN2_MAGTHRESH);
if(!x9852.valid){
continue;
}
IkReal x9851=((-1.0)*(x9852.value));
sj5=gconst1;
cj5=gconst2;
j5=x9851;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9851;
IkReal gconst1=(r21*x9850);
IkReal gconst2=(x9849*x9850);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9853=((-1.0)*r20);
IkReal x9854=x8935;
CheckValue<IkReal> x9856 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9853),IKFAST_ATAN2_MAGTHRESH);
if(!x9856.valid){
continue;
}
IkReal x9855=((-1.0)*(x9856.value));
sj5=gconst1;
cj5=gconst2;
j5=x9855;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst0=x9855;
IkReal gconst1=(r21*x9854);
IkReal gconst2=(x9853*x9854);
CheckValue<IkReal> x9864=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x9864.valid){
continue;
}
IkReal x9857=x9864.value;
IkReal x9858=(sj3*x9857);
IkReal x9859=(r11*x9858);
IkReal x9860=(r00*x9858);
IkReal x9861=(r01*x9858);
IkReal x9862=(r10*x9858);
IkReal x9863=(r20*r21*x9858);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x9859))+((r10*r20*r21*x9861))+((r10*x9860*(r20*r20)))+((r01*x9859*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9865=gconst1*gconst1;
IkReal x9866=gconst2*gconst2;
IkReal x9867=((1.0)*cj3);
IkReal x9868=(gconst2*r10);
IkReal x9869=(r01*sj3);
IkReal x9870=(gconst1*r00*sj3);
IkReal x9871=(gconst1*gconst2*r11);
IkReal x9872=(r10*x9866);
IkReal x9873=(r11*x9865);
CheckValue<IkReal> x9874=IKPowWithIntegerCheck(IKsign((((cj3*gconst1*r01*x9868))+(((-1.0)*r00*x9867*x9872))+(((-1.0)*r02*r12*x9867))+((cj3*r00*x9871))+(((-1.0)*r01*x9867*x9873)))),-1);
if(!x9874.valid){
continue;
}
CheckValue<IkReal> x9875 = IKatan2WithCheck(IkReal((((r12*x9870))+((gconst2*r12*x9869)))),IkReal((((x9869*x9871))+(((-1.0)*x9869*x9872))+((r00*sj3*x9873))+(((-1.0)*x9868*x9870)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9875.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9874.value)))+(x9875.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9876=IKsin(j4);
IkReal x9877=IKcos(j4);
IkReal x9878=(cj2*sj1);
IkReal x9879=(cj1*sj2);
IkReal x9880=(gconst1*sj3);
IkReal x9881=(cj3*gconst1);
IkReal x9882=(sj1*sj2);
IkReal x9883=(cj3*gconst2);
IkReal x9884=(cj1*cj2);
IkReal x9885=(gconst2*sj3);
IkReal x9886=((1.0)*x9877);
IkReal x9887=((1.0)*x9876);
IkReal x9888=(gconst1*x9876);
IkReal x9889=(cj3*x9876);
IkReal x9890=(x9878+x9879);
IkReal x9891=(x9877*x9885);
evalcond[0]=((((-1.0)*r22*x9886))+((r21*x9888))+(((-1.0)*gconst2*r20*x9887)));
evalcond[1]=(((r11*x9888))+(((-1.0)*gconst2*r10*x9887))+(((-1.0)*r12*x9886)));
evalcond[2]=((1.0)+(((-1.0)*gconst2*r00*x9887))+((r01*x9888))+(((-1.0)*r02*x9886)));
evalcond[3]=(((r01*x9877*x9881))+((r01*x9885))+((r00*x9880))+(((-1.0)*r00*x9883*x9886))+((r02*x9889)));
evalcond[4]=(((r01*x9883))+((r00*x9891))+((r00*x9881))+(((-1.0)*r02*sj3*x9887))+(((-1.0)*r01*x9880*x9886)));
evalcond[5]=(((r20*x9880))+(((-1.0)*r20*x9883*x9886))+((r21*x9885))+((r21*x9877*x9881))+((r22*x9889))+x9890);
evalcond[6]=(((r12*x9889))+(((-1.0)*r10*x9883*x9886))+((r11*x9885))+((r11*x9877*x9881))+((r10*x9880))+(((-1.0)*x9882))+x9884);
evalcond[7]=((((-1.0)*r11*x9880*x9886))+((r11*x9883))+(((-1.0)*r12*sj3*x9887))+((r10*x9881))+((r10*x9891))+x9890);
evalcond[8]=((((-1.0)*r21*x9880*x9886))+(((-1.0)*r22*sj3*x9887))+((r20*x9881))+((r21*x9883))+((r20*x9891))+(((-1.0)*x9884))+x9882);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x9892=gconst2*gconst2;
IkReal x9893=gconst1*gconst1;
IkReal x9894=(gconst1*r00);
IkReal x9895=(r11*sj3);
IkReal x9896=((1.0)*gconst2);
IkReal x9897=(cj3*r12);
IkReal x9898=(cj3*r11);
IkReal x9899=(gconst2*r01);
IkReal x9900=(cj3*r10);
IkReal x9901=(r10*sj3);
CheckValue<IkReal> x9902=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+((r00*x9892*x9901))+(((-1.0)*gconst1*r01*x9896*x9901))+((r01*x9893*x9895))+(((-1.0)*x9894*x9895*x9896)))),-1);
if(!x9902.valid){
continue;
}
CheckValue<IkReal> x9903 = IKatan2WithCheck(IkReal((((x9894*x9897))+((x9897*x9899)))),IkReal(((((-1.0)*r01*x9892*x9900))+((gconst1*x9898*x9899))+(((-1.0)*x9894*x9896*x9900))+((r00*x9893*x9898)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9903.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x9902.value)))+(x9903.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9904=IKsin(j4);
IkReal x9905=IKcos(j4);
IkReal x9906=(cj2*sj1);
IkReal x9907=(cj1*sj2);
IkReal x9908=(gconst1*sj3);
IkReal x9909=(cj3*gconst1);
IkReal x9910=(sj1*sj2);
IkReal x9911=(cj3*gconst2);
IkReal x9912=(cj1*cj2);
IkReal x9913=(gconst2*sj3);
IkReal x9914=((1.0)*x9905);
IkReal x9915=((1.0)*x9904);
IkReal x9916=(gconst1*x9904);
IkReal x9917=(cj3*x9904);
IkReal x9918=(x9906+x9907);
IkReal x9919=(x9905*x9913);
evalcond[0]=((((-1.0)*gconst2*r20*x9915))+(((-1.0)*r22*x9914))+((r21*x9916)));
evalcond[1]=((((-1.0)*gconst2*r10*x9915))+(((-1.0)*r12*x9914))+((r11*x9916)));
evalcond[2]=((1.0)+((r01*x9916))+(((-1.0)*r02*x9914))+(((-1.0)*gconst2*r00*x9915)));
evalcond[3]=(((r01*x9913))+((r01*x9905*x9909))+((r00*x9908))+(((-1.0)*r00*x9911*x9914))+((r02*x9917)));
evalcond[4]=(((r01*x9911))+((r00*x9909))+((r00*x9919))+(((-1.0)*r02*sj3*x9915))+(((-1.0)*r01*x9908*x9914)));
evalcond[5]=(((r20*x9908))+((r21*x9905*x9909))+(((-1.0)*r20*x9911*x9914))+((r22*x9917))+((r21*x9913))+x9918);
evalcond[6]=(((r12*x9917))+(((-1.0)*x9910))+(((-1.0)*r10*x9911*x9914))+((r11*x9913))+((r11*x9905*x9909))+x9912+((r10*x9908)));
evalcond[7]=(((r11*x9911))+(((-1.0)*r11*x9908*x9914))+x9918+((r10*x9909))+((r10*x9919))+(((-1.0)*r12*sj3*x9915)));
evalcond[8]=((((-1.0)*r22*sj3*x9915))+((r20*x9919))+((r20*x9909))+(((-1.0)*r21*x9908*x9914))+(((-1.0)*x9912))+((r21*x9911))+x9910);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x9920 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst2*r20))+((gconst1*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x9920.valid){
continue;
}
CheckValue<IkReal> x9921=IKPowWithIntegerCheck(IKsign((((gconst1*r10))+((gconst2*r11)))),-1);
if(!x9921.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x9920.value)+(((1.5707963267949)*(x9921.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x9922=IKsin(j4);
IkReal x9923=IKcos(j4);
IkReal x9924=(cj2*sj1);
IkReal x9925=(cj1*sj2);
IkReal x9926=(gconst1*sj3);
IkReal x9927=(cj3*gconst1);
IkReal x9928=(sj1*sj2);
IkReal x9929=(cj3*gconst2);
IkReal x9930=(cj1*cj2);
IkReal x9931=(gconst2*sj3);
IkReal x9932=((1.0)*x9923);
IkReal x9933=((1.0)*x9922);
IkReal x9934=(gconst1*x9922);
IkReal x9935=(cj3*x9922);
IkReal x9936=(x9924+x9925);
IkReal x9937=(x9923*x9931);
evalcond[0]=((((-1.0)*gconst2*r20*x9933))+(((-1.0)*r22*x9932))+((r21*x9934)));
evalcond[1]=(((r11*x9934))+(((-1.0)*r12*x9932))+(((-1.0)*gconst2*r10*x9933)));
evalcond[2]=((1.0)+((r01*x9934))+(((-1.0)*r02*x9932))+(((-1.0)*gconst2*r00*x9933)));
evalcond[3]=(((r01*x9931))+(((-1.0)*r00*x9929*x9932))+((r01*x9923*x9927))+((r02*x9935))+((r00*x9926)));
evalcond[4]=(((r00*x9937))+(((-1.0)*r01*x9926*x9932))+(((-1.0)*r02*sj3*x9933))+((r01*x9929))+((r00*x9927)));
evalcond[5]=(((r22*x9935))+((r20*x9926))+((r21*x9923*x9927))+((r21*x9931))+x9936+(((-1.0)*r20*x9929*x9932)));
evalcond[6]=(((r10*x9926))+((r12*x9935))+((r11*x9931))+(((-1.0)*x9928))+(((-1.0)*r10*x9929*x9932))+((r11*x9923*x9927))+x9930);
evalcond[7]=(((r10*x9927))+((r10*x9937))+((r11*x9929))+(((-1.0)*r12*sj3*x9933))+x9936+(((-1.0)*r11*x9926*x9932)));
evalcond[8]=((((-1.0)*r22*sj3*x9933))+(((-1.0)*r21*x9926*x9932))+((r20*x9927))+(((-1.0)*x9930))+((r21*x9929))+x9928+((r20*x9937)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x9938=((-1.0)*r20);
IkReal x9939=((-1.0)*px);
CheckValue<IkReal> x9941 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9938),IKFAST_ATAN2_MAGTHRESH);
if(!x9941.valid){
continue;
}
IkReal x9940=((-1.0)*(x9941.value));
sj5=gconst1;
cj5=gconst2;
j5=x9940;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9939);
rxp1_1=(px*r21);
rxp1_2=(r11*x9939);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9940;
IkReal gconst1=r21;
IkReal gconst2=x9938;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9942=((-1.0)*r20);
IkReal x9943=((-1.0)*px);
CheckValue<IkReal> x9945 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9942),IKFAST_ATAN2_MAGTHRESH);
if(!x9945.valid){
continue;
}
IkReal x9944=((-1.0)*(x9945.value));
sj5=gconst1;
cj5=gconst2;
j5=x9944;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9943);
rxp1_1=(px*r21);
rxp1_2=(r11*x9943);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9944;
IkReal gconst1=r21;
IkReal gconst2=x9942;
j4eval[0]=(((r11*r21))+((r10*r20)));
j4eval[1]=(((cj3*(r21*r21)))+cj3+(((-1.0)*cj3*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x9946=((-1.0)*r20);
IkReal x9947=((-1.0)*px);
CheckValue<IkReal> x9949 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9946),IKFAST_ATAN2_MAGTHRESH);
if(!x9949.valid){
continue;
}
IkReal x9948=((-1.0)*(x9949.value));
sj5=gconst1;
cj5=gconst2;
j5=x9948;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9947);
rxp1_1=(px*r21);
rxp1_2=(r11*x9947);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst0=x9948;
IkReal gconst1=r21;
IkReal gconst2=x9946;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9950=((-1.0)*r20);
IkReal x9951=((-1.0)*px);
CheckValue<IkReal> x9953 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9950),IKFAST_ATAN2_MAGTHRESH);
if(!x9953.valid){
continue;
}
IkReal x9952=((-1.0)*(x9953.value));
sj5=gconst1;
cj5=gconst2;
j5=x9952;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9951);
rxp1_1=(px*r21);
rxp1_2=(r11*x9951);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9952;
IkReal gconst1=r21;
IkReal gconst2=x9950;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9954=((-1.0)*r20);
IkReal x9955=((-1.0)*px);
CheckValue<IkReal> x9957 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9954),IKFAST_ATAN2_MAGTHRESH);
if(!x9957.valid){
continue;
}
IkReal x9956=((-1.0)*(x9957.value));
sj5=gconst1;
cj5=gconst2;
j5=x9956;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9955);
rxp1_1=(px*r21);
rxp1_2=(r11*x9955);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9956;
IkReal gconst1=r21;
IkReal gconst2=x9954;
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(r10*r10));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9958=((-1.0)*r20);
IkReal x9959=((-1.0)*px);
CheckValue<IkReal> x9961 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9958),IKFAST_ATAN2_MAGTHRESH);
if(!x9961.valid){
continue;
}
IkReal x9960=((-1.0)*(x9961.value));
sj5=gconst1;
cj5=gconst2;
j5=x9960;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9959);
rxp1_1=(px*r21);
rxp1_2=(r11*x9959);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst0=x9960;
IkReal gconst1=r21;
IkReal gconst2=x9958;
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9964=IKPowWithIntegerCheck(((((-1.0)*gconst1*r11))+((gconst2*r10))),-1);
if(!x9964.valid){
continue;
}
IkReal x9962=x9964.value;
IkReal x9963=(sj0*x9962);
cj4array[0]=(((cj2*sj1*x9963))+((cj1*sj2*x9963)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9965=IKsin(j4);
IkReal x9966=IKcos(j4);
IkReal x9967=(gconst1*x9965);
IkReal x9968=((1.0)*x9966);
IkReal x9969=((1.0)*gconst2*x9965);
evalcond[0]=((-1.0)*r02*x9965);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x9968)));
evalcond[2]=(((r21*x9967))+(((-1.0)*r20*x9969)));
evalcond[3]=((((-1.0)*r10*x9969))+((r11*x9967)));
evalcond[4]=(((gconst2*r20*x9966))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst1*r21*x9968)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9971=IKPowWithIntegerCheck((((gconst2*r20))+(((-1.0)*gconst1*r21))),-1);
if(!x9971.valid){
continue;
}
IkReal x9970=x9971.value;
cj4array[0]=((((-1.0)*sj1*sj2*x9970))+((cj1*cj2*x9970)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9972=IKsin(j4);
IkReal x9973=IKcos(j4);
IkReal x9974=(gconst2*r10);
IkReal x9975=((1.0)*sj0);
IkReal x9976=((1.0)*x9972);
IkReal x9977=(gconst1*x9972);
IkReal x9978=((1.0)*x9973);
evalcond[0]=((-1.0)*r02*x9972);
evalcond[1]=((((-1.0)*r02*x9978))+(((-1.0)*x9975)));
evalcond[2]=((((-1.0)*gconst2*r20*x9976))+((r21*x9977)));
evalcond[3]=(((r11*x9977))+(((-1.0)*x9974*x9976)));
evalcond[4]=(((x9973*x9974))+(((-1.0)*cj2*sj1*x9975))+(((-1.0)*cj1*sj2*x9975))+(((-1.0)*gconst1*r11*x9978)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x9979=IKPowWithIntegerCheck(r02,-1);
if(!x9979.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x9979.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x9980=IKsin(j4);
IkReal x9981=IKcos(j4);
IkReal x9982=(gconst2*r10);
IkReal x9983=((1.0)*sj0);
IkReal x9984=(gconst1*r11);
IkReal x9985=(gconst1*r21);
IkReal x9986=(gconst2*r20);
IkReal x9987=((1.0)*x9980);
IkReal x9988=((1.0)*x9981);
evalcond[0]=((-1.0)*r02*x9980);
evalcond[1]=((((-1.0)*x9986*x9987))+((x9980*x9985)));
evalcond[2]=((((-1.0)*x9982*x9987))+((x9980*x9984)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x9981*x9986))+(((-1.0)*x9985*x9988)));
evalcond[4]=((((-1.0)*x9984*x9988))+(((-1.0)*cj2*sj1*x9983))+(((-1.0)*cj1*sj2*x9983))+((x9981*x9982)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x9989=((-1.0)*r20);
IkReal x9990=((-1.0)*px);
CheckValue<IkReal> x9992 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9989),IKFAST_ATAN2_MAGTHRESH);
if(!x9992.valid){
continue;
}
IkReal x9991=((-1.0)*(x9992.value));
sj5=gconst1;
cj5=gconst2;
j5=x9991;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9990);
rxp1_1=(px*r21);
rxp1_2=(r11*x9990);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9991;
IkReal gconst1=r21;
IkReal gconst2=x9989;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9993=((-1.0)*r20);
IkReal x9994=((-1.0)*px);
CheckValue<IkReal> x9996 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9993),IKFAST_ATAN2_MAGTHRESH);
if(!x9996.valid){
continue;
}
IkReal x9995=((-1.0)*(x9996.value));
sj5=gconst1;
cj5=gconst2;
j5=x9995;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9994);
rxp1_1=(px*r21);
rxp1_2=(r11*x9994);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9995;
IkReal gconst1=r21;
IkReal gconst2=x9993;
j4eval[0]=((1.0)+(r21*r21)+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x9997=((-1.0)*r20);
IkReal x9998=((-1.0)*px);
CheckValue<IkReal> x10000 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(x9997),IKFAST_ATAN2_MAGTHRESH);
if(!x10000.valid){
continue;
}
IkReal x9999=((-1.0)*(x10000.value));
sj5=gconst1;
cj5=gconst2;
j5=x9999;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x9998);
rxp1_1=(px*r21);
rxp1_2=(r11*x9998);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst0=x9999;
IkReal gconst1=r21;
IkReal gconst2=x9997;
j4eval[0]=(((r11*r21))+((r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10003=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10003.valid){
continue;
}
IkReal x10001=x10003.value;
IkReal x10002=(sj0*x10001);
cj4array[0]=(((cj1*sj2*x10002))+((cj2*sj1*x10002)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10004=IKsin(j4);
IkReal x10005=IKcos(j4);
IkReal x10006=((1.0)*gconst2);
IkReal x10007=(gconst1*r21);
evalcond[0]=(r02*x10004);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x10005)));
evalcond[2]=((((-1.0)*r20*x10004*x10006))+((x10004*x10007)));
evalcond[3]=((((-1.0)*r10*x10004*x10006))+((gconst1*r11*x10004)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x10005*x10007))+(((-1.0)*r20*x10005*x10006)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10009=IKPowWithIntegerCheck(((((-1.0)*gconst2*r20))+((gconst1*r21))),-1);
if(!x10009.valid){
continue;
}
IkReal x10008=x10009.value;
cj4array[0]=((((-1.0)*sj1*sj2*x10008))+((cj1*cj2*x10008)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10010=IKsin(j4);
IkReal x10011=IKcos(j4);
IkReal x10012=((1.0)*sj0);
IkReal x10013=(gconst1*x10010);
IkReal x10014=((1.0)*x10011);
IkReal x10015=((1.0)*gconst2*x10010);
evalcond[0]=(r02*x10010);
evalcond[1]=((((-1.0)*r02*x10014))+(((-1.0)*x10012)));
evalcond[2]=(((r21*x10013))+(((-1.0)*r20*x10015)));
evalcond[3]=(((r11*x10013))+(((-1.0)*r10*x10015)));
evalcond[4]=((((-1.0)*gconst2*r10*x10014))+(((-1.0)*cj2*sj1*x10012))+(((-1.0)*cj1*sj2*x10012))+((gconst1*r11*x10011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x10016=IKPowWithIntegerCheck(r02,-1);
if(!x10016.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x10016.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x10017=IKsin(j4);
IkReal x10018=IKcos(j4);
IkReal x10019=(gconst1*r21);
IkReal x10020=((1.0)*sj0);
IkReal x10021=(gconst1*r11);
IkReal x10022=((1.0)*gconst2*r10);
IkReal x10023=((1.0)*gconst2*r20);
evalcond[0]=(r02*x10017);
evalcond[1]=((((-1.0)*x10017*x10023))+((x10017*x10019)));
evalcond[2]=((((-1.0)*x10017*x10022))+((x10017*x10021)));
evalcond[3]=(((x10018*x10019))+(((-1.0)*x10018*x10023))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
evalcond[4]=((((-1.0)*x10018*x10022))+((x10018*x10021))+(((-1.0)*cj2*sj1*x10020))+(((-1.0)*cj1*sj2*x10020)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10025=IKPowWithIntegerCheck(r02,-1);
if(!x10025.valid){
continue;
}
IkReal x10024=x10025.value;
CheckValue<IkReal> x10026=IKPowWithIntegerCheck(cj3,-1);
if(!x10026.valid){
continue;
}
if( IKabs((x10024*(x10026.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x10024)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x10024*(x10026.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x10024))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x10024*(x10026.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x10024));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10027=IKsin(j4);
IkReal x10028=IKcos(j4);
IkReal x10029=(gconst2*r10);
IkReal x10030=(gconst1*r11);
IkReal x10031=(sj1*sj2);
IkReal x10032=(gconst2*r20);
IkReal x10033=(cj2*sj1);
IkReal x10034=((1.0)*sj0);
IkReal x10035=(gconst1*r20);
IkReal x10036=(gconst2*r11);
IkReal x10037=(gconst1*r21);
IkReal x10038=((1.0)*cj0);
IkReal x10039=(gconst1*r10);
IkReal x10040=(cj1*sj2);
IkReal x10041=(gconst2*r21);
IkReal x10042=(sj3*x10028);
IkReal x10043=((1.0)*cj1*cj2);
IkReal x10044=(cj3*x10028);
IkReal x10045=(r02*x10027);
IkReal x10046=((1.0)*x10027);
evalcond[0]=((((-1.0)*r02*x10028))+(((-1.0)*x10034)));
evalcond[1]=(((x10027*x10037))+(((-1.0)*x10032*x10046)));
evalcond[2]=(cj0+((x10027*x10030))+(((-1.0)*x10029*x10046)));
evalcond[3]=(((cj0*x10031))+(((-1.0)*cj1*cj2*x10038))+((cj3*x10045)));
evalcond[4]=((((-1.0)*sj3*x10045))+(((-1.0)*x10038*x10040))+(((-1.0)*x10033*x10038)));
evalcond[5]=(((x10037*x10044))+((sj3*x10035))+((sj3*x10041))+x10040+x10033+(((-1.0)*x10032*x10044)));
evalcond[6]=((((-1.0)*x10037*x10042))+((x10032*x10042))+x10031+((cj3*x10035))+((cj3*x10041))+(((-1.0)*x10043)));
evalcond[7]=((((-1.0)*x10029*x10044))+((sj0*x10031))+((sj3*x10039))+((sj3*x10036))+(((-1.0)*cj1*cj2*x10034))+((x10030*x10044)));
evalcond[8]=((((-1.0)*x10030*x10042))+((x10029*x10042))+(((-1.0)*x10034*x10040))+((cj3*x10039))+((cj3*x10036))+(((-1.0)*x10033*x10034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10047=((1.0)*sj3);
IkReal x10048=((1.0)*gconst2);
CheckValue<IkReal> x10049=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*r10*x10048))),-1);
if(!x10049.valid){
continue;
}
CheckValue<IkReal> x10050=IKPowWithIntegerCheck((((cj3*gconst1*r21))+(((-1.0)*cj3*r20*x10048))),-1);
if(!x10050.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10049.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10050.value)*(((((-1.0)*gconst2*r21*x10047))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10047)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10049.value)))+IKsqr(((x10050.value)*(((((-1.0)*gconst2*r21*x10047))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10047))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10049.value)), ((x10050.value)*(((((-1.0)*gconst2*r21*x10047))+(((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst1*r20*x10047))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10051=IKsin(j4);
IkReal x10052=IKcos(j4);
IkReal x10053=(gconst2*r10);
IkReal x10054=(gconst1*r11);
IkReal x10055=(sj1*sj2);
IkReal x10056=(gconst2*r20);
IkReal x10057=(cj2*sj1);
IkReal x10058=((1.0)*sj0);
IkReal x10059=(gconst1*r20);
IkReal x10060=(gconst2*r11);
IkReal x10061=(gconst1*r21);
IkReal x10062=((1.0)*cj0);
IkReal x10063=(gconst1*r10);
IkReal x10064=(cj1*sj2);
IkReal x10065=(gconst2*r21);
IkReal x10066=(sj3*x10052);
IkReal x10067=((1.0)*cj1*cj2);
IkReal x10068=(cj3*x10052);
IkReal x10069=(r02*x10051);
IkReal x10070=((1.0)*x10051);
evalcond[0]=((((-1.0)*x10058))+(((-1.0)*r02*x10052)));
evalcond[1]=((((-1.0)*x10056*x10070))+((x10051*x10061)));
evalcond[2]=(cj0+(((-1.0)*x10053*x10070))+((x10051*x10054)));
evalcond[3]=((((-1.0)*cj1*cj2*x10062))+((cj0*x10055))+((cj3*x10069)));
evalcond[4]=((((-1.0)*x10057*x10062))+(((-1.0)*x10062*x10064))+(((-1.0)*sj3*x10069)));
evalcond[5]=(((sj3*x10065))+((sj3*x10059))+x10064+x10057+((x10061*x10068))+(((-1.0)*x10056*x10068)));
evalcond[6]=((((-1.0)*x10067))+(((-1.0)*x10061*x10066))+x10055+((cj3*x10065))+((x10056*x10066))+((cj3*x10059)));
evalcond[7]=(((sj3*x10060))+((sj3*x10063))+(((-1.0)*cj1*cj2*x10058))+((sj0*x10055))+((x10054*x10068))+(((-1.0)*x10053*x10068)));
evalcond[8]=((((-1.0)*x10054*x10066))+(((-1.0)*x10057*x10058))+((x10053*x10066))+((cj3*x10060))+((cj3*x10063))+(((-1.0)*x10058*x10064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10071=IKPowWithIntegerCheck((((gconst1*r11))+(((-1.0)*gconst2*r10))),-1);
if(!x10071.valid){
continue;
}
CheckValue<IkReal> x10072=IKPowWithIntegerCheck(r02,-1);
if(!x10072.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x10071.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x10072.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x10071.value)))+IKsqr(((-1.0)*sj0*(x10072.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x10071.value)), ((-1.0)*sj0*(x10072.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10073=IKsin(j4);
IkReal x10074=IKcos(j4);
IkReal x10075=(gconst2*r10);
IkReal x10076=(gconst1*r11);
IkReal x10077=(sj1*sj2);
IkReal x10078=(gconst2*r20);
IkReal x10079=(cj2*sj1);
IkReal x10080=((1.0)*sj0);
IkReal x10081=(gconst1*r20);
IkReal x10082=(gconst2*r11);
IkReal x10083=(gconst1*r21);
IkReal x10084=((1.0)*cj0);
IkReal x10085=(gconst1*r10);
IkReal x10086=(cj1*sj2);
IkReal x10087=(gconst2*r21);
IkReal x10088=(sj3*x10074);
IkReal x10089=((1.0)*cj1*cj2);
IkReal x10090=(cj3*x10074);
IkReal x10091=(r02*x10073);
IkReal x10092=((1.0)*x10073);
evalcond[0]=((((-1.0)*x10080))+(((-1.0)*r02*x10074)));
evalcond[1]=(((x10073*x10083))+(((-1.0)*x10078*x10092)));
evalcond[2]=(cj0+((x10073*x10076))+(((-1.0)*x10075*x10092)));
evalcond[3]=((((-1.0)*cj1*cj2*x10084))+((cj0*x10077))+((cj3*x10091)));
evalcond[4]=((((-1.0)*x10079*x10084))+(((-1.0)*x10084*x10086))+(((-1.0)*sj3*x10091)));
evalcond[5]=(((sj3*x10087))+((sj3*x10081))+((x10083*x10090))+x10086+x10079+(((-1.0)*x10078*x10090)));
evalcond[6]=(((cj3*x10087))+((cj3*x10081))+(((-1.0)*x10083*x10088))+((x10078*x10088))+(((-1.0)*x10089))+x10077);
evalcond[7]=(((x10076*x10090))+((sj3*x10085))+((sj3*x10082))+(((-1.0)*cj1*cj2*x10080))+(((-1.0)*x10075*x10090))+((sj0*x10077)));
evalcond[8]=(((cj3*x10085))+((cj3*x10082))+(((-1.0)*x10080*x10086))+(((-1.0)*x10079*x10080))+(((-1.0)*x10076*x10088))+((x10075*x10088)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10093=gconst1*gconst1;
IkReal x10094=r21*r21;
IkReal x10095=gconst2*gconst2;
IkReal x10096=r20*r20;
IkReal x10097=(gconst2*r20);
IkReal x10098=(cj1*cj2);
IkReal x10099=(sj1*sj2);
IkReal x10100=(gconst1*r21);
IkReal x10101=(cj3*gconst2);
IkReal x10102=(cj3*r20);
CheckValue<IkReal> x10103=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x10093*x10094))+(((-2.0)*sj3*x10097*x10100))+((sj3*x10095*x10096)))),-1);
if(!x10103.valid){
continue;
}
CheckValue<IkReal> x10104 = IKatan2WithCheck(IkReal((((gconst1*r22*x10102))+(((-1.0)*r22*x10098))+((r22*x10099))+((r21*r22*x10101)))),IkReal(((((-1.0)*x10098*x10100))+(((-1.0)*gconst1*x10096*x10101))+((x10099*x10100))+(((-1.0)*r21*x10095*x10102))+((r21*x10093*x10102))+(((-1.0)*x10097*x10099))+((gconst1*x10094*x10101))+((x10097*x10098)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10103.value)))+(x10104.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10105=IKsin(j4);
IkReal x10106=IKcos(j4);
IkReal x10107=(cj3*gconst1);
IkReal x10108=(gconst1*r01);
IkReal x10109=(gconst1*r11);
IkReal x10110=(sj1*sj2);
IkReal x10111=(cj3*gconst2);
IkReal x10112=(gconst1*sj3);
IkReal x10113=(gconst2*sj3);
IkReal x10114=((1.0)*sj0);
IkReal x10115=(cj1*sj2);
IkReal x10116=((1.0)*x10106);
IkReal x10117=((1.0)*x10105);
IkReal x10118=((1.0)*cj1*cj2);
IkReal x10119=(cj3*x10105);
IkReal x10120=((1.0)*cj2*sj1);
IkReal x10121=(x10106*x10113);
evalcond[0]=((((-1.0)*gconst2*r20*x10117))+(((-1.0)*r22*x10116))+((gconst1*r21*x10105)));
evalcond[1]=((((-1.0)*r12*x10116))+cj0+(((-1.0)*gconst2*r10*x10117))+((x10105*x10109)));
evalcond[2]=((((-1.0)*r02*x10116))+(((-1.0)*gconst2*r00*x10117))+((x10105*x10108))+(((-1.0)*x10114)));
evalcond[3]=(((r21*x10113))+((cj2*sj1))+((r20*x10112))+((r21*x10106*x10107))+x10115+(((-1.0)*r20*x10111*x10116))+((r22*x10119)));
evalcond[4]=(((r21*x10111))+((r20*x10121))+((r20*x10107))+x10110+(((-1.0)*r22*sj3*x10117))+(((-1.0)*x10118))+(((-1.0)*r21*x10112*x10116)));
evalcond[5]=(((r01*x10113))+((cj0*x10110))+((r00*x10112))+(((-1.0)*cj0*x10118))+(((-1.0)*r00*x10111*x10116))+((r01*x10106*x10107))+((r02*x10119)));
evalcond[6]=((((-1.0)*cj1*cj2*x10114))+((r11*x10106*x10107))+(((-1.0)*r10*x10111*x10116))+((r11*x10113))+((sj0*x10110))+((r12*x10119))+((r10*x10112)));
evalcond[7]=(((r01*x10111))+((r00*x10107))+(((-1.0)*sj3*x10108*x10116))+((r00*x10121))+(((-1.0)*r02*sj3*x10117))+(((-1.0)*cj0*x10120))+(((-1.0)*cj0*x10115)));
evalcond[8]=(((r10*x10121))+(((-1.0)*r12*sj3*x10117))+(((-1.0)*cj2*sj1*x10114))+((r11*x10111))+(((-1.0)*x10114*x10115))+((r10*x10107))+(((-1.0)*sj3*x10109*x10116)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10122=((1.0)*gconst2);
CheckValue<IkReal> x10123=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r10))+(((-1.0)*r11*x10122)))),-1);
if(!x10123.valid){
continue;
}
CheckValue<IkReal> x10124 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x10122))+((gconst1*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10124.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10123.value)))+(x10124.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10125=IKsin(j4);
IkReal x10126=IKcos(j4);
IkReal x10127=(cj3*gconst1);
IkReal x10128=(gconst1*r01);
IkReal x10129=(gconst1*r11);
IkReal x10130=(sj1*sj2);
IkReal x10131=(cj3*gconst2);
IkReal x10132=(gconst1*sj3);
IkReal x10133=(gconst2*sj3);
IkReal x10134=((1.0)*sj0);
IkReal x10135=(cj1*sj2);
IkReal x10136=((1.0)*x10126);
IkReal x10137=((1.0)*x10125);
IkReal x10138=((1.0)*cj1*cj2);
IkReal x10139=(cj3*x10125);
IkReal x10140=((1.0)*cj2*sj1);
IkReal x10141=(x10126*x10133);
evalcond[0]=(((gconst1*r21*x10125))+(((-1.0)*gconst2*r20*x10137))+(((-1.0)*r22*x10136)));
evalcond[1]=(cj0+((x10125*x10129))+(((-1.0)*gconst2*r10*x10137))+(((-1.0)*r12*x10136)));
evalcond[2]=((((-1.0)*r02*x10136))+(((-1.0)*gconst2*r00*x10137))+((x10125*x10128))+(((-1.0)*x10134)));
evalcond[3]=((((-1.0)*r20*x10131*x10136))+((cj2*sj1))+((r20*x10132))+((r21*x10133))+x10135+((r21*x10126*x10127))+((r22*x10139)));
evalcond[4]=(((r20*x10127))+((r21*x10131))+(((-1.0)*r22*sj3*x10137))+x10130+(((-1.0)*x10138))+(((-1.0)*r21*x10132*x10136))+((r20*x10141)));
evalcond[5]=(((r02*x10139))+((cj0*x10130))+((r01*x10133))+((r00*x10132))+(((-1.0)*cj0*x10138))+((r01*x10126*x10127))+(((-1.0)*r00*x10131*x10136)));
evalcond[6]=(((r11*x10133))+(((-1.0)*r10*x10131*x10136))+((r10*x10132))+((r11*x10126*x10127))+((sj0*x10130))+((r12*x10139))+(((-1.0)*cj1*cj2*x10134)));
evalcond[7]=((((-1.0)*cj0*x10135))+(((-1.0)*sj3*x10128*x10136))+((r00*x10127))+((r01*x10131))+((r00*x10141))+(((-1.0)*r02*sj3*x10137))+(((-1.0)*cj0*x10140)));
evalcond[8]=(((r11*x10131))+((r10*x10127))+((r10*x10141))+(((-1.0)*sj3*x10129*x10136))+(((-1.0)*cj2*sj1*x10134))+(((-1.0)*r12*sj3*x10137))+(((-1.0)*x10134*x10135)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10142=((1.0)*gconst2);
CheckValue<IkReal> x10143=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst1*r00))+(((-1.0)*r01*x10142)))),-1);
if(!x10143.valid){
continue;
}
CheckValue<IkReal> x10144 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst1*r21))+(((-1.0)*cj0*r20*x10142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10144.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10143.value)))+(x10144.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10145=IKsin(j4);
IkReal x10146=IKcos(j4);
IkReal x10147=(cj3*gconst1);
IkReal x10148=(gconst1*r01);
IkReal x10149=(gconst1*r11);
IkReal x10150=(sj1*sj2);
IkReal x10151=(cj3*gconst2);
IkReal x10152=(gconst1*sj3);
IkReal x10153=(gconst2*sj3);
IkReal x10154=((1.0)*sj0);
IkReal x10155=(cj1*sj2);
IkReal x10156=((1.0)*x10146);
IkReal x10157=((1.0)*x10145);
IkReal x10158=((1.0)*cj1*cj2);
IkReal x10159=(cj3*x10145);
IkReal x10160=((1.0)*cj2*sj1);
IkReal x10161=(x10146*x10153);
evalcond[0]=((((-1.0)*gconst2*r20*x10157))+(((-1.0)*r22*x10156))+((gconst1*r21*x10145)));
evalcond[1]=(cj0+((x10145*x10149))+(((-1.0)*r12*x10156))+(((-1.0)*gconst2*r10*x10157)));
evalcond[2]=((((-1.0)*gconst2*r00*x10157))+(((-1.0)*r02*x10156))+(((-1.0)*x10154))+((x10145*x10148)));
evalcond[3]=(((cj2*sj1))+((r21*x10153))+x10155+(((-1.0)*r20*x10151*x10156))+((r21*x10146*x10147))+((r22*x10159))+((r20*x10152)));
evalcond[4]=(((r21*x10151))+(((-1.0)*r21*x10152*x10156))+((r20*x10161))+x10150+(((-1.0)*r22*sj3*x10157))+(((-1.0)*x10158))+((r20*x10147)));
evalcond[5]=(((r02*x10159))+(((-1.0)*r00*x10151*x10156))+((r01*x10153))+((cj0*x10150))+((r00*x10152))+(((-1.0)*cj0*x10158))+((r01*x10146*x10147)));
evalcond[6]=(((r12*x10159))+(((-1.0)*cj1*cj2*x10154))+((r10*x10152))+((r11*x10146*x10147))+(((-1.0)*r10*x10151*x10156))+((sj0*x10150))+((r11*x10153)));
evalcond[7]=((((-1.0)*r02*sj3*x10157))+(((-1.0)*cj0*x10160))+((r00*x10161))+(((-1.0)*cj0*x10155))+(((-1.0)*sj3*x10148*x10156))+((r00*x10147))+((r01*x10151)));
evalcond[8]=(((r10*x10161))+(((-1.0)*x10154*x10155))+((r10*x10147))+(((-1.0)*sj3*x10149*x10156))+(((-1.0)*cj2*sj1*x10154))+(((-1.0)*r12*sj3*x10157))+((r11*x10151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x10162=((-1.0)*r21);
IkReal x10164 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x10164)==0){
continue;
}
IkReal x10163=pow(x10164,-0.5);
CheckValue<IkReal> x10165 = IKatan2WithCheck(IkReal(x10162),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10165.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x10165.value))));
IkReal gconst4=(x10162*x10163);
IkReal gconst5=((1.0)*r20*x10163);
CheckValue<IkReal> x10166 = IKatan2WithCheck(IkReal(((-1.0)*r21)),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10166.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x10166.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10167=((-1.0)*r21);
CheckValue<IkReal> x10170 = IKatan2WithCheck(IkReal(x10167),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10170.valid){
continue;
}
IkReal x10168=((1.0)*(x10170.value));
IkReal x10169=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10168)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10168)));
IkReal gconst4=(x10167*x10169);
IkReal gconst5=((1.0)*r20*x10169);
IkReal x10171=r22*r22;
IkReal x10172=((1.0)*x10171);
CheckValue<IkReal> x10176=IKPowWithIntegerCheck(((-1.0)+x10171),-1);
if(!x10176.valid){
continue;
}
IkReal x10173=x10176.value;
if((((1.0)+(((-1.0)*x10172)))) < -0.00001)
continue;
IkReal x10174=IKsqrt(((1.0)+(((-1.0)*x10172))));
IkReal x10175=(cj0*x10173*x10174);
j4eval[0]=((IKabs(((((-1.0)*x10172*x10175))+x10175)))+(IKabs((cj0*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10177=((-1.0)*r21);
CheckValue<IkReal> x10180 = IKatan2WithCheck(IkReal(x10177),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10180.valid){
continue;
}
IkReal x10178=((1.0)*(x10180.value));
IkReal x10179=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10178)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10178)));
IkReal gconst4=(x10177*x10179);
IkReal gconst5=((1.0)*r20*x10179);
IkReal x10181=r22*r22;
IkReal x10182=((1.0)*x10181);
CheckValue<IkReal> x10186=IKPowWithIntegerCheck(((-1.0)+x10181),-1);
if(!x10186.valid){
continue;
}
IkReal x10183=x10186.value;
if((((1.0)+(((-1.0)*x10182)))) < -0.00001)
continue;
IkReal x10184=IKsqrt(((1.0)+(((-1.0)*x10182))));
IkReal x10185=(sj0*x10183*x10184);
j4eval[0]=((IKabs((r22*sj0)))+(IKabs(((((-1.0)*x10182*x10185))+x10185))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10187=((-1.0)*r21);
CheckValue<IkReal> x10190 = IKatan2WithCheck(IkReal(x10187),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10190.valid){
continue;
}
IkReal x10188=((1.0)*(x10190.value));
IkReal x10189=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10188)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10188)));
IkReal gconst4=(x10187*x10189);
IkReal gconst5=((1.0)*r20*x10189);
IkReal x10191=r22*r22;
IkReal x10192=(r12*sj0);
IkReal x10193=(cj0*r02);
CheckValue<IkReal> x10197=IKPowWithIntegerCheck(((-1.0)+x10191),-1);
if(!x10197.valid){
continue;
}
IkReal x10194=x10197.value;
if((((1.0)+(((-1.0)*x10191)))) < -0.00001)
continue;
IkReal x10195=IKsqrt(((1.0)+(((-1.0)*x10191))));
IkReal x10196=(r22*x10194*x10195);
j4eval[0]=0;
j4eval[1]=((IKabs((((x10193*x10196))+((x10192*x10196)))))+(IKabs(((((-1.0)*x10192))+(((-1.0)*x10193))))));
j4eval[2]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10198=((-1.0)*r21);
CheckValue<IkReal> x10201 = IKatan2WithCheck(IkReal(x10198),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10201.valid){
continue;
}
IkReal x10199=((1.0)*(x10201.value));
IkReal x10200=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10199)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10199)));
IkReal gconst4=(x10198*x10200);
IkReal gconst5=((1.0)*r20*x10200);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10202=((-1.0)*r21);
CheckValue<IkReal> x10205 = IKatan2WithCheck(IkReal(x10202),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10205.valid){
continue;
}
IkReal x10203=((1.0)*(x10205.value));
IkReal x10204=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10203)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10203)));
IkReal gconst4=(x10202*x10204);
IkReal gconst5=((1.0)*r20*x10204);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10206=((-1.0)*r21);
CheckValue<IkReal> x10209 = IKatan2WithCheck(IkReal(x10206),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10209.valid){
continue;
}
IkReal x10207=((1.0)*(x10209.value));
IkReal x10208=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10207)));
sj0=0;
cj0=1.0;
j0=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10207)));
IkReal gconst4=(x10206*x10208);
IkReal gconst5=((1.0)*r20*x10208);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10210=((-1.0)*r21);
CheckValue<IkReal> x10213 = IKatan2WithCheck(IkReal(x10210),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10213.valid){
continue;
}
IkReal x10211=((1.0)*(x10213.value));
IkReal x10212=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10211)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10211)));
IkReal gconst4=(x10210*x10212);
IkReal gconst5=((1.0)*r20*x10212);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10214=((-1.0)*r21);
CheckValue<IkReal> x10217 = IKatan2WithCheck(IkReal(x10214),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10217.valid){
continue;
}
IkReal x10215=((1.0)*(x10217.value));
IkReal x10216=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10215)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10215)));
IkReal gconst4=(x10214*x10216);
IkReal gconst5=((1.0)*r20*x10216);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10218=((-1.0)*r21);
CheckValue<IkReal> x10221 = IKatan2WithCheck(IkReal(x10218),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10221.valid){
continue;
}
IkReal x10219=((1.0)*(x10221.value));
IkReal x10220=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10219)));
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10219)));
IkReal gconst4=(x10218*x10220);
IkReal gconst5=((1.0)*r20*x10220);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10222=(gconst5*r10);
IkReal x10223=(gconst4*r11);
CheckValue<IkReal> x10224=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10222*x10223))+(x10223*x10223)+(x10222*x10222))),-1);
if(!x10224.valid){
continue;
}
CheckValue<IkReal> x10225 = IKatan2WithCheck(IkReal((x10222+(((-1.0)*x10223)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10225.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10224.value)))+(x10225.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10226=IKsin(j4);
IkReal x10227=IKcos(j4);
IkReal x10228=(gconst4*r11);
IkReal x10229=((1.0)*cj1);
IkReal x10230=(gconst5*r10);
IkReal x10231=(gconst4*r01);
IkReal x10232=(gconst5*r00);
IkReal x10233=(gconst4*r21);
IkReal x10234=(gconst5*r20);
IkReal x10235=((1.0)*x10227);
IkReal x10236=((1.0)*x10226);
evalcond[0]=((((-1.0)*x10234*x10236))+((x10226*x10233))+(((-1.0)*r22*x10235)));
evalcond[1]=((((-1.0)*x10232*x10236))+((x10226*x10231))+(((-1.0)*r02*x10235)));
evalcond[2]=(((x10227*x10230))+(((-1.0)*r12*x10236))+(((-1.0)*x10228*x10235)));
evalcond[3]=((1.0)+(((-1.0)*x10230*x10236))+(((-1.0)*r12*x10235))+((x10226*x10228)));
evalcond[4]=((((-1.0)*x10233*x10235))+(((-1.0)*cj2*x10229))+((sj1*sj2))+(((-1.0)*r22*x10236))+((x10227*x10234)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10229))+((x10227*x10232))+(((-1.0)*x10231*x10235))+(((-1.0)*r02*x10236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10237=((1.0)*gconst5);
CheckValue<IkReal> x10238 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10237)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10238.valid){
continue;
}
CheckValue<IkReal> x10239=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10237)))),-1);
if(!x10239.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10238.value)+(((1.5707963267949)*(x10239.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10240=IKsin(j4);
IkReal x10241=IKcos(j4);
IkReal x10242=(gconst4*r11);
IkReal x10243=((1.0)*cj1);
IkReal x10244=(gconst5*r10);
IkReal x10245=(gconst4*r01);
IkReal x10246=(gconst5*r00);
IkReal x10247=(gconst4*r21);
IkReal x10248=(gconst5*r20);
IkReal x10249=((1.0)*x10241);
IkReal x10250=((1.0)*x10240);
evalcond[0]=((((-1.0)*x10248*x10250))+((x10240*x10247))+(((-1.0)*r22*x10249)));
evalcond[1]=(((x10240*x10245))+(((-1.0)*x10246*x10250))+(((-1.0)*r02*x10249)));
evalcond[2]=(((x10241*x10244))+(((-1.0)*r12*x10250))+(((-1.0)*x10242*x10249)));
evalcond[3]=((1.0)+((x10240*x10242))+(((-1.0)*r12*x10249))+(((-1.0)*x10244*x10250)));
evalcond[4]=((((-1.0)*x10247*x10249))+((x10241*x10248))+(((-1.0)*cj2*x10243))+((sj1*sj2))+(((-1.0)*r22*x10250)));
evalcond[5]=((((-1.0)*r02*x10250))+((x10241*x10246))+(((-1.0)*cj2*sj1))+(((-1.0)*x10245*x10249))+(((-1.0)*sj2*x10243)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10251 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10251.valid){
continue;
}
CheckValue<IkReal> x10252=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10252.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10251.value)+(((1.5707963267949)*(x10252.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10253=IKsin(j4);
IkReal x10254=IKcos(j4);
IkReal x10255=(gconst4*r11);
IkReal x10256=((1.0)*cj1);
IkReal x10257=(gconst5*r10);
IkReal x10258=(gconst4*r01);
IkReal x10259=(gconst5*r00);
IkReal x10260=(gconst4*r21);
IkReal x10261=(gconst5*r20);
IkReal x10262=((1.0)*x10254);
IkReal x10263=((1.0)*x10253);
evalcond[0]=((((-1.0)*r22*x10262))+(((-1.0)*x10261*x10263))+((x10253*x10260)));
evalcond[1]=((((-1.0)*r02*x10262))+(((-1.0)*x10259*x10263))+((x10253*x10258)));
evalcond[2]=((((-1.0)*x10255*x10262))+((x10254*x10257))+(((-1.0)*r12*x10263)));
evalcond[3]=((1.0)+(((-1.0)*x10257*x10263))+(((-1.0)*r12*x10262))+((x10253*x10255)));
evalcond[4]=((((-1.0)*x10260*x10262))+(((-1.0)*r22*x10263))+(((-1.0)*cj2*x10256))+((sj1*sj2))+((x10254*x10261)));
evalcond[5]=(((x10254*x10259))+(((-1.0)*cj2*sj1))+(((-1.0)*r02*x10263))+(((-1.0)*sj2*x10256))+(((-1.0)*x10258*x10262)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10264=((-1.0)*r21);
CheckValue<IkReal> x10267 = IKatan2WithCheck(IkReal(x10264),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10267.valid){
continue;
}
IkReal x10265=((1.0)*(x10267.value));
IkReal x10266=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10265)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10265)));
IkReal gconst4=(x10264*x10266);
IkReal gconst5=((1.0)*r20*x10266);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10268=((-1.0)*r21);
CheckValue<IkReal> x10271 = IKatan2WithCheck(IkReal(x10268),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10271.valid){
continue;
}
IkReal x10269=((1.0)*(x10271.value));
IkReal x10270=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10269)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10269)));
IkReal gconst4=(x10268*x10270);
IkReal gconst5=((1.0)*r20*x10270);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10272=((-1.0)*r21);
CheckValue<IkReal> x10275 = IKatan2WithCheck(IkReal(x10272),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10275.valid){
continue;
}
IkReal x10273=((1.0)*(x10275.value));
IkReal x10274=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10273)));
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10273)));
IkReal gconst4=(x10272*x10274);
IkReal gconst5=((1.0)*r20*x10274);
IkReal x10276=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10280=IKPowWithIntegerCheck(x10276,-1);
if(!x10280.valid){
continue;
}
IkReal x10277=x10280.value;
IkReal x10278=((1.0)*x10277);
IkReal x10279=((((-2.0)*r10*r11*r20*r21*x10277))+(((-1.0)*x10278*(r11*r11)*(r21*r21)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10278*(r10*r10)*(r20*r20))));
j4eval[0]=x10279;
j4eval[1]=r12;
j4eval[2]=x10276;
j4eval[3]=IKsign(x10279);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10281=(gconst5*r10);
IkReal x10282=(gconst4*r11);
CheckValue<IkReal> x10283 = IKatan2WithCheck(IkReal((x10282+(((-1.0)*x10281)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10283.valid){
continue;
}
CheckValue<IkReal> x10284=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r12*r12)))+(((-1.0)*(x10282*x10282)))+(((2.0)*x10281*x10282))+(((-1.0)*(x10281*x10281))))),-1);
if(!x10284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10283.value)+(((1.5707963267949)*(x10284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10285=IKcos(j4);
IkReal x10286=IKsin(j4);
IkReal x10287=(gconst4*r11);
IkReal x10288=(gconst5*r10);
IkReal x10289=((1.0)*cj1);
IkReal x10290=(gconst5*r00);
IkReal x10291=(gconst5*r20);
IkReal x10292=((1.0)*x10285);
IkReal x10293=(gconst4*x10285);
IkReal x10294=((1.0)*x10286);
IkReal x10295=(gconst4*x10286);
evalcond[0]=(((r12*x10286))+(((-1.0)*x10288*x10292))+((x10285*x10287)));
evalcond[1]=((((-1.0)*x10291*x10294))+((r21*x10295))+(((-1.0)*r22*x10292)));
evalcond[2]=((((-1.0)*r02*x10292))+(((-1.0)*x10290*x10294))+((r01*x10295)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10292))+(((-1.0)*x10288*x10294))+((x10286*x10287)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*x10291*x10292))+((r22*x10286))+((r21*x10293))+(((-1.0)*cj2*x10289)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10290*x10292))+((r02*x10286))+((r01*x10293))+(((-1.0)*sj2*x10289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10296=((1.0)*gconst5);
CheckValue<IkReal> x10297=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10296)))),-1);
if(!x10297.valid){
continue;
}
CheckValue<IkReal> x10298 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10296)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10297.value)))+(x10298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10299=IKcos(j4);
IkReal x10300=IKsin(j4);
IkReal x10301=(gconst4*r11);
IkReal x10302=(gconst5*r10);
IkReal x10303=((1.0)*cj1);
IkReal x10304=(gconst5*r00);
IkReal x10305=(gconst5*r20);
IkReal x10306=((1.0)*x10299);
IkReal x10307=(gconst4*x10299);
IkReal x10308=((1.0)*x10300);
IkReal x10309=(gconst4*x10300);
evalcond[0]=(((x10299*x10301))+(((-1.0)*x10302*x10306))+((r12*x10300)));
evalcond[1]=((((-1.0)*x10305*x10308))+(((-1.0)*r22*x10306))+((r21*x10309)));
evalcond[2]=((((-1.0)*r02*x10306))+(((-1.0)*x10304*x10308))+((r01*x10309)));
evalcond[3]=((1.0)+(((-1.0)*r12*x10306))+((x10300*x10301))+(((-1.0)*x10302*x10308)));
evalcond[4]=((((-1.0)*x10305*x10306))+(((-1.0)*cj2*x10303))+((sj1*sj2))+((r21*x10307))+((r22*x10300)));
evalcond[5]=(((r02*x10300))+(((-1.0)*sj2*x10303))+(((-1.0)*cj2*sj1))+(((-1.0)*x10304*x10306))+((r01*x10307)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10310 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10310.valid){
continue;
}
CheckValue<IkReal> x10311=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10311.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10310.value)+(((1.5707963267949)*(x10311.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10312=IKcos(j4);
IkReal x10313=IKsin(j4);
IkReal x10314=(gconst4*r11);
IkReal x10315=(gconst5*r10);
IkReal x10316=((1.0)*cj1);
IkReal x10317=(gconst5*r00);
IkReal x10318=(gconst5*r20);
IkReal x10319=((1.0)*x10312);
IkReal x10320=(gconst4*x10312);
IkReal x10321=((1.0)*x10313);
IkReal x10322=(gconst4*x10313);
evalcond[0]=(((r12*x10313))+((x10312*x10314))+(((-1.0)*x10315*x10319)));
evalcond[1]=((((-1.0)*x10318*x10321))+((r21*x10322))+(((-1.0)*r22*x10319)));
evalcond[2]=(((r01*x10322))+(((-1.0)*r02*x10319))+(((-1.0)*x10317*x10321)));
evalcond[3]=((1.0)+(((-1.0)*x10315*x10321))+(((-1.0)*r12*x10319))+((x10313*x10314)));
evalcond[4]=(((r22*x10313))+((sj1*sj2))+((r21*x10320))+(((-1.0)*cj2*x10316))+(((-1.0)*x10318*x10319)));
evalcond[5]=((((-1.0)*cj2*sj1))+((r01*x10320))+((r02*x10313))+(((-1.0)*x10317*x10319))+(((-1.0)*sj2*x10316)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10323=((-1.0)*r21);
CheckValue<IkReal> x10326 = IKatan2WithCheck(IkReal(x10323),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10326.valid){
continue;
}
IkReal x10324=((1.0)*(x10326.value));
IkReal x10325=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10324)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10324)));
IkReal gconst4=(x10323*x10325);
IkReal gconst5=((1.0)*r20*x10325);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10327=((-1.0)*r21);
CheckValue<IkReal> x10330 = IKatan2WithCheck(IkReal(x10327),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10330.valid){
continue;
}
IkReal x10328=((1.0)*(x10330.value));
IkReal x10329=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10328)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10328)));
IkReal gconst4=(x10327*x10329);
IkReal gconst5=((1.0)*r20*x10329);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10331=((-1.0)*r21);
CheckValue<IkReal> x10334 = IKatan2WithCheck(IkReal(x10331),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10334.valid){
continue;
}
IkReal x10332=((1.0)*(x10334.value));
IkReal x10333=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10332)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10332)));
IkReal gconst4=(x10331*x10333);
IkReal gconst5=((1.0)*r20*x10333);
IkReal x10335=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10339=IKPowWithIntegerCheck(x10335,-1);
if(!x10339.valid){
continue;
}
IkReal x10336=x10339.value;
IkReal x10337=((1.0)*x10336);
IkReal x10338=((((-1.0)*x10337*(r11*r11)*(r21*r21)))+(((-1.0)*x10337*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-2.0)*r10*r11*r20*r21*x10336)));
j4eval[0]=x10338;
j4eval[1]=r12;
j4eval[2]=x10335;
j4eval[3]=IKsign(x10338);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10340=(gconst5*r10);
IkReal x10341=(gconst4*r11);
CheckValue<IkReal> x10342=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10341*x10341)))+(((2.0)*x10340*x10341))+(((-1.0)*(x10340*x10340)))+(((-1.0)*(r12*r12))))),-1);
if(!x10342.valid){
continue;
}
CheckValue<IkReal> x10343 = IKatan2WithCheck(IkReal((x10341+(((-1.0)*x10340)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10343.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10342.value)))+(x10343.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10344=IKcos(j4);
IkReal x10345=IKsin(j4);
IkReal x10346=(gconst4*r11);
IkReal x10347=(gconst5*r10);
IkReal x10348=(gconst5*r00);
IkReal x10349=(gconst5*r20);
IkReal x10350=((1.0)*x10344);
IkReal x10351=(gconst4*x10344);
IkReal x10352=((1.0)*x10345);
IkReal x10353=(gconst4*x10345);
evalcond[0]=(((x10344*x10346))+((r12*x10345))+(((-1.0)*x10347*x10350)));
evalcond[1]=(((r21*x10353))+(((-1.0)*r22*x10350))+(((-1.0)*x10349*x10352)));
evalcond[2]=(((r01*x10353))+(((-1.0)*x10348*x10352))+(((-1.0)*r02*x10350)));
evalcond[3]=((1.0)+((x10345*x10346))+(((-1.0)*r12*x10350))+(((-1.0)*x10347*x10352)));
evalcond[4]=(((r21*x10351))+((cj2*sj1))+((cj1*sj2))+((r22*x10345))+(((-1.0)*x10349*x10350)));
evalcond[5]=(((r01*x10351))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10348*x10350))+((r02*x10345)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10354=((1.0)*gconst5);
CheckValue<IkReal> x10355=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10354)))),-1);
if(!x10355.valid){
continue;
}
CheckValue<IkReal> x10356 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10354)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10355.value)))+(x10356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10357=IKcos(j4);
IkReal x10358=IKsin(j4);
IkReal x10359=(gconst4*r11);
IkReal x10360=(gconst5*r10);
IkReal x10361=(gconst5*r00);
IkReal x10362=(gconst5*r20);
IkReal x10363=((1.0)*x10357);
IkReal x10364=(gconst4*x10357);
IkReal x10365=((1.0)*x10358);
IkReal x10366=(gconst4*x10358);
evalcond[0]=((((-1.0)*x10360*x10363))+((x10357*x10359))+((r12*x10358)));
evalcond[1]=(((r21*x10366))+(((-1.0)*x10362*x10365))+(((-1.0)*r22*x10363)));
evalcond[2]=(((r01*x10366))+(((-1.0)*x10361*x10365))+(((-1.0)*r02*x10363)));
evalcond[3]=((1.0)+(((-1.0)*x10360*x10365))+((x10358*x10359))+(((-1.0)*r12*x10363)));
evalcond[4]=(((cj2*sj1))+((r21*x10364))+((cj1*sj2))+((r22*x10358))+(((-1.0)*x10362*x10363)));
evalcond[5]=(((r01*x10364))+(((-1.0)*x10361*x10363))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10358)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10367 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10367.valid){
continue;
}
CheckValue<IkReal> x10368=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10368.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10367.value)+(((1.5707963267949)*(x10368.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10369=IKcos(j4);
IkReal x10370=IKsin(j4);
IkReal x10371=(gconst4*r11);
IkReal x10372=(gconst5*r10);
IkReal x10373=(gconst5*r00);
IkReal x10374=(gconst5*r20);
IkReal x10375=((1.0)*x10369);
IkReal x10376=(gconst4*x10369);
IkReal x10377=((1.0)*x10370);
IkReal x10378=(gconst4*x10370);
evalcond[0]=((((-1.0)*x10372*x10375))+((x10369*x10371))+((r12*x10370)));
evalcond[1]=((((-1.0)*x10374*x10377))+(((-1.0)*r22*x10375))+((r21*x10378)));
evalcond[2]=(((r01*x10378))+(((-1.0)*r02*x10375))+(((-1.0)*x10373*x10377)));
evalcond[3]=((1.0)+(((-1.0)*x10372*x10377))+((x10370*x10371))+(((-1.0)*r12*x10375)));
evalcond[4]=(((cj2*sj1))+((r22*x10370))+(((-1.0)*x10374*x10375))+((cj1*sj2))+((r21*x10376)));
evalcond[5]=(((r01*x10376))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x10370))+(((-1.0)*x10373*x10375)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10379=((-1.0)*r21);
CheckValue<IkReal> x10382 = IKatan2WithCheck(IkReal(x10379),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10382.valid){
continue;
}
IkReal x10380=((1.0)*(x10382.value));
IkReal x10381=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10380)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10380)));
IkReal gconst4=(x10379*x10381);
IkReal gconst5=((1.0)*r20*x10381);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r02;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10383=((-1.0)*r21);
CheckValue<IkReal> x10386 = IKatan2WithCheck(IkReal(x10383),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10386.valid){
continue;
}
IkReal x10384=((1.0)*(x10386.value));
IkReal x10385=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10384)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10384)));
IkReal gconst4=(x10383*x10385);
IkReal gconst5=((1.0)*r20*x10385);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10387=((-1.0)*r21);
CheckValue<IkReal> x10390 = IKatan2WithCheck(IkReal(x10387),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10390.valid){
continue;
}
IkReal x10388=((1.0)*(x10390.value));
IkReal x10389=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10388)));
sj0=0;
cj0=1.0;
j0=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10388)));
IkReal gconst4=(x10387*x10389);
IkReal gconst5=((1.0)*r20*x10389);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10391=(gconst5*r10);
IkReal x10392=(gconst4*r11);
CheckValue<IkReal> x10393 = IKatan2WithCheck(IkReal((x10391+(((-1.0)*x10392)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10393.valid){
continue;
}
CheckValue<IkReal> x10394=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10391*x10391)+(x10392*x10392)+(((-2.0)*x10391*x10392)))),-1);
if(!x10394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10393.value)+(((1.5707963267949)*(x10394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10395=IKsin(j4);
IkReal x10396=IKcos(j4);
IkReal x10397=(gconst4*r11);
IkReal x10398=(gconst5*r10);
IkReal x10399=(gconst4*r01);
IkReal x10400=(gconst5*r00);
IkReal x10401=(gconst4*r21);
IkReal x10402=(gconst5*r20);
IkReal x10403=((1.0)*x10396);
IkReal x10404=((1.0)*x10395);
evalcond[0]=((((-1.0)*x10402*x10404))+(((-1.0)*r22*x10403))+((x10395*x10401)));
evalcond[1]=(((x10395*x10399))+(((-1.0)*x10400*x10404))+(((-1.0)*r02*x10403)));
evalcond[2]=((((-1.0)*x10397*x10403))+(((-1.0)*r12*x10404))+((x10396*x10398)));
evalcond[3]=((1.0)+((x10395*x10397))+(((-1.0)*x10398*x10404))+(((-1.0)*r12*x10403)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x10396*x10402))+(((-1.0)*x10401*x10403))+(((-1.0)*r22*x10404)));
evalcond[5]=(((x10396*x10400))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10399*x10403))+(((-1.0)*r02*x10404)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10405=((1.0)*gconst5);
CheckValue<IkReal> x10406=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10405)))),-1);
if(!x10406.valid){
continue;
}
CheckValue<IkReal> x10407 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10405))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10407.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10406.value)))+(x10407.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10408=IKsin(j4);
IkReal x10409=IKcos(j4);
IkReal x10410=(gconst4*r11);
IkReal x10411=(gconst5*r10);
IkReal x10412=(gconst4*r01);
IkReal x10413=(gconst5*r00);
IkReal x10414=(gconst4*r21);
IkReal x10415=(gconst5*r20);
IkReal x10416=((1.0)*x10409);
IkReal x10417=((1.0)*x10408);
evalcond[0]=(((x10408*x10414))+(((-1.0)*r22*x10416))+(((-1.0)*x10415*x10417)));
evalcond[1]=((((-1.0)*r02*x10416))+(((-1.0)*x10413*x10417))+((x10408*x10412)));
evalcond[2]=((((-1.0)*r12*x10417))+((x10409*x10411))+(((-1.0)*x10410*x10416)));
evalcond[3]=((1.0)+((x10408*x10410))+(((-1.0)*r12*x10416))+(((-1.0)*x10411*x10417)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10414*x10416))+((cj1*sj2))+(((-1.0)*r22*x10417))+((x10409*x10415)));
evalcond[5]=((((-1.0)*r02*x10417))+(((-1.0)*x10412*x10416))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10409*x10413)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10418 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10418.valid){
continue;
}
CheckValue<IkReal> x10419=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10419.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10418.value)+(((1.5707963267949)*(x10419.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10420=IKsin(j4);
IkReal x10421=IKcos(j4);
IkReal x10422=(gconst4*r11);
IkReal x10423=(gconst5*r10);
IkReal x10424=(gconst4*r01);
IkReal x10425=(gconst5*r00);
IkReal x10426=(gconst4*r21);
IkReal x10427=(gconst5*r20);
IkReal x10428=((1.0)*x10421);
IkReal x10429=((1.0)*x10420);
evalcond[0]=(((x10420*x10426))+(((-1.0)*x10427*x10429))+(((-1.0)*r22*x10428)));
evalcond[1]=(((x10420*x10424))+(((-1.0)*r02*x10428))+(((-1.0)*x10425*x10429)));
evalcond[2]=((((-1.0)*x10422*x10428))+((x10421*x10423))+(((-1.0)*r12*x10429)));
evalcond[3]=((1.0)+((x10420*x10422))+(((-1.0)*x10423*x10429))+(((-1.0)*r12*x10428)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10426*x10428))+((x10421*x10427))+((cj1*sj2))+(((-1.0)*r22*x10429)));
evalcond[5]=(((x10421*x10425))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r02*x10429))+(((-1.0)*x10424*x10428)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst5*r10))+(((2.0)*gconst4*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10430=gconst4*gconst4;
IkReal x10431=gconst5*gconst5;
IkReal x10432=(r10*r21);
IkReal x10433=((1.0)*cj3);
IkReal x10434=(r11*r21);
IkReal x10435=(r11*r20);
IkReal x10436=(r22*sj3);
IkReal x10437=(gconst4*r10);
IkReal x10438=((1.0)*sj3);
IkReal x10439=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10440 = IKatan2WithCheck(IkReal((((x10436*x10437))+((gconst5*r11*x10436)))),IkReal(((((-1.0)*gconst5*r20*x10437*x10438))+((gconst4*gconst5*sj3*x10434))+((sj3*x10430*x10432))+(((-1.0)*x10431*x10435*x10438)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10440.valid){
continue;
}
CheckValue<IkReal> x10441=IKPowWithIntegerCheck(IKsign(((((-1.0)*x10430*x10433*x10434))+((x10432*x10439))+(((-1.0)*r12*r22*x10433))+((x10435*x10439))+(((-1.0)*r10*r20*x10431*x10433)))),-1);
if(!x10441.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10440.value)+(((1.5707963267949)*(x10441.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10442=IKsin(j4);
IkReal x10443=IKcos(j4);
IkReal x10444=(sj1*sj2);
IkReal x10445=(gconst5*sj3);
IkReal x10446=(cj3*gconst5);
IkReal x10447=(gconst4*r11);
IkReal x10448=((1.0)*cj1);
IkReal x10449=(gconst4*r01);
IkReal x10450=(cj2*sj1);
IkReal x10451=(gconst4*r21);
IkReal x10452=(gconst4*sj3);
IkReal x10453=(cj3*gconst4);
IkReal x10454=(cj2*x10448);
IkReal x10455=((1.0)*x10443);
IkReal x10456=((1.0)*x10442);
IkReal x10457=(cj3*x10442);
IkReal x10458=(cj3*x10443);
evalcond[0]=(((x10442*x10451))+(((-1.0)*gconst5*r20*x10456))+(((-1.0)*r22*x10455)));
evalcond[1]=(((x10442*x10449))+(((-1.0)*gconst5*r00*x10456))+(((-1.0)*r02*x10455)));
evalcond[2]=((1.0)+((x10442*x10447))+(((-1.0)*r12*x10455))+(((-1.0)*gconst5*r10*x10456)));
evalcond[3]=(((r10*x10452))+((x10447*x10458))+((r12*x10457))+((r11*x10445))+(((-1.0)*r10*x10446*x10455)));
evalcond[4]=(((r10*x10453))+((r10*x10443*x10445))+((r11*x10446))+(((-1.0)*sj3*x10447*x10455))+(((-1.0)*r12*sj3*x10456)));
evalcond[5]=(((cj1*sj2))+((r22*x10457))+((x10451*x10458))+((r21*x10445))+(((-1.0)*r20*x10446*x10455))+x10450+((r20*x10452)));
evalcond[6]=((((-1.0)*r00*x10446*x10455))+((x10449*x10458))+((r00*x10452))+x10444+((r01*x10445))+((r02*x10457))+(((-1.0)*x10454)));
evalcond[7]=((((-1.0)*r22*sj3*x10456))+((r21*x10446))+x10444+((r20*x10443*x10445))+(((-1.0)*x10454))+(((-1.0)*sj3*x10451*x10455))+((r20*x10453)));
evalcond[8]=((((-1.0)*x10450))+((r00*x10443*x10445))+((r00*x10453))+(((-1.0)*r02*sj3*x10456))+(((-1.0)*sj2*x10448))+((r01*x10446))+(((-1.0)*sj3*x10449*x10455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10459=((1.0)*gconst5);
CheckValue<IkReal> x10460=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x10459)))),-1);
if(!x10460.valid){
continue;
}
CheckValue<IkReal> x10461 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*r20*x10459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10461.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10460.value)))+(x10461.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10462=IKsin(j4);
IkReal x10463=IKcos(j4);
IkReal x10464=(sj1*sj2);
IkReal x10465=(gconst5*sj3);
IkReal x10466=(cj3*gconst5);
IkReal x10467=(gconst4*r11);
IkReal x10468=((1.0)*cj1);
IkReal x10469=(gconst4*r01);
IkReal x10470=(cj2*sj1);
IkReal x10471=(gconst4*r21);
IkReal x10472=(gconst4*sj3);
IkReal x10473=(cj3*gconst4);
IkReal x10474=(cj2*x10468);
IkReal x10475=((1.0)*x10463);
IkReal x10476=((1.0)*x10462);
IkReal x10477=(cj3*x10462);
IkReal x10478=(cj3*x10463);
evalcond[0]=((((-1.0)*gconst5*r20*x10476))+(((-1.0)*r22*x10475))+((x10462*x10471)));
evalcond[1]=((((-1.0)*r02*x10475))+(((-1.0)*gconst5*r00*x10476))+((x10462*x10469)));
evalcond[2]=((1.0)+(((-1.0)*gconst5*r10*x10476))+((x10462*x10467))+(((-1.0)*r12*x10475)));
evalcond[3]=((((-1.0)*r10*x10466*x10475))+((r12*x10477))+((r11*x10465))+((x10467*x10478))+((r10*x10472)));
evalcond[4]=(((r11*x10466))+(((-1.0)*r12*sj3*x10476))+(((-1.0)*sj3*x10467*x10475))+((r10*x10463*x10465))+((r10*x10473)));
evalcond[5]=(((x10471*x10478))+((r20*x10472))+(((-1.0)*r20*x10466*x10475))+((cj1*sj2))+((r22*x10477))+((r21*x10465))+x10470);
evalcond[6]=((((-1.0)*r00*x10466*x10475))+((r01*x10465))+((r00*x10472))+x10464+((r02*x10477))+((x10469*x10478))+(((-1.0)*x10474)));
evalcond[7]=(((r20*x10473))+(((-1.0)*r22*sj3*x10476))+((r20*x10463*x10465))+(((-1.0)*sj3*x10471*x10475))+((r21*x10466))+x10464+(((-1.0)*x10474)));
evalcond[8]=((((-1.0)*x10470))+((r01*x10466))+((r00*x10473))+(((-1.0)*sj3*x10469*x10475))+(((-1.0)*r02*sj3*x10476))+((r00*x10463*x10465))+(((-1.0)*sj2*x10468)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10479 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*gconst5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10479.valid){
continue;
}
CheckValue<IkReal> x10480=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10480.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10479.value)+(((1.5707963267949)*(x10480.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10481=IKsin(j4);
IkReal x10482=IKcos(j4);
IkReal x10483=(sj1*sj2);
IkReal x10484=(gconst5*sj3);
IkReal x10485=(cj3*gconst5);
IkReal x10486=(gconst4*r11);
IkReal x10487=((1.0)*cj1);
IkReal x10488=(gconst4*r01);
IkReal x10489=(cj2*sj1);
IkReal x10490=(gconst4*r21);
IkReal x10491=(gconst4*sj3);
IkReal x10492=(cj3*gconst4);
IkReal x10493=(cj2*x10487);
IkReal x10494=((1.0)*x10482);
IkReal x10495=((1.0)*x10481);
IkReal x10496=(cj3*x10481);
IkReal x10497=(cj3*x10482);
evalcond[0]=((((-1.0)*gconst5*r20*x10495))+(((-1.0)*r22*x10494))+((x10481*x10490)));
evalcond[1]=((((-1.0)*r02*x10494))+(((-1.0)*gconst5*r00*x10495))+((x10481*x10488)));
evalcond[2]=((1.0)+(((-1.0)*r12*x10494))+(((-1.0)*gconst5*r10*x10495))+((x10481*x10486)));
evalcond[3]=(((r10*x10491))+((r12*x10496))+((r11*x10484))+((x10486*x10497))+(((-1.0)*r10*x10485*x10494)));
evalcond[4]=(((r10*x10492))+(((-1.0)*sj3*x10486*x10494))+((r10*x10482*x10484))+((r11*x10485))+(((-1.0)*r12*sj3*x10495)));
evalcond[5]=(((r21*x10484))+((cj1*sj2))+((r22*x10496))+((x10490*x10497))+(((-1.0)*r20*x10485*x10494))+x10489+((r20*x10491)));
evalcond[6]=((((-1.0)*r00*x10485*x10494))+(((-1.0)*x10493))+x10483+((r02*x10496))+((x10488*x10497))+((r00*x10491))+((r01*x10484)));
evalcond[7]=((((-1.0)*sj3*x10490*x10494))+((r21*x10485))+(((-1.0)*r22*sj3*x10495))+((r20*x10482*x10484))+(((-1.0)*x10493))+x10483+((r20*x10492)));
evalcond[8]=((((-1.0)*sj2*x10487))+(((-1.0)*x10489))+(((-1.0)*sj3*x10488*x10494))+((r00*x10482*x10484))+(((-1.0)*r02*sj3*x10495))+((r00*x10492))+((r01*x10485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10498=((-1.0)*r21);
CheckValue<IkReal> x10501 = IKatan2WithCheck(IkReal(x10498),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10501.valid){
continue;
}
IkReal x10499=((1.0)*(x10501.value));
IkReal x10500=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10499)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10499)));
IkReal gconst4=(x10498*x10500);
IkReal gconst5=((1.0)*r20*x10500);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10502=((-1.0)*r21);
CheckValue<IkReal> x10505 = IKatan2WithCheck(IkReal(x10502),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10505.valid){
continue;
}
IkReal x10503=((1.0)*(x10505.value));
IkReal x10504=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10503)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10503)));
IkReal gconst4=(x10502*x10504);
IkReal gconst5=((1.0)*r20*x10504);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10506=((-1.0)*r21);
CheckValue<IkReal> x10509 = IKatan2WithCheck(IkReal(x10506),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10509.valid){
continue;
}
IkReal x10507=((1.0)*(x10509.value));
IkReal x10508=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10507)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10507)));
IkReal gconst4=(x10506*x10508);
IkReal gconst5=((1.0)*r20*x10508);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10510=((-1.0)*r21);
CheckValue<IkReal> x10513 = IKatan2WithCheck(IkReal(x10510),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10513.valid){
continue;
}
IkReal x10511=((1.0)*(x10513.value));
IkReal x10512=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10511)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10511)));
IkReal gconst4=(x10510*x10512);
IkReal gconst5=((1.0)*r20*x10512);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10514=((-1.0)*r21);
CheckValue<IkReal> x10517 = IKatan2WithCheck(IkReal(x10514),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10517.valid){
continue;
}
IkReal x10515=((1.0)*(x10517.value));
IkReal x10516=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10515)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10515)));
IkReal gconst4=(x10514*x10516);
IkReal gconst5=((1.0)*r20*x10516);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10518=((-1.0)*r21);
CheckValue<IkReal> x10521 = IKatan2WithCheck(IkReal(x10518),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10521.valid){
continue;
}
IkReal x10519=((1.0)*(x10521.value));
IkReal x10520=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10519)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10519)));
IkReal gconst4=(x10518*x10520);
IkReal gconst5=((1.0)*r20*x10520);
IkReal x10522=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10526=IKPowWithIntegerCheck(x10522,-1);
if(!x10526.valid){
continue;
}
IkReal x10523=x10526.value;
IkReal x10524=((1.0)*x10523);
IkReal x10525=((((-2.0)*r10*r11*r20*r21*x10523))+(((-1.0)*x10524*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x10524*(r11*r11)*(r21*r21))));
j4eval[0]=x10525;
j4eval[1]=r12;
j4eval[2]=x10522;
j4eval[3]=IKsign(x10525);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10527=(gconst5*r10);
IkReal x10528=(gconst4*r11);
CheckValue<IkReal> x10529 = IKatan2WithCheck(IkReal(((((-1.0)*x10528))+x10527)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10529.valid){
continue;
}
CheckValue<IkReal> x10530=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10527*x10527)))+(((-1.0)*(x10528*x10528)))+(((2.0)*x10527*x10528))+(((-1.0)*(r12*r12))))),-1);
if(!x10530.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10529.value)+(((1.5707963267949)*(x10530.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10531=IKsin(j4);
IkReal x10532=IKcos(j4);
IkReal x10533=(gconst4*r11);
IkReal x10534=(gconst5*r10);
IkReal x10535=(gconst4*r01);
IkReal x10536=(gconst5*r00);
IkReal x10537=(gconst4*r21);
IkReal x10538=(gconst5*r20);
IkReal x10539=((1.0)*x10532);
IkReal x10540=((1.0)*x10531);
evalcond[0]=((((-1.0)*r22*x10539))+(((-1.0)*x10538*x10540))+((x10531*x10537)));
evalcond[1]=((((-1.0)*r02*x10539))+((x10531*x10535))+(((-1.0)*x10536*x10540)));
evalcond[2]=((((-1.0)*r12*x10540))+((x10532*x10534))+(((-1.0)*x10533*x10539)));
evalcond[3]=((-1.0)+(((-1.0)*x10534*x10540))+(((-1.0)*r12*x10539))+((x10531*x10533)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10540))+(((-1.0)*x10535*x10539))+((x10532*x10536)));
evalcond[5]=((((-1.0)*x10537*x10539))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x10540))+((x10532*x10538)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10541=((1.0)*gconst5);
CheckValue<IkReal> x10542 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10541))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10542.valid){
continue;
}
CheckValue<IkReal> x10543=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r20))+(((-1.0)*r21*x10541)))),-1);
if(!x10543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10542.value)+(((1.5707963267949)*(x10543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10544=IKsin(j4);
IkReal x10545=IKcos(j4);
IkReal x10546=(gconst4*r11);
IkReal x10547=(gconst5*r10);
IkReal x10548=(gconst4*r01);
IkReal x10549=(gconst5*r00);
IkReal x10550=(gconst4*r21);
IkReal x10551=(gconst5*r20);
IkReal x10552=((1.0)*x10545);
IkReal x10553=((1.0)*x10544);
evalcond[0]=((((-1.0)*x10551*x10553))+((x10544*x10550))+(((-1.0)*r22*x10552)));
evalcond[1]=(((x10544*x10548))+(((-1.0)*r02*x10552))+(((-1.0)*x10549*x10553)));
evalcond[2]=((((-1.0)*r12*x10553))+(((-1.0)*x10546*x10552))+((x10545*x10547)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10552))+(((-1.0)*x10547*x10553))+((x10544*x10546)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r02*x10553))+(((-1.0)*x10548*x10552))+((x10545*x10549)));
evalcond[5]=(((x10545*x10551))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10550*x10552))+(((-1.0)*r22*x10553)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10554=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10554.valid){
continue;
}
CheckValue<IkReal> x10555 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10555.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10554.value)))+(x10555.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10556=IKsin(j4);
IkReal x10557=IKcos(j4);
IkReal x10558=(gconst4*r11);
IkReal x10559=(gconst5*r10);
IkReal x10560=(gconst4*r01);
IkReal x10561=(gconst5*r00);
IkReal x10562=(gconst4*r21);
IkReal x10563=(gconst5*r20);
IkReal x10564=((1.0)*x10557);
IkReal x10565=((1.0)*x10556);
evalcond[0]=((((-1.0)*r22*x10564))+(((-1.0)*x10563*x10565))+((x10556*x10562)));
evalcond[1]=((((-1.0)*x10561*x10565))+((x10556*x10560))+(((-1.0)*r02*x10564)));
evalcond[2]=((((-1.0)*x10558*x10564))+(((-1.0)*r12*x10565))+((x10557*x10559)));
evalcond[3]=((-1.0)+(((-1.0)*x10559*x10565))+(((-1.0)*r12*x10564))+((x10556*x10558)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10560*x10564))+((cj1*sj2))+((x10557*x10561))+(((-1.0)*r02*x10565)));
evalcond[5]=((((-1.0)*r22*x10565))+(((-1.0)*x10562*x10564))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x10557*x10563)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10566=((-1.0)*r21);
CheckValue<IkReal> x10569 = IKatan2WithCheck(IkReal(x10566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10569.valid){
continue;
}
IkReal x10567=((1.0)*(x10569.value));
IkReal x10568=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10567)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10567)));
IkReal gconst4=(x10566*x10568);
IkReal gconst5=((1.0)*r20*x10568);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10570=((-1.0)*r21);
CheckValue<IkReal> x10573 = IKatan2WithCheck(IkReal(x10570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10573.valid){
continue;
}
IkReal x10571=((1.0)*(x10573.value));
IkReal x10572=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10571)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10571)));
IkReal gconst4=(x10570*x10572);
IkReal gconst5=((1.0)*r20*x10572);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10574=((-1.0)*r21);
CheckValue<IkReal> x10577 = IKatan2WithCheck(IkReal(x10574),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10577.valid){
continue;
}
IkReal x10575=((1.0)*(x10577.value));
IkReal x10576=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10575)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10575)));
IkReal gconst4=(x10574*x10576);
IkReal gconst5=((1.0)*r20*x10576);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10578=(gconst5*r10);
IkReal x10579=(gconst4*r11);
CheckValue<IkReal> x10580 = IKatan2WithCheck(IkReal(((((-1.0)*x10578))+x10579)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10580.valid){
continue;
}
CheckValue<IkReal> x10581=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x10578*x10579))+(x10579*x10579)+(x10578*x10578))),-1);
if(!x10581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10580.value)+(((1.5707963267949)*(x10581.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10582=IKcos(j4);
IkReal x10583=IKsin(j4);
IkReal x10584=(gconst4*r11);
IkReal x10585=(gconst5*r10);
IkReal x10586=(gconst5*r00);
IkReal x10587=(gconst5*r20);
IkReal x10588=((1.0)*x10582);
IkReal x10589=(gconst4*x10582);
IkReal x10590=((1.0)*x10583);
IkReal x10591=(gconst4*x10583);
evalcond[0]=(((r12*x10583))+(((-1.0)*x10585*x10588))+((x10582*x10584)));
evalcond[1]=(((r21*x10591))+(((-1.0)*r22*x10588))+(((-1.0)*x10587*x10590)));
evalcond[2]=(((r01*x10591))+(((-1.0)*r02*x10588))+(((-1.0)*x10586*x10590)));
evalcond[3]=((-1.0)+(((-1.0)*x10585*x10590))+((x10583*x10584))+(((-1.0)*r12*x10588)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r02*x10583))+(((-1.0)*x10586*x10588))+((r01*x10589)));
evalcond[5]=((((-1.0)*x10587*x10588))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x10589))+((r22*x10583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10592=((1.0)*gconst5);
CheckValue<IkReal> x10593 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10592)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10593.valid){
continue;
}
CheckValue<IkReal> x10594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10592))+(((-1.0)*gconst4*r20)))),-1);
if(!x10594.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10593.value)+(((1.5707963267949)*(x10594.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10595=IKcos(j4);
IkReal x10596=IKsin(j4);
IkReal x10597=(gconst4*r11);
IkReal x10598=(gconst5*r10);
IkReal x10599=(gconst5*r00);
IkReal x10600=(gconst5*r20);
IkReal x10601=((1.0)*x10595);
IkReal x10602=(gconst4*x10595);
IkReal x10603=((1.0)*x10596);
IkReal x10604=(gconst4*x10596);
evalcond[0]=((((-1.0)*x10598*x10601))+((r12*x10596))+((x10595*x10597)));
evalcond[1]=((((-1.0)*x10600*x10603))+((r21*x10604))+(((-1.0)*r22*x10601)));
evalcond[2]=(((r01*x10604))+(((-1.0)*r02*x10601))+(((-1.0)*x10599*x10603)));
evalcond[3]=((-1.0)+(((-1.0)*x10598*x10603))+((x10596*x10597))+(((-1.0)*r12*x10601)));
evalcond[4]=(((r01*x10602))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10599*x10601))+((r02*x10596)));
evalcond[5]=((((-1.0)*x10600*x10601))+((r21*x10602))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x10596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10605=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10605.valid){
continue;
}
CheckValue<IkReal> x10606 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10606.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10605.value)))+(x10606.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10607=IKcos(j4);
IkReal x10608=IKsin(j4);
IkReal x10609=(gconst4*r11);
IkReal x10610=(gconst5*r10);
IkReal x10611=(gconst5*r00);
IkReal x10612=(gconst5*r20);
IkReal x10613=((1.0)*x10607);
IkReal x10614=(gconst4*x10607);
IkReal x10615=((1.0)*x10608);
IkReal x10616=(gconst4*x10608);
evalcond[0]=(((r12*x10608))+(((-1.0)*x10610*x10613))+((x10607*x10609)));
evalcond[1]=((((-1.0)*r22*x10613))+(((-1.0)*x10612*x10615))+((r21*x10616)));
evalcond[2]=((((-1.0)*x10611*x10615))+(((-1.0)*r02*x10613))+((r01*x10616)));
evalcond[3]=((-1.0)+(((-1.0)*x10610*x10615))+((x10608*x10609))+(((-1.0)*r12*x10613)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x10611*x10613))+((cj1*sj2))+((r02*x10608))+((r01*x10614)));
evalcond[5]=(((r22*x10608))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x10612*x10613))+((r21*x10614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10617=((-1.0)*r21);
CheckValue<IkReal> x10620 = IKatan2WithCheck(IkReal(x10617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10620.valid){
continue;
}
IkReal x10618=((1.0)*(x10620.value));
IkReal x10619=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10618)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10618)));
IkReal gconst4=(x10617*x10619);
IkReal gconst5=((1.0)*r20*x10619);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10621=((-1.0)*r21);
CheckValue<IkReal> x10624 = IKatan2WithCheck(IkReal(x10621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10624.valid){
continue;
}
IkReal x10622=((1.0)*(x10624.value));
IkReal x10623=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10622)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10622)));
IkReal gconst4=(x10621*x10623);
IkReal gconst5=((1.0)*r20*x10623);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10625=((-1.0)*r21);
CheckValue<IkReal> x10628 = IKatan2WithCheck(IkReal(x10625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10628.valid){
continue;
}
IkReal x10626=((1.0)*(x10628.value));
IkReal x10627=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10626)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10626)));
IkReal gconst4=(x10625*x10627);
IkReal gconst5=((1.0)*r20*x10627);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10629=(gconst5*r10);
IkReal x10630=(gconst4*r11);
CheckValue<IkReal> x10631 = IKatan2WithCheck(IkReal(((((-1.0)*x10629))+x10630)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x10631.valid){
continue;
}
CheckValue<IkReal> x10632=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x10630*x10630)+(((-2.0)*x10629*x10630))+(x10629*x10629))),-1);
if(!x10632.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10631.value)+(((1.5707963267949)*(x10632.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10633=IKcos(j4);
IkReal x10634=IKsin(j4);
IkReal x10635=(gconst5*r10);
IkReal x10636=(gconst5*r00);
IkReal x10637=(gconst5*r20);
IkReal x10638=((1.0)*x10633);
IkReal x10639=(gconst4*x10634);
IkReal x10640=(gconst4*x10633);
IkReal x10641=((1.0)*x10634);
evalcond[0]=((((-1.0)*x10635*x10638))+((r11*x10640))+((r12*x10634)));
evalcond[1]=((((-1.0)*r22*x10638))+(((-1.0)*x10637*x10641))+((r21*x10639)));
evalcond[2]=((((-1.0)*r02*x10638))+((r01*x10639))+(((-1.0)*x10636*x10641)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10638))+((r11*x10639))+(((-1.0)*x10635*x10641)));
evalcond[4]=(((r21*x10640))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10637*x10638))+((r22*x10634)));
evalcond[5]=(((r01*x10640))+(((-1.0)*sj1*sj2))+(((-1.0)*x10636*x10638))+((r02*x10634))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10642=((1.0)*gconst5);
CheckValue<IkReal> x10643 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x10642))+((gconst4*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10643.valid){
continue;
}
CheckValue<IkReal> x10644=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10642))+(((-1.0)*gconst4*r20)))),-1);
if(!x10644.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10643.value)+(((1.5707963267949)*(x10644.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10645=IKcos(j4);
IkReal x10646=IKsin(j4);
IkReal x10647=(gconst5*r10);
IkReal x10648=(gconst5*r00);
IkReal x10649=(gconst5*r20);
IkReal x10650=((1.0)*x10645);
IkReal x10651=(gconst4*x10646);
IkReal x10652=(gconst4*x10645);
IkReal x10653=((1.0)*x10646);
evalcond[0]=((((-1.0)*x10647*x10650))+((r11*x10652))+((r12*x10646)));
evalcond[1]=((((-1.0)*r22*x10650))+(((-1.0)*x10649*x10653))+((r21*x10651)));
evalcond[2]=((((-1.0)*r02*x10650))+(((-1.0)*x10648*x10653))+((r01*x10651)));
evalcond[3]=((-1.0)+(((-1.0)*x10647*x10653))+(((-1.0)*r12*x10650))+((r11*x10651)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x10649*x10650))+((r22*x10646))+((r21*x10652)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10646))+((cj1*cj2))+(((-1.0)*x10648*x10650))+((r01*x10652)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10654=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10654.valid){
continue;
}
CheckValue<IkReal> x10655 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10654.value)))+(x10655.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10656=IKcos(j4);
IkReal x10657=IKsin(j4);
IkReal x10658=(gconst5*r10);
IkReal x10659=(gconst5*r00);
IkReal x10660=(gconst5*r20);
IkReal x10661=((1.0)*x10656);
IkReal x10662=(gconst4*x10657);
IkReal x10663=(gconst4*x10656);
IkReal x10664=((1.0)*x10657);
evalcond[0]=((((-1.0)*x10658*x10661))+((r12*x10657))+((r11*x10663)));
evalcond[1]=((((-1.0)*x10660*x10664))+(((-1.0)*r22*x10661))+((r21*x10662)));
evalcond[2]=((((-1.0)*r02*x10661))+(((-1.0)*x10659*x10664))+((r01*x10662)));
evalcond[3]=((-1.0)+(((-1.0)*x10658*x10664))+(((-1.0)*r12*x10661))+((r11*x10662)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r22*x10657))+(((-1.0)*x10660*x10661))+((r21*x10663)));
evalcond[5]=((((-1.0)*sj1*sj2))+((r02*x10657))+(((-1.0)*x10659*x10661))+((r01*x10663))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x10665=((-1.0)*r21);
CheckValue<IkReal> x10668 = IKatan2WithCheck(IkReal(x10665),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10668.valid){
continue;
}
IkReal x10666=((1.0)*(x10668.value));
IkReal x10667=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10666)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10666)));
IkReal gconst4=(x10665*x10667);
IkReal gconst5=((1.0)*r20*x10667);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10669=((-1.0)*r21);
CheckValue<IkReal> x10672 = IKatan2WithCheck(IkReal(x10669),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10672.valid){
continue;
}
IkReal x10670=((1.0)*(x10672.value));
IkReal x10671=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10670)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10670)));
IkReal gconst4=(x10669*x10671);
IkReal gconst5=((1.0)*r20*x10671);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10673=((-1.0)*r21);
CheckValue<IkReal> x10676 = IKatan2WithCheck(IkReal(x10673),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10676.valid){
continue;
}
IkReal x10674=((1.0)*(x10676.value));
IkReal x10675=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10674)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10674)));
IkReal gconst4=(x10673*x10675);
IkReal gconst5=((1.0)*r20*x10675);
IkReal x10677=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10681=IKPowWithIntegerCheck(x10677,-1);
if(!x10681.valid){
continue;
}
IkReal x10678=x10681.value;
IkReal x10679=((1.0)*x10678);
IkReal x10680=((((-1.0)*x10679*(r10*r10)*(r20*r20)))+(((-1.0)*x10679*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x10678))+(((-1.0)*(r12*r12))));
j4eval[0]=x10680;
j4eval[1]=r12;
j4eval[2]=x10677;
j4eval[3]=IKsign(x10680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10682=(gconst5*r10);
IkReal x10683=(gconst4*r11);
CheckValue<IkReal> x10684=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10683*x10683)))+(((-1.0)*(x10682*x10682)))+(((-1.0)*(r12*r12)))+(((2.0)*x10682*x10683)))),-1);
if(!x10684.valid){
continue;
}
CheckValue<IkReal> x10685 = IKatan2WithCheck(IkReal(((((-1.0)*x10683))+x10682)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x10685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10684.value)))+(x10685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10686=IKsin(j4);
IkReal x10687=IKcos(j4);
IkReal x10688=(gconst4*r11);
IkReal x10689=(gconst5*r10);
IkReal x10690=(gconst5*r00);
IkReal x10691=(gconst5*r20);
IkReal x10692=((1.0)*x10687);
IkReal x10693=(gconst4*x10686);
IkReal x10694=((1.0)*x10686);
evalcond[0]=(((r21*x10693))+(((-1.0)*x10691*x10694))+(((-1.0)*r22*x10692)));
evalcond[1]=((((-1.0)*x10690*x10694))+(((-1.0)*r02*x10692))+((r01*x10693)));
evalcond[2]=((((-1.0)*r12*x10694))+((x10687*x10689))+(((-1.0)*x10688*x10692)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10692))+((x10686*x10688))+(((-1.0)*x10689*x10694)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10692))+((cj1*sj2))+(((-1.0)*r22*x10694))+((x10687*x10691)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*r02*x10694))+(((-1.0)*gconst4*r01*x10692))+((cj1*cj2))+((x10687*x10690)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10695=((1.0)*gconst5);
CheckValue<IkReal> x10696 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10695)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10696.valid){
continue;
}
CheckValue<IkReal> x10697=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10695))+(((-1.0)*gconst4*r20)))),-1);
if(!x10697.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10696.value)+(((1.5707963267949)*(x10697.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10698=IKsin(j4);
IkReal x10699=IKcos(j4);
IkReal x10700=(gconst4*r11);
IkReal x10701=(gconst5*r10);
IkReal x10702=(gconst5*r00);
IkReal x10703=(gconst5*r20);
IkReal x10704=((1.0)*x10699);
IkReal x10705=(gconst4*x10698);
IkReal x10706=((1.0)*x10698);
evalcond[0]=((((-1.0)*r22*x10704))+((r21*x10705))+(((-1.0)*x10703*x10706)));
evalcond[1]=(((r01*x10705))+(((-1.0)*x10702*x10706))+(((-1.0)*r02*x10704)));
evalcond[2]=((((-1.0)*r12*x10706))+((x10699*x10701))+(((-1.0)*x10700*x10704)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10704))+((x10698*x10700))+(((-1.0)*x10701*x10706)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x10704))+((cj1*sj2))+(((-1.0)*r22*x10706))+((x10699*x10703)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10704))+((x10699*x10702))+(((-1.0)*r02*x10706))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10707=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10707.valid){
continue;
}
CheckValue<IkReal> x10708 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10708.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10707.value)))+(x10708.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10709=IKsin(j4);
IkReal x10710=IKcos(j4);
IkReal x10711=(gconst4*r11);
IkReal x10712=(gconst5*r10);
IkReal x10713=(gconst5*r00);
IkReal x10714=(gconst5*r20);
IkReal x10715=((1.0)*x10710);
IkReal x10716=(gconst4*x10709);
IkReal x10717=((1.0)*x10709);
evalcond[0]=((((-1.0)*x10714*x10717))+(((-1.0)*r22*x10715))+((r21*x10716)));
evalcond[1]=((((-1.0)*x10713*x10717))+((r01*x10716))+(((-1.0)*r02*x10715)));
evalcond[2]=((((-1.0)*x10711*x10715))+(((-1.0)*r12*x10717))+((x10710*x10712)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x10715))+(((-1.0)*x10712*x10717))+((x10709*x10711)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x10717))+((x10710*x10714))+(((-1.0)*gconst4*r21*x10715)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*gconst4*r01*x10715))+((cj1*cj2))+((x10710*x10713))+(((-1.0)*r02*x10717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x10718=((-1.0)*r21);
IkReal x10719=((-1.0)*px);
CheckValue<IkReal> x10721 = IKatan2WithCheck(IkReal(x10718),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10721.valid){
continue;
}
IkReal x10720=((1.0)*(x10721.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10720)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10719);
rxp1_1=(px*r21);
rxp1_2=(r11*x10719);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10720)));
IkReal gconst4=x10718;
IkReal gconst5=((1.0)*r20);
IkReal x10722=((1.0)*cj3);
IkReal x10723=(r10*r20);
IkReal x10724=(r11*r21);
j4eval[0]=((((-1.0)*x10724))+(((-1.0)*x10723)));
j4eval[1]=((((-1.0)*x10722*x10724))+(((-1.0)*x10722*x10723)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10725=((-1.0)*r21);
IkReal x10726=((-1.0)*px);
CheckValue<IkReal> x10728 = IKatan2WithCheck(IkReal(x10725),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10728.valid){
continue;
}
IkReal x10727=((1.0)*(x10728.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10727)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10726);
rxp1_1=(px*r21);
rxp1_2=(r11*x10726);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10727)));
IkReal gconst4=x10725;
IkReal gconst5=((1.0)*r20);
IkReal x10729=((1.0)*r11*r21);
IkReal x10730=((1.0)*r10*r20);
j4eval[0]=((((-1.0)*x10730))+(((-1.0)*x10729)));
j4eval[1]=(((sj3*x10729))+((sj3*x10730)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10731=((-1.0)*r21);
IkReal x10732=((-1.0)*px);
CheckValue<IkReal> x10734 = IKatan2WithCheck(IkReal(x10731),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10734.valid){
continue;
}
IkReal x10733=((1.0)*(x10734.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10733)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x10732);
rxp1_1=(px*r21);
rxp1_2=(r11*x10732);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10733)));
IkReal gconst4=x10731;
IkReal gconst5=((1.0)*r20);
IkReal x10735=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r20*x10735))+(((-1.0)*r11*r21*x10735)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10736=((1.0)*r10);
CheckValue<IkReal> x10737=IKPowWithIntegerCheck(cj3,-1);
if(!x10737.valid){
continue;
}
CheckValue<IkReal> x10738=IKPowWithIntegerCheck(r02,-1);
if(!x10738.valid){
continue;
}
CheckValue<IkReal> x10739=IKPowWithIntegerCheck((((cj3*gconst4*r11))+(((-1.0)*cj3*gconst5*x10736))),-1);
if(!x10739.valid){
continue;
}
if( IKabs(((x10737.value)*(x10738.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10739.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10736)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x10737.value)*(x10738.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x10739.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10736))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x10737.value)*(x10738.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x10739.value)*(((((-1.0)*gconst5*r11*sj3))+(((-1.0)*gconst4*sj3*x10736))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10740=IKsin(j4);
IkReal x10741=IKcos(j4);
IkReal x10742=(cj2*sj1);
IkReal x10743=(cj1*sj2);
IkReal x10744=(gconst5*sj3);
IkReal x10745=(gconst4*r11);
IkReal x10746=(sj1*sj2);
IkReal x10747=((1.0)*gconst5);
IkReal x10748=(cj1*cj2);
IkReal x10749=(gconst4*r21);
IkReal x10750=(cj3*gconst4);
IkReal x10751=(gconst4*sj3);
IkReal x10752=(cj3*gconst5);
IkReal x10753=(r20*x10741);
IkReal x10754=(r10*x10741);
IkReal x10755=(cj3*x10741);
IkReal x10756=(r02*x10740);
IkReal x10757=(x10743+x10742);
IkReal x10758=((1.0)*sj3*x10741);
evalcond[0]=((-1.0)*r02*x10741);
evalcond[1]=((((-1.0)*r20*x10740*x10747))+((x10740*x10749)));
evalcond[2]=((((-1.0)*x10746))+((cj3*x10756))+x10748);
evalcond[3]=((((-1.0)*sj3*x10756))+x10757);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10740*x10747))+((x10740*x10745)));
evalcond[5]=(((x10745*x10755))+(((-1.0)*cj3*x10747*x10754))+((r10*x10751))+((r11*x10744)));
evalcond[6]=(((r10*x10750))+(((-1.0)*x10745*x10758))+((r11*x10752))+((x10744*x10754)));
evalcond[7]=((((-1.0)*cj3*x10747*x10753))+((x10749*x10755))+((r20*x10751))+x10757+((r21*x10744)));
evalcond[8]=((((-1.0)*x10748))+((r20*x10750))+(((-1.0)*x10749*x10758))+x10746+((x10744*x10753))+((r21*x10752)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10759=((1.0)*gconst5);
IkReal x10760=(gconst4*r11);
CheckValue<IkReal> x10761=IKPowWithIntegerCheck(((((-1.0)*r10*x10759))+x10760),-1);
if(!x10761.valid){
continue;
}
CheckValue<IkReal> x10762=IKPowWithIntegerCheck(((((-1.0)*sj3*x10760))+((gconst5*r10*sj3))),-1);
if(!x10762.valid){
continue;
}
if( IKabs(x10761.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10762.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10759)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10761.value)+IKsqr(((x10762.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10759))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10761.value, ((x10762.value)*(((((-1.0)*cj3*gconst4*r10))+(((-1.0)*cj3*r11*x10759))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10763=IKsin(j4);
IkReal x10764=IKcos(j4);
IkReal x10765=(cj2*sj1);
IkReal x10766=(cj1*sj2);
IkReal x10767=(gconst5*sj3);
IkReal x10768=(gconst4*r11);
IkReal x10769=(sj1*sj2);
IkReal x10770=((1.0)*gconst5);
IkReal x10771=(cj1*cj2);
IkReal x10772=(gconst4*r21);
IkReal x10773=(cj3*gconst4);
IkReal x10774=(gconst4*sj3);
IkReal x10775=(cj3*gconst5);
IkReal x10776=(r20*x10764);
IkReal x10777=(r10*x10764);
IkReal x10778=(cj3*x10764);
IkReal x10779=(r02*x10763);
IkReal x10780=(x10766+x10765);
IkReal x10781=((1.0)*sj3*x10764);
evalcond[0]=((-1.0)*r02*x10764);
evalcond[1]=(((x10763*x10772))+(((-1.0)*r20*x10763*x10770)));
evalcond[2]=(((cj3*x10779))+(((-1.0)*x10769))+x10771);
evalcond[3]=((((-1.0)*sj3*x10779))+x10780);
evalcond[4]=((-1.0)+((x10763*x10768))+(((-1.0)*r10*x10763*x10770)));
evalcond[5]=((((-1.0)*cj3*x10770*x10777))+((r11*x10767))+((r10*x10774))+((x10768*x10778)));
evalcond[6]=(((r11*x10775))+(((-1.0)*x10768*x10781))+((x10767*x10777))+((r10*x10773)));
evalcond[7]=((((-1.0)*cj3*x10770*x10776))+((r20*x10774))+((x10772*x10778))+((r21*x10767))+x10780);
evalcond[8]=((((-1.0)*x10772*x10781))+((r20*x10773))+(((-1.0)*x10771))+((x10767*x10776))+((r21*x10775))+x10769);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10782=((1.0)*sj3);
IkReal x10783=(gconst4*r11);
IkReal x10784=((1.0)*gconst5*r10);
CheckValue<IkReal> x10785=IKPowWithIntegerCheck(((((-1.0)*x10784))+x10783),-1);
if(!x10785.valid){
continue;
}
CheckValue<IkReal> x10786=IKPowWithIntegerCheck(((((-1.0)*cj3*x10784))+((cj3*x10783))),-1);
if(!x10786.valid){
continue;
}
if( IKabs(x10785.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x10786.value)*(((((-1.0)*gconst5*r11*x10782))+(((-1.0)*gconst4*r10*x10782)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x10785.value)+IKsqr(((x10786.value)*(((((-1.0)*gconst5*r11*x10782))+(((-1.0)*gconst4*r10*x10782))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x10785.value, ((x10786.value)*(((((-1.0)*gconst5*r11*x10782))+(((-1.0)*gconst4*r10*x10782))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10787=IKsin(j4);
IkReal x10788=IKcos(j4);
IkReal x10789=(cj2*sj1);
IkReal x10790=(cj1*sj2);
IkReal x10791=(gconst5*sj3);
IkReal x10792=(gconst4*r11);
IkReal x10793=(sj1*sj2);
IkReal x10794=((1.0)*gconst5);
IkReal x10795=(cj1*cj2);
IkReal x10796=(gconst4*r21);
IkReal x10797=(cj3*gconst4);
IkReal x10798=(gconst4*sj3);
IkReal x10799=(cj3*gconst5);
IkReal x10800=(r20*x10788);
IkReal x10801=(r10*x10788);
IkReal x10802=(cj3*x10788);
IkReal x10803=(r02*x10787);
IkReal x10804=(x10789+x10790);
IkReal x10805=((1.0)*sj3*x10788);
evalcond[0]=((-1.0)*r02*x10788);
evalcond[1]=(((x10787*x10796))+(((-1.0)*r20*x10787*x10794)));
evalcond[2]=(((cj3*x10803))+(((-1.0)*x10793))+x10795);
evalcond[3]=((((-1.0)*sj3*x10803))+x10804);
evalcond[4]=((-1.0)+(((-1.0)*r10*x10787*x10794))+((x10787*x10792)));
evalcond[5]=(((r10*x10798))+((x10792*x10802))+(((-1.0)*cj3*x10794*x10801))+((r11*x10791)));
evalcond[6]=(((r10*x10797))+((r11*x10799))+((x10791*x10801))+(((-1.0)*x10792*x10805)));
evalcond[7]=(((r21*x10791))+((r20*x10798))+(((-1.0)*cj3*x10794*x10800))+((x10796*x10802))+x10804);
evalcond[8]=(((r21*x10799))+((r20*x10797))+(((-1.0)*x10796*x10805))+(((-1.0)*x10795))+x10793+((x10791*x10800)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10806=gconst4*gconst4;
IkReal x10807=gconst5*gconst5;
IkReal x10808=(r10*r21);
IkReal x10809=((1.0)*cj3);
IkReal x10810=(r11*r21);
IkReal x10811=(r11*r20);
IkReal x10812=(r22*sj3);
IkReal x10813=(gconst4*r10);
IkReal x10814=((1.0)*sj3);
IkReal x10815=(cj3*gconst4*gconst5);
CheckValue<IkReal> x10816=IKPowWithIntegerCheck(IKsign((((x10808*x10815))+((x10811*x10815))+(((-1.0)*x10806*x10809*x10810))+(((-1.0)*r10*r20*x10807*x10809))+(((-1.0)*r12*r22*x10809)))),-1);
if(!x10816.valid){
continue;
}
CheckValue<IkReal> x10817 = IKatan2WithCheck(IkReal((((x10812*x10813))+((gconst5*r11*x10812)))),IkReal((((sj3*x10806*x10808))+(((-1.0)*gconst5*r20*x10813*x10814))+(((-1.0)*x10807*x10811*x10814))+((gconst4*gconst5*sj3*x10810)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10817.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10816.value)))+(x10817.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10818=IKsin(j4);
IkReal x10819=IKcos(j4);
IkReal x10820=(cj2*sj1);
IkReal x10821=(cj1*sj2);
IkReal x10822=(gconst5*sj3);
IkReal x10823=(gconst4*r11);
IkReal x10824=(sj1*sj2);
IkReal x10825=(gconst5*r10);
IkReal x10826=(cj1*cj2);
IkReal x10827=(gconst4*r01);
IkReal x10828=(gconst4*r21);
IkReal x10829=(gconst5*r00);
IkReal x10830=(gconst4*sj3);
IkReal x10831=(cj3*gconst5);
IkReal x10832=(cj3*gconst4);
IkReal x10833=((1.0)*x10819);
IkReal x10834=((1.0)*x10818);
IkReal x10835=(cj3*x10818);
IkReal x10836=(cj3*x10819);
IkReal x10837=(x10820+x10821);
evalcond[0]=((((-1.0)*gconst5*r20*x10834))+((x10818*x10828))+(((-1.0)*r22*x10833)));
evalcond[1]=((((-1.0)*x10829*x10834))+((x10818*x10827))+(((-1.0)*r02*x10833)));
evalcond[2]=((-1.0)+(((-1.0)*x10825*x10834))+(((-1.0)*r12*x10833))+((x10818*x10823)));
evalcond[3]=(((x10823*x10836))+(((-1.0)*cj3*x10825*x10833))+((r10*x10830))+((r12*x10835))+((r11*x10822)));
evalcond[4]=(((r10*x10819*x10822))+((r10*x10832))+(((-1.0)*r12*sj3*x10834))+(((-1.0)*sj3*x10823*x10833))+((r11*x10831)));
evalcond[5]=(((r21*x10822))+((r22*x10835))+(((-1.0)*r20*x10831*x10833))+((r20*x10830))+((x10828*x10836))+x10837);
evalcond[6]=((((-1.0)*x10824))+((x10827*x10836))+((r02*x10835))+(((-1.0)*cj3*x10829*x10833))+((r00*x10830))+((r01*x10822))+x10826);
evalcond[7]=((((-1.0)*sj3*x10827*x10833))+(((-1.0)*r02*sj3*x10834))+((r01*x10831))+((r00*x10832))+((r00*x10819*x10822))+x10837);
evalcond[8]=(((r20*x10819*x10822))+(((-1.0)*x10826))+(((-1.0)*r22*sj3*x10834))+(((-1.0)*sj3*x10828*x10833))+((r20*x10832))+((r21*x10831))+x10824);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10838=((1.0)*gconst5);
CheckValue<IkReal> x10839=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x10838))+(((-1.0)*gconst4*r20)))),-1);
if(!x10839.valid){
continue;
}
CheckValue<IkReal> x10840 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst4*r01))+(((-1.0)*r00*x10838)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10840.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10839.value)))+(x10840.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10841=IKsin(j4);
IkReal x10842=IKcos(j4);
IkReal x10843=(cj2*sj1);
IkReal x10844=(cj1*sj2);
IkReal x10845=(gconst5*sj3);
IkReal x10846=(gconst4*r11);
IkReal x10847=(sj1*sj2);
IkReal x10848=(gconst5*r10);
IkReal x10849=(cj1*cj2);
IkReal x10850=(gconst4*r01);
IkReal x10851=(gconst4*r21);
IkReal x10852=(gconst5*r00);
IkReal x10853=(gconst4*sj3);
IkReal x10854=(cj3*gconst5);
IkReal x10855=(cj3*gconst4);
IkReal x10856=((1.0)*x10842);
IkReal x10857=((1.0)*x10841);
IkReal x10858=(cj3*x10841);
IkReal x10859=(cj3*x10842);
IkReal x10860=(x10843+x10844);
evalcond[0]=(((x10841*x10851))+(((-1.0)*gconst5*r20*x10857))+(((-1.0)*r22*x10856)));
evalcond[1]=((((-1.0)*x10852*x10857))+((x10841*x10850))+(((-1.0)*r02*x10856)));
evalcond[2]=((-1.0)+((x10841*x10846))+(((-1.0)*r12*x10856))+(((-1.0)*x10848*x10857)));
evalcond[3]=(((r12*x10858))+((x10846*x10859))+((r10*x10853))+(((-1.0)*cj3*x10848*x10856))+((r11*x10845)));
evalcond[4]=(((r11*x10854))+((r10*x10855))+((r10*x10842*x10845))+(((-1.0)*r12*sj3*x10857))+(((-1.0)*sj3*x10846*x10856)));
evalcond[5]=((((-1.0)*r20*x10854*x10856))+((r20*x10853))+((r21*x10845))+((x10851*x10859))+((r22*x10858))+x10860);
evalcond[6]=(((r01*x10845))+(((-1.0)*x10847))+((x10850*x10859))+((r00*x10853))+((r02*x10858))+(((-1.0)*cj3*x10852*x10856))+x10849);
evalcond[7]=(((r01*x10854))+((r00*x10855))+((r00*x10842*x10845))+(((-1.0)*r02*sj3*x10857))+(((-1.0)*sj3*x10850*x10856))+x10860);
evalcond[8]=(((r20*x10842*x10845))+(((-1.0)*r22*sj3*x10857))+((r21*x10854))+((r20*x10855))+(((-1.0)*x10849))+(((-1.0)*sj3*x10851*x10856))+x10847);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10861=IKPowWithIntegerCheck(IKsign((((gconst4*r00))+((gconst5*r01)))),-1);
if(!x10861.valid){
continue;
}
CheckValue<IkReal> x10862 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10861.value)))+(x10862.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x10863=IKsin(j4);
IkReal x10864=IKcos(j4);
IkReal x10865=(cj2*sj1);
IkReal x10866=(cj1*sj2);
IkReal x10867=(gconst5*sj3);
IkReal x10868=(gconst4*r11);
IkReal x10869=(sj1*sj2);
IkReal x10870=(gconst5*r10);
IkReal x10871=(cj1*cj2);
IkReal x10872=(gconst4*r01);
IkReal x10873=(gconst4*r21);
IkReal x10874=(gconst5*r00);
IkReal x10875=(gconst4*sj3);
IkReal x10876=(cj3*gconst5);
IkReal x10877=(cj3*gconst4);
IkReal x10878=((1.0)*x10864);
IkReal x10879=((1.0)*x10863);
IkReal x10880=(cj3*x10863);
IkReal x10881=(cj3*x10864);
IkReal x10882=(x10865+x10866);
evalcond[0]=((((-1.0)*r22*x10878))+((x10863*x10873))+(((-1.0)*gconst5*r20*x10879)));
evalcond[1]=(((x10863*x10872))+(((-1.0)*x10874*x10879))+(((-1.0)*r02*x10878)));
evalcond[2]=((-1.0)+(((-1.0)*x10870*x10879))+((x10863*x10868))+(((-1.0)*r12*x10878)));
evalcond[3]=(((r11*x10867))+((x10868*x10881))+((r10*x10875))+(((-1.0)*cj3*x10870*x10878))+((r12*x10880)));
evalcond[4]=(((r10*x10864*x10867))+((r11*x10876))+((r10*x10877))+(((-1.0)*sj3*x10868*x10878))+(((-1.0)*r12*sj3*x10879)));
evalcond[5]=(((r21*x10867))+(((-1.0)*r20*x10876*x10878))+((x10873*x10881))+((r22*x10880))+((r20*x10875))+x10882);
evalcond[6]=((((-1.0)*cj3*x10874*x10878))+((x10872*x10881))+((r02*x10880))+((r00*x10875))+((r01*x10867))+(((-1.0)*x10869))+x10871);
evalcond[7]=(((r01*x10876))+((r00*x10877))+(((-1.0)*sj3*x10872*x10878))+((r00*x10864*x10867))+(((-1.0)*r02*sj3*x10879))+x10882);
evalcond[8]=(((r21*x10876))+((r20*x10864*x10867))+((r20*x10877))+(((-1.0)*sj3*x10873*x10878))+(((-1.0)*x10871))+(((-1.0)*r22*sj3*x10879))+x10869);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10883=((-1.0)*r21);
CheckValue<IkReal> x10886 = IKatan2WithCheck(IkReal(x10883),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10886.valid){
continue;
}
IkReal x10884=((1.0)*(x10886.value));
IkReal x10885=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10884)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10884)));
IkReal gconst4=(x10883*x10885);
IkReal gconst5=((1.0)*r20*x10885);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10887=((-1.0)*r21);
CheckValue<IkReal> x10890 = IKatan2WithCheck(IkReal(x10887),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10890.valid){
continue;
}
IkReal x10888=((1.0)*(x10890.value));
IkReal x10889=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10888)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10888)));
IkReal gconst4=(x10887*x10889);
IkReal gconst5=((1.0)*r20*x10889);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x10891=((-1.0)*r21);
CheckValue<IkReal> x10894 = IKatan2WithCheck(IkReal(x10891),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10894.valid){
continue;
}
IkReal x10892=((1.0)*(x10894.value));
IkReal x10893=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10892)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10892)));
IkReal gconst4=(x10891*x10893);
IkReal gconst5=((1.0)*r20*x10893);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10895=((-1.0)*r21);
CheckValue<IkReal> x10898 = IKatan2WithCheck(IkReal(x10895),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10898.valid){
continue;
}
IkReal x10896=((1.0)*(x10898.value));
IkReal x10897=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10896)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10896)));
IkReal gconst4=(x10895*x10897);
IkReal gconst5=((1.0)*r20*x10897);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10899=((-1.0)*r21);
CheckValue<IkReal> x10902 = IKatan2WithCheck(IkReal(x10899),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10902.valid){
continue;
}
IkReal x10900=((1.0)*(x10902.value));
IkReal x10901=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10900)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10900)));
IkReal gconst4=(x10899*x10901);
IkReal gconst5=((1.0)*r20*x10901);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x10903=((-1.0)*r21);
CheckValue<IkReal> x10906 = IKatan2WithCheck(IkReal(x10903),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10906.valid){
continue;
}
IkReal x10904=((1.0)*(x10906.value));
IkReal x10905=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10904)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10904)));
IkReal gconst4=(x10903*x10905);
IkReal gconst5=((1.0)*r20*x10905);
IkReal x10907=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x10911=IKPowWithIntegerCheck(x10907,-1);
if(!x10911.valid){
continue;
}
IkReal x10908=x10911.value;
IkReal x10909=((1.0)*x10908);
IkReal x10910=((((-1.0)*x10909*(r00*r00)*(r20*r20)))+(((-2.0)*r00*r01*r20*r21*x10908))+(((-1.0)*(r02*r02)))+(((-1.0)*x10909*(r01*r01)*(r21*r21))));
j4eval[0]=x10910;
j4eval[1]=r02;
j4eval[2]=x10907;
j4eval[3]=IKsign(x10910);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10912=(gconst5*r00);
IkReal x10913=(gconst4*r01);
CheckValue<IkReal> x10914=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x10913*x10913)))+(((-1.0)*(r02*r02)))+(((2.0)*x10912*x10913))+(((-1.0)*(x10912*x10912))))),-1);
if(!x10914.valid){
continue;
}
CheckValue<IkReal> x10915 = IKatan2WithCheck(IkReal((x10912+(((-1.0)*x10913)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x10915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10914.value)))+(x10915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10916=IKsin(j4);
IkReal x10917=IKcos(j4);
IkReal x10918=(gconst4*r11);
IkReal x10919=((1.0)*cj1);
IkReal x10920=(gconst5*r10);
IkReal x10921=(gconst4*r01);
IkReal x10922=(gconst5*r00);
IkReal x10923=(gconst4*r21);
IkReal x10924=(gconst5*r20);
IkReal x10925=((1.0)*x10917);
IkReal x10926=((1.0)*x10916);
evalcond[0]=((((-1.0)*r22*x10925))+(((-1.0)*x10924*x10926))+((x10916*x10923)));
evalcond[1]=((((-1.0)*x10920*x10926))+(((-1.0)*r12*x10925))+((x10916*x10918)));
evalcond[2]=(((x10917*x10922))+(((-1.0)*r02*x10926))+(((-1.0)*x10921*x10925)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x10925))+((x10916*x10921))+(((-1.0)*x10922*x10926)));
evalcond[4]=(((x10917*x10924))+(((-1.0)*r22*x10926))+((sj1*sj2))+(((-1.0)*cj2*x10919))+(((-1.0)*x10923*x10925)));
evalcond[5]=((((-1.0)*sj2*x10919))+((x10917*x10920))+(((-1.0)*r12*x10926))+(((-1.0)*cj2*sj1))+(((-1.0)*x10918*x10925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10927=((1.0)*gconst5);
CheckValue<IkReal> x10928=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10927))+(((-1.0)*gconst4*r10)))),-1);
if(!x10928.valid){
continue;
}
CheckValue<IkReal> x10929 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10927))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10929.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10928.value)))+(x10929.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10930=IKsin(j4);
IkReal x10931=IKcos(j4);
IkReal x10932=(gconst4*r11);
IkReal x10933=((1.0)*cj1);
IkReal x10934=(gconst5*r10);
IkReal x10935=(gconst4*r01);
IkReal x10936=(gconst5*r00);
IkReal x10937=(gconst4*r21);
IkReal x10938=(gconst5*r20);
IkReal x10939=((1.0)*x10931);
IkReal x10940=((1.0)*x10930);
evalcond[0]=(((x10930*x10937))+(((-1.0)*r22*x10939))+(((-1.0)*x10938*x10940)));
evalcond[1]=(((x10930*x10932))+(((-1.0)*r12*x10939))+(((-1.0)*x10934*x10940)));
evalcond[2]=(((x10931*x10936))+(((-1.0)*r02*x10940))+(((-1.0)*x10935*x10939)));
evalcond[3]=((-1.0)+(((-1.0)*x10936*x10940))+((x10930*x10935))+(((-1.0)*r02*x10939)));
evalcond[4]=(((x10931*x10938))+(((-1.0)*x10937*x10939))+((sj1*sj2))+(((-1.0)*r22*x10940))+(((-1.0)*cj2*x10933)));
evalcond[5]=(((x10931*x10934))+(((-1.0)*cj2*sj1))+(((-1.0)*r12*x10940))+(((-1.0)*x10932*x10939))+(((-1.0)*sj2*x10933)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10941 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10941.valid){
continue;
}
CheckValue<IkReal> x10942=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10942.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10941.value)+(((1.5707963267949)*(x10942.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10943=IKsin(j4);
IkReal x10944=IKcos(j4);
IkReal x10945=(gconst4*r11);
IkReal x10946=((1.0)*cj1);
IkReal x10947=(gconst5*r10);
IkReal x10948=(gconst4*r01);
IkReal x10949=(gconst5*r00);
IkReal x10950=(gconst4*r21);
IkReal x10951=(gconst5*r20);
IkReal x10952=((1.0)*x10944);
IkReal x10953=((1.0)*x10943);
evalcond[0]=((((-1.0)*r22*x10952))+((x10943*x10950))+(((-1.0)*x10951*x10953)));
evalcond[1]=((((-1.0)*x10947*x10953))+((x10943*x10945))+(((-1.0)*r12*x10952)));
evalcond[2]=((((-1.0)*x10948*x10952))+((x10944*x10949))+(((-1.0)*r02*x10953)));
evalcond[3]=((-1.0)+((x10943*x10948))+(((-1.0)*x10949*x10953))+(((-1.0)*r02*x10952)));
evalcond[4]=(((x10944*x10951))+((sj1*sj2))+(((-1.0)*x10950*x10952))+(((-1.0)*r22*x10953))+(((-1.0)*cj2*x10946)));
evalcond[5]=((((-1.0)*cj2*sj1))+(((-1.0)*x10945*x10952))+(((-1.0)*sj2*x10946))+((x10944*x10947))+(((-1.0)*r12*x10953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x10954=((-1.0)*r21);
CheckValue<IkReal> x10957 = IKatan2WithCheck(IkReal(x10954),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10957.valid){
continue;
}
IkReal x10955=((1.0)*(x10957.value));
IkReal x10956=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10955)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10955)));
IkReal gconst4=(x10954*x10956);
IkReal gconst5=((1.0)*r20*x10956);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x10958=((-1.0)*r21);
CheckValue<IkReal> x10961 = IKatan2WithCheck(IkReal(x10958),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10961.valid){
continue;
}
IkReal x10959=((1.0)*(x10961.value));
IkReal x10960=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10959)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10959)));
IkReal gconst4=(x10958*x10960);
IkReal gconst5=((1.0)*r20*x10960);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x10962=((-1.0)*r21);
CheckValue<IkReal> x10965 = IKatan2WithCheck(IkReal(x10962),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x10965.valid){
continue;
}
IkReal x10963=((1.0)*(x10965.value));
IkReal x10964=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x10963)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x10963)));
IkReal gconst4=(x10962*x10964);
IkReal gconst5=((1.0)*r20*x10964);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10966=(gconst4*r01);
IkReal x10967=(gconst5*r00);
CheckValue<IkReal> x10968=IKPowWithIntegerCheck(IKsign(((x10966*x10966)+(x10967*x10967)+(((-2.0)*x10966*x10967))+(r02*r02))),-1);
if(!x10968.valid){
continue;
}
CheckValue<IkReal> x10969 = IKatan2WithCheck(IkReal(((((-1.0)*x10967))+x10966)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x10969.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10968.value)))+(x10969.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10970=IKcos(j4);
IkReal x10971=IKsin(j4);
IkReal x10972=(gconst4*r11);
IkReal x10973=(gconst5*r10);
IkReal x10974=((1.0)*cj1);
IkReal x10975=(gconst5*r00);
IkReal x10976=(gconst5*r20);
IkReal x10977=((1.0)*x10970);
IkReal x10978=(gconst4*x10970);
IkReal x10979=((1.0)*x10971);
IkReal x10980=(gconst4*x10971);
evalcond[0]=(((r02*x10971))+((r01*x10978))+(((-1.0)*x10975*x10977)));
evalcond[1]=(((r21*x10980))+(((-1.0)*x10976*x10979))+(((-1.0)*r22*x10977)));
evalcond[2]=((((-1.0)*x10973*x10979))+((x10971*x10972))+(((-1.0)*r12*x10977)));
evalcond[3]=((-1.0)+((r01*x10980))+(((-1.0)*r02*x10977))+(((-1.0)*x10975*x10979)));
evalcond[4]=((((-1.0)*cj2*x10974))+(((-1.0)*x10976*x10977))+((r22*x10971))+((sj1*sj2))+((r21*x10978)));
evalcond[5]=((((-1.0)*x10973*x10977))+(((-1.0)*cj2*sj1))+(((-1.0)*sj2*x10974))+((r12*x10971))+((x10970*x10972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x10981=((1.0)*gconst5);
CheckValue<IkReal> x10982=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x10981))+(((-1.0)*gconst4*r10)))),-1);
if(!x10982.valid){
continue;
}
CheckValue<IkReal> x10983 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x10981))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10983.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x10982.value)))+(x10983.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10984=IKcos(j4);
IkReal x10985=IKsin(j4);
IkReal x10986=(gconst4*r11);
IkReal x10987=(gconst5*r10);
IkReal x10988=((1.0)*cj1);
IkReal x10989=(gconst5*r00);
IkReal x10990=(gconst5*r20);
IkReal x10991=((1.0)*x10984);
IkReal x10992=(gconst4*x10984);
IkReal x10993=((1.0)*x10985);
IkReal x10994=(gconst4*x10985);
evalcond[0]=(((r01*x10992))+(((-1.0)*x10989*x10991))+((r02*x10985)));
evalcond[1]=(((r21*x10994))+(((-1.0)*r22*x10991))+(((-1.0)*x10990*x10993)));
evalcond[2]=(((x10985*x10986))+(((-1.0)*r12*x10991))+(((-1.0)*x10987*x10993)));
evalcond[3]=((-1.0)+((r01*x10994))+(((-1.0)*x10989*x10993))+(((-1.0)*r02*x10991)));
evalcond[4]=(((r22*x10985))+((r21*x10992))+(((-1.0)*cj2*x10988))+((sj1*sj2))+(((-1.0)*x10990*x10991)));
evalcond[5]=(((r12*x10985))+(((-1.0)*sj2*x10988))+(((-1.0)*cj2*sj1))+((x10984*x10986))+(((-1.0)*x10987*x10991)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x10995 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x10995.valid){
continue;
}
CheckValue<IkReal> x10996=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x10996.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x10995.value)+(((1.5707963267949)*(x10996.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x10997=IKcos(j4);
IkReal x10998=IKsin(j4);
IkReal x10999=(gconst4*r11);
IkReal x11000=(gconst5*r10);
IkReal x11001=((1.0)*cj1);
IkReal x11002=(gconst5*r00);
IkReal x11003=(gconst5*r20);
IkReal x11004=((1.0)*x10997);
IkReal x11005=(gconst4*x10997);
IkReal x11006=((1.0)*x10998);
IkReal x11007=(gconst4*x10998);
evalcond[0]=((((-1.0)*x11002*x11004))+((r01*x11005))+((r02*x10998)));
evalcond[1]=((((-1.0)*r22*x11004))+((r21*x11007))+(((-1.0)*x11003*x11006)));
evalcond[2]=((((-1.0)*x11000*x11006))+(((-1.0)*r12*x11004))+((x10998*x10999)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11004))+(((-1.0)*x11002*x11006))+((r01*x11007)));
evalcond[4]=(((r22*x10998))+((sj1*sj2))+((r21*x11005))+(((-1.0)*x11003*x11004))+(((-1.0)*cj2*x11001)));
evalcond[5]=(((r12*x10998))+(((-1.0)*cj2*sj1))+(((-1.0)*x11000*x11004))+((x10997*x10999))+(((-1.0)*sj2*x11001)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11008=((-1.0)*r21);
CheckValue<IkReal> x11011 = IKatan2WithCheck(IkReal(x11008),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11011.valid){
continue;
}
IkReal x11009=((1.0)*(x11011.value));
IkReal x11010=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11009)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11009)));
IkReal gconst4=(x11008*x11010);
IkReal gconst5=((1.0)*r20*x11010);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11012=((-1.0)*r21);
CheckValue<IkReal> x11015 = IKatan2WithCheck(IkReal(x11012),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11015.valid){
continue;
}
IkReal x11013=((1.0)*(x11015.value));
IkReal x11014=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11013)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11013)));
IkReal gconst4=(x11012*x11014);
IkReal gconst5=((1.0)*r20*x11014);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11016=((-1.0)*r21);
CheckValue<IkReal> x11019 = IKatan2WithCheck(IkReal(x11016),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11019.valid){
continue;
}
IkReal x11017=((1.0)*(x11019.value));
IkReal x11018=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11017)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11017)));
IkReal gconst4=(x11016*x11018);
IkReal gconst5=((1.0)*r20*x11018);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11020=(gconst4*r01);
IkReal x11021=(gconst5*r00);
CheckValue<IkReal> x11022=IKPowWithIntegerCheck(IKsign(((x11020*x11020)+(x11021*x11021)+(((-2.0)*x11020*x11021))+(r02*r02))),-1);
if(!x11022.valid){
continue;
}
CheckValue<IkReal> x11023 = IKatan2WithCheck(IkReal(((((-1.0)*x11021))+x11020)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11023.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11022.value)))+(x11023.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11024=IKcos(j4);
IkReal x11025=IKsin(j4);
IkReal x11026=(gconst4*r11);
IkReal x11027=(gconst5*r10);
IkReal x11028=(gconst5*r00);
IkReal x11029=(gconst5*r20);
IkReal x11030=((1.0)*x11024);
IkReal x11031=(gconst4*x11024);
IkReal x11032=((1.0)*x11025);
IkReal x11033=(gconst4*x11025);
evalcond[0]=((((-1.0)*x11028*x11030))+((r01*x11031))+((r02*x11025)));
evalcond[1]=(((r21*x11033))+(((-1.0)*x11029*x11032))+(((-1.0)*r22*x11030)));
evalcond[2]=(((x11025*x11026))+(((-1.0)*r12*x11030))+(((-1.0)*x11027*x11032)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11030))+(((-1.0)*x11028*x11032))+((r01*x11033)));
evalcond[4]=(((cj2*sj1))+((r21*x11031))+((cj1*sj2))+(((-1.0)*x11029*x11030))+((r22*x11025)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11024*x11026))+((r12*x11025))+(((-1.0)*x11027*x11030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11034=((1.0)*gconst5);
CheckValue<IkReal> x11035=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11034))+(((-1.0)*gconst4*r10)))),-1);
if(!x11035.valid){
continue;
}
CheckValue<IkReal> x11036 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11034))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11036.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11035.value)))+(x11036.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11037=IKcos(j4);
IkReal x11038=IKsin(j4);
IkReal x11039=(gconst4*r11);
IkReal x11040=(gconst5*r10);
IkReal x11041=(gconst5*r00);
IkReal x11042=(gconst5*r20);
IkReal x11043=((1.0)*x11037);
IkReal x11044=(gconst4*x11037);
IkReal x11045=((1.0)*x11038);
IkReal x11046=(gconst4*x11038);
evalcond[0]=((((-1.0)*x11041*x11043))+((r01*x11044))+((r02*x11038)));
evalcond[1]=((((-1.0)*r22*x11043))+(((-1.0)*x11042*x11045))+((r21*x11046)));
evalcond[2]=((((-1.0)*r12*x11043))+(((-1.0)*x11040*x11045))+((x11038*x11039)));
evalcond[3]=((-1.0)+(((-1.0)*x11041*x11045))+((r01*x11046))+(((-1.0)*r02*x11043)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11042*x11043))+((r22*x11038))+((r21*x11044)));
evalcond[5]=(((x11037*x11039))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r12*x11038))+(((-1.0)*x11040*x11043)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11047 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11047.valid){
continue;
}
CheckValue<IkReal> x11048=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11048.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11047.value)+(((1.5707963267949)*(x11048.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11049=IKcos(j4);
IkReal x11050=IKsin(j4);
IkReal x11051=(gconst4*r11);
IkReal x11052=(gconst5*r10);
IkReal x11053=(gconst5*r00);
IkReal x11054=(gconst5*r20);
IkReal x11055=((1.0)*x11049);
IkReal x11056=(gconst4*x11049);
IkReal x11057=((1.0)*x11050);
IkReal x11058=(gconst4*x11050);
evalcond[0]=(((r01*x11056))+(((-1.0)*x11053*x11055))+((r02*x11050)));
evalcond[1]=((((-1.0)*x11054*x11057))+(((-1.0)*r22*x11055))+((r21*x11058)));
evalcond[2]=((((-1.0)*r12*x11055))+(((-1.0)*x11052*x11057))+((x11050*x11051)));
evalcond[3]=((-1.0)+((r01*x11058))+(((-1.0)*x11053*x11057))+(((-1.0)*r02*x11055)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11054*x11055))+((r22*x11050))+((cj1*sj2))+((r21*x11056)));
evalcond[5]=(((r12*x11050))+(((-1.0)*x11052*x11055))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11049*x11051)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x11059=((-1.0)*r21);
CheckValue<IkReal> x11062 = IKatan2WithCheck(IkReal(x11059),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11062.valid){
continue;
}
IkReal x11060=((1.0)*(x11062.value));
IkReal x11061=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11060)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11060)));
IkReal gconst4=(x11059*x11061);
IkReal gconst5=((1.0)*r20*x11061);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r12;
j4eval[3]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11063=((-1.0)*r21);
CheckValue<IkReal> x11066 = IKatan2WithCheck(IkReal(x11063),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11066.valid){
continue;
}
IkReal x11064=((1.0)*(x11066.value));
IkReal x11065=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11064)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11064)));
IkReal gconst4=(x11063*x11065);
IkReal gconst5=((1.0)*r20*x11065);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11067=((-1.0)*r21);
CheckValue<IkReal> x11070 = IKatan2WithCheck(IkReal(x11067),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11070.valid){
continue;
}
IkReal x11068=((1.0)*(x11070.value));
IkReal x11069=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11068)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11068)));
IkReal gconst4=(x11067*x11069);
IkReal gconst5=((1.0)*r20*x11069);
IkReal x11071=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11075=IKPowWithIntegerCheck(x11071,-1);
if(!x11075.valid){
continue;
}
IkReal x11072=x11075.value;
IkReal x11073=((1.0)*x11072);
IkReal x11074=((((-1.0)*(r02*r02)))+(((-1.0)*x11073*(r00*r00)*(r20*r20)))+(((-1.0)*x11073*(r01*r01)*(r21*r21)))+(((-2.0)*r00*r01*r20*r21*x11072)));
j4eval[0]=x11074;
j4eval[1]=r02;
j4eval[2]=x11071;
j4eval[3]=IKsign(x11074);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11076=(gconst5*r00);
IkReal x11077=(gconst4*r01);
CheckValue<IkReal> x11078 = IKatan2WithCheck(IkReal((x11076+(((-1.0)*x11077)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11078.valid){
continue;
}
CheckValue<IkReal> x11079=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((2.0)*x11076*x11077))+(((-1.0)*(x11076*x11076)))+(((-1.0)*(x11077*x11077))))),-1);
if(!x11079.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11078.value)+(((1.5707963267949)*(x11079.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11080=IKsin(j4);
IkReal x11081=IKcos(j4);
IkReal x11082=(gconst4*r11);
IkReal x11083=(gconst5*r10);
IkReal x11084=(gconst4*r01);
IkReal x11085=(gconst5*r00);
IkReal x11086=(gconst4*r21);
IkReal x11087=(gconst5*r20);
IkReal x11088=((1.0)*x11081);
IkReal x11089=((1.0)*x11080);
evalcond[0]=((((-1.0)*r22*x11088))+(((-1.0)*x11087*x11089))+((x11080*x11086)));
evalcond[1]=((((-1.0)*r12*x11088))+((x11080*x11082))+(((-1.0)*x11083*x11089)));
evalcond[2]=((((-1.0)*r02*x11089))+((x11081*x11085))+(((-1.0)*x11084*x11088)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11088))+(((-1.0)*x11085*x11089))+((x11080*x11084)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x11089))+((x11081*x11087))+(((-1.0)*x11086*x11088)));
evalcond[5]=((((-1.0)*x11082*x11088))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11081*x11083))+(((-1.0)*r12*x11089)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11090=((1.0)*gconst5);
CheckValue<IkReal> x11091=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11090))+(((-1.0)*gconst4*r10)))),-1);
if(!x11091.valid){
continue;
}
CheckValue<IkReal> x11092 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11090))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11092.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11091.value)))+(x11092.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11093=IKsin(j4);
IkReal x11094=IKcos(j4);
IkReal x11095=(gconst4*r11);
IkReal x11096=(gconst5*r10);
IkReal x11097=(gconst4*r01);
IkReal x11098=(gconst5*r00);
IkReal x11099=(gconst4*r21);
IkReal x11100=(gconst5*r20);
IkReal x11101=((1.0)*x11094);
IkReal x11102=((1.0)*x11093);
evalcond[0]=(((x11093*x11099))+(((-1.0)*x11100*x11102))+(((-1.0)*r22*x11101)));
evalcond[1]=(((x11093*x11095))+(((-1.0)*x11096*x11102))+(((-1.0)*r12*x11101)));
evalcond[2]=((((-1.0)*x11097*x11101))+(((-1.0)*r02*x11102))+((x11094*x11098)));
evalcond[3]=((-1.0)+(((-1.0)*x11098*x11102))+((x11093*x11097))+(((-1.0)*r02*x11101)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((x11094*x11100))+(((-1.0)*x11099*x11101))+(((-1.0)*r22*x11102)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r12*x11102))+((x11094*x11096))+(((-1.0)*x11095*x11101)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11103 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11103.valid){
continue;
}
CheckValue<IkReal> x11104=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11104.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11103.value)+(((1.5707963267949)*(x11104.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11105=IKsin(j4);
IkReal x11106=IKcos(j4);
IkReal x11107=(gconst4*r11);
IkReal x11108=(gconst5*r10);
IkReal x11109=(gconst4*r01);
IkReal x11110=(gconst5*r00);
IkReal x11111=(gconst4*r21);
IkReal x11112=(gconst5*r20);
IkReal x11113=((1.0)*x11106);
IkReal x11114=((1.0)*x11105);
evalcond[0]=(((x11105*x11111))+(((-1.0)*x11112*x11114))+(((-1.0)*r22*x11113)));
evalcond[1]=(((x11105*x11107))+(((-1.0)*x11108*x11114))+(((-1.0)*r12*x11113)));
evalcond[2]=(((x11106*x11110))+(((-1.0)*r02*x11114))+(((-1.0)*x11109*x11113)));
evalcond[3]=((-1.0)+((x11105*x11109))+(((-1.0)*r02*x11113))+(((-1.0)*x11110*x11114)));
evalcond[4]=(((cj2*sj1))+((x11106*x11112))+((cj1*sj2))+(((-1.0)*x11111*x11113))+(((-1.0)*r22*x11114)));
evalcond[5]=(((x11106*x11108))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11107*x11113))+(((-1.0)*r12*x11114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r12);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11115=gconst4*gconst4;
IkReal x11116=gconst5*gconst5;
IkReal x11117=(r01*r20);
IkReal x11118=(gconst4*sj3);
IkReal x11119=(r01*r21);
IkReal x11120=((1.0)*cj3);
IkReal x11121=(r00*r21);
IkReal x11122=(r00*r20);
IkReal x11123=(cj3*gconst4*gconst5);
IkReal x11124=((1.0)*x11116);
CheckValue<IkReal> x11125 = IKatan2WithCheck(IkReal((((r00*r22*x11118))+((gconst5*r01*r22*sj3)))),IkReal((((gconst5*x11118*x11119))+((sj3*x11115*x11121))+(((-1.0)*gconst5*x11118*x11122))+(((-1.0)*sj3*x11117*x11124)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11125.valid){
continue;
}
CheckValue<IkReal> x11126=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11116*x11120*x11122))+(((-1.0)*x11115*x11119*x11120))+((x11121*x11123))+(((-1.0)*r02*r22*x11120))+((x11117*x11123)))),-1);
if(!x11126.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11125.value)+(((1.5707963267949)*(x11126.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11127=IKsin(j4);
IkReal x11128=IKcos(j4);
IkReal x11129=(sj1*sj2);
IkReal x11130=(gconst5*sj3);
IkReal x11131=(gconst4*r11);
IkReal x11132=(gconst5*r10);
IkReal x11133=((1.0)*cj1);
IkReal x11134=(gconst4*r01);
IkReal x11135=(cj2*sj1);
IkReal x11136=(gconst5*r00);
IkReal x11137=(gconst4*sj3);
IkReal x11138=(cj3*gconst5);
IkReal x11139=(cj3*gconst4);
IkReal x11140=(gconst4*r21);
IkReal x11141=(cj2*x11133);
IkReal x11142=((1.0)*x11128);
IkReal x11143=((1.0)*x11127);
IkReal x11144=(cj3*x11127);
IkReal x11145=(cj3*x11128);
evalcond[0]=(((x11127*x11140))+(((-1.0)*r22*x11142))+(((-1.0)*gconst5*r20*x11143)));
evalcond[1]=(((x11127*x11131))+(((-1.0)*x11132*x11143))+(((-1.0)*r12*x11142)));
evalcond[2]=((-1.0)+((x11127*x11134))+(((-1.0)*r02*x11142))+(((-1.0)*x11136*x11143)));
evalcond[3]=(((x11134*x11145))+(((-1.0)*cj3*x11136*x11142))+((r02*x11144))+((r01*x11130))+((r00*x11137)));
evalcond[4]=((((-1.0)*sj3*x11134*x11142))+(((-1.0)*r02*sj3*x11143))+((r01*x11138))+((r00*x11139))+((r00*x11128*x11130)));
evalcond[5]=(((r22*x11144))+((cj1*sj2))+(((-1.0)*r20*x11138*x11142))+((r21*x11130))+x11135+((r20*x11137))+((r21*x11128*x11139)));
evalcond[6]=((((-1.0)*cj3*x11132*x11142))+x11129+((r10*x11137))+((r12*x11144))+((x11131*x11145))+((r11*x11130))+(((-1.0)*x11141)));
evalcond[7]=(((r20*x11128*x11130))+((r21*x11138))+x11129+((r20*x11139))+(((-1.0)*r21*x11137*x11142))+(((-1.0)*r22*sj3*x11143))+(((-1.0)*x11141)));
evalcond[8]=((((-1.0)*x11135))+(((-1.0)*r12*sj3*x11143))+((r10*x11139))+((r11*x11138))+(((-1.0)*sj2*x11133))+(((-1.0)*sj3*x11131*x11142))+((r10*x11128*x11130)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11146=((1.0)*gconst5);
CheckValue<IkReal> x11147 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x11146))+((gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11147.valid){
continue;
}
CheckValue<IkReal> x11148=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11146))+(((-1.0)*gconst4*r10)))),-1);
if(!x11148.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11147.value)+(((1.5707963267949)*(x11148.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11149=IKsin(j4);
IkReal x11150=IKcos(j4);
IkReal x11151=(sj1*sj2);
IkReal x11152=(gconst5*sj3);
IkReal x11153=(gconst4*r11);
IkReal x11154=(gconst5*r10);
IkReal x11155=((1.0)*cj1);
IkReal x11156=(gconst4*r01);
IkReal x11157=(cj2*sj1);
IkReal x11158=(gconst5*r00);
IkReal x11159=(gconst4*sj3);
IkReal x11160=(cj3*gconst5);
IkReal x11161=(cj3*gconst4);
IkReal x11162=(gconst4*r21);
IkReal x11163=(cj2*x11155);
IkReal x11164=((1.0)*x11150);
IkReal x11165=((1.0)*x11149);
IkReal x11166=(cj3*x11149);
IkReal x11167=(cj3*x11150);
evalcond[0]=(((x11149*x11162))+(((-1.0)*r22*x11164))+(((-1.0)*gconst5*r20*x11165)));
evalcond[1]=((((-1.0)*x11154*x11165))+(((-1.0)*r12*x11164))+((x11149*x11153)));
evalcond[2]=((-1.0)+(((-1.0)*x11158*x11165))+((x11149*x11156))+(((-1.0)*r02*x11164)));
evalcond[3]=(((r00*x11159))+((r01*x11152))+(((-1.0)*cj3*x11158*x11164))+((x11156*x11167))+((r02*x11166)));
evalcond[4]=(((r01*x11160))+((r00*x11161))+((r00*x11150*x11152))+(((-1.0)*r02*sj3*x11165))+(((-1.0)*sj3*x11156*x11164)));
evalcond[5]=(((r21*x11150*x11161))+((r21*x11152))+((cj1*sj2))+x11157+((r22*x11166))+((r20*x11159))+(((-1.0)*r20*x11160*x11164)));
evalcond[6]=((((-1.0)*cj3*x11154*x11164))+((r12*x11166))+(((-1.0)*x11163))+((r11*x11152))+x11151+((r10*x11159))+((x11153*x11167)));
evalcond[7]=(((r20*x11150*x11152))+((r20*x11161))+(((-1.0)*x11163))+x11151+(((-1.0)*r21*x11159*x11164))+((r21*x11160))+(((-1.0)*r22*sj3*x11165)));
evalcond[8]=(((r10*x11150*x11152))+(((-1.0)*sj3*x11153*x11164))+((r11*x11160))+(((-1.0)*x11157))+(((-1.0)*r12*sj3*x11165))+(((-1.0)*sj2*x11155))+((r10*x11161)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11168 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*gconst5*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11168.valid){
continue;
}
CheckValue<IkReal> x11169=IKPowWithIntegerCheck(IKsign((((gconst4*r20))+((gconst5*r21)))),-1);
if(!x11169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11168.value)+(((1.5707963267949)*(x11169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11170=IKsin(j4);
IkReal x11171=IKcos(j4);
IkReal x11172=(sj1*sj2);
IkReal x11173=(gconst5*sj3);
IkReal x11174=(gconst4*r11);
IkReal x11175=(gconst5*r10);
IkReal x11176=((1.0)*cj1);
IkReal x11177=(gconst4*r01);
IkReal x11178=(cj2*sj1);
IkReal x11179=(gconst5*r00);
IkReal x11180=(gconst4*sj3);
IkReal x11181=(cj3*gconst5);
IkReal x11182=(cj3*gconst4);
IkReal x11183=(gconst4*r21);
IkReal x11184=(cj2*x11176);
IkReal x11185=((1.0)*x11171);
IkReal x11186=((1.0)*x11170);
IkReal x11187=(cj3*x11170);
IkReal x11188=(cj3*x11171);
evalcond[0]=(((x11170*x11183))+(((-1.0)*r22*x11185))+(((-1.0)*gconst5*r20*x11186)));
evalcond[1]=((((-1.0)*x11175*x11186))+(((-1.0)*r12*x11185))+((x11170*x11174)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x11185))+(((-1.0)*x11179*x11186))+((x11170*x11177)));
evalcond[3]=(((r01*x11173))+((x11177*x11188))+((r00*x11180))+((r02*x11187))+(((-1.0)*cj3*x11179*x11185)));
evalcond[4]=(((r01*x11181))+((r00*x11182))+(((-1.0)*r02*sj3*x11186))+(((-1.0)*sj3*x11177*x11185))+((r00*x11171*x11173)));
evalcond[5]=(((r20*x11180))+((cj1*sj2))+(((-1.0)*r20*x11181*x11185))+x11178+((r22*x11187))+((r21*x11173))+((r21*x11171*x11182)));
evalcond[6]=((((-1.0)*x11184))+((r11*x11173))+((r12*x11187))+((x11174*x11188))+x11172+(((-1.0)*cj3*x11175*x11185))+((r10*x11180)));
evalcond[7]=(((r20*x11182))+(((-1.0)*r22*sj3*x11186))+(((-1.0)*x11184))+(((-1.0)*r21*x11180*x11185))+x11172+((r20*x11171*x11173))+((r21*x11181)));
evalcond[8]=(((r10*x11171*x11173))+((r11*x11181))+(((-1.0)*sj2*x11176))+(((-1.0)*x11178))+(((-1.0)*sj3*x11174*x11185))+(((-1.0)*r12*sj3*x11186))+((r10*x11182)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11189=((-1.0)*r21);
CheckValue<IkReal> x11192 = IKatan2WithCheck(IkReal(x11189),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11192.valid){
continue;
}
IkReal x11190=((1.0)*(x11192.value));
IkReal x11191=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11190)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11190)));
IkReal gconst4=(x11189*x11191);
IkReal gconst5=((1.0)*r20*x11191);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11193=((-1.0)*r21);
CheckValue<IkReal> x11196 = IKatan2WithCheck(IkReal(x11193),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11196.valid){
continue;
}
IkReal x11194=((1.0)*(x11196.value));
IkReal x11195=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11194)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11194)));
IkReal gconst4=(x11193*x11195);
IkReal gconst5=((1.0)*r20*x11195);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11197=((-1.0)*r21);
CheckValue<IkReal> x11200 = IKatan2WithCheck(IkReal(x11197),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11200.valid){
continue;
}
IkReal x11198=((1.0)*(x11200.value));
IkReal x11199=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11198)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11198)));
IkReal gconst4=(x11197*x11199);
IkReal gconst5=((1.0)*r20*x11199);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11201=((-1.0)*r21);
CheckValue<IkReal> x11204 = IKatan2WithCheck(IkReal(x11201),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11204.valid){
continue;
}
IkReal x11202=((1.0)*(x11204.value));
IkReal x11203=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11202)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11202)));
IkReal gconst4=(x11201*x11203);
IkReal gconst5=((1.0)*r20*x11203);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11205=((-1.0)*r21);
CheckValue<IkReal> x11208 = IKatan2WithCheck(IkReal(x11205),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11208.valid){
continue;
}
IkReal x11206=((1.0)*(x11208.value));
IkReal x11207=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11206)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11206)));
IkReal gconst4=(x11205*x11207);
IkReal gconst5=((1.0)*r20*x11207);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11209=((-1.0)*r21);
CheckValue<IkReal> x11212 = IKatan2WithCheck(IkReal(x11209),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11212.valid){
continue;
}
IkReal x11210=((1.0)*(x11212.value));
IkReal x11211=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11210)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11210)));
IkReal gconst4=(x11209*x11211);
IkReal gconst5=((1.0)*r20*x11211);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11213=(gconst5*r00);
IkReal x11214=(gconst4*r01);
CheckValue<IkReal> x11215 = IKatan2WithCheck(IkReal((x11213+(((-1.0)*x11214)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11215.valid){
continue;
}
CheckValue<IkReal> x11216=IKPowWithIntegerCheck(IKsign(((x11214*x11214)+(x11213*x11213)+(((-2.0)*x11213*x11214))+(r02*r02))),-1);
if(!x11216.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11215.value)+(((1.5707963267949)*(x11216.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11217=IKsin(j4);
IkReal x11218=IKcos(j4);
IkReal x11219=(gconst4*r11);
IkReal x11220=(gconst5*r10);
IkReal x11221=(gconst4*r01);
IkReal x11222=(gconst5*r00);
IkReal x11223=(gconst4*r21);
IkReal x11224=(gconst5*r20);
IkReal x11225=((1.0)*x11218);
IkReal x11226=((1.0)*x11217);
evalcond[0]=(((x11217*x11223))+(((-1.0)*x11224*x11226))+(((-1.0)*r22*x11225)));
evalcond[1]=(((x11217*x11219))+(((-1.0)*x11220*x11226))+(((-1.0)*r12*x11225)));
evalcond[2]=(((x11218*x11222))+(((-1.0)*x11221*x11225))+(((-1.0)*r02*x11226)));
evalcond[3]=((1.0)+(((-1.0)*x11222*x11226))+((x11217*x11221))+(((-1.0)*r02*x11225)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11219*x11225))+((x11218*x11220))+(((-1.0)*r12*x11226)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11223*x11225))+((x11218*x11224))+(((-1.0)*r22*x11226)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11227=((1.0)*gconst5);
CheckValue<IkReal> x11228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11227))+(((-1.0)*gconst4*r20)))),-1);
if(!x11228.valid){
continue;
}
CheckValue<IkReal> x11229 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11227)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11228.value)))+(x11229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11230=IKsin(j4);
IkReal x11231=IKcos(j4);
IkReal x11232=(gconst4*r11);
IkReal x11233=(gconst5*r10);
IkReal x11234=(gconst4*r01);
IkReal x11235=(gconst5*r00);
IkReal x11236=(gconst4*r21);
IkReal x11237=(gconst5*r20);
IkReal x11238=((1.0)*x11231);
IkReal x11239=((1.0)*x11230);
evalcond[0]=((((-1.0)*x11237*x11239))+((x11230*x11236))+(((-1.0)*r22*x11238)));
evalcond[1]=((((-1.0)*x11233*x11239))+((x11230*x11232))+(((-1.0)*r12*x11238)));
evalcond[2]=((((-1.0)*r02*x11239))+((x11231*x11235))+(((-1.0)*x11234*x11238)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11238))+((x11230*x11234))+(((-1.0)*x11235*x11239)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11232*x11238))+((x11231*x11233))+(((-1.0)*r12*x11239)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x11231*x11237))+(((-1.0)*r22*x11239))+(((-1.0)*x11236*x11238)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11240=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11240.valid){
continue;
}
CheckValue<IkReal> x11241 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11241.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11240.value)))+(x11241.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11242=IKsin(j4);
IkReal x11243=IKcos(j4);
IkReal x11244=(gconst4*r11);
IkReal x11245=(gconst5*r10);
IkReal x11246=(gconst4*r01);
IkReal x11247=(gconst5*r00);
IkReal x11248=(gconst4*r21);
IkReal x11249=(gconst5*r20);
IkReal x11250=((1.0)*x11243);
IkReal x11251=((1.0)*x11242);
evalcond[0]=(((x11242*x11248))+(((-1.0)*x11249*x11251))+(((-1.0)*r22*x11250)));
evalcond[1]=(((x11242*x11244))+(((-1.0)*x11245*x11251))+(((-1.0)*r12*x11250)));
evalcond[2]=((((-1.0)*r02*x11251))+((x11243*x11247))+(((-1.0)*x11246*x11250)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11250))+((x11242*x11246))+(((-1.0)*x11247*x11251)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x11244*x11250))+((x11243*x11245))+((cj1*sj2))+(((-1.0)*r12*x11251)));
evalcond[5]=(((x11243*x11249))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11248*x11250))+(((-1.0)*r22*x11251)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11252=((-1.0)*r21);
CheckValue<IkReal> x11255 = IKatan2WithCheck(IkReal(x11252),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11255.valid){
continue;
}
IkReal x11253=((1.0)*(x11255.value));
IkReal x11254=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11253)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11253)));
IkReal gconst4=(x11252*x11254);
IkReal gconst5=((1.0)*r20*x11254);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11256=((-1.0)*r21);
CheckValue<IkReal> x11259 = IKatan2WithCheck(IkReal(x11256),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11259.valid){
continue;
}
IkReal x11257=((1.0)*(x11259.value));
IkReal x11258=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11257)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11257)));
IkReal gconst4=(x11256*x11258);
IkReal gconst5=((1.0)*r20*x11258);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11260=((-1.0)*r21);
CheckValue<IkReal> x11263 = IKatan2WithCheck(IkReal(x11260),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11263.valid){
continue;
}
IkReal x11261=((1.0)*(x11263.value));
IkReal x11262=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11261)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11261)));
IkReal gconst4=(x11260*x11262);
IkReal gconst5=((1.0)*r20*x11262);
IkReal x11264=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11268=IKPowWithIntegerCheck(x11264,-1);
if(!x11268.valid){
continue;
}
IkReal x11265=x11268.value;
IkReal x11266=((1.0)*x11265);
IkReal x11267=((((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r20*r21*x11265))+(((-1.0)*x11266*(r00*r00)*(r20*r20)))+(((-1.0)*x11266*(r01*r01)*(r21*r21))));
j4eval[0]=x11267;
j4eval[1]=IKsign(x11267);
j4eval[2]=r02;
j4eval[3]=x11264;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11269=(gconst4*r01);
IkReal x11270=(gconst5*r00);
CheckValue<IkReal> x11271 = IKatan2WithCheck(IkReal((x11269+(((-1.0)*x11270)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11271.valid){
continue;
}
CheckValue<IkReal> x11272=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x11269*x11269)))+(((-1.0)*(x11270*x11270)))+(((-1.0)*(r02*r02)))+(((2.0)*x11269*x11270)))),-1);
if(!x11272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11271.value)+(((1.5707963267949)*(x11272.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11273=IKcos(j4);
IkReal x11274=IKsin(j4);
IkReal x11275=(gconst4*r11);
IkReal x11276=(gconst5*r10);
IkReal x11277=(gconst5*r00);
IkReal x11278=(gconst5*r20);
IkReal x11279=((1.0)*x11273);
IkReal x11280=(gconst4*x11273);
IkReal x11281=((1.0)*x11274);
IkReal x11282=(gconst4*x11274);
evalcond[0]=((((-1.0)*x11277*x11279))+((r02*x11274))+((r01*x11280)));
evalcond[1]=((((-1.0)*x11278*x11281))+((r21*x11282))+(((-1.0)*r22*x11279)));
evalcond[2]=((((-1.0)*x11276*x11281))+(((-1.0)*r12*x11279))+((x11274*x11275)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11279))+((r01*x11282))+(((-1.0)*x11277*x11281)));
evalcond[4]=(((cj2*sj1))+((x11273*x11275))+((r12*x11274))+((cj1*sj2))+(((-1.0)*x11276*x11279)));
evalcond[5]=(((r22*x11274))+((r21*x11280))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11278*x11279)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11283=((1.0)*gconst5);
CheckValue<IkReal> x11284=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11283))+(((-1.0)*gconst4*r20)))),-1);
if(!x11284.valid){
continue;
}
CheckValue<IkReal> x11285 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11283))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11285.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11284.value)))+(x11285.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11286=IKcos(j4);
IkReal x11287=IKsin(j4);
IkReal x11288=(gconst4*r11);
IkReal x11289=(gconst5*r10);
IkReal x11290=(gconst5*r00);
IkReal x11291=(gconst5*r20);
IkReal x11292=((1.0)*x11286);
IkReal x11293=(gconst4*x11286);
IkReal x11294=((1.0)*x11287);
IkReal x11295=(gconst4*x11287);
evalcond[0]=(((r01*x11293))+((r02*x11287))+(((-1.0)*x11290*x11292)));
evalcond[1]=((((-1.0)*x11291*x11294))+(((-1.0)*r22*x11292))+((r21*x11295)));
evalcond[2]=(((x11287*x11288))+(((-1.0)*x11289*x11294))+(((-1.0)*r12*x11292)));
evalcond[3]=((1.0)+((r01*x11295))+(((-1.0)*r02*x11292))+(((-1.0)*x11290*x11294)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11289*x11292))+((r12*x11287))+((x11286*x11288)));
evalcond[5]=(((r22*x11287))+(((-1.0)*x11291*x11292))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x11293)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11296=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11296.valid){
continue;
}
CheckValue<IkReal> x11297 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11296.value)))+(x11297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11298=IKcos(j4);
IkReal x11299=IKsin(j4);
IkReal x11300=(gconst4*r11);
IkReal x11301=(gconst5*r10);
IkReal x11302=(gconst5*r00);
IkReal x11303=(gconst5*r20);
IkReal x11304=((1.0)*x11298);
IkReal x11305=(gconst4*x11298);
IkReal x11306=((1.0)*x11299);
IkReal x11307=(gconst4*x11299);
evalcond[0]=(((r01*x11305))+((r02*x11299))+(((-1.0)*x11302*x11304)));
evalcond[1]=((((-1.0)*x11303*x11306))+(((-1.0)*r22*x11304))+((r21*x11307)));
evalcond[2]=((((-1.0)*x11301*x11306))+((x11299*x11300))+(((-1.0)*r12*x11304)));
evalcond[3]=((1.0)+((r01*x11307))+(((-1.0)*x11302*x11306))+(((-1.0)*r02*x11304)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11301*x11304))+((r12*x11299))+((x11298*x11300)));
evalcond[5]=((((-1.0)*cj1*cj2))+(((-1.0)*x11303*x11304))+((sj1*sj2))+((r21*x11305))+((r22*x11299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11308=((-1.0)*r21);
CheckValue<IkReal> x11311 = IKatan2WithCheck(IkReal(x11308),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11311.valid){
continue;
}
IkReal x11309=((1.0)*(x11311.value));
IkReal x11310=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11309)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11309)));
IkReal gconst4=(x11308*x11310);
IkReal gconst5=((1.0)*r20*x11310);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11312=((-1.0)*r21);
CheckValue<IkReal> x11315 = IKatan2WithCheck(IkReal(x11312),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11315.valid){
continue;
}
IkReal x11313=((1.0)*(x11315.value));
IkReal x11314=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11313)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11313)));
IkReal gconst4=(x11312*x11314);
IkReal gconst5=((1.0)*r20*x11314);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11316=((-1.0)*r21);
CheckValue<IkReal> x11319 = IKatan2WithCheck(IkReal(x11316),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11319.valid){
continue;
}
IkReal x11317=((1.0)*(x11319.value));
IkReal x11318=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11317)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11317)));
IkReal gconst4=(x11316*x11318);
IkReal gconst5=((1.0)*r20*x11318);
IkReal x11320=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x11324=IKPowWithIntegerCheck(x11320,-1);
if(!x11324.valid){
continue;
}
IkReal x11321=x11324.value;
IkReal x11322=((1.0)*x11321);
IkReal x11323=((((-2.0)*r00*r01*r20*r21*x11321))+(((-1.0)*(r02*r02)))+(((-1.0)*x11322*(r01*r01)*(r21*r21)))+(((-1.0)*x11322*(r00*r00)*(r20*r20))));
j4eval[0]=x11323;
j4eval[1]=IKsign(x11323);
j4eval[2]=r02;
j4eval[3]=x11320;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11325=(gconst4*r01);
IkReal x11326=(gconst5*r00);
CheckValue<IkReal> x11327=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11326*x11326)))+(((-1.0)*(x11325*x11325)))+(((2.0)*x11325*x11326)))),-1);
if(!x11327.valid){
continue;
}
CheckValue<IkReal> x11328 = IKatan2WithCheck(IkReal((x11325+(((-1.0)*x11326)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x11328.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11327.value)))+(x11328.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11329=IKcos(j4);
IkReal x11330=IKsin(j4);
IkReal x11331=(gconst5*r10);
IkReal x11332=(gconst5*r00);
IkReal x11333=(gconst5*r20);
IkReal x11334=((1.0)*x11329);
IkReal x11335=(gconst4*x11330);
IkReal x11336=(gconst4*x11329);
IkReal x11337=((1.0)*x11330);
evalcond[0]=((((-1.0)*x11332*x11334))+((r01*x11336))+((r02*x11330)));
evalcond[1]=((((-1.0)*x11333*x11337))+(((-1.0)*r22*x11334))+((r21*x11335)));
evalcond[2]=((((-1.0)*r12*x11334))+((r11*x11335))+(((-1.0)*x11331*x11337)));
evalcond[3]=((1.0)+(((-1.0)*x11332*x11337))+((r01*x11335))+(((-1.0)*r02*x11334)));
evalcond[4]=((((-1.0)*x11333*x11334))+((cj2*sj1))+((cj1*sj2))+((r22*x11330))+((r21*x11336)));
evalcond[5]=(((r11*x11336))+((r12*x11330))+(((-1.0)*sj1*sj2))+(((-1.0)*x11331*x11334))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11338=((1.0)*gconst5);
CheckValue<IkReal> x11339 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst4*r11))+(((-1.0)*r10*x11338)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11339.valid){
continue;
}
CheckValue<IkReal> x11340=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11338))+(((-1.0)*gconst4*r20)))),-1);
if(!x11340.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11339.value)+(((1.5707963267949)*(x11340.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11341=IKcos(j4);
IkReal x11342=IKsin(j4);
IkReal x11343=(gconst5*r10);
IkReal x11344=(gconst5*r00);
IkReal x11345=(gconst5*r20);
IkReal x11346=((1.0)*x11341);
IkReal x11347=(gconst4*x11342);
IkReal x11348=(gconst4*x11341);
IkReal x11349=((1.0)*x11342);
evalcond[0]=((((-1.0)*x11344*x11346))+((r01*x11348))+((r02*x11342)));
evalcond[1]=((((-1.0)*r22*x11346))+(((-1.0)*x11345*x11349))+((r21*x11347)));
evalcond[2]=((((-1.0)*x11343*x11349))+((r11*x11347))+(((-1.0)*r12*x11346)));
evalcond[3]=((1.0)+(((-1.0)*x11344*x11349))+((r01*x11347))+(((-1.0)*r02*x11346)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*x11345*x11346))+((r22*x11342))+((r21*x11348)));
evalcond[5]=((((-1.0)*x11343*x11346))+((r11*x11348))+(((-1.0)*sj1*sj2))+((r12*x11342))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11350=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11350.valid){
continue;
}
CheckValue<IkReal> x11351 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11351.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11350.value)))+(x11351.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11352=IKcos(j4);
IkReal x11353=IKsin(j4);
IkReal x11354=(gconst5*r10);
IkReal x11355=(gconst5*r00);
IkReal x11356=(gconst5*r20);
IkReal x11357=((1.0)*x11352);
IkReal x11358=(gconst4*x11353);
IkReal x11359=(gconst4*x11352);
IkReal x11360=((1.0)*x11353);
evalcond[0]=(((r02*x11353))+((r01*x11359))+(((-1.0)*x11355*x11357)));
evalcond[1]=((((-1.0)*x11356*x11360))+(((-1.0)*r22*x11357))+((r21*x11358)));
evalcond[2]=((((-1.0)*r12*x11357))+((r11*x11358))+(((-1.0)*x11354*x11360)));
evalcond[3]=((1.0)+(((-1.0)*x11355*x11360))+((r01*x11358))+(((-1.0)*r02*x11357)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r21*x11359))+((r22*x11353))+(((-1.0)*x11356*x11357)));
evalcond[5]=(((r12*x11353))+((r11*x11359))+(((-1.0)*sj1*sj2))+((cj1*cj2))+(((-1.0)*x11354*x11357)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11361=((-1.0)*r21);
CheckValue<IkReal> x11364 = IKatan2WithCheck(IkReal(x11361),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11364.valid){
continue;
}
IkReal x11362=((1.0)*(x11364.value));
IkReal x11363=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11362)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11362)));
IkReal gconst4=(x11361*x11363);
IkReal gconst5=((1.0)*r20*x11363);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11365=((-1.0)*r21);
CheckValue<IkReal> x11368 = IKatan2WithCheck(IkReal(x11365),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11368.valid){
continue;
}
IkReal x11366=((1.0)*(x11368.value));
IkReal x11367=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11366)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11366)));
IkReal gconst4=(x11365*x11367);
IkReal gconst5=((1.0)*r20*x11367);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11369=((-1.0)*r21);
CheckValue<IkReal> x11372 = IKatan2WithCheck(IkReal(x11369),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11372.valid){
continue;
}
IkReal x11370=((1.0)*(x11372.value));
IkReal x11371=x10163;
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11370)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11370)));
IkReal gconst4=(x11369*x11371);
IkReal gconst5=((1.0)*r20*x11371);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11373=(gconst5*r00);
IkReal x11374=(gconst4*r01);
CheckValue<IkReal> x11375 = IKatan2WithCheck(IkReal(((((-1.0)*x11374))+x11373)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11375.valid){
continue;
}
CheckValue<IkReal> x11376=IKPowWithIntegerCheck(IKsign(((x11373*x11373)+(((-2.0)*x11373*x11374))+(r02*r02)+(x11374*x11374))),-1);
if(!x11376.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11375.value)+(((1.5707963267949)*(x11376.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11377=IKsin(j4);
IkReal x11378=IKcos(j4);
IkReal x11379=(gconst4*r11);
IkReal x11380=(gconst5*r10);
IkReal x11381=(gconst5*r00);
IkReal x11382=(gconst5*r20);
IkReal x11383=((1.0)*x11378);
IkReal x11384=(gconst4*x11377);
IkReal x11385=((1.0)*x11377);
evalcond[0]=((((-1.0)*x11382*x11385))+(((-1.0)*r22*x11383))+((r21*x11384)));
evalcond[1]=((((-1.0)*x11380*x11385))+((x11377*x11379))+(((-1.0)*r12*x11383)));
evalcond[2]=(((x11378*x11381))+(((-1.0)*r02*x11385))+(((-1.0)*gconst4*r01*x11383)));
evalcond[3]=((1.0)+(((-1.0)*x11381*x11385))+((r01*x11384))+(((-1.0)*r02*x11383)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst4*r21*x11383))+((x11378*x11382))+((cj1*sj2))+(((-1.0)*r22*x11385)));
evalcond[5]=(((x11378*x11380))+(((-1.0)*x11379*x11383))+(((-1.0)*sj1*sj2))+(((-1.0)*r12*x11385))+((cj1*cj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11386=((1.0)*gconst5);
CheckValue<IkReal> x11387 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11386))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11387.valid){
continue;
}
CheckValue<IkReal> x11388=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11386))+(((-1.0)*gconst4*r20)))),-1);
if(!x11388.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11387.value)+(((1.5707963267949)*(x11388.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11389=IKsin(j4);
IkReal x11390=IKcos(j4);
IkReal x11391=(gconst4*r11);
IkReal x11392=(gconst5*r10);
IkReal x11393=(gconst5*r00);
IkReal x11394=(gconst5*r20);
IkReal x11395=((1.0)*x11390);
IkReal x11396=(gconst4*x11389);
IkReal x11397=((1.0)*x11389);
evalcond[0]=((((-1.0)*r22*x11395))+((r21*x11396))+(((-1.0)*x11394*x11397)));
evalcond[1]=((((-1.0)*x11392*x11397))+((x11389*x11391))+(((-1.0)*r12*x11395)));
evalcond[2]=((((-1.0)*gconst4*r01*x11395))+(((-1.0)*r02*x11397))+((x11390*x11393)));
evalcond[3]=((1.0)+(((-1.0)*x11393*x11397))+((r01*x11396))+(((-1.0)*r02*x11395)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11395))+(((-1.0)*r22*x11397))+((x11390*x11394)));
evalcond[5]=((((-1.0)*sj1*sj2))+(((-1.0)*x11391*x11395))+((cj1*cj2))+((x11390*x11392))+(((-1.0)*r12*x11397)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11398=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11398.valid){
continue;
}
CheckValue<IkReal> x11399 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11399.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11398.value)))+(x11399.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11400=IKsin(j4);
IkReal x11401=IKcos(j4);
IkReal x11402=(gconst4*r11);
IkReal x11403=(gconst5*r10);
IkReal x11404=(gconst5*r00);
IkReal x11405=(gconst5*r20);
IkReal x11406=((1.0)*x11401);
IkReal x11407=(gconst4*x11400);
IkReal x11408=((1.0)*x11400);
evalcond[0]=(((r21*x11407))+(((-1.0)*x11405*x11408))+(((-1.0)*r22*x11406)));
evalcond[1]=(((x11400*x11402))+(((-1.0)*x11403*x11408))+(((-1.0)*r12*x11406)));
evalcond[2]=((((-1.0)*r02*x11408))+((x11401*x11404))+(((-1.0)*gconst4*r01*x11406)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11406))+(((-1.0)*x11404*x11408))+((r01*x11407)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*gconst4*r21*x11406))+((x11401*x11405))+(((-1.0)*r22*x11408)));
evalcond[5]=((((-1.0)*x11402*x11406))+(((-1.0)*sj1*sj2))+((x11401*x11403))+((cj1*cj2))+(((-1.0)*r12*x11408)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11409=((-1.0)*r21);
IkReal x11410=((-1.0)*r20);
CheckValue<IkReal> x11412 = IKatan2WithCheck(IkReal(x11409),IkReal(x11410),IKFAST_ATAN2_MAGTHRESH);
if(!x11412.valid){
continue;
}
IkReal x11411=((1.0)*(x11412.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11411)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11410);
rxp0_2=(py*r00);
rxp1_0=(py*x11409);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11411)));
IkReal gconst4=x11409;
IkReal gconst5=((1.0)*r20);
IkReal x11413=((1.0)*r01*r21);
IkReal x11414=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11414))+(((-1.0)*x11413)));
j4eval[1]=((((-1.0)*cj3*x11413))+(((-1.0)*cj3*x11414)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11415=((-1.0)*r21);
IkReal x11416=((-1.0)*r20);
CheckValue<IkReal> x11418 = IKatan2WithCheck(IkReal(x11415),IkReal(x11416),IKFAST_ATAN2_MAGTHRESH);
if(!x11418.valid){
continue;
}
IkReal x11417=((1.0)*(x11418.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11417)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11416);
rxp0_2=(py*r00);
rxp1_0=(py*x11415);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11417)));
IkReal gconst4=x11415;
IkReal gconst5=((1.0)*r20);
IkReal x11419=((1.0)*r01*r21);
IkReal x11420=((1.0)*r00*r20);
j4eval[0]=((((-1.0)*x11419))+(((-1.0)*x11420)));
j4eval[1]=(((sj3*x11419))+((sj3*x11420)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x11421=((-1.0)*r21);
IkReal x11422=((-1.0)*r20);
CheckValue<IkReal> x11424 = IKatan2WithCheck(IkReal(x11421),IkReal(x11422),IKFAST_ATAN2_MAGTHRESH);
if(!x11424.valid){
continue;
}
IkReal x11423=((1.0)*(x11424.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11423)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(py*x11422);
rxp0_2=(py*r00);
rxp1_0=(py*x11421);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11423)));
IkReal gconst4=x11421;
IkReal gconst5=((1.0)*r20);
IkReal x11425=((1.0)*cj3);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=((((-1.0)*r01*r21*x11425))+(((-1.0)*r00*r20*x11425)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11426=((1.0)*gconst5);
CheckValue<IkReal> x11427=IKPowWithIntegerCheck(cj3,-1);
if(!x11427.valid){
continue;
}
CheckValue<IkReal> x11428=IKPowWithIntegerCheck(r12,-1);
if(!x11428.valid){
continue;
}
CheckValue<IkReal> x11429=IKPowWithIntegerCheck((((cj3*gconst4*r01))+(((-1.0)*cj3*r00*x11426))),-1);
if(!x11429.valid){
continue;
}
if( IKabs(((x11427.value)*(x11428.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11429.value)*(((((-1.0)*r01*sj3*x11426))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x11427.value)*(x11428.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x11429.value)*(((((-1.0)*r01*sj3*x11426))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x11427.value)*(x11428.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x11429.value)*(((((-1.0)*r01*sj3*x11426))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11430=IKsin(j4);
IkReal x11431=IKcos(j4);
IkReal x11432=(cj2*sj1);
IkReal x11433=(cj1*sj2);
IkReal x11434=(sj1*sj2);
IkReal x11435=(gconst5*sj3);
IkReal x11436=(gconst5*r00);
IkReal x11437=(cj3*gconst5);
IkReal x11438=(gconst4*sj3);
IkReal x11439=(cj3*gconst4);
IkReal x11440=(cj1*cj2);
IkReal x11441=((1.0)*x11430);
IkReal x11442=(gconst4*x11430);
IkReal x11443=((1.0)*x11431);
IkReal x11444=(x11432+x11433);
IkReal x11445=(x11431*x11435);
IkReal x11446=(x11431*x11439);
evalcond[0]=((-1.0)*r12*x11431);
evalcond[1]=((((-1.0)*gconst5*r20*x11441))+((r21*x11442)));
evalcond[2]=(x11440+((cj3*r12*x11430))+(((-1.0)*x11434)));
evalcond[3]=(x11444+(((-1.0)*r12*sj3*x11441)));
evalcond[4]=((1.0)+(((-1.0)*x11436*x11441))+((r01*x11442)));
evalcond[5]=(((r01*x11435))+((r00*x11438))+(((-1.0)*cj3*x11436*x11443))+((r01*x11446)));
evalcond[6]=(((r00*x11445))+(((-1.0)*r01*x11438*x11443))+((r01*x11437))+((r00*x11439)));
evalcond[7]=(((r20*x11438))+x11444+(((-1.0)*r20*x11437*x11443))+((r21*x11435))+((r21*x11446)));
evalcond[8]=(((r20*x11439))+(((-1.0)*x11440))+x11434+(((-1.0)*r21*x11438*x11443))+((r21*x11437))+((r20*x11445)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11447=((1.0)*gconst4);
IkReal x11448=(gconst5*r00);
CheckValue<IkReal> x11449=IKPowWithIntegerCheck(((((-1.0)*x11448))+((gconst4*r01))),-1);
if(!x11449.valid){
continue;
}
CheckValue<IkReal> x11450=IKPowWithIntegerCheck((((sj3*x11448))+(((-1.0)*r01*sj3*x11447))),-1);
if(!x11450.valid){
continue;
}
if( IKabs(((-1.0)*(x11449.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11450.value)*(((((-1.0)*cj3*r00*x11447))+(((-1.0)*cj3*gconst5*r01)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11449.value)))+IKsqr(((x11450.value)*(((((-1.0)*cj3*r00*x11447))+(((-1.0)*cj3*gconst5*r01))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11449.value)), ((x11450.value)*(((((-1.0)*cj3*r00*x11447))+(((-1.0)*cj3*gconst5*r01))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11451=IKsin(j4);
IkReal x11452=IKcos(j4);
IkReal x11453=(cj2*sj1);
IkReal x11454=(cj1*sj2);
IkReal x11455=(sj1*sj2);
IkReal x11456=(gconst5*sj3);
IkReal x11457=(gconst5*r00);
IkReal x11458=(cj3*gconst5);
IkReal x11459=(gconst4*sj3);
IkReal x11460=(cj3*gconst4);
IkReal x11461=(cj1*cj2);
IkReal x11462=((1.0)*x11451);
IkReal x11463=(gconst4*x11451);
IkReal x11464=((1.0)*x11452);
IkReal x11465=(x11454+x11453);
IkReal x11466=(x11452*x11456);
IkReal x11467=(x11452*x11460);
evalcond[0]=((-1.0)*r12*x11452);
evalcond[1]=((((-1.0)*gconst5*r20*x11462))+((r21*x11463)));
evalcond[2]=(x11461+(((-1.0)*x11455))+((cj3*r12*x11451)));
evalcond[3]=(x11465+(((-1.0)*r12*sj3*x11462)));
evalcond[4]=((1.0)+((r01*x11463))+(((-1.0)*x11457*x11462)));
evalcond[5]=(((r01*x11467))+(((-1.0)*cj3*x11457*x11464))+((r01*x11456))+((r00*x11459)));
evalcond[6]=((((-1.0)*r01*x11459*x11464))+((r01*x11458))+((r00*x11466))+((r00*x11460)));
evalcond[7]=(x11465+((r20*x11459))+((r21*x11456))+((r21*x11467))+(((-1.0)*r20*x11458*x11464)));
evalcond[8]=((((-1.0)*r21*x11459*x11464))+x11455+((r21*x11458))+((r20*x11460))+((r20*x11466))+(((-1.0)*x11461)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11468=((1.0)*gconst5);
IkReal x11469=(gconst4*r01);
CheckValue<IkReal> x11470=IKPowWithIntegerCheck((x11469+(((-1.0)*r00*x11468))),-1);
if(!x11470.valid){
continue;
}
CheckValue<IkReal> x11471=IKPowWithIntegerCheck(((((-1.0)*cj3*r00*x11468))+((cj3*x11469))),-1);
if(!x11471.valid){
continue;
}
if( IKabs(((-1.0)*(x11470.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11471.value)*(((((-1.0)*r01*sj3*x11468))+(((-1.0)*gconst4*r00*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x11470.value)))+IKsqr(((x11471.value)*(((((-1.0)*r01*sj3*x11468))+(((-1.0)*gconst4*r00*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x11470.value)), ((x11471.value)*(((((-1.0)*r01*sj3*x11468))+(((-1.0)*gconst4*r00*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11472=IKsin(j4);
IkReal x11473=IKcos(j4);
IkReal x11474=(cj2*sj1);
IkReal x11475=(cj1*sj2);
IkReal x11476=(sj1*sj2);
IkReal x11477=(gconst5*sj3);
IkReal x11478=(gconst5*r00);
IkReal x11479=(cj3*gconst5);
IkReal x11480=(gconst4*sj3);
IkReal x11481=(cj3*gconst4);
IkReal x11482=(cj1*cj2);
IkReal x11483=((1.0)*x11472);
IkReal x11484=(gconst4*x11472);
IkReal x11485=((1.0)*x11473);
IkReal x11486=(x11474+x11475);
IkReal x11487=(x11473*x11477);
IkReal x11488=(x11473*x11481);
evalcond[0]=((-1.0)*r12*x11473);
evalcond[1]=((((-1.0)*gconst5*r20*x11483))+((r21*x11484)));
evalcond[2]=((((-1.0)*x11476))+x11482+((cj3*r12*x11472)));
evalcond[3]=(x11486+(((-1.0)*r12*sj3*x11483)));
evalcond[4]=((1.0)+(((-1.0)*x11478*x11483))+((r01*x11484)));
evalcond[5]=(((r00*x11480))+(((-1.0)*cj3*x11478*x11485))+((r01*x11488))+((r01*x11477)));
evalcond[6]=((((-1.0)*r01*x11480*x11485))+((r00*x11481))+((r00*x11487))+((r01*x11479)));
evalcond[7]=(((r20*x11480))+x11486+(((-1.0)*r20*x11479*x11485))+((r21*x11477))+((r21*x11488)));
evalcond[8]=(((r20*x11487))+((r20*x11481))+x11476+(((-1.0)*x11482))+(((-1.0)*r21*x11480*x11485))+((r21*x11479)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11489=gconst4*gconst4;
IkReal x11490=gconst5*gconst5;
IkReal x11491=(r01*r20);
IkReal x11492=(gconst4*sj3);
IkReal x11493=(r01*r21);
IkReal x11494=((1.0)*cj3);
IkReal x11495=(r00*r21);
IkReal x11496=(r00*r20);
IkReal x11497=(cj3*gconst4*gconst5);
IkReal x11498=((1.0)*x11490);
CheckValue<IkReal> x11499 = IKatan2WithCheck(IkReal((((r00*r22*x11492))+((gconst5*r01*r22*sj3)))),IkReal(((((-1.0)*sj3*x11491*x11498))+((sj3*x11489*x11495))+((gconst5*x11492*x11493))+(((-1.0)*gconst5*x11492*x11496)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11499.valid){
continue;
}
CheckValue<IkReal> x11500=IKPowWithIntegerCheck(IKsign(((((-1.0)*x11490*x11494*x11496))+((x11491*x11497))+((x11495*x11497))+(((-1.0)*x11489*x11493*x11494))+(((-1.0)*r02*r22*x11494)))),-1);
if(!x11500.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11499.value)+(((1.5707963267949)*(x11500.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11501=IKsin(j4);
IkReal x11502=IKcos(j4);
IkReal x11503=(cj2*sj1);
IkReal x11504=(cj1*sj2);
IkReal x11505=(gconst5*sj3);
IkReal x11506=(gconst4*r11);
IkReal x11507=(sj1*sj2);
IkReal x11508=(gconst5*r10);
IkReal x11509=(cj1*cj2);
IkReal x11510=(gconst4*r01);
IkReal x11511=(gconst5*r00);
IkReal x11512=(gconst4*sj3);
IkReal x11513=(cj3*gconst5);
IkReal x11514=(cj3*gconst4);
IkReal x11515=(gconst4*r21);
IkReal x11516=((1.0)*x11502);
IkReal x11517=((1.0)*x11501);
IkReal x11518=(cj3*x11501);
IkReal x11519=(cj3*x11502);
IkReal x11520=(x11504+x11503);
evalcond[0]=((((-1.0)*r22*x11516))+((x11501*x11515))+(((-1.0)*gconst5*r20*x11517)));
evalcond[1]=(((x11501*x11506))+(((-1.0)*x11508*x11517))+(((-1.0)*r12*x11516)));
evalcond[2]=((1.0)+(((-1.0)*x11511*x11517))+(((-1.0)*r02*x11516))+((x11501*x11510)));
evalcond[3]=(((x11510*x11519))+(((-1.0)*cj3*x11511*x11516))+((r01*x11505))+((r02*x11518))+((r00*x11512)));
evalcond[4]=(((r01*x11513))+(((-1.0)*sj3*x11510*x11516))+((r00*x11502*x11505))+(((-1.0)*r02*sj3*x11517))+((r00*x11514)));
evalcond[5]=(x11520+((r20*x11512))+((r21*x11505))+((r22*x11518))+((r21*x11502*x11514))+(((-1.0)*r20*x11513*x11516)));
evalcond[6]=(x11509+(((-1.0)*cj3*x11508*x11516))+((r11*x11505))+((x11506*x11519))+(((-1.0)*x11507))+((r12*x11518))+((r10*x11512)));
evalcond[7]=((((-1.0)*sj3*x11506*x11516))+x11520+(((-1.0)*r12*sj3*x11517))+((r10*x11502*x11505))+((r10*x11514))+((r11*x11513)));
evalcond[8]=(x11507+((r20*x11514))+(((-1.0)*r21*x11512*x11516))+(((-1.0)*r22*sj3*x11517))+(((-1.0)*x11509))+((r20*x11502*x11505))+((r21*x11513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11521=((1.0)*gconst5);
CheckValue<IkReal> x11522=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x11521))+(((-1.0)*gconst4*r20)))),-1);
if(!x11522.valid){
continue;
}
CheckValue<IkReal> x11523 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x11521))+((gconst4*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11523.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11522.value)))+(x11523.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11524=IKsin(j4);
IkReal x11525=IKcos(j4);
IkReal x11526=(cj2*sj1);
IkReal x11527=(cj1*sj2);
IkReal x11528=(gconst5*sj3);
IkReal x11529=(gconst4*r11);
IkReal x11530=(sj1*sj2);
IkReal x11531=(gconst5*r10);
IkReal x11532=(cj1*cj2);
IkReal x11533=(gconst4*r01);
IkReal x11534=(gconst5*r00);
IkReal x11535=(gconst4*sj3);
IkReal x11536=(cj3*gconst5);
IkReal x11537=(cj3*gconst4);
IkReal x11538=(gconst4*r21);
IkReal x11539=((1.0)*x11525);
IkReal x11540=((1.0)*x11524);
IkReal x11541=(cj3*x11524);
IkReal x11542=(cj3*x11525);
IkReal x11543=(x11526+x11527);
evalcond[0]=(((x11524*x11538))+(((-1.0)*gconst5*r20*x11540))+(((-1.0)*r22*x11539)));
evalcond[1]=((((-1.0)*r12*x11539))+((x11524*x11529))+(((-1.0)*x11531*x11540)));
evalcond[2]=((1.0)+((x11524*x11533))+(((-1.0)*x11534*x11540))+(((-1.0)*r02*x11539)));
evalcond[3]=((((-1.0)*cj3*x11534*x11539))+((x11533*x11542))+((r00*x11535))+((r01*x11528))+((r02*x11541)));
evalcond[4]=((((-1.0)*sj3*x11533*x11539))+(((-1.0)*r02*sj3*x11540))+((r01*x11536))+((r00*x11537))+((r00*x11525*x11528)));
evalcond[5]=(x11543+(((-1.0)*r20*x11536*x11539))+((r21*x11528))+((r20*x11535))+((r22*x11541))+((r21*x11525*x11537)));
evalcond[6]=(x11532+((r11*x11528))+(((-1.0)*cj3*x11531*x11539))+((r10*x11535))+((r12*x11541))+((x11529*x11542))+(((-1.0)*x11530)));
evalcond[7]=(((r10*x11525*x11528))+x11543+(((-1.0)*sj3*x11529*x11539))+((r11*x11536))+((r10*x11537))+(((-1.0)*r12*sj3*x11540)));
evalcond[8]=(x11530+((r21*x11536))+((r20*x11525*x11528))+(((-1.0)*r21*x11535*x11539))+(((-1.0)*r22*sj3*x11540))+((r20*x11537))+(((-1.0)*x11532)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11544=IKPowWithIntegerCheck(IKsign((((gconst5*r11))+((gconst4*r10)))),-1);
if(!x11544.valid){
continue;
}
CheckValue<IkReal> x11545 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst4*r21))+(((-1.0)*gconst5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11545.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11544.value)))+(x11545.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11546=IKsin(j4);
IkReal x11547=IKcos(j4);
IkReal x11548=(cj2*sj1);
IkReal x11549=(cj1*sj2);
IkReal x11550=(gconst5*sj3);
IkReal x11551=(gconst4*r11);
IkReal x11552=(sj1*sj2);
IkReal x11553=(gconst5*r10);
IkReal x11554=(cj1*cj2);
IkReal x11555=(gconst4*r01);
IkReal x11556=(gconst5*r00);
IkReal x11557=(gconst4*sj3);
IkReal x11558=(cj3*gconst5);
IkReal x11559=(cj3*gconst4);
IkReal x11560=(gconst4*r21);
IkReal x11561=((1.0)*x11547);
IkReal x11562=((1.0)*x11546);
IkReal x11563=(cj3*x11546);
IkReal x11564=(cj3*x11547);
IkReal x11565=(x11548+x11549);
evalcond[0]=((((-1.0)*gconst5*r20*x11562))+((x11546*x11560))+(((-1.0)*r22*x11561)));
evalcond[1]=(((x11546*x11551))+(((-1.0)*r12*x11561))+(((-1.0)*x11553*x11562)));
evalcond[2]=((1.0)+((x11546*x11555))+(((-1.0)*x11556*x11562))+(((-1.0)*r02*x11561)));
evalcond[3]=(((x11555*x11564))+(((-1.0)*cj3*x11556*x11561))+((r02*x11563))+((r00*x11557))+((r01*x11550)));
evalcond[4]=((((-1.0)*r02*sj3*x11562))+((r00*x11559))+((r01*x11558))+(((-1.0)*sj3*x11555*x11561))+((r00*x11547*x11550)));
evalcond[5]=(((r21*x11550))+x11565+((r22*x11563))+(((-1.0)*r20*x11558*x11561))+((r21*x11547*x11559))+((r20*x11557)));
evalcond[6]=(((r11*x11550))+x11554+((r10*x11557))+(((-1.0)*cj3*x11553*x11561))+((r12*x11563))+((x11551*x11564))+(((-1.0)*x11552)));
evalcond[7]=(((r11*x11558))+x11565+((r10*x11559))+(((-1.0)*sj3*x11551*x11561))+((r10*x11547*x11550))+(((-1.0)*r12*sj3*x11562)));
evalcond[8]=(((r21*x11558))+x11552+((r20*x11547*x11550))+(((-1.0)*r22*sj3*x11562))+(((-1.0)*r21*x11557*x11561))+((r20*x11559))+(((-1.0)*x11554)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x11566=((-1.0)*r21);
IkReal x11567=((-1.0)*px);
CheckValue<IkReal> x11569 = IKatan2WithCheck(IkReal(x11566),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11569.valid){
continue;
}
IkReal x11568=((1.0)*(x11569.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11568)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11567);
rxp1_1=(px*r21);
rxp1_2=(r11*x11567);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11568)));
IkReal gconst4=x11566;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11570=((-1.0)*r21);
IkReal x11571=((-1.0)*px);
CheckValue<IkReal> x11573 = IKatan2WithCheck(IkReal(x11570),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11573.valid){
continue;
}
IkReal x11572=((1.0)*(x11573.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11572)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11571);
rxp1_1=(px*r21);
rxp1_2=(r11*x11571);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11572)));
IkReal gconst4=x11570;
IkReal gconst5=((1.0)*r20);
IkReal x11574=((1.0)*cj3);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
j4eval[1]=(((x11574*(r10*r10)))+(((-1.0)*x11574))+(((-1.0)*x11574*(r21*r21))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11575=((-1.0)*r21);
IkReal x11576=((-1.0)*px);
CheckValue<IkReal> x11578 = IKatan2WithCheck(IkReal(x11575),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11578.valid){
continue;
}
IkReal x11577=((1.0)*(x11578.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11577)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11576);
rxp1_1=(px*r21);
rxp1_2=(r11*x11576);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11577)));
IkReal gconst4=x11575;
IkReal gconst5=((1.0)*r20);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11579=((-1.0)*r21);
IkReal x11580=((-1.0)*px);
CheckValue<IkReal> x11582 = IKatan2WithCheck(IkReal(x11579),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11582.valid){
continue;
}
IkReal x11581=((1.0)*(x11582.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11581)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11580);
rxp1_1=(px*r21);
rxp1_2=(r11*x11580);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11581)));
IkReal gconst4=x11579;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11583=((-1.0)*r21);
IkReal x11584=((-1.0)*px);
CheckValue<IkReal> x11586 = IKatan2WithCheck(IkReal(x11583),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11586.valid){
continue;
}
IkReal x11585=((1.0)*(x11586.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11585)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11584);
rxp1_1=(px*r21);
rxp1_2=(r11*x11584);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11585)));
IkReal gconst4=x11583;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((1.0)+(((1.0)*(r21*r21)))+(((-1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11587=((-1.0)*r21);
IkReal x11588=((-1.0)*px);
CheckValue<IkReal> x11590 = IKatan2WithCheck(IkReal(x11587),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11590.valid){
continue;
}
IkReal x11589=((1.0)*(x11590.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11589)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11588);
rxp1_1=(px*r21);
rxp1_2=(r11*x11588);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11589)));
IkReal gconst4=x11587;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11593=IKPowWithIntegerCheck((((gconst5*r10))+(((-1.0)*gconst4*r11))),-1);
if(!x11593.valid){
continue;
}
IkReal x11591=x11593.value;
IkReal x11592=(sj0*x11591);
cj4array[0]=(((cj1*sj2*x11592))+((cj2*sj1*x11592)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11594=IKsin(j4);
IkReal x11595=IKcos(j4);
IkReal x11596=(gconst5*r20);
IkReal x11597=(gconst4*x11594);
IkReal x11598=((1.0)*x11595);
IkReal x11599=((1.0)*x11594);
evalcond[0]=((-1.0)*r02*x11594);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x11598)));
evalcond[2]=((((-1.0)*x11596*x11599))+((r21*x11597)));
evalcond[3]=((((-1.0)*gconst5*r10*x11599))+((r11*x11597)));
evalcond[4]=((((-1.0)*gconst4*r21*x11598))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x11595*x11596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11601=IKPowWithIntegerCheck((((gconst5*r20))+(((-1.0)*gconst4*r21))),-1);
if(!x11601.valid){
continue;
}
IkReal x11600=x11601.value;
cj4array[0]=((((-1.0)*sj1*sj2*x11600))+((cj1*cj2*x11600)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11602=IKsin(j4);
IkReal x11603=IKcos(j4);
IkReal x11604=(gconst5*r10);
IkReal x11605=((1.0)*sj0);
IkReal x11606=(gconst4*x11602);
IkReal x11607=((1.0)*x11603);
IkReal x11608=((1.0)*x11602);
evalcond[0]=((-1.0)*r02*x11602);
evalcond[1]=((((-1.0)*r02*x11607))+(((-1.0)*x11605)));
evalcond[2]=((((-1.0)*gconst5*r20*x11608))+((r21*x11606)));
evalcond[3]=((((-1.0)*x11604*x11608))+((r11*x11606)));
evalcond[4]=((((-1.0)*gconst4*r11*x11607))+((x11603*x11604))+(((-1.0)*cj1*sj2*x11605))+(((-1.0)*cj2*sj1*x11605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11609=IKPowWithIntegerCheck(r02,-1);
if(!x11609.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11609.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11610=IKsin(j4);
IkReal x11611=IKcos(j4);
IkReal x11612=((1.0)*sj0);
IkReal x11613=(gconst5*x11611);
IkReal x11614=(gconst4*x11610);
IkReal x11615=((1.0)*gconst4*x11611);
IkReal x11616=((1.0)*gconst5*x11610);
evalcond[0]=((-1.0)*r02*x11610);
evalcond[1]=(((r21*x11614))+(((-1.0)*r20*x11616)));
evalcond[2]=(((r11*x11614))+(((-1.0)*r10*x11616)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x11615))+((r20*x11613)));
evalcond[4]=((((-1.0)*r11*x11615))+(((-1.0)*cj1*sj2*x11612))+(((-1.0)*cj2*sj1*x11612))+((r10*x11613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11617=((-1.0)*r21);
IkReal x11618=((-1.0)*px);
CheckValue<IkReal> x11620 = IKatan2WithCheck(IkReal(x11617),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11620.valid){
continue;
}
IkReal x11619=((1.0)*(x11620.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11619)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11618);
rxp1_1=(px*r21);
rxp1_2=(r11*x11618);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11619)));
IkReal gconst4=x11617;
IkReal gconst5=((1.0)*r20);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11621=((-1.0)*r21);
IkReal x11622=((-1.0)*px);
CheckValue<IkReal> x11624 = IKatan2WithCheck(IkReal(x11621),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11624.valid){
continue;
}
IkReal x11623=((1.0)*(x11624.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11623)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11622);
rxp1_1=(px*r21);
rxp1_2=(r11*x11622);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11623)));
IkReal gconst4=x11621;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((-1.0)+(((-1.0)*(r21*r21)))+(((1.0)*(r10*r10))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11625=((-1.0)*r21);
IkReal x11626=((-1.0)*px);
CheckValue<IkReal> x11628 = IKatan2WithCheck(IkReal(x11625),IkReal(((-1.0)*r20)),IKFAST_ATAN2_MAGTHRESH);
if(!x11628.valid){
continue;
}
IkReal x11627=((1.0)*(x11628.value));
sj5=gconst4;
cj5=gconst5;
j5=((3.14159265)+(((-1.0)*x11627)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x11626);
rxp1_1=(px*r21);
rxp1_2=(r11*x11626);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst3=((3.14159265358979)+(((-1.0)*x11627)));
IkReal gconst4=x11625;
IkReal gconst5=((1.0)*r20);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11631=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11631.valid){
continue;
}
IkReal x11629=x11631.value;
IkReal x11630=(sj0*x11629);
cj4array[0]=(((cj1*sj2*x11630))+((cj2*sj1*x11630)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11632=IKsin(j4);
IkReal x11633=IKcos(j4);
IkReal x11634=(gconst5*r20);
IkReal x11635=(gconst4*x11632);
IkReal x11636=((1.0)*x11633);
IkReal x11637=((1.0)*x11632);
evalcond[0]=(r02*x11632);
evalcond[1]=((((-1.0)*r02*x11636))+(((-1.0)*sj0)));
evalcond[2]=(((r21*x11635))+(((-1.0)*x11634*x11637)));
evalcond[3]=(((r11*x11635))+(((-1.0)*gconst5*r10*x11637)));
evalcond[4]=(((gconst4*r21*x11633))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x11634*x11636)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11639=IKPowWithIntegerCheck((((gconst4*r21))+(((-1.0)*gconst5*r20))),-1);
if(!x11639.valid){
continue;
}
IkReal x11638=x11639.value;
cj4array[0]=(((cj1*cj2*x11638))+(((-1.0)*sj1*sj2*x11638)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11640=IKsin(j4);
IkReal x11641=IKcos(j4);
IkReal x11642=(gconst4*r11);
IkReal x11643=((1.0)*sj0);
IkReal x11644=(gconst5*r10);
IkReal x11645=((1.0)*x11641);
IkReal x11646=((1.0)*x11640);
evalcond[0]=(r02*x11640);
evalcond[1]=((((-1.0)*r02*x11645))+(((-1.0)*x11643)));
evalcond[2]=(((gconst4*r21*x11640))+(((-1.0)*gconst5*r20*x11646)));
evalcond[3]=(((x11640*x11642))+(((-1.0)*x11644*x11646)));
evalcond[4]=((((-1.0)*cj2*sj1*x11643))+((x11641*x11642))+(((-1.0)*x11644*x11645))+(((-1.0)*cj1*sj2*x11643)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x11647=IKPowWithIntegerCheck(r02,-1);
if(!x11647.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x11647.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x11648=IKsin(j4);
IkReal x11649=IKcos(j4);
IkReal x11650=(gconst4*r11);
IkReal x11651=((1.0)*cj1);
IkReal x11652=(gconst4*r21);
IkReal x11653=((1.0)*gconst5*x11649);
IkReal x11654=((1.0)*gconst5*x11648);
evalcond[0]=(r02*x11648);
evalcond[1]=(((x11648*x11652))+(((-1.0)*r20*x11654)));
evalcond[2]=((((-1.0)*r10*x11654))+((x11648*x11650)));
evalcond[3]=(((sj1*sj2))+((x11649*x11652))+(((-1.0)*r20*x11653))+(((-1.0)*cj2*x11651)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x11653))+((x11649*x11650))+(((-1.0)*sj0*sj2*x11651)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11656=IKPowWithIntegerCheck(r02,-1);
if(!x11656.valid){
continue;
}
IkReal x11655=x11656.value;
CheckValue<IkReal> x11657=IKPowWithIntegerCheck(cj3,-1);
if(!x11657.valid){
continue;
}
if( IKabs((x11655*(x11657.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x11655)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x11655*(x11657.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x11655))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x11655*(x11657.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x11655));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11658=IKsin(j4);
IkReal x11659=IKcos(j4);
IkReal x11660=(gconst5*sj3);
IkReal x11661=(gconst4*r11);
IkReal x11662=(sj1*sj2);
IkReal x11663=((1.0)*gconst5);
IkReal x11664=(cj2*sj1);
IkReal x11665=((1.0)*sj0);
IkReal x11666=((1.0)*cj0);
IkReal x11667=(gconst4*r21);
IkReal x11668=(cj1*sj2);
IkReal x11669=(cj3*gconst4);
IkReal x11670=(gconst4*sj3);
IkReal x11671=(cj3*gconst5);
IkReal x11672=(r20*x11659);
IkReal x11673=((1.0)*cj1*cj2);
IkReal x11674=(r10*x11659);
IkReal x11675=(cj3*x11659);
IkReal x11676=(r02*x11658);
IkReal x11677=((1.0)*sj3*x11659);
evalcond[0]=((((-1.0)*x11665))+(((-1.0)*r02*x11659)));
evalcond[1]=(((x11658*x11667))+(((-1.0)*r20*x11658*x11663)));
evalcond[2]=(cj0+((x11658*x11661))+(((-1.0)*r10*x11658*x11663)));
evalcond[3]=(((cj0*x11662))+((cj3*x11676))+(((-1.0)*cj1*cj2*x11666)));
evalcond[4]=((((-1.0)*x11666*x11668))+(((-1.0)*sj3*x11676))+(((-1.0)*x11664*x11666)));
evalcond[5]=(((r21*x11660))+(((-1.0)*cj3*x11663*x11672))+x11664+x11668+((r20*x11670))+((x11667*x11675)));
evalcond[6]=(x11662+((r20*x11669))+(((-1.0)*x11667*x11677))+((x11660*x11672))+((r21*x11671))+(((-1.0)*x11673)));
evalcond[7]=((((-1.0)*cj3*x11663*x11674))+((x11661*x11675))+((r11*x11660))+((r10*x11670))+(((-1.0)*cj1*cj2*x11665))+((sj0*x11662)));
evalcond[8]=((((-1.0)*x11664*x11665))+((r11*x11671))+((x11660*x11674))+(((-1.0)*x11665*x11668))+((r10*x11669))+(((-1.0)*x11661*x11677)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11678=((1.0)*gconst5);
CheckValue<IkReal> x11679=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*r10*x11678))),-1);
if(!x11679.valid){
continue;
}
CheckValue<IkReal> x11680=IKPowWithIntegerCheck(((((-1.0)*cj3*r20*x11678))+((cj3*gconst4*r21))),-1);
if(!x11680.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11679.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x11680.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11678)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11679.value)))+IKsqr(((x11680.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11678))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11679.value)), ((x11680.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst4*r20*sj3))+(((-1.0)*r21*sj3*x11678))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11681=IKsin(j4);
IkReal x11682=IKcos(j4);
IkReal x11683=(gconst5*sj3);
IkReal x11684=(gconst4*r11);
IkReal x11685=(sj1*sj2);
IkReal x11686=((1.0)*gconst5);
IkReal x11687=(cj2*sj1);
IkReal x11688=((1.0)*sj0);
IkReal x11689=((1.0)*cj0);
IkReal x11690=(gconst4*r21);
IkReal x11691=(cj1*sj2);
IkReal x11692=(cj3*gconst4);
IkReal x11693=(gconst4*sj3);
IkReal x11694=(cj3*gconst5);
IkReal x11695=(r20*x11682);
IkReal x11696=((1.0)*cj1*cj2);
IkReal x11697=(r10*x11682);
IkReal x11698=(cj3*x11682);
IkReal x11699=(r02*x11681);
IkReal x11700=((1.0)*sj3*x11682);
evalcond[0]=((((-1.0)*r02*x11682))+(((-1.0)*x11688)));
evalcond[1]=((((-1.0)*r20*x11681*x11686))+((x11681*x11690)));
evalcond[2]=(cj0+((x11681*x11684))+(((-1.0)*r10*x11681*x11686)));
evalcond[3]=(((cj0*x11685))+(((-1.0)*cj1*cj2*x11689))+((cj3*x11699)));
evalcond[4]=((((-1.0)*x11687*x11689))+(((-1.0)*x11689*x11691))+(((-1.0)*sj3*x11699)));
evalcond[5]=(x11687+x11691+((r20*x11693))+((r21*x11683))+((x11690*x11698))+(((-1.0)*cj3*x11686*x11695)));
evalcond[6]=(x11685+(((-1.0)*x11690*x11700))+((r20*x11692))+((x11683*x11695))+(((-1.0)*x11696))+((r21*x11694)));
evalcond[7]=(((x11684*x11698))+((sj0*x11685))+((r11*x11683))+((r10*x11693))+(((-1.0)*cj1*cj2*x11688))+(((-1.0)*cj3*x11686*x11697)));
evalcond[8]=((((-1.0)*x11687*x11688))+(((-1.0)*x11688*x11691))+((x11683*x11697))+((r10*x11692))+((r11*x11694))+(((-1.0)*x11684*x11700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11701=IKPowWithIntegerCheck((((gconst4*r11))+(((-1.0)*gconst5*r10))),-1);
if(!x11701.valid){
continue;
}
CheckValue<IkReal> x11702=IKPowWithIntegerCheck(r02,-1);
if(!x11702.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x11701.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x11702.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x11701.value)))+IKsqr(((-1.0)*sj0*(x11702.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x11701.value)), ((-1.0)*sj0*(x11702.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11703=IKsin(j4);
IkReal x11704=IKcos(j4);
IkReal x11705=(gconst5*sj3);
IkReal x11706=(gconst4*r11);
IkReal x11707=(sj1*sj2);
IkReal x11708=((1.0)*gconst5);
IkReal x11709=(cj2*sj1);
IkReal x11710=((1.0)*sj0);
IkReal x11711=((1.0)*cj0);
IkReal x11712=(gconst4*r21);
IkReal x11713=(cj1*sj2);
IkReal x11714=(cj3*gconst4);
IkReal x11715=(gconst4*sj3);
IkReal x11716=(cj3*gconst5);
IkReal x11717=(r20*x11704);
IkReal x11718=((1.0)*cj1*cj2);
IkReal x11719=(r10*x11704);
IkReal x11720=(cj3*x11704);
IkReal x11721=(r02*x11703);
IkReal x11722=((1.0)*sj3*x11704);
evalcond[0]=((((-1.0)*x11710))+(((-1.0)*r02*x11704)));
evalcond[1]=((((-1.0)*r20*x11703*x11708))+((x11703*x11712)));
evalcond[2]=(((x11703*x11706))+cj0+(((-1.0)*r10*x11703*x11708)));
evalcond[3]=(((cj0*x11707))+((cj3*x11721))+(((-1.0)*cj1*cj2*x11711)));
evalcond[4]=((((-1.0)*sj3*x11721))+(((-1.0)*x11709*x11711))+(((-1.0)*x11711*x11713)));
evalcond[5]=(x11713+x11709+((r21*x11705))+((r20*x11715))+((x11712*x11720))+(((-1.0)*cj3*x11708*x11717)));
evalcond[6]=(x11707+(((-1.0)*x11718))+((x11705*x11717))+((r20*x11714))+(((-1.0)*x11712*x11722))+((r21*x11716)));
evalcond[7]=(((x11706*x11720))+(((-1.0)*cj3*x11708*x11719))+(((-1.0)*cj1*cj2*x11710))+((r10*x11715))+((sj0*x11707))+((r11*x11705)));
evalcond[8]=(((x11705*x11719))+(((-1.0)*x11709*x11710))+(((-1.0)*x11706*x11722))+(((-1.0)*x11710*x11713))+((r10*x11714))+((r11*x11716)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11723=((1.0)*sj0);
IkReal x11724=((1.0)*gconst4);
CheckValue<IkReal> x11725 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x11723))+(((-1.0)*cj0*r02)))),IkReal((((cj0*gconst5*r00))+(((-1.0)*gconst4*r11*x11723))+(((-1.0)*cj0*r01*x11724))+((gconst5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11725.valid){
continue;
}
CheckValue<IkReal> x11726=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11724))+(((-1.0)*gconst5*r21)))),-1);
if(!x11726.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11725.value)+(((1.5707963267949)*(x11726.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11727=IKsin(j4);
IkReal x11728=IKcos(j4);
IkReal x11729=(gconst5*sj3);
IkReal x11730=(cj3*gconst5);
IkReal x11731=(gconst4*r11);
IkReal x11732=(sj1*sj2);
IkReal x11733=(cj2*sj1);
IkReal x11734=((1.0)*sj0);
IkReal x11735=(gconst4*r01);
IkReal x11736=(gconst4*r21);
IkReal x11737=((1.0)*cj0);
IkReal x11738=(cj1*sj2);
IkReal x11739=(gconst4*sj3);
IkReal x11740=(cj3*gconst4);
IkReal x11741=((1.0)*x11728);
IkReal x11742=((1.0)*cj1*cj2);
IkReal x11743=(cj3*x11727);
IkReal x11744=(cj3*x11728);
IkReal x11745=((1.0)*gconst5*x11727);
IkReal x11746=((1.0)*sj3*x11727);
evalcond[0]=((((-1.0)*r20*x11745))+((x11727*x11736))+(((-1.0)*r22*x11741)));
evalcond[1]=(((x11727*x11731))+cj0+(((-1.0)*r10*x11745))+(((-1.0)*r12*x11741)));
evalcond[2]=(((x11727*x11735))+(((-1.0)*r00*x11745))+(((-1.0)*x11734))+(((-1.0)*r02*x11741)));
evalcond[3]=(x11733+x11738+((x11736*x11744))+(((-1.0)*r20*x11730*x11741))+((r20*x11739))+((r22*x11743))+((r21*x11729)));
evalcond[4]=(x11732+(((-1.0)*x11742))+(((-1.0)*r22*x11746))+((r20*x11740))+((r21*x11730))+((r20*x11728*x11729))+(((-1.0)*sj3*x11736*x11741)));
evalcond[5]=(((x11735*x11744))+((r00*x11739))+((cj0*x11732))+((r01*x11729))+(((-1.0)*cj1*cj2*x11737))+((r02*x11743))+(((-1.0)*r00*x11730*x11741)));
evalcond[6]=(((sj0*x11732))+(((-1.0)*r10*x11730*x11741))+(((-1.0)*cj1*cj2*x11734))+((r10*x11739))+((x11731*x11744))+((r11*x11729))+((r12*x11743)));
evalcond[7]=(((r01*x11730))+((r00*x11740))+((r00*x11728*x11729))+(((-1.0)*x11737*x11738))+(((-1.0)*sj3*x11735*x11741))+(((-1.0)*r02*x11746))+(((-1.0)*x11733*x11737)));
evalcond[8]=((((-1.0)*x11734*x11738))+((r11*x11730))+((r10*x11728*x11729))+(((-1.0)*sj3*x11731*x11741))+((r10*x11740))+(((-1.0)*r12*x11746))+(((-1.0)*x11733*x11734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11747=((1.0)*gconst5);
CheckValue<IkReal> x11748 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x11747))+((gconst4*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11748.valid){
continue;
}
CheckValue<IkReal> x11749=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x11747))+(((-1.0)*gconst4*r10)))),-1);
if(!x11749.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11748.value)+(((1.5707963267949)*(x11749.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11750=IKsin(j4);
IkReal x11751=IKcos(j4);
IkReal x11752=(gconst5*sj3);
IkReal x11753=(cj3*gconst5);
IkReal x11754=(gconst4*r11);
IkReal x11755=(sj1*sj2);
IkReal x11756=(cj2*sj1);
IkReal x11757=((1.0)*sj0);
IkReal x11758=(gconst4*r01);
IkReal x11759=(gconst4*r21);
IkReal x11760=((1.0)*cj0);
IkReal x11761=(cj1*sj2);
IkReal x11762=(gconst4*sj3);
IkReal x11763=(cj3*gconst4);
IkReal x11764=((1.0)*x11751);
IkReal x11765=((1.0)*cj1*cj2);
IkReal x11766=(cj3*x11750);
IkReal x11767=(cj3*x11751);
IkReal x11768=((1.0)*gconst5*x11750);
IkReal x11769=((1.0)*sj3*x11750);
evalcond[0]=((((-1.0)*r22*x11764))+((x11750*x11759))+(((-1.0)*r20*x11768)));
evalcond[1]=((((-1.0)*r12*x11764))+cj0+(((-1.0)*r10*x11768))+((x11750*x11754)));
evalcond[2]=(((x11750*x11758))+(((-1.0)*r02*x11764))+(((-1.0)*x11757))+(((-1.0)*r00*x11768)));
evalcond[3]=(((x11759*x11767))+x11761+x11756+((r20*x11762))+(((-1.0)*r20*x11753*x11764))+((r22*x11766))+((r21*x11752)));
evalcond[4]=(x11755+((r20*x11763))+(((-1.0)*sj3*x11759*x11764))+((r20*x11751*x11752))+(((-1.0)*r22*x11769))+(((-1.0)*x11765))+((r21*x11753)));
evalcond[5]=(((cj0*x11755))+(((-1.0)*cj1*cj2*x11760))+(((-1.0)*r00*x11753*x11764))+((r02*x11766))+((x11758*x11767))+((r00*x11762))+((r01*x11752)));
evalcond[6]=((((-1.0)*cj1*cj2*x11757))+((r11*x11752))+((r10*x11762))+((r12*x11766))+((sj0*x11755))+(((-1.0)*r10*x11753*x11764))+((x11754*x11767)));
evalcond[7]=((((-1.0)*sj3*x11758*x11764))+(((-1.0)*x11760*x11761))+(((-1.0)*r02*x11769))+(((-1.0)*x11756*x11760))+((r00*x11751*x11752))+((r00*x11763))+((r01*x11753)));
evalcond[8]=(((r10*x11751*x11752))+(((-1.0)*r12*x11769))+((r11*x11753))+((r10*x11763))+(((-1.0)*x11757*x11761))+(((-1.0)*x11756*x11757))+(((-1.0)*sj3*x11754*x11764)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11770=((1.0)*gconst5);
CheckValue<IkReal> x11771 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x11770))+((cj0*gconst4*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11771.valid){
continue;
}
CheckValue<IkReal> x11772=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst4*r00))+(((-1.0)*r01*x11770)))),-1);
if(!x11772.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11771.value)+(((1.5707963267949)*(x11772.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11773=IKsin(j4);
IkReal x11774=IKcos(j4);
IkReal x11775=(gconst5*sj3);
IkReal x11776=(cj3*gconst5);
IkReal x11777=(gconst4*r11);
IkReal x11778=(sj1*sj2);
IkReal x11779=(cj2*sj1);
IkReal x11780=((1.0)*sj0);
IkReal x11781=(gconst4*r01);
IkReal x11782=(gconst4*r21);
IkReal x11783=((1.0)*cj0);
IkReal x11784=(cj1*sj2);
IkReal x11785=(gconst4*sj3);
IkReal x11786=(cj3*gconst4);
IkReal x11787=((1.0)*x11774);
IkReal x11788=((1.0)*cj1*cj2);
IkReal x11789=(cj3*x11773);
IkReal x11790=(cj3*x11774);
IkReal x11791=((1.0)*gconst5*x11773);
IkReal x11792=((1.0)*sj3*x11773);
evalcond[0]=((((-1.0)*r20*x11791))+(((-1.0)*r22*x11787))+((x11773*x11782)));
evalcond[1]=(cj0+(((-1.0)*r12*x11787))+(((-1.0)*r10*x11791))+((x11773*x11777)));
evalcond[2]=((((-1.0)*r00*x11791))+((x11773*x11781))+(((-1.0)*r02*x11787))+(((-1.0)*x11780)));
evalcond[3]=(x11779+x11784+((r20*x11785))+((r22*x11789))+(((-1.0)*r20*x11776*x11787))+((x11782*x11790))+((r21*x11775)));
evalcond[4]=(x11778+(((-1.0)*sj3*x11782*x11787))+((r20*x11786))+((r20*x11774*x11775))+((r21*x11776))+(((-1.0)*r22*x11792))+(((-1.0)*x11788)));
evalcond[5]=(((r02*x11789))+(((-1.0)*cj1*cj2*x11783))+((r01*x11775))+((cj0*x11778))+((x11781*x11790))+((r00*x11785))+(((-1.0)*r00*x11776*x11787)));
evalcond[6]=(((x11777*x11790))+((sj0*x11778))+((r12*x11789))+(((-1.0)*cj1*cj2*x11780))+((r10*x11785))+((r11*x11775))+(((-1.0)*r10*x11776*x11787)));
evalcond[7]=((((-1.0)*x11779*x11783))+(((-1.0)*sj3*x11781*x11787))+((r00*x11774*x11775))+(((-1.0)*r02*x11792))+(((-1.0)*x11783*x11784))+((r01*x11776))+((r00*x11786)));
evalcond[8]=((((-1.0)*x11779*x11780))+((r10*x11786))+((r11*x11776))+(((-1.0)*r12*x11792))+(((-1.0)*x11780*x11784))+((r10*x11774*x11775))+(((-1.0)*sj3*x11777*x11787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11793=((-1.0)*r10);
IkReal x11795 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11795)==0){
continue;
}
IkReal x11794=pow(x11795,-0.5);
CheckValue<IkReal> x11796 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11793),IKFAST_ATAN2_MAGTHRESH);
if(!x11796.valid){
continue;
}
IkReal gconst6=((-1.0)*(x11796.value));
IkReal gconst7=(r11*x11794);
IkReal gconst8=(x11793*x11794);
CheckValue<IkReal> x11797 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11797.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x11797.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11798=((-1.0)*r10);
IkReal x11799=x11794;
CheckValue<IkReal> x11801 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(x11798),IKFAST_ATAN2_MAGTHRESH);
if(!x11801.valid){
continue;
}
IkReal x11800=((-1.0)*(x11801.value));
sj5=gconst7;
cj5=gconst8;
j5=x11800;
IkReal gconst6=x11800;
IkReal gconst7=(r11*x11799);
IkReal gconst8=(x11798*x11799);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11802=((1.0)*sj0);
IkReal x11803=((1.0)*gconst7);
CheckValue<IkReal> x11804=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x11803))+(((-1.0)*gconst8*r21)))),-1);
if(!x11804.valid){
continue;
}
CheckValue<IkReal> x11805 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x11802)))),IkReal((((gconst8*r10*sj0))+(((-1.0)*gconst7*r11*x11802))+(((-1.0)*cj0*r01*x11803))+((cj0*gconst8*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11805.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11804.value)))+(x11805.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11806=IKsin(j4);
IkReal x11807=IKcos(j4);
IkReal x11808=(gconst7*sj3);
IkReal x11809=(cj3*gconst8);
IkReal x11810=(cj3*gconst7);
IkReal x11811=(sj1*sj2);
IkReal x11812=(cj2*sj1);
IkReal x11813=((1.0)*sj0);
IkReal x11814=((1.0)*cj0);
IkReal x11815=(gconst8*sj3);
IkReal x11816=(cj1*sj2);
IkReal x11817=((1.0)*x11807);
IkReal x11818=((1.0)*x11806);
IkReal x11819=((1.0)*cj1*cj2);
IkReal x11820=(cj3*x11806);
IkReal x11821=(gconst7*x11806);
IkReal x11822=(x11807*x11815);
evalcond[0]=((((-1.0)*r22*x11817))+((r21*x11821))+(((-1.0)*gconst8*r20*x11818)));
evalcond[1]=(cj0+(((-1.0)*gconst8*r10*x11818))+(((-1.0)*r12*x11817))+((r11*x11821)));
evalcond[2]=((((-1.0)*r02*x11817))+(((-1.0)*gconst8*r00*x11818))+(((-1.0)*x11813))+((r01*x11821)));
evalcond[3]=(((r21*x11807*x11810))+((r21*x11815))+((r22*x11820))+((r20*x11808))+(((-1.0)*r20*x11809*x11817))+x11816+x11812);
evalcond[4]=((((-1.0)*r22*sj3*x11818))+((r21*x11809))+(((-1.0)*r21*x11808*x11817))+((r20*x11822))+(((-1.0)*x11819))+((r20*x11810))+x11811);
evalcond[5]=(((r01*x11807*x11810))+((r00*x11808))+((r01*x11815))+(((-1.0)*r00*x11809*x11817))+((r02*x11820))+((cj0*x11811))+(((-1.0)*cj1*cj2*x11814)));
evalcond[6]=(((sj0*x11811))+((r11*x11807*x11810))+((r12*x11820))+((r10*x11808))+((r11*x11815))+(((-1.0)*r10*x11809*x11817))+(((-1.0)*cj1*cj2*x11813)));
evalcond[7]=((((-1.0)*x11812*x11814))+((r00*x11810))+(((-1.0)*r01*x11808*x11817))+(((-1.0)*x11814*x11816))+((r00*x11822))+((r01*x11809))+(((-1.0)*r02*sj3*x11818)));
evalcond[8]=((((-1.0)*x11812*x11813))+(((-1.0)*x11813*x11816))+((r10*x11822))+((r11*x11809))+((r10*x11810))+(((-1.0)*r12*sj3*x11818))+(((-1.0)*r11*x11808*x11817)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11823=((1.0)*gconst8);
CheckValue<IkReal> x11824 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst7*r21))+(((-1.0)*cj0*r20*x11823)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11824.valid){
continue;
}
CheckValue<IkReal> x11825=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst7*r00))+(((-1.0)*r01*x11823)))),-1);
if(!x11825.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11824.value)+(((1.5707963267949)*(x11825.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x11826=IKsin(j4);
IkReal x11827=IKcos(j4);
IkReal x11828=(gconst7*sj3);
IkReal x11829=(cj3*gconst8);
IkReal x11830=(cj3*gconst7);
IkReal x11831=(sj1*sj2);
IkReal x11832=(cj2*sj1);
IkReal x11833=((1.0)*sj0);
IkReal x11834=((1.0)*cj0);
IkReal x11835=(gconst8*sj3);
IkReal x11836=(cj1*sj2);
IkReal x11837=((1.0)*x11827);
IkReal x11838=((1.0)*x11826);
IkReal x11839=((1.0)*cj1*cj2);
IkReal x11840=(cj3*x11826);
IkReal x11841=(gconst7*x11826);
IkReal x11842=(x11827*x11835);
evalcond[0]=(((r21*x11841))+(((-1.0)*gconst8*r20*x11838))+(((-1.0)*r22*x11837)));
evalcond[1]=((((-1.0)*gconst8*r10*x11838))+cj0+(((-1.0)*r12*x11837))+((r11*x11841)));
evalcond[2]=((((-1.0)*gconst8*r00*x11838))+((r01*x11841))+(((-1.0)*x11833))+(((-1.0)*r02*x11837)));
evalcond[3]=(((r21*x11827*x11830))+((r21*x11835))+((r22*x11840))+((r20*x11828))+(((-1.0)*r20*x11829*x11837))+x11836+x11832);
evalcond[4]=(((r20*x11842))+(((-1.0)*r21*x11828*x11837))+(((-1.0)*r22*sj3*x11838))+(((-1.0)*x11839))+((r20*x11830))+((r21*x11829))+x11831);
evalcond[5]=((((-1.0)*r00*x11829*x11837))+((cj0*x11831))+((r00*x11828))+((r02*x11840))+((r01*x11827*x11830))+(((-1.0)*cj1*cj2*x11834))+((r01*x11835)));
evalcond[6]=(((r11*x11827*x11830))+((r10*x11828))+(((-1.0)*r10*x11829*x11837))+((r11*x11835))+((r12*x11840))+((sj0*x11831))+(((-1.0)*cj1*cj2*x11833)));
evalcond[7]=((((-1.0)*r02*sj3*x11838))+(((-1.0)*r01*x11828*x11837))+((r00*x11842))+(((-1.0)*x11834*x11836))+(((-1.0)*x11832*x11834))+((r01*x11829))+((r00*x11830)));
evalcond[8]=((((-1.0)*x11833*x11836))+((r10*x11830))+(((-1.0)*x11832*x11833))+(((-1.0)*r12*sj3*x11838))+((r11*x11829))+((r10*x11842))+(((-1.0)*r11*x11828*x11837)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x11843=((-1.0)*r11);
IkReal x11845 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x11845)==0){
continue;
}
IkReal x11844=pow(x11845,-0.5);
CheckValue<IkReal> x11846 = IKatan2WithCheck(IkReal(x11843),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11846.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x11846.value))));
IkReal gconst10=(x11843*x11844);
IkReal gconst11=((1.0)*r10*x11844);
CheckValue<IkReal> x11847 = IKatan2WithCheck(IkReal(((-1.0)*r11)),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11847.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x11847.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11848=((-1.0)*r11);
CheckValue<IkReal> x11851 = IKatan2WithCheck(IkReal(x11848),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11851.valid){
continue;
}
IkReal x11849=((1.0)*(x11851.value));
IkReal x11850=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11849)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11849)));
IkReal gconst10=(x11848*x11850);
IkReal gconst11=((1.0)*r10*x11850);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11852=((-1.0)*r11);
CheckValue<IkReal> x11855 = IKatan2WithCheck(IkReal(x11852),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11855.valid){
continue;
}
IkReal x11853=((1.0)*(x11855.value));
IkReal x11854=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11853)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11853)));
IkReal gconst10=(x11852*x11854);
IkReal gconst11=((1.0)*r10*x11854);
IkReal x11856=r12*r12;
IkReal x11857=((1.0)*sj0);
IkReal x11858=(cj0*r02);
IkReal x11859=x11844;
j4eval[0]=((IKabs((((sj0*x11856*x11859))+(((-1.0)*x11857*x11859))+((r12*x11858*x11859)))))+(IKabs(((((-1.0)*x11858))+(((-1.0)*r12*x11857))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11860=((-1.0)*r11);
CheckValue<IkReal> x11863 = IKatan2WithCheck(IkReal(x11860),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11863.valid){
continue;
}
IkReal x11861=((1.0)*(x11863.value));
IkReal x11862=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11861)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11861)));
IkReal gconst10=(x11860*x11862);
IkReal gconst11=((1.0)*r10*x11862);
IkReal x11864=((1.0)*cj3);
CheckValue<IkReal> x11869=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x11869.valid){
continue;
}
IkReal x11865=x11869.value;
IkReal x11866=(cj3*x11865);
IkReal x11867=(x11864*x11865);
IkReal x11868=((((-1.0)*x11867*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x11866))+(((-1.0)*x11864*(r22*r22)))+(((-1.0)*x11867*(r10*r10)*(r20*r20))));
j4eval[0]=x11868;
j4eval[1]=IKsign(x11868);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x11870=((-1.0)*r11);
CheckValue<IkReal> x11873 = IKatan2WithCheck(IkReal(x11870),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11873.valid){
continue;
}
IkReal x11871=((1.0)*(x11873.value));
IkReal x11872=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11871)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11871)));
IkReal gconst10=(x11870*x11872);
IkReal gconst11=((1.0)*r10*x11872);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11874=((-1.0)*r11);
CheckValue<IkReal> x11877 = IKatan2WithCheck(IkReal(x11874),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11877.valid){
continue;
}
IkReal x11875=((1.0)*(x11877.value));
IkReal x11876=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11875)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11875)));
IkReal gconst10=(x11874*x11876);
IkReal gconst11=((1.0)*r10*x11876);
IkReal x11878=r12*r12;
IkReal x11879=((1.0)*sj0);
IkReal x11880=(cj0*r02);
IkReal x11881=x11844;
j4eval[0]=((IKabs(((((-1.0)*x11880))+(((-1.0)*r12*x11879)))))+(IKabs(((((-1.0)*x11879*x11881))+((sj0*x11878*x11881))+((r12*x11880*x11881))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11882=((-1.0)*r11);
CheckValue<IkReal> x11885 = IKatan2WithCheck(IkReal(x11882),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11885.valid){
continue;
}
IkReal x11883=((1.0)*(x11885.value));
IkReal x11884=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11883)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11883)));
IkReal gconst10=(x11882*x11884);
IkReal gconst11=((1.0)*r10*x11884);
IkReal x11886=r12*r12;
IkReal x11887=(cj1*cj2*r22);
IkReal x11888=(r22*sj1*sj2);
CheckValue<IkReal> x11892=IKPowWithIntegerCheck(((-1.0)+x11886),-1);
if(!x11892.valid){
continue;
}
IkReal x11889=x11892.value;
if((((1.0)+(((-1.0)*x11886)))) < -0.00001)
continue;
IkReal x11890=IKsqrt(((1.0)+(((-1.0)*x11886))));
IkReal x11891=(r12*x11889*x11890);
j4eval[0]=((IKabs(((((-1.0)*x11887))+x11888)))+(IKabs(((((-1.0)*x11888*x11891))+((x11887*x11891))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11893=((-1.0)*r11);
CheckValue<IkReal> x11896 = IKatan2WithCheck(IkReal(x11893),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11896.valid){
continue;
}
IkReal x11894=((1.0)*(x11896.value));
IkReal x11895=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11894)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11894)));
IkReal gconst10=(x11893*x11895);
IkReal gconst11=((1.0)*r10*x11895);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x11897=((-1.0)*r11);
CheckValue<IkReal> x11900 = IKatan2WithCheck(IkReal(x11897),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11900.valid){
continue;
}
IkReal x11898=((1.0)*(x11900.value));
IkReal x11899=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11898)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11898)));
IkReal gconst10=(x11897*x11899);
IkReal gconst11=((1.0)*r10*x11899);
IkReal x11901=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x11905=IKPowWithIntegerCheck(x11901,-1);
if(!x11905.valid){
continue;
}
IkReal x11902=x11905.value;
IkReal x11903=((1.0)*x11902);
IkReal x11904=((((-1.0)*x11903*(r01*r01)*(r11*r11)))+(((-1.0)*(r02*r02)))+(((-2.0)*r00*r01*r10*r11*x11902))+(((-1.0)*x11903*(r00*r00)*(r10*r10))));
j4eval[0]=x11904;
j4eval[1]=IKsign(x11904);
j4eval[2]=r02;
j4eval[3]=x11901;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11906=((-1.0)*r11);
CheckValue<IkReal> x11909 = IKatan2WithCheck(IkReal(x11906),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11909.valid){
continue;
}
IkReal x11907=((1.0)*(x11909.value));
IkReal x11908=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11907)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11907)));
IkReal gconst10=(x11906*x11908);
IkReal gconst11=((1.0)*r10*x11908);
IkReal x11910=r12*r12;
IkReal x11911=(cj1*cj2*r22);
IkReal x11912=(r22*sj1*sj2);
CheckValue<IkReal> x11916=IKPowWithIntegerCheck(((-1.0)+x11910),-1);
if(!x11916.valid){
continue;
}
IkReal x11913=x11916.value;
if((((1.0)+(((-1.0)*x11910)))) < -0.00001)
continue;
IkReal x11914=IKsqrt(((1.0)+(((-1.0)*x11910))));
IkReal x11915=(r12*x11913*x11914);
j4eval[0]=((IKabs(((((-1.0)*x11912*x11915))+((x11911*x11915)))))+(IKabs((x11912+(((-1.0)*x11911))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11917=(gconst10*r21);
IkReal x11918=(gconst11*r20);
IkReal x11919=(sj1*sj2);
IkReal x11920=(cj1*cj2);
CheckValue<IkReal> x11921=IKPowWithIntegerCheck(IKsign(((x11918*x11918)+(r22*r22)+(x11917*x11917)+(((-2.0)*x11917*x11918)))),-1);
if(!x11921.valid){
continue;
}
CheckValue<IkReal> x11922 = IKatan2WithCheck(IkReal((((r22*x11919))+(((-1.0)*r22*x11920)))),IkReal(((((-1.0)*x11917*x11920))+((x11918*x11920))+((x11917*x11919))+(((-1.0)*x11918*x11919)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11922.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11921.value)))+(x11922.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11923=IKsin(j4);
IkReal x11924=IKcos(j4);
IkReal x11925=((1.0)*cj2);
IkReal x11926=((1.0)*x11924);
IkReal x11927=(gconst10*x11923);
IkReal x11928=((1.0)*x11923);
IkReal x11929=(gconst11*x11924);
IkReal x11930=(gconst11*x11928);
evalcond[0]=(((r21*x11927))+(((-1.0)*r22*x11926))+(((-1.0)*r20*x11930)));
evalcond[1]=((((-1.0)*r10*x11930))+((r11*x11927))+(((-1.0)*r12*x11926)));
evalcond[2]=((((-1.0)*r02*x11928))+((r00*x11929))+(((-1.0)*gconst10*r01*x11926)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11926))+(((-1.0)*r00*x11930))+((r01*x11927)));
evalcond[4]=((((-1.0)*cj1*x11925))+((r20*x11929))+((sj1*sj2))+(((-1.0)*r22*x11928))+(((-1.0)*gconst10*r21*x11926)));
evalcond[5]=(((r10*x11929))+(((-1.0)*gconst10*r11*x11926))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x11928))+(((-1.0)*sj1*x11925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11931=(gconst11*r00);
IkReal x11932=(gconst10*r01);
CheckValue<IkReal> x11933=IKPowWithIntegerCheck(IKsign(((((-1.0)*(r02*r02)))+(((-1.0)*(x11931*x11931)))+(((2.0)*x11931*x11932))+(((-1.0)*(x11932*x11932))))),-1);
if(!x11933.valid){
continue;
}
CheckValue<IkReal> x11934 = IKatan2WithCheck(IkReal((x11931+(((-1.0)*x11932)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11934.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11933.value)))+(x11934.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11935=IKsin(j4);
IkReal x11936=IKcos(j4);
IkReal x11937=((1.0)*cj2);
IkReal x11938=((1.0)*x11936);
IkReal x11939=(gconst10*x11935);
IkReal x11940=((1.0)*x11935);
IkReal x11941=(gconst11*x11936);
IkReal x11942=(gconst11*x11940);
evalcond[0]=((((-1.0)*r20*x11942))+((r21*x11939))+(((-1.0)*r22*x11938)));
evalcond[1]=(((r11*x11939))+(((-1.0)*r12*x11938))+(((-1.0)*r10*x11942)));
evalcond[2]=((((-1.0)*gconst10*r01*x11938))+(((-1.0)*r02*x11940))+((r00*x11941)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11938))+(((-1.0)*r00*x11942))+((r01*x11939)));
evalcond[4]=(((r20*x11941))+(((-1.0)*r22*x11940))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11938))+(((-1.0)*cj1*x11937)));
evalcond[5]=((((-1.0)*sj1*x11937))+(((-1.0)*gconst10*r11*x11938))+(((-1.0)*cj1*sj2))+((r10*x11941))+(((-1.0)*r12*x11940)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x11943 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11943.valid){
continue;
}
CheckValue<IkReal> x11944=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x11944.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11943.value)+(((1.5707963267949)*(x11944.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11945=IKsin(j4);
IkReal x11946=IKcos(j4);
IkReal x11947=((1.0)*cj2);
IkReal x11948=((1.0)*x11946);
IkReal x11949=(gconst10*x11945);
IkReal x11950=((1.0)*x11945);
IkReal x11951=(gconst11*x11946);
IkReal x11952=(gconst11*x11950);
evalcond[0]=((((-1.0)*r20*x11952))+(((-1.0)*r22*x11948))+((r21*x11949)));
evalcond[1]=(((r11*x11949))+(((-1.0)*r10*x11952))+(((-1.0)*r12*x11948)));
evalcond[2]=((((-1.0)*r02*x11950))+((r00*x11951))+(((-1.0)*gconst10*r01*x11948)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x11948))+(((-1.0)*r00*x11952))+((r01*x11949)));
evalcond[4]=((((-1.0)*cj1*x11947))+(((-1.0)*gconst10*r21*x11948))+((r20*x11951))+((sj1*sj2))+(((-1.0)*r22*x11950)));
evalcond[5]=((((-1.0)*r12*x11950))+(((-1.0)*gconst10*r11*x11948))+(((-1.0)*sj1*x11947))+(((-1.0)*cj1*sj2))+((r10*x11951)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x11953=((-1.0)*r11);
CheckValue<IkReal> x11956 = IKatan2WithCheck(IkReal(x11953),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11956.valid){
continue;
}
IkReal x11954=((1.0)*(x11956.value));
IkReal x11955=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11954)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11954)));
IkReal gconst10=(x11953*x11955);
IkReal gconst11=((1.0)*r10*x11955);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x11957=((-1.0)*r11);
CheckValue<IkReal> x11960 = IKatan2WithCheck(IkReal(x11957),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11960.valid){
continue;
}
IkReal x11958=((1.0)*(x11960.value));
IkReal x11959=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11958)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11958)));
IkReal gconst10=(x11957*x11959);
IkReal gconst11=((1.0)*r10*x11959);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x11961=((-1.0)*r11);
CheckValue<IkReal> x11964 = IKatan2WithCheck(IkReal(x11961),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x11964.valid){
continue;
}
IkReal x11962=((1.0)*(x11964.value));
IkReal x11963=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x11962)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x11962)));
IkReal gconst10=(x11961*x11963);
IkReal gconst11=((1.0)*r10*x11963);
IkReal x11965=r12*r12;
CheckValue<IkReal> x11968=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x11965))),-1);
if(!x11968.valid){
continue;
}
IkReal x11966=x11968.value;
IkReal x11967=((1.0)*x11966);
j4eval[0]=IKsign((x11965+(((2.0)*x11966*(r10*r10)*(r11*r11)))+((x11967*(r11*r11*r11*r11)))+((x11967*(r10*r10*r10*r10)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11969=(cj2*sj1);
IkReal x11970=(gconst10*r11);
IkReal x11971=(gconst11*r10);
IkReal x11972=(cj1*sj2);
CheckValue<IkReal> x11973=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x11970*x11970)+(x11971*x11971)+(((-2.0)*x11970*x11971)))),-1);
if(!x11973.valid){
continue;
}
CheckValue<IkReal> x11974 = IKatan2WithCheck(IkReal((((r12*x11969))+((r12*x11972)))),IkReal(((((-1.0)*x11969*x11971))+((x11970*x11972))+(((-1.0)*x11971*x11972))+((x11969*x11970)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11974.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11973.value)))+(x11974.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11975=IKsin(j4);
IkReal x11976=IKcos(j4);
IkReal x11977=((1.0)*x11976);
IkReal x11978=(gconst10*x11975);
IkReal x11979=((1.0)*x11975);
IkReal x11980=(gconst11*x11976);
IkReal x11981=(gconst11*x11979);
evalcond[0]=((((-1.0)*r22*x11977))+(((-1.0)*r20*x11981))+((r21*x11978)));
evalcond[1]=((((-1.0)*r12*x11977))+((r11*x11978))+(((-1.0)*r10*x11981)));
evalcond[2]=((((-1.0)*gconst10*r01*x11977))+((r00*x11980))+(((-1.0)*r02*x11979)));
evalcond[3]=((1.0)+((r01*x11978))+(((-1.0)*r00*x11981))+(((-1.0)*r02*x11977)));
evalcond[4]=(((cj2*sj1))+((r10*x11980))+(((-1.0)*r12*x11979))+(((-1.0)*gconst10*r11*x11977))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r20*x11980))+(((-1.0)*r22*x11979))+(((-1.0)*gconst10*r21*x11977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11982=(gconst11*r00);
IkReal x11983=(gconst10*r01);
CheckValue<IkReal> x11984=IKPowWithIntegerCheck(IKsign(((x11982*x11982)+(x11983*x11983)+(r02*r02)+(((-2.0)*x11982*x11983)))),-1);
if(!x11984.valid){
continue;
}
CheckValue<IkReal> x11985 = IKatan2WithCheck(IkReal((x11982+(((-1.0)*x11983)))),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x11985.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x11984.value)))+(x11985.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11986=IKsin(j4);
IkReal x11987=IKcos(j4);
IkReal x11988=((1.0)*x11987);
IkReal x11989=(gconst10*x11986);
IkReal x11990=((1.0)*x11986);
IkReal x11991=(gconst11*x11987);
IkReal x11992=(gconst11*x11990);
evalcond[0]=(((r21*x11989))+(((-1.0)*r20*x11992))+(((-1.0)*r22*x11988)));
evalcond[1]=((((-1.0)*r12*x11988))+((r11*x11989))+(((-1.0)*r10*x11992)));
evalcond[2]=((((-1.0)*r02*x11990))+(((-1.0)*gconst10*r01*x11988))+((r00*x11991)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11988))+((r01*x11989))+(((-1.0)*r00*x11992)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst10*r11*x11988))+((cj1*sj2))+(((-1.0)*r12*x11990))+((r10*x11991)));
evalcond[5]=(((r20*x11991))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst10*r21*x11988))+(((-1.0)*r22*x11990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x11993=((1.0)*gconst11);
CheckValue<IkReal> x11994 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x11993)))),IKFAST_ATAN2_MAGTHRESH);
if(!x11994.valid){
continue;
}
CheckValue<IkReal> x11995=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x11993)))),-1);
if(!x11995.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x11994.value)+(((1.5707963267949)*(x11995.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x11996=IKsin(j4);
IkReal x11997=IKcos(j4);
IkReal x11998=((1.0)*x11997);
IkReal x11999=(gconst10*x11996);
IkReal x12000=((1.0)*x11996);
IkReal x12001=(gconst11*x11997);
IkReal x12002=(gconst11*x12000);
evalcond[0]=(((r21*x11999))+(((-1.0)*r22*x11998))+(((-1.0)*r20*x12002)));
evalcond[1]=((((-1.0)*r10*x12002))+(((-1.0)*r12*x11998))+((r11*x11999)));
evalcond[2]=(((r00*x12001))+(((-1.0)*r02*x12000))+(((-1.0)*gconst10*r01*x11998)));
evalcond[3]=((1.0)+(((-1.0)*r02*x11998))+(((-1.0)*r00*x12002))+((r01*x11999)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r12*x12000))+((r10*x12001))+(((-1.0)*gconst10*r11*x11998)));
evalcond[5]=(((r20*x12001))+(((-1.0)*cj1*cj2))+(((-1.0)*gconst10*r21*x11998))+((sj1*sj2))+(((-1.0)*r22*x12000)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12003=((-1.0)*r11);
IkReal x12004=((-1.0)*r10);
CheckValue<IkReal> x12006 = IKatan2WithCheck(IkReal(x12003),IkReal(x12004),IKFAST_ATAN2_MAGTHRESH);
if(!x12006.valid){
continue;
}
IkReal x12005=((1.0)*(x12006.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12005)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12004);
rxp1_1=(px*r21);
rxp1_2=(px*x12003);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12005)));
IkReal gconst10=x12003;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12007=((-1.0)*r11);
IkReal x12008=((-1.0)*r10);
CheckValue<IkReal> x12010 = IKatan2WithCheck(IkReal(x12007),IkReal(x12008),IKFAST_ATAN2_MAGTHRESH);
if(!x12010.valid){
continue;
}
IkReal x12009=((1.0)*(x12010.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12009)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12008);
rxp1_1=(px*r21);
rxp1_2=(px*x12007);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12009)));
IkReal gconst10=x12007;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((1.0)*r10*r20))+(((1.0)*r11*r21)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12011=((-1.0)*r11);
IkReal x12012=((-1.0)*r10);
CheckValue<IkReal> x12014 = IKatan2WithCheck(IkReal(x12011),IkReal(x12012),IKFAST_ATAN2_MAGTHRESH);
if(!x12014.valid){
continue;
}
IkReal x12013=((1.0)*(x12014.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12013)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12012);
rxp1_1=(px*r21);
rxp1_2=(px*x12011);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12013)));
IkReal gconst10=x12011;
IkReal gconst11=((1.0)*r10);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12017=IKPowWithIntegerCheck(((((-1.0)*gconst10*r11))+((gconst11*r10))),-1);
if(!x12017.valid){
continue;
}
IkReal x12015=x12017.value;
IkReal x12016=(sj0*x12015);
cj4array[0]=(((cj1*sj2*x12016))+((cj2*sj1*x12016)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12018=IKsin(j4);
IkReal x12019=IKcos(j4);
IkReal x12020=(gconst10*r21);
IkReal x12021=(gconst11*r20);
IkReal x12022=((1.0)*x12018);
IkReal x12023=((1.0)*x12019);
evalcond[0]=((-1.0)*r02*x12018);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12023)));
evalcond[2]=(((x12018*x12020))+(((-1.0)*x12021*x12022)));
evalcond[3]=((((-1.0)*gconst11*r10*x12022))+((gconst10*r11*x12018)));
evalcond[4]=(((x12019*x12021))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12020*x12023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12025=IKPowWithIntegerCheck((((gconst11*r20))+(((-1.0)*gconst10*r21))),-1);
if(!x12025.valid){
continue;
}
IkReal x12024=x12025.value;
cj4array[0]=(((cj1*cj2*x12024))+(((-1.0)*sj1*sj2*x12024)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12026=IKsin(j4);
IkReal x12027=IKcos(j4);
IkReal x12028=((1.0)*sj0);
IkReal x12029=(gconst10*x12026);
IkReal x12030=((1.0)*x12027);
IkReal x12031=((1.0)*gconst11*x12026);
evalcond[0]=((-1.0)*r02*x12026);
evalcond[1]=((((-1.0)*x12028))+(((-1.0)*r02*x12030)));
evalcond[2]=((((-1.0)*r20*x12031))+((r21*x12029)));
evalcond[3]=(((r11*x12029))+(((-1.0)*r10*x12031)));
evalcond[4]=((((-1.0)*cj1*sj2*x12028))+(((-1.0)*cj2*sj1*x12028))+(((-1.0)*gconst10*r11*x12030))+((gconst11*r10*x12027)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12032=IKPowWithIntegerCheck(r02,-1);
if(!x12032.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12032.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12033=IKsin(j4);
IkReal x12034=IKcos(j4);
IkReal x12035=(gconst10*r21);
IkReal x12036=((1.0)*sj0);
IkReal x12037=(gconst10*r11);
IkReal x12038=(gconst11*x12034);
IkReal x12039=((1.0)*x12034);
IkReal x12040=((1.0)*gconst11*x12033);
evalcond[0]=((-1.0)*r02*x12033);
evalcond[1]=((((-1.0)*r20*x12040))+((x12033*x12035)));
evalcond[2]=(((x12033*x12037))+(((-1.0)*r10*x12040)));
evalcond[3]=(((r20*x12038))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x12035*x12039)));
evalcond[4]=((((-1.0)*cj2*sj1*x12036))+(((-1.0)*cj1*sj2*x12036))+(((-1.0)*x12037*x12039))+((r10*x12038)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12041=((1.0)*gconst11);
CheckValue<IkReal> x12042 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal((((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*r10*sj0*x12041))+(((-1.0)*cj0*r00*x12041)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12042.valid){
continue;
}
CheckValue<IkReal> x12043=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12043.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12042.value)+(((1.5707963267949)*(x12043.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12044=IKsin(j4);
IkReal x12045=IKcos(j4);
IkReal x12046=((1.0)*cj2);
IkReal x12047=((1.0)*sj0);
IkReal x12048=(cj1*sj2);
IkReal x12049=(gconst10*x12044);
IkReal x12050=((1.0)*x12045);
IkReal x12051=(gconst11*x12045);
IkReal x12052=((1.0)*x12044);
IkReal x12053=(gconst11*x12052);
evalcond[0]=((((-1.0)*r20*x12053))+((r21*x12049)));
evalcond[1]=((((-1.0)*r10*x12053))+cj0+((r11*x12049))+(((-1.0)*r12*x12050)));
evalcond[2]=(((r20*x12051))+(((-1.0)*cj1*x12046))+((sj1*sj2))+(((-1.0)*gconst10*r21*x12050)));
evalcond[3]=((((-1.0)*x12047))+((r01*x12049))+(((-1.0)*r02*x12050))+(((-1.0)*r00*x12053)));
evalcond[4]=((((-1.0)*cj0*x12048))+((r00*x12051))+(((-1.0)*r02*x12052))+(((-1.0)*cj0*sj1*x12046))+(((-1.0)*gconst10*r01*x12050)));
evalcond[5]=(((r10*x12051))+(((-1.0)*sj0*sj1*x12046))+(((-1.0)*x12047*x12048))+(((-1.0)*gconst10*r11*x12050))+(((-1.0)*r12*x12052)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12054=(gconst10*r21);
IkReal x12055=(gconst11*r20);
IkReal x12056=(sj1*sj2);
IkReal x12057=(cj1*cj2);
CheckValue<IkReal> x12058 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x12057))+((r22*x12056)))),IkReal(((((-1.0)*x12055*x12056))+(((-1.0)*x12054*x12057))+((x12055*x12057))+((x12054*x12056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12058.valid){
continue;
}
CheckValue<IkReal> x12059=IKPowWithIntegerCheck(IKsign(((x12054*x12054)+(((-2.0)*x12054*x12055))+(x12055*x12055)+(r22*r22))),-1);
if(!x12059.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12058.value)+(((1.5707963267949)*(x12059.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12060=IKsin(j4);
IkReal x12061=IKcos(j4);
IkReal x12062=((1.0)*cj2);
IkReal x12063=((1.0)*sj0);
IkReal x12064=(cj1*sj2);
IkReal x12065=((1.0)*x12061);
IkReal x12066=(gconst10*x12060);
IkReal x12067=((1.0)*x12060);
IkReal x12068=(gconst11*x12061);
IkReal x12069=(gconst11*x12067);
evalcond[0]=(((r21*x12066))+(((-1.0)*r20*x12069))+(((-1.0)*r22*x12065)));
evalcond[1]=(cj0+(((-1.0)*r10*x12069))+(((-1.0)*r12*x12065))+((r11*x12066)));
evalcond[2]=(((r01*x12066))+(((-1.0)*r02*x12065))+(((-1.0)*x12063))+(((-1.0)*r00*x12069)));
evalcond[3]=((((-1.0)*gconst10*r21*x12065))+((sj1*sj2))+((r20*x12068))+(((-1.0)*r22*x12067))+(((-1.0)*cj1*x12062)));
evalcond[4]=(((r00*x12068))+(((-1.0)*cj0*x12064))+(((-1.0)*cj0*sj1*x12062))+(((-1.0)*r02*x12067))+(((-1.0)*gconst10*r01*x12065)));
evalcond[5]=((((-1.0)*sj0*sj1*x12062))+((r10*x12068))+(((-1.0)*gconst10*r11*x12065))+(((-1.0)*r12*x12067))+(((-1.0)*x12063*x12064)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12070=((1.0)*sj0);
IkReal x12071=((1.0)*gconst10);
CheckValue<IkReal> x12072=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12071))+(((-1.0)*gconst11*r21)))),-1);
if(!x12072.valid){
continue;
}
CheckValue<IkReal> x12073 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12070)))),IkReal(((((-1.0)*gconst10*r11*x12070))+(((-1.0)*cj0*r01*x12071))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12073.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12072.value)))+(x12073.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12074=IKsin(j4);
IkReal x12075=IKcos(j4);
IkReal x12076=((1.0)*cj2);
IkReal x12077=((1.0)*sj0);
IkReal x12078=(cj1*sj2);
IkReal x12079=((1.0)*x12075);
IkReal x12080=(gconst10*x12074);
IkReal x12081=((1.0)*x12074);
IkReal x12082=(gconst11*x12075);
IkReal x12083=(gconst11*x12081);
evalcond[0]=(((r21*x12080))+(((-1.0)*r20*x12083))+(((-1.0)*r22*x12079)));
evalcond[1]=(cj0+(((-1.0)*r12*x12079))+((r11*x12080))+(((-1.0)*r10*x12083)));
evalcond[2]=(((r01*x12080))+(((-1.0)*r02*x12079))+(((-1.0)*r00*x12083))+(((-1.0)*x12077)));
evalcond[3]=(((r20*x12082))+(((-1.0)*gconst10*r21*x12079))+((sj1*sj2))+(((-1.0)*r22*x12081))+(((-1.0)*cj1*x12076)));
evalcond[4]=((((-1.0)*gconst10*r01*x12079))+((r00*x12082))+(((-1.0)*cj0*sj1*x12076))+(((-1.0)*r02*x12081))+(((-1.0)*cj0*x12078)));
evalcond[5]=((((-1.0)*r12*x12081))+(((-1.0)*sj0*sj1*x12076))+(((-1.0)*gconst10*r11*x12079))+((r10*x12082))+(((-1.0)*x12077*x12078)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12084=((1.0)*gconst11);
CheckValue<IkReal> x12085=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12084)))),-1);
if(!x12085.valid){
continue;
}
CheckValue<IkReal> x12086 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12084)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12086.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12085.value)))+(x12086.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12087=IKsin(j4);
IkReal x12088=IKcos(j4);
IkReal x12089=((1.0)*cj2);
IkReal x12090=((1.0)*sj0);
IkReal x12091=(cj1*sj2);
IkReal x12092=((1.0)*x12088);
IkReal x12093=(gconst10*x12087);
IkReal x12094=((1.0)*x12087);
IkReal x12095=(gconst11*x12088);
IkReal x12096=(gconst11*x12094);
evalcond[0]=((((-1.0)*r20*x12096))+(((-1.0)*r22*x12092))+((r21*x12093)));
evalcond[1]=(((r11*x12093))+cj0+(((-1.0)*r10*x12096))+(((-1.0)*r12*x12092)));
evalcond[2]=(((r01*x12093))+(((-1.0)*r02*x12092))+(((-1.0)*x12090))+(((-1.0)*r00*x12096)));
evalcond[3]=(((sj1*sj2))+(((-1.0)*gconst10*r21*x12092))+((r20*x12095))+(((-1.0)*r22*x12094))+(((-1.0)*cj1*x12089)));
evalcond[4]=(((r00*x12095))+(((-1.0)*cj0*x12091))+(((-1.0)*r02*x12094))+(((-1.0)*cj0*sj1*x12089))+(((-1.0)*gconst10*r01*x12092)));
evalcond[5]=((((-1.0)*sj0*sj1*x12089))+(((-1.0)*x12090*x12091))+(((-1.0)*gconst10*r11*x12092))+((r10*x12095))+(((-1.0)*r12*x12094)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x12097=((-1.0)*r11);
CheckValue<IkReal> x12100 = IKatan2WithCheck(IkReal(x12097),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12100.valid){
continue;
}
IkReal x12098=((1.0)*(x12100.value));
IkReal x12099=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12098)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12098)));
IkReal gconst10=(x12097*x12099);
IkReal gconst11=((1.0)*r10*x12099);
j4eval[0]=cj0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12101=((-1.0)*r11);
CheckValue<IkReal> x12104 = IKatan2WithCheck(IkReal(x12101),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12104.valid){
continue;
}
IkReal x12102=((1.0)*(x12104.value));
IkReal x12103=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12102)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12102)));
IkReal gconst10=(x12101*x12103);
IkReal gconst11=((1.0)*r10*x12103);
IkReal x12105=r12*r12;
IkReal x12106=((1.0)*sj0);
IkReal x12107=(cj0*r02);
IkReal x12108=x11844;
j4eval[0]=((IKabs(((((-1.0)*r12*x12106))+(((-1.0)*x12107)))))+(IKabs(((((-1.0)*x12106*x12108))+((r12*x12107*x12108))+((sj0*x12105*x12108))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x12109=((-1.0)*r11);
CheckValue<IkReal> x12112 = IKatan2WithCheck(IkReal(x12109),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12112.valid){
continue;
}
IkReal x12110=((1.0)*(x12112.value));
IkReal x12111=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12110)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12110)));
IkReal gconst10=(x12109*x12111);
IkReal gconst11=((1.0)*r10*x12111);
IkReal x12113=r12*r12;
IkReal x12114=((1.0)+(((-1.0)*x12113)));
IkReal x12115=(r22*sj1*sj2);
IkReal x12116=(cj1*cj2*r22);
CheckValue<IkReal> x12123=IKPowWithIntegerCheck(x12114,-1);
if(!x12123.valid){
continue;
}
IkReal x12117=x12123.value;
CheckValue<IkReal> x12124=IKPowWithIntegerCheck(((-1.0)+x12113),-1);
if(!x12124.valid){
continue;
}
IkReal x12118=x12124.value;
IkReal x12119=((1.0)*x12117);
if((x12114) < -0.00001)
continue;
IkReal x12120=IKsqrt(x12114);
IkReal x12121=(r12*x12118*x12120);
IkReal x12122=((((-1.0)*x12119*(r11*r11)*(r21*r21)))+(((-1.0)*(r22*r22)))+(((-2.0)*r10*r11*r20*r21*x12117))+(((-1.0)*x12119*(r10*r10)*(r20*r20))));
j4eval[0]=x12122;
j4eval[1]=((IKabs(((((-1.0)*x12116))+x12115)))+(IKabs(((((-1.0)*x12115*x12121))+((x12116*x12121))))));
j4eval[2]=IKsign(x12122);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12125=((-1.0)*r11);
CheckValue<IkReal> x12128 = IKatan2WithCheck(IkReal(x12125),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12128.valid){
continue;
}
IkReal x12126=((1.0)*(x12128.value));
IkReal x12127=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12126)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12126)));
IkReal gconst10=(x12125*x12127);
IkReal gconst11=((1.0)*r10*x12127);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12129=((-1.0)*r11);
CheckValue<IkReal> x12132 = IKatan2WithCheck(IkReal(x12129),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12132.valid){
continue;
}
IkReal x12130=((1.0)*(x12132.value));
IkReal x12131=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12130)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12130)));
IkReal gconst10=(x12129*x12131);
IkReal gconst11=((1.0)*r10*x12131);
j4eval[0]=r02;
j4eval[1]=((1.0)+(((-1.0)*(r12*r12))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12133=((-1.0)*r11);
CheckValue<IkReal> x12136 = IKatan2WithCheck(IkReal(x12133),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12136.valid){
continue;
}
IkReal x12134=((1.0)*(x12136.value));
IkReal x12135=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12134)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12134)));
IkReal gconst10=(x12133*x12135);
IkReal gconst11=((1.0)*r10*x12135);
IkReal x12137=(cj1*r02*sj2);
IkReal x12138=(cj2*r02*sj1);
IkReal x12139=x11844;
IkReal x12140=(r12*x12139);
j4eval[0]=((IKabs((((x12138*x12140))+((x12137*x12140)))))+(IKabs((x12138+x12137))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12141=(cj1*sj2);
IkReal x12142=(cj2*sj1);
IkReal x12143=(gconst11*r00);
IkReal x12144=((1.0)*gconst10*r01);
CheckValue<IkReal> x12145=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12145.valid){
continue;
}
CheckValue<IkReal> x12146 = IKatan2WithCheck(IkReal(((((-1.0)*x12141*x12144))+(((-1.0)*x12142*x12144))+((x12141*x12143))+((x12142*x12143)))),IkReal((((r02*x12141))+((r02*x12142)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12146.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12145.value)))+(x12146.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12147=IKcos(j4);
IkReal x12148=IKsin(j4);
IkReal x12149=((1.0)*cj2);
IkReal x12150=((1.0)*x12147);
IkReal x12151=(gconst10*x12147);
IkReal x12152=(gconst10*x12148);
IkReal x12153=((1.0)*gconst11*x12148);
evalcond[0]=(((r02*x12148))+((r01*x12151))+(((-1.0)*gconst11*r00*x12150)));
evalcond[1]=((((-1.0)*r22*x12150))+((r21*x12152))+(((-1.0)*r20*x12153)));
evalcond[2]=((((-1.0)*r12*x12150))+((r11*x12152))+(((-1.0)*r10*x12153)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x12150))+(((-1.0)*r00*x12153))+((r01*x12152)));
evalcond[4]=(((r22*x12148))+(((-1.0)*gconst11*r20*x12150))+((sj1*sj2))+(((-1.0)*cj1*x12149))+((r21*x12151)));
evalcond[5]=((((-1.0)*gconst11*r10*x12150))+(((-1.0)*cj1*sj2))+((r12*x12148))+(((-1.0)*sj1*x12149))+((r11*x12151)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12154=(gconst10*r01);
IkReal x12155=(gconst11*r00);
CheckValue<IkReal> x12156=IKPowWithIntegerCheck(IKsign(((x12155*x12155)+(x12154*x12154)+(((-2.0)*x12154*x12155))+(r02*r02))),-1);
if(!x12156.valid){
continue;
}
CheckValue<IkReal> x12157 = IKatan2WithCheck(IkReal(((((-1.0)*x12155))+x12154)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12157.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12156.value)))+(x12157.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12158=IKcos(j4);
IkReal x12159=IKsin(j4);
IkReal x12160=((1.0)*cj2);
IkReal x12161=((1.0)*x12158);
IkReal x12162=(gconst10*x12158);
IkReal x12163=(gconst10*x12159);
IkReal x12164=((1.0)*gconst11*x12159);
evalcond[0]=((((-1.0)*gconst11*r00*x12161))+((r02*x12159))+((r01*x12162)));
evalcond[1]=(((r21*x12163))+(((-1.0)*r22*x12161))+(((-1.0)*r20*x12164)));
evalcond[2]=((((-1.0)*r10*x12164))+((r11*x12163))+(((-1.0)*r12*x12161)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12164))+((r01*x12163))+(((-1.0)*r02*x12161)));
evalcond[4]=(((r21*x12162))+((r22*x12159))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12161))+(((-1.0)*cj1*x12160)));
evalcond[5]=((((-1.0)*gconst11*r10*x12161))+(((-1.0)*sj1*x12160))+((r12*x12159))+(((-1.0)*cj1*sj2))+((r11*x12162)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12165 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12165.valid){
continue;
}
CheckValue<IkReal> x12166=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12165.value)+(((1.5707963267949)*(x12166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12167=IKcos(j4);
IkReal x12168=IKsin(j4);
IkReal x12169=((1.0)*cj2);
IkReal x12170=((1.0)*x12167);
IkReal x12171=(gconst10*x12167);
IkReal x12172=(gconst10*x12168);
IkReal x12173=((1.0)*gconst11*x12168);
evalcond[0]=(((r02*x12168))+(((-1.0)*gconst11*r00*x12170))+((r01*x12171)));
evalcond[1]=(((r21*x12172))+(((-1.0)*r22*x12170))+(((-1.0)*r20*x12173)));
evalcond[2]=((((-1.0)*r10*x12173))+((r11*x12172))+(((-1.0)*r12*x12170)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x12173))+((r01*x12172))+(((-1.0)*r02*x12170)));
evalcond[4]=(((r21*x12171))+(((-1.0)*gconst11*r20*x12170))+((sj1*sj2))+(((-1.0)*cj1*x12169))+((r22*x12168)));
evalcond[5]=((((-1.0)*gconst11*r10*x12170))+(((-1.0)*sj1*x12169))+(((-1.0)*cj1*sj2))+((r11*x12171))+((r12*x12168)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12174=((-1.0)*r11);
CheckValue<IkReal> x12177 = IKatan2WithCheck(IkReal(x12174),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12177.valid){
continue;
}
IkReal x12175=((1.0)*(x12177.value));
IkReal x12176=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12175)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12175)));
IkReal gconst10=(x12174*x12176);
IkReal gconst11=((1.0)*r10*x12176);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x12178=((-1.0)*r11);
CheckValue<IkReal> x12181 = IKatan2WithCheck(IkReal(x12178),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12181.valid){
continue;
}
IkReal x12179=((1.0)*(x12181.value));
IkReal x12180=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12179)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12179)));
IkReal gconst10=(x12178*x12180);
IkReal gconst11=((1.0)*r10*x12180);
IkReal x12182=((1.0)+(((-1.0)*(r12*r12))));
CheckValue<IkReal> x12186=IKPowWithIntegerCheck(x12182,-1);
if(!x12186.valid){
continue;
}
IkReal x12183=x12186.value;
IkReal x12184=((1.0)*x12183);
IkReal x12185=((((-1.0)*(r02*r02)))+(((-1.0)*x12184*(r00*r00)*(r10*r10)))+(((-1.0)*x12184*(r01*r01)*(r11*r11)))+(((-2.0)*r00*r01*r10*r11*x12183)));
j4eval[0]=x12185;
j4eval[1]=r02;
j4eval[2]=x12182;
j4eval[3]=IKsign(x12185);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12187=((-1.0)*r11);
CheckValue<IkReal> x12190 = IKatan2WithCheck(IkReal(x12187),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12190.valid){
continue;
}
IkReal x12188=((1.0)*(x12190.value));
IkReal x12189=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12188)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12188)));
IkReal gconst10=(x12187*x12189);
IkReal gconst11=((1.0)*r10*x12189);
IkReal x12191=r12*r12;
IkReal x12192=((1.0)*r02);
IkReal x12193=(cj1*sj2);
IkReal x12194=(cj2*sj1);
CheckValue<IkReal> x12198=IKPowWithIntegerCheck(((-1.0)+x12191),-1);
if(!x12198.valid){
continue;
}
IkReal x12195=x12198.value;
if((((1.0)+(((-1.0)*x12191)))) < -0.00001)
continue;
IkReal x12196=IKsqrt(((1.0)+(((-1.0)*x12191))));
IkReal x12197=(r12*x12195*x12196);
j4eval[0]=((IKabs(((((-1.0)*x12192*x12194))+(((-1.0)*x12192*x12193)))))+(IKabs(((((-1.0)*x12192*x12193*x12197))+(((-1.0)*x12192*x12194*x12197))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12199=(cj1*sj2);
IkReal x12200=(gconst10*r01);
IkReal x12201=(cj2*sj1);
IkReal x12202=((1.0)*r02);
IkReal x12203=((1.0)*gconst11*r00);
CheckValue<IkReal> x12204=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*gconst11*r21)))),-1);
if(!x12204.valid){
continue;
}
CheckValue<IkReal> x12205 = IKatan2WithCheck(IkReal((((x12200*x12201))+(((-1.0)*x12201*x12203))+(((-1.0)*x12199*x12203))+((x12199*x12200)))),IkReal(((((-1.0)*x12201*x12202))+(((-1.0)*x12199*x12202)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12205.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12204.value)))+(x12205.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12206=IKcos(j4);
IkReal x12207=IKsin(j4);
IkReal x12208=((1.0)*x12206);
IkReal x12209=(gconst10*x12206);
IkReal x12210=(gconst10*x12207);
IkReal x12211=((1.0)*gconst11*x12207);
evalcond[0]=(((r02*x12207))+(((-1.0)*gconst11*r00*x12208))+((r01*x12209)));
evalcond[1]=((((-1.0)*r22*x12208))+((r21*x12210))+(((-1.0)*r20*x12211)));
evalcond[2]=((((-1.0)*r12*x12208))+(((-1.0)*r10*x12211))+((r11*x12210)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12208))+(((-1.0)*r00*x12211))+((r01*x12210)));
evalcond[4]=(((cj2*sj1))+((r12*x12207))+(((-1.0)*gconst11*r10*x12208))+((cj1*sj2))+((r11*x12209)));
evalcond[5]=(((r22*x12207))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12208))+((r21*x12209)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12212=(gconst10*r01);
IkReal x12213=(gconst11*r00);
CheckValue<IkReal> x12214 = IKatan2WithCheck(IkReal((x12212+(((-1.0)*x12213)))),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x12214.valid){
continue;
}
CheckValue<IkReal> x12215=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x12212*x12212)))+(((2.0)*x12212*x12213))+(((-1.0)*(r02*r02)))+(((-1.0)*(x12213*x12213))))),-1);
if(!x12215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12214.value)+(((1.5707963267949)*(x12215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12216=IKcos(j4);
IkReal x12217=IKsin(j4);
IkReal x12218=((1.0)*x12216);
IkReal x12219=(gconst10*x12216);
IkReal x12220=(gconst10*x12217);
IkReal x12221=((1.0)*gconst11*x12217);
evalcond[0]=((((-1.0)*gconst11*r00*x12218))+((r02*x12217))+((r01*x12219)));
evalcond[1]=((((-1.0)*r22*x12218))+((r21*x12220))+(((-1.0)*r20*x12221)));
evalcond[2]=(((r11*x12220))+(((-1.0)*r12*x12218))+(((-1.0)*r10*x12221)));
evalcond[3]=((1.0)+(((-1.0)*r02*x12218))+(((-1.0)*r00*x12221))+((r01*x12220)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*gconst11*r10*x12218))+((r12*x12217))+((cj1*sj2))+((r11*x12219)));
evalcond[5]=(((r22*x12217))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12218))+((r21*x12219)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12222=((1.0)*gconst11);
CheckValue<IkReal> x12223 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12222)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12223.valid){
continue;
}
CheckValue<IkReal> x12224=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12222)))),-1);
if(!x12224.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12223.value)+(((1.5707963267949)*(x12224.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12225=IKcos(j4);
IkReal x12226=IKsin(j4);
IkReal x12227=((1.0)*x12225);
IkReal x12228=(gconst10*x12225);
IkReal x12229=(gconst10*x12226);
IkReal x12230=((1.0)*gconst11*x12226);
evalcond[0]=(((r02*x12226))+((r01*x12228))+(((-1.0)*gconst11*r00*x12227)));
evalcond[1]=((((-1.0)*r20*x12230))+(((-1.0)*r22*x12227))+((r21*x12229)));
evalcond[2]=(((r11*x12229))+(((-1.0)*r12*x12227))+(((-1.0)*r10*x12230)));
evalcond[3]=((1.0)+(((-1.0)*r00*x12230))+((r01*x12229))+(((-1.0)*r02*x12227)));
evalcond[4]=(((cj2*sj1))+((r11*x12228))+((cj1*sj2))+((r12*x12226))+(((-1.0)*gconst11*r10*x12227)));
evalcond[5]=(((r22*x12226))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r21*x12228))+(((-1.0)*gconst11*r20*x12227)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12231=((-1.0)*r11);
IkReal x12232=((-1.0)*r10);
CheckValue<IkReal> x12234 = IKatan2WithCheck(IkReal(x12231),IkReal(x12232),IKFAST_ATAN2_MAGTHRESH);
if(!x12234.valid){
continue;
}
IkReal x12233=((1.0)*(x12234.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12233)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12232);
rxp1_1=(px*r21);
rxp1_2=(px*x12231);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12233)));
IkReal gconst10=x12231;
IkReal gconst11=((1.0)*r10);
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12235=((-1.0)*r11);
IkReal x12236=((-1.0)*r10);
CheckValue<IkReal> x12238 = IKatan2WithCheck(IkReal(x12235),IkReal(x12236),IKFAST_ATAN2_MAGTHRESH);
if(!x12238.valid){
continue;
}
IkReal x12237=((1.0)*(x12238.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12237)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12236);
rxp1_1=(px*r21);
rxp1_2=(px*x12235);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12237)));
IkReal gconst10=x12235;
IkReal gconst11=((1.0)*r10);
j4eval[0]=((((-1.0)*r11*r21))+(((-1.0)*r10*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x12239=((-1.0)*r11);
IkReal x12240=((-1.0)*r10);
CheckValue<IkReal> x12242 = IKatan2WithCheck(IkReal(x12239),IkReal(x12240),IKFAST_ATAN2_MAGTHRESH);
if(!x12242.valid){
continue;
}
IkReal x12241=((1.0)*(x12242.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12241)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12240);
rxp1_1=(px*r21);
rxp1_2=(px*x12239);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12241)));
IkReal gconst10=x12239;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12245=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12245.valid){
continue;
}
IkReal x12243=x12245.value;
IkReal x12244=(sj0*x12243);
cj4array[0]=(((cj2*sj1*x12244))+((cj1*sj2*x12244)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12246=IKsin(j4);
IkReal x12247=IKcos(j4);
IkReal x12248=(gconst10*r21);
IkReal x12249=((1.0)*x12247);
IkReal x12250=((1.0)*gconst11*x12246);
evalcond[0]=(r02*x12246);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x12249)));
evalcond[2]=(((x12246*x12248))+(((-1.0)*r20*x12250)));
evalcond[3]=(((gconst10*r11*x12246))+(((-1.0)*r10*x12250)));
evalcond[4]=(((x12247*x12248))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12249)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12252=IKPowWithIntegerCheck((((gconst10*r21))+(((-1.0)*gconst11*r20))),-1);
if(!x12252.valid){
continue;
}
IkReal x12251=x12252.value;
cj4array[0]=((((-1.0)*sj1*sj2*x12251))+((cj1*cj2*x12251)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12253=IKsin(j4);
IkReal x12254=IKcos(j4);
IkReal x12255=((1.0)*sj0);
IkReal x12256=(gconst10*x12253);
IkReal x12257=((1.0)*x12254);
IkReal x12258=((1.0)*gconst11*x12253);
evalcond[0]=(r02*x12253);
evalcond[1]=((((-1.0)*r02*x12257))+(((-1.0)*x12255)));
evalcond[2]=((((-1.0)*r20*x12258))+((r21*x12256)));
evalcond[3]=(((r11*x12256))+(((-1.0)*r10*x12258)));
evalcond[4]=((((-1.0)*cj2*sj1*x12255))+(((-1.0)*gconst11*r10*x12257))+((gconst10*r11*x12254))+(((-1.0)*cj1*sj2*x12255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x12259=IKPowWithIntegerCheck(r02,-1);
if(!x12259.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x12259.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x12260=IKsin(j4);
IkReal x12261=IKcos(j4);
IkReal x12262=(gconst10*r21);
IkReal x12263=((1.0)*cj1);
IkReal x12264=(gconst10*r11);
IkReal x12265=((1.0)*gconst11*x12260);
IkReal x12266=((1.0)*gconst11*x12261);
evalcond[0]=(r02*x12260);
evalcond[1]=((((-1.0)*r20*x12265))+((x12260*x12262)));
evalcond[2]=(((x12260*x12264))+(((-1.0)*r10*x12265)));
evalcond[3]=((((-1.0)*r20*x12266))+((sj1*sj2))+((x12261*x12262))+(((-1.0)*cj2*x12263)));
evalcond[4]=((((-1.0)*cj2*sj0*sj1))+((x12261*x12264))+(((-1.0)*sj0*sj2*x12263))+(((-1.0)*r10*x12266)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12267=((1.0)*gconst11);
CheckValue<IkReal> x12268 = IKatan2WithCheck(IkReal((((r12*sj0))+((cj0*r02)))),IkReal(((((-1.0)*r10*sj0*x12267))+((gconst10*r11*sj0))+((cj0*gconst10*r01))+(((-1.0)*cj0*r00*x12267)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12268.valid){
continue;
}
CheckValue<IkReal> x12269=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12269.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12268.value)+(((1.5707963267949)*(x12269.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12270=IKsin(j4);
IkReal x12271=IKcos(j4);
IkReal x12272=((1.0)*gconst11);
IkReal x12273=((1.0)*cj2);
IkReal x12274=((1.0)*sj0);
IkReal x12275=(cj1*sj2);
IkReal x12276=(gconst10*x12271);
IkReal x12277=(gconst10*x12270);
IkReal x12278=((1.0)*x12271);
evalcond[0]=(((r21*x12277))+(((-1.0)*r20*x12270*x12272)));
evalcond[1]=(cj0+(((-1.0)*r10*x12270*x12272))+(((-1.0)*r12*x12278))+((r11*x12277)));
evalcond[2]=(((r21*x12276))+(((-1.0)*cj1*x12273))+((sj1*sj2))+(((-1.0)*r20*x12271*x12272)));
evalcond[3]=((((-1.0)*r02*x12278))+(((-1.0)*x12274))+(((-1.0)*r00*x12270*x12272))+((r01*x12277)));
evalcond[4]=((((-1.0)*cj0*x12275))+((r02*x12270))+(((-1.0)*r00*x12271*x12272))+(((-1.0)*cj0*sj1*x12273))+((r01*x12276)));
evalcond[5]=((((-1.0)*r10*x12271*x12272))+(((-1.0)*sj0*sj1*x12273))+((r12*x12270))+((r11*x12276))+(((-1.0)*x12274*x12275)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12279=(gconst10*r21);
IkReal x12280=(gconst11*r20);
IkReal x12281=(sj1*sj2);
IkReal x12282=(cj1*cj2);
CheckValue<IkReal> x12283 = IKatan2WithCheck(IkReal((((r22*x12281))+(((-1.0)*r22*x12282)))),IkReal((((x12280*x12282))+((x12279*x12281))+(((-1.0)*x12280*x12281))+(((-1.0)*x12279*x12282)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12283.valid){
continue;
}
CheckValue<IkReal> x12284=IKPowWithIntegerCheck(IKsign(((((2.0)*x12279*x12280))+(((-1.0)*(x12279*x12279)))+(((-1.0)*(r22*r22)))+(((-1.0)*(x12280*x12280))))),-1);
if(!x12284.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12283.value)+(((1.5707963267949)*(x12284.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12285=IKsin(j4);
IkReal x12286=IKcos(j4);
IkReal x12287=((1.0)*cj2);
IkReal x12288=((1.0)*sj0);
IkReal x12289=(cj1*sj2);
IkReal x12290=((1.0)*x12286);
IkReal x12291=(gconst10*x12286);
IkReal x12292=(gconst10*x12285);
IkReal x12293=((1.0)*gconst11*x12285);
evalcond[0]=(((r21*x12292))+(((-1.0)*r20*x12293))+(((-1.0)*r22*x12290)));
evalcond[1]=((((-1.0)*r10*x12293))+cj0+((r11*x12292))+(((-1.0)*r12*x12290)));
evalcond[2]=(((r01*x12292))+(((-1.0)*r00*x12293))+(((-1.0)*r02*x12290))+(((-1.0)*x12288)));
evalcond[3]=(((r21*x12291))+((r22*x12285))+(((-1.0)*cj1*x12287))+((sj1*sj2))+(((-1.0)*gconst11*r20*x12290)));
evalcond[4]=(((r01*x12291))+((r02*x12285))+(((-1.0)*cj0*sj1*x12287))+(((-1.0)*gconst11*r00*x12290))+(((-1.0)*cj0*x12289)));
evalcond[5]=((((-1.0)*sj0*sj1*x12287))+((r11*x12291))+(((-1.0)*gconst11*r10*x12290))+((r12*x12285))+(((-1.0)*x12288*x12289)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12294=((1.0)*sj0);
IkReal x12295=((1.0)*gconst10);
CheckValue<IkReal> x12296=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12295))+(((-1.0)*gconst11*r21)))),-1);
if(!x12296.valid){
continue;
}
CheckValue<IkReal> x12297 = IKatan2WithCheck(IkReal(((((-1.0)*cj0*r02))+(((-1.0)*r12*x12294)))),IkReal(((((-1.0)*cj0*r01*x12295))+(((-1.0)*gconst10*r11*x12294))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12297.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12296.value)))+(x12297.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12298=IKsin(j4);
IkReal x12299=IKcos(j4);
IkReal x12300=((1.0)*cj2);
IkReal x12301=((1.0)*sj0);
IkReal x12302=(cj1*sj2);
IkReal x12303=((1.0)*x12299);
IkReal x12304=(gconst10*x12299);
IkReal x12305=(gconst10*x12298);
IkReal x12306=((1.0)*gconst11*x12298);
evalcond[0]=((((-1.0)*r20*x12306))+((r21*x12305))+(((-1.0)*r22*x12303)));
evalcond[1]=(cj0+((r11*x12305))+(((-1.0)*r10*x12306))+(((-1.0)*r12*x12303)));
evalcond[2]=((((-1.0)*r02*x12303))+(((-1.0)*r00*x12306))+(((-1.0)*x12301))+((r01*x12305)));
evalcond[3]=((((-1.0)*cj1*x12300))+((r21*x12304))+(((-1.0)*gconst11*r20*x12303))+((sj1*sj2))+((r22*x12298)));
evalcond[4]=((((-1.0)*cj0*x12302))+(((-1.0)*gconst11*r00*x12303))+((r02*x12298))+((r01*x12304))+(((-1.0)*cj0*sj1*x12300)));
evalcond[5]=((((-1.0)*gconst11*r10*x12303))+((r11*x12304))+(((-1.0)*x12301*x12302))+((r12*x12298))+(((-1.0)*sj0*sj1*x12300)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12307=((1.0)*gconst11);
CheckValue<IkReal> x12308 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x12307))+((cj0*gconst10*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12308.valid){
continue;
}
CheckValue<IkReal> x12309=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12307)))),-1);
if(!x12309.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12308.value)+(((1.5707963267949)*(x12309.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12310=IKsin(j4);
IkReal x12311=IKcos(j4);
IkReal x12312=((1.0)*cj2);
IkReal x12313=((1.0)*sj0);
IkReal x12314=(cj1*sj2);
IkReal x12315=((1.0)*x12311);
IkReal x12316=(gconst10*x12311);
IkReal x12317=(gconst10*x12310);
IkReal x12318=((1.0)*gconst11*x12310);
evalcond[0]=((((-1.0)*r20*x12318))+(((-1.0)*r22*x12315))+((r21*x12317)));
evalcond[1]=((((-1.0)*r10*x12318))+cj0+((r11*x12317))+(((-1.0)*r12*x12315)));
evalcond[2]=((((-1.0)*r00*x12318))+(((-1.0)*r02*x12315))+((r01*x12317))+(((-1.0)*x12313)));
evalcond[3]=((((-1.0)*cj1*x12312))+((r22*x12310))+(((-1.0)*gconst11*r20*x12315))+((sj1*sj2))+((r21*x12316)));
evalcond[4]=((((-1.0)*gconst11*r00*x12315))+((r02*x12310))+(((-1.0)*cj0*sj1*x12312))+((r01*x12316))+(((-1.0)*cj0*x12314)));
evalcond[5]=((((-1.0)*gconst11*r10*x12315))+((r12*x12310))+(((-1.0)*sj0*sj1*x12312))+((r11*x12316))+(((-1.0)*x12313*x12314)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12319=((-1.0)*r11);
CheckValue<IkReal> x12322 = IKatan2WithCheck(IkReal(x12319),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12322.valid){
continue;
}
IkReal x12320=((1.0)*(x12322.value));
IkReal x12321=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12320)));
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12320)));
IkReal gconst10=(x12319*x12321);
IkReal gconst11=((1.0)*r10*x12321);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12323=gconst10*gconst10;
IkReal x12324=gconst11*gconst11;
IkReal x12325=(gconst10*r21);
IkReal x12326=(cj3*r00);
IkReal x12327=(r00*sj3);
IkReal x12328=((1.0)*gconst11);
IkReal x12329=(gconst10*r20);
IkReal x12330=(r01*sj3);
IkReal x12331=(cj3*gconst11*r01);
IkReal x12332=(r21*x12323);
IkReal x12333=(r20*x12324);
CheckValue<IkReal> x12334=IKPowWithIntegerCheck(IKsign((((x12330*x12332))+(((-1.0)*x12328*x12329*x12330))+(((-1.0)*x12325*x12327*x12328))+((x12327*x12333))+((r02*r22*sj3)))),-1);
if(!x12334.valid){
continue;
}
CheckValue<IkReal> x12335 = IKatan2WithCheck(IkReal((((r22*x12331))+((gconst10*r22*x12326)))),IkReal(((((-1.0)*x12326*x12328*x12329))+(((-1.0)*cj3*r01*x12333))+((x12325*x12331))+((x12326*x12332)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12335.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12334.value)))+(x12335.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12336=IKsin(j4);
IkReal x12337=IKcos(j4);
IkReal x12338=(sj1*sj2);
IkReal x12339=(gconst10*sj3);
IkReal x12340=(cj3*gconst10);
IkReal x12341=(gconst11*r20);
IkReal x12342=(gconst11*r21);
IkReal x12343=(gconst11*r00);
IkReal x12344=(cj3*gconst11);
IkReal x12345=(gconst11*r10);
IkReal x12346=((1.0)*cj1);
IkReal x12347=(cj2*sj1);
IkReal x12348=(gconst11*sj3);
IkReal x12349=(cj2*x12346);
IkReal x12350=((1.0)*x12337);
IkReal x12351=((1.0)*x12336);
IkReal x12352=(gconst10*x12336);
IkReal x12353=(cj3*x12336);
IkReal x12354=(sj3*x12337);
evalcond[0]=((((-1.0)*x12341*x12351))+((r21*x12352))+(((-1.0)*r22*x12350)));
evalcond[1]=((((-1.0)*x12345*x12351))+((r11*x12352))+(((-1.0)*r12*x12350)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12350))+((r01*x12352))+(((-1.0)*x12343*x12351)));
evalcond[3]=(((r00*x12339))+(((-1.0)*cj3*x12343*x12350))+((r01*x12348))+((r02*x12353))+((r01*x12337*x12340)));
evalcond[4]=((((-1.0)*r01*x12339*x12350))+((x12343*x12354))+((r00*x12340))+((r01*x12344))+(((-1.0)*r02*sj3*x12351)));
evalcond[5]=(((r20*x12339))+((cj1*sj2))+x12347+((sj3*x12342))+((r22*x12353))+((r21*x12337*x12340))+(((-1.0)*cj3*x12341*x12350)));
evalcond[6]=(x12338+(((-1.0)*x12349))+((r11*x12348))+((r10*x12339))+((r12*x12353))+(((-1.0)*r10*x12344*x12350))+((r11*x12337*x12340)));
evalcond[7]=((((-1.0)*r21*x12339*x12350))+((x12341*x12354))+((r20*x12340))+x12338+(((-1.0)*x12349))+((cj3*x12342))+(((-1.0)*r22*sj3*x12351)));
evalcond[8]=(((x12345*x12354))+(((-1.0)*sj2*x12346))+((r11*x12344))+((r10*x12340))+(((-1.0)*r12*sj3*x12351))+(((-1.0)*x12347))+(((-1.0)*r11*x12339*x12350)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12355 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*gconst11*r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12355.valid){
continue;
}
CheckValue<IkReal> x12356=IKPowWithIntegerCheck(IKsign((((gconst11*r21))+((gconst10*r20)))),-1);
if(!x12356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12355.value)+(((1.5707963267949)*(x12356.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12357=IKsin(j4);
IkReal x12358=IKcos(j4);
IkReal x12359=(sj1*sj2);
IkReal x12360=(gconst10*sj3);
IkReal x12361=(cj3*gconst10);
IkReal x12362=(gconst11*r20);
IkReal x12363=(gconst11*r21);
IkReal x12364=(gconst11*r00);
IkReal x12365=(cj3*gconst11);
IkReal x12366=(gconst11*r10);
IkReal x12367=((1.0)*cj1);
IkReal x12368=(cj2*sj1);
IkReal x12369=(gconst11*sj3);
IkReal x12370=(cj2*x12367);
IkReal x12371=((1.0)*x12358);
IkReal x12372=((1.0)*x12357);
IkReal x12373=(gconst10*x12357);
IkReal x12374=(cj3*x12357);
IkReal x12375=(sj3*x12358);
evalcond[0]=((((-1.0)*r22*x12371))+((r21*x12373))+(((-1.0)*x12362*x12372)));
evalcond[1]=(((r11*x12373))+(((-1.0)*x12366*x12372))+(((-1.0)*r12*x12371)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x12371))+(((-1.0)*x12364*x12372))+((r01*x12373)));
evalcond[3]=((((-1.0)*cj3*x12364*x12371))+((r02*x12374))+((r01*x12358*x12361))+((r00*x12360))+((r01*x12369)));
evalcond[4]=((((-1.0)*r02*sj3*x12372))+((x12364*x12375))+(((-1.0)*r01*x12360*x12371))+((r00*x12361))+((r01*x12365)));
evalcond[5]=(((cj1*sj2))+x12368+((sj3*x12363))+(((-1.0)*cj3*x12362*x12371))+((r22*x12374))+((r21*x12358*x12361))+((r20*x12360)));
evalcond[6]=((((-1.0)*x12370))+((r11*x12369))+(((-1.0)*r10*x12365*x12371))+((r10*x12360))+x12359+((r12*x12374))+((r11*x12358*x12361)));
evalcond[7]=((((-1.0)*x12370))+x12359+((x12362*x12375))+((cj3*x12363))+(((-1.0)*r22*sj3*x12372))+(((-1.0)*r21*x12360*x12371))+((r20*x12361)));
evalcond[8]=(((r11*x12365))+(((-1.0)*r12*sj3*x12372))+((x12366*x12375))+((r10*x12361))+(((-1.0)*sj2*x12367))+(((-1.0)*r11*x12360*x12371))+(((-1.0)*x12368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12376=((-1.0)*r11);
CheckValue<IkReal> x12379 = IKatan2WithCheck(IkReal(x12376),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12379.valid){
continue;
}
IkReal x12377=((1.0)*(x12379.value));
IkReal x12378=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12377)));
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12377)));
IkReal gconst10=(x12376*x12378);
IkReal gconst11=((1.0)*r10*x12378);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12380=gconst10*gconst10;
IkReal x12381=gconst11*gconst11;
IkReal x12382=(gconst10*r21);
IkReal x12383=(cj3*r00);
IkReal x12384=(r00*sj3);
IkReal x12385=((1.0)*gconst11);
IkReal x12386=(gconst10*r20);
IkReal x12387=(r01*sj3);
IkReal x12388=(cj3*gconst11*r01);
IkReal x12389=(r21*x12380);
IkReal x12390=(r20*x12381);
CheckValue<IkReal> x12391=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12385*x12386*x12387))+(((-1.0)*x12382*x12384*x12385))+((x12384*x12390))+((x12387*x12389))+((r02*r22*sj3)))),-1);
if(!x12391.valid){
continue;
}
CheckValue<IkReal> x12392 = IKatan2WithCheck(IkReal((((gconst10*r22*x12383))+((r22*x12388)))),IkReal(((((-1.0)*cj3*r01*x12390))+((x12383*x12389))+((x12382*x12388))+(((-1.0)*x12383*x12385*x12386)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12391.value)))+(x12392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12393=IKsin(j4);
IkReal x12394=IKcos(j4);
IkReal x12395=(cj2*sj1);
IkReal x12396=(cj1*sj2);
IkReal x12397=(gconst10*sj3);
IkReal x12398=(cj3*gconst10);
IkReal x12399=(gconst11*r20);
IkReal x12400=(gconst11*r21);
IkReal x12401=(gconst11*r00);
IkReal x12402=(sj1*sj2);
IkReal x12403=(cj3*gconst11);
IkReal x12404=(gconst11*r10);
IkReal x12405=(cj1*cj2);
IkReal x12406=(gconst11*sj3);
IkReal x12407=((1.0)*x12394);
IkReal x12408=((1.0)*x12393);
IkReal x12409=(gconst10*x12393);
IkReal x12410=(cj3*x12393);
IkReal x12411=(sj3*x12394);
IkReal x12412=(x12395+x12396);
evalcond[0]=((((-1.0)*x12399*x12408))+(((-1.0)*r22*x12407))+((r21*x12409)));
evalcond[1]=((((-1.0)*r12*x12407))+((r11*x12409))+(((-1.0)*x12404*x12408)));
evalcond[2]=((1.0)+(((-1.0)*r02*x12407))+((r01*x12409))+(((-1.0)*x12401*x12408)));
evalcond[3]=(((r01*x12394*x12398))+((r00*x12397))+(((-1.0)*cj3*x12401*x12407))+((r02*x12410))+((r01*x12406)));
evalcond[4]=((((-1.0)*r01*x12397*x12407))+((r00*x12398))+((x12401*x12411))+(((-1.0)*r02*sj3*x12408))+((r01*x12403)));
evalcond[5]=(((r21*x12394*x12398))+(((-1.0)*cj3*x12399*x12407))+((r20*x12397))+((sj3*x12400))+((r22*x12410))+x12412);
evalcond[6]=(((r10*x12397))+((r12*x12410))+(((-1.0)*r10*x12403*x12407))+x12405+((r11*x12394*x12398))+((r11*x12406))+(((-1.0)*x12402)));
evalcond[7]=(((x12404*x12411))+(((-1.0)*r12*sj3*x12408))+((r10*x12398))+(((-1.0)*r11*x12397*x12407))+x12412+((r11*x12403)));
evalcond[8]=(((r20*x12398))+((x12399*x12411))+((cj3*x12400))+(((-1.0)*r21*x12397*x12407))+x12402+(((-1.0)*r22*sj3*x12408))+(((-1.0)*x12405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12413=((1.0)*gconst11);
CheckValue<IkReal> x12414=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r20))+(((-1.0)*r21*x12413)))),-1);
if(!x12414.valid){
continue;
}
CheckValue<IkReal> x12415 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst10*r11))+(((-1.0)*r10*x12413)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12415.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12414.value)))+(x12415.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12416=IKsin(j4);
IkReal x12417=IKcos(j4);
IkReal x12418=(cj2*sj1);
IkReal x12419=(cj1*sj2);
IkReal x12420=(gconst10*sj3);
IkReal x12421=(cj3*gconst10);
IkReal x12422=(gconst11*r20);
IkReal x12423=(gconst11*r21);
IkReal x12424=(gconst11*r00);
IkReal x12425=(sj1*sj2);
IkReal x12426=(cj3*gconst11);
IkReal x12427=(gconst11*r10);
IkReal x12428=(cj1*cj2);
IkReal x12429=(gconst11*sj3);
IkReal x12430=((1.0)*x12417);
IkReal x12431=((1.0)*x12416);
IkReal x12432=(gconst10*x12416);
IkReal x12433=(cj3*x12416);
IkReal x12434=(sj3*x12417);
IkReal x12435=(x12419+x12418);
evalcond[0]=(((r21*x12432))+(((-1.0)*r22*x12430))+(((-1.0)*x12422*x12431)));
evalcond[1]=((((-1.0)*x12427*x12431))+(((-1.0)*r12*x12430))+((r11*x12432)));
evalcond[2]=((1.0)+(((-1.0)*x12424*x12431))+(((-1.0)*r02*x12430))+((r01*x12432)));
evalcond[3]=((((-1.0)*cj3*x12424*x12430))+((r01*x12417*x12421))+((r02*x12433))+((r01*x12429))+((r00*x12420)));
evalcond[4]=((((-1.0)*r01*x12420*x12430))+(((-1.0)*r02*sj3*x12431))+((r01*x12426))+((x12424*x12434))+((r00*x12421)));
evalcond[5]=(((r20*x12420))+((r21*x12417*x12421))+(((-1.0)*cj3*x12422*x12430))+((r22*x12433))+x12435+((sj3*x12423)));
evalcond[6]=((((-1.0)*x12425))+(((-1.0)*r10*x12426*x12430))+((r12*x12433))+((r10*x12420))+((r11*x12429))+((r11*x12417*x12421))+x12428);
evalcond[7]=((((-1.0)*r12*sj3*x12431))+((r10*x12421))+((r11*x12426))+(((-1.0)*r11*x12420*x12430))+x12435+((x12427*x12434)));
evalcond[8]=(((r20*x12421))+(((-1.0)*x12428))+(((-1.0)*r22*sj3*x12431))+((cj3*x12423))+((x12422*x12434))+x12425+(((-1.0)*r21*x12420*x12430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12436=((-1.0)*r11);
IkReal x12437=((-1.0)*r10);
CheckValue<IkReal> x12439 = IKatan2WithCheck(IkReal(x12436),IkReal(x12437),IKFAST_ATAN2_MAGTHRESH);
if(!x12439.valid){
continue;
}
IkReal x12438=((1.0)*(x12439.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12438)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12437);
rxp1_1=(px*r21);
rxp1_2=(px*x12436);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12438)));
IkReal gconst10=x12436;
IkReal gconst11=((1.0)*r10);
j4eval[0]=-1.0;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12440=((-1.0)*r11);
IkReal x12441=((-1.0)*r10);
CheckValue<IkReal> x12443 = IKatan2WithCheck(IkReal(x12440),IkReal(x12441),IKFAST_ATAN2_MAGTHRESH);
if(!x12443.valid){
continue;
}
IkReal x12442=((1.0)*(x12443.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12442)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12441);
rxp1_1=(px*r21);
rxp1_2=(px*x12440);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12442)));
IkReal gconst10=x12440;
IkReal gconst11=((1.0)*r10);
IkReal x12444=((1.0)*cj3);
j4eval[0]=-1.0;
j4eval[1]=((((-1.0)*r11*r21*x12444))+(((-1.0)*r10*r20*x12444)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12445=((-1.0)*r11);
IkReal x12446=((-1.0)*r10);
CheckValue<IkReal> x12448 = IKatan2WithCheck(IkReal(x12445),IkReal(x12446),IKFAST_ATAN2_MAGTHRESH);
if(!x12448.valid){
continue;
}
IkReal x12447=((1.0)*(x12448.value));
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12447)));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x12446);
rxp1_1=(px*r21);
rxp1_2=(px*x12445);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12447)));
IkReal gconst10=x12445;
IkReal gconst11=((1.0)*r10);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j4]

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12450=IKPowWithIntegerCheck(r02,-1);
if(!x12450.valid){
continue;
}
IkReal x12449=x12450.value;
CheckValue<IkReal> x12451=IKPowWithIntegerCheck(cj3,-1);
if(!x12451.valid){
continue;
}
if( IKabs((x12449*(x12451.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x12449)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x12449*(x12451.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x12449))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x12449*(x12451.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x12449));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12452=IKsin(j4);
IkReal x12453=IKcos(j4);
IkReal x12454=(cj3*r10);
IkReal x12455=((1.0)*gconst11);
IkReal x12456=(sj1*sj2);
IkReal x12457=(gconst11*sj3);
IkReal x12458=(cj3*r11);
IkReal x12459=(cj2*sj1);
IkReal x12460=(gconst10*r20);
IkReal x12461=(gconst10*sj3);
IkReal x12462=((1.0)*cj0);
IkReal x12463=((1.0)*sj0);
IkReal x12464=(cj1*sj2);
IkReal x12465=(cj3*r21);
IkReal x12466=((1.0)*cj1*cj2);
IkReal x12467=(r20*x12453);
IkReal x12468=(gconst10*x12452);
IkReal x12469=(gconst10*x12453);
IkReal x12470=(r02*x12452);
IkReal x12471=((1.0)*x12453);
evalcond[0]=((((-1.0)*r02*x12471))+(((-1.0)*x12463)));
evalcond[1]=((((-1.0)*r20*x12452*x12455))+((r21*x12468)));
evalcond[2]=((((-1.0)*r10*x12452*x12455))+cj0+((r11*x12468)));
evalcond[3]=(((cj3*x12470))+((cj0*x12456))+(((-1.0)*cj1*cj2*x12462)));
evalcond[4]=((((-1.0)*sj3*x12470))+(((-1.0)*x12459*x12462))+(((-1.0)*x12462*x12464)));
evalcond[5]=(((x12465*x12469))+((sj3*x12460))+(((-1.0)*cj3*x12455*x12467))+x12464+x12459+((r21*x12457)));
evalcond[6]=(((gconst11*x12465))+((x12457*x12467))+((cj3*x12460))+(((-1.0)*x12466))+(((-1.0)*r21*x12461*x12471))+x12456);
evalcond[7]=(((r11*x12457))+((sj0*x12456))+((x12458*x12469))+(((-1.0)*x12453*x12454*x12455))+(((-1.0)*cj1*cj2*x12463))+((r10*x12461)));
evalcond[8]=(((r10*x12453*x12457))+(((-1.0)*r11*x12461*x12471))+(((-1.0)*x12459*x12463))+(((-1.0)*x12463*x12464))+((gconst10*x12454))+((gconst11*x12458)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12472=((1.0)*r20);
IkReal x12473=((1.0)*gconst11);
CheckValue<IkReal> x12474=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*r10*x12473))),-1);
if(!x12474.valid){
continue;
}
CheckValue<IkReal> x12475=IKPowWithIntegerCheck(((((-1.0)*cj3*gconst11*x12472))+((cj3*gconst10*r21))),-1);
if(!x12475.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12474.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12475.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12472))+(((-1.0)*r21*sj3*x12473)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12474.value)))+IKsqr(((x12475.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12472))+(((-1.0)*r21*sj3*x12473))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12474.value)), ((x12475.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst10*sj3*x12472))+(((-1.0)*r21*sj3*x12473))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12476=IKsin(j4);
IkReal x12477=IKcos(j4);
IkReal x12478=(cj3*r10);
IkReal x12479=((1.0)*gconst11);
IkReal x12480=(sj1*sj2);
IkReal x12481=(gconst11*sj3);
IkReal x12482=(cj3*r11);
IkReal x12483=(cj2*sj1);
IkReal x12484=(gconst10*r20);
IkReal x12485=(gconst10*sj3);
IkReal x12486=((1.0)*cj0);
IkReal x12487=((1.0)*sj0);
IkReal x12488=(cj1*sj2);
IkReal x12489=(cj3*r21);
IkReal x12490=((1.0)*cj1*cj2);
IkReal x12491=(r20*x12477);
IkReal x12492=(gconst10*x12476);
IkReal x12493=(gconst10*x12477);
IkReal x12494=(r02*x12476);
IkReal x12495=((1.0)*x12477);
evalcond[0]=((((-1.0)*x12487))+(((-1.0)*r02*x12495)));
evalcond[1]=(((r21*x12492))+(((-1.0)*r20*x12476*x12479)));
evalcond[2]=(cj0+(((-1.0)*r10*x12476*x12479))+((r11*x12492)));
evalcond[3]=(((cj3*x12494))+((cj0*x12480))+(((-1.0)*cj1*cj2*x12486)));
evalcond[4]=((((-1.0)*sj3*x12494))+(((-1.0)*x12483*x12486))+(((-1.0)*x12486*x12488)));
evalcond[5]=(((sj3*x12484))+((x12489*x12493))+(((-1.0)*cj3*x12479*x12491))+x12483+x12488+((r21*x12481)));
evalcond[6]=((((-1.0)*r21*x12485*x12495))+(((-1.0)*x12490))+((cj3*x12484))+((gconst11*x12489))+x12480+((x12481*x12491)));
evalcond[7]=((((-1.0)*cj1*cj2*x12487))+((r11*x12481))+((x12482*x12493))+((sj0*x12480))+((r10*x12485))+(((-1.0)*x12477*x12478*x12479)));
evalcond[8]=(((gconst10*x12478))+(((-1.0)*x12487*x12488))+((r10*x12477*x12481))+(((-1.0)*r11*x12485*x12495))+(((-1.0)*x12483*x12487))+((gconst11*x12482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12496=IKPowWithIntegerCheck((((gconst10*r11))+(((-1.0)*gconst11*r10))),-1);
if(!x12496.valid){
continue;
}
CheckValue<IkReal> x12497=IKPowWithIntegerCheck(r02,-1);
if(!x12497.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x12496.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x12497.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x12496.value)))+IKsqr(((-1.0)*sj0*(x12497.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x12496.value)), ((-1.0)*sj0*(x12497.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12498=IKsin(j4);
IkReal x12499=IKcos(j4);
IkReal x12500=(cj3*r10);
IkReal x12501=((1.0)*gconst11);
IkReal x12502=(sj1*sj2);
IkReal x12503=(gconst11*sj3);
IkReal x12504=(cj3*r11);
IkReal x12505=(cj2*sj1);
IkReal x12506=(gconst10*r20);
IkReal x12507=(gconst10*sj3);
IkReal x12508=((1.0)*cj0);
IkReal x12509=((1.0)*sj0);
IkReal x12510=(cj1*sj2);
IkReal x12511=(cj3*r21);
IkReal x12512=((1.0)*cj1*cj2);
IkReal x12513=(r20*x12499);
IkReal x12514=(gconst10*x12498);
IkReal x12515=(gconst10*x12499);
IkReal x12516=(r02*x12498);
IkReal x12517=((1.0)*x12499);
evalcond[0]=((((-1.0)*x12509))+(((-1.0)*r02*x12517)));
evalcond[1]=((((-1.0)*r20*x12498*x12501))+((r21*x12514)));
evalcond[2]=(cj0+(((-1.0)*r10*x12498*x12501))+((r11*x12514)));
evalcond[3]=((((-1.0)*cj1*cj2*x12508))+((cj0*x12502))+((cj3*x12516)));
evalcond[4]=((((-1.0)*x12505*x12508))+(((-1.0)*sj3*x12516))+(((-1.0)*x12508*x12510)));
evalcond[5]=(((sj3*x12506))+((x12511*x12515))+((r21*x12503))+(((-1.0)*cj3*x12501*x12513))+x12505+x12510);
evalcond[6]=((((-1.0)*x12512))+((gconst11*x12511))+(((-1.0)*r21*x12507*x12517))+((cj3*x12506))+((x12503*x12513))+x12502);
evalcond[7]=(((sj0*x12502))+((r11*x12503))+(((-1.0)*cj1*cj2*x12509))+((r10*x12507))+((x12504*x12515))+(((-1.0)*x12499*x12500*x12501)));
evalcond[8]=(((r10*x12499*x12503))+(((-1.0)*x12505*x12509))+(((-1.0)*x12509*x12510))+(((-1.0)*r11*x12507*x12517))+((gconst10*x12500))+((gconst11*x12504)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x12518=((-1.0)*r11);
CheckValue<IkReal> x12521 = IKatan2WithCheck(IkReal(x12518),IkReal(((-1.0)*r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x12521.valid){
continue;
}
IkReal x12519=((1.0)*(x12521.value));
IkReal x12520=x11844;
sj5=gconst10;
cj5=gconst11;
j5=((3.14159265)+(((-1.0)*x12519)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst9=((3.14159265358979)+(((-1.0)*x12519)));
IkReal gconst10=(x12518*x12520);
IkReal gconst11=((1.0)*r10*x12520);
IkReal x12522=r12*r12;
IkReal x12523=((1.0)*sj0);
IkReal x12524=(cj0*r02);
IkReal x12525=x11844;
j4eval[0]=((IKabs((((sj0*x12522*x12525))+((r12*x12524*x12525))+(((-1.0)*x12523*x12525)))))+(IKabs(((((-1.0)*r12*x12523))+(((-1.0)*x12524))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12526=((1.0)*r12);
IkReal x12527=(sj1*sj2);
IkReal x12528=((1.0)*r21);
IkReal x12529=(cj3*gconst11);
IkReal x12530=(r11*sj3);
IkReal x12531=(gconst11*r20);
IkReal x12532=((1.0)*sj3);
IkReal x12533=(cj1*cj2);
IkReal x12534=(gconst10*r21*sj3);
IkReal x12535=(cj3*gconst10*r20);
CheckValue<IkReal> x12536=IKPowWithIntegerCheck(((((-1.0)*gconst11*r10*x12531*x12532))+((gconst10*x12530*x12531))+(((-1.0)*x12528*x12530*(gconst10*gconst10)))+((gconst11*r10*x12534))),-1);
if(!x12536.valid){
continue;
}
CheckValue<IkReal> x12537=IKPowWithIntegerCheck(((((-1.0)*gconst10*sj3*x12528))+((sj3*x12531))),-1);
if(!x12537.valid){
continue;
}
if( IKabs(((x12536.value)*(((((-1.0)*x12526*x12535))+(((-1.0)*r21*x12526*x12529))+(((-1.0)*cj0*x12531*x12532))+(((-1.0)*x12526*x12527))+((r12*x12533))+((cj0*x12534)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12537.value)*(((((-1.0)*x12528*x12529))+(((-1.0)*x12535))+x12533+(((-1.0)*x12527)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12536.value)*(((((-1.0)*x12526*x12535))+(((-1.0)*r21*x12526*x12529))+(((-1.0)*cj0*x12531*x12532))+(((-1.0)*x12526*x12527))+((r12*x12533))+((cj0*x12534))))))+IKsqr(((x12537.value)*(((((-1.0)*x12528*x12529))+(((-1.0)*x12535))+x12533+(((-1.0)*x12527))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12536.value)*(((((-1.0)*x12526*x12535))+(((-1.0)*r21*x12526*x12529))+(((-1.0)*cj0*x12531*x12532))+(((-1.0)*x12526*x12527))+((r12*x12533))+((cj0*x12534))))), ((x12537.value)*(((((-1.0)*x12528*x12529))+(((-1.0)*x12535))+x12533+(((-1.0)*x12527))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12538=IKsin(j4);
IkReal x12539=IKcos(j4);
IkReal x12540=(cj3*r10);
IkReal x12541=(gconst11*r20);
IkReal x12542=(gconst11*sj3);
IkReal x12543=(sj1*sj2);
IkReal x12544=(cj3*r11);
IkReal x12545=(r10*sj3);
IkReal x12546=(gconst10*r01);
IkReal x12547=(gconst10*sj3);
IkReal x12548=(cj2*sj1);
IkReal x12549=((1.0)*sj0);
IkReal x12550=(cj1*sj2);
IkReal x12551=(gconst10*r21);
IkReal x12552=(cj3*gconst10);
IkReal x12553=(cj3*gconst11);
IkReal x12554=((1.0)*cj0);
IkReal x12555=((1.0)*x12538);
IkReal x12556=((1.0)*cj1*cj2);
IkReal x12557=(gconst11*x12539);
IkReal x12558=(sj3*x12539);
IkReal x12559=(gconst10*x12538);
IkReal x12560=((1.0)*x12539);
IkReal x12561=(cj3*x12539);
IkReal x12562=(cj3*x12538);
evalcond[0]=((((-1.0)*x12541*x12555))+((x12538*x12551)));
evalcond[1]=(cj0+(((-1.0)*r12*x12560))+((r11*x12559))+(((-1.0)*gconst11*r10*x12555)));
evalcond[2]=((((-1.0)*gconst11*r00*x12555))+(((-1.0)*r02*x12560))+((x12538*x12546))+(((-1.0)*x12549)));
evalcond[3]=(((r20*x12547))+x12548+x12550+((r21*x12542))+(((-1.0)*cj3*x12541*x12560))+((x12551*x12561)));
evalcond[4]=(((r20*x12552))+((r21*x12553))+((x12541*x12558))+x12543+(((-1.0)*x12556))+(((-1.0)*r21*x12547*x12560)));
evalcond[5]=(((x12546*x12561))+((r00*x12547))+(((-1.0)*r00*x12553*x12560))+((r01*x12542))+(((-1.0)*cj1*cj2*x12554))+((cj0*x12543))+((r02*x12562)));
evalcond[6]=(((r12*x12562))+((gconst10*x12545))+((r11*x12542))+((gconst10*x12539*x12544))+((sj0*x12543))+(((-1.0)*cj1*cj2*x12549))+(((-1.0)*x12540*x12557)));
evalcond[7]=(((r01*x12553))+(((-1.0)*x12548*x12554))+((r00*x12539*x12542))+((r00*x12552))+(((-1.0)*x12550*x12554))+(((-1.0)*r02*sj3*x12555))+(((-1.0)*x12546*x12558)));
evalcond[8]=((((-1.0)*x12548*x12549))+(((-1.0)*r11*x12547*x12560))+((gconst10*x12540))+(((-1.0)*r12*sj3*x12555))+((r10*x12539*x12542))+((gconst11*x12544))+(((-1.0)*x12549*x12550)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12563=((1.0)*sj0);
IkReal x12564=((1.0)*gconst10);
CheckValue<IkReal> x12565 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12563))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12564))+(((-1.0)*gconst10*r11*x12563))+((cj0*gconst11*r00))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12565.valid){
continue;
}
CheckValue<IkReal> x12566=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*r21))+(((-1.0)*r20*x12564)))),-1);
if(!x12566.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12565.value)+(((1.5707963267949)*(x12566.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12567=IKsin(j4);
IkReal x12568=IKcos(j4);
IkReal x12569=(cj3*r10);
IkReal x12570=(gconst11*r20);
IkReal x12571=(gconst11*sj3);
IkReal x12572=(sj1*sj2);
IkReal x12573=(cj3*r11);
IkReal x12574=(r10*sj3);
IkReal x12575=(gconst10*r01);
IkReal x12576=(gconst10*sj3);
IkReal x12577=(cj2*sj1);
IkReal x12578=((1.0)*sj0);
IkReal x12579=(cj1*sj2);
IkReal x12580=(gconst10*r21);
IkReal x12581=(cj3*gconst10);
IkReal x12582=(cj3*gconst11);
IkReal x12583=((1.0)*cj0);
IkReal x12584=((1.0)*x12567);
IkReal x12585=((1.0)*cj1*cj2);
IkReal x12586=(gconst11*x12568);
IkReal x12587=(sj3*x12568);
IkReal x12588=(gconst10*x12567);
IkReal x12589=((1.0)*x12568);
IkReal x12590=(cj3*x12568);
IkReal x12591=(cj3*x12567);
evalcond[0]=((((-1.0)*x12570*x12584))+((x12567*x12580)));
evalcond[1]=(cj0+(((-1.0)*r12*x12589))+(((-1.0)*gconst11*r10*x12584))+((r11*x12588)));
evalcond[2]=(((x12567*x12575))+(((-1.0)*x12578))+(((-1.0)*r02*x12589))+(((-1.0)*gconst11*r00*x12584)));
evalcond[3]=(((r21*x12571))+((r20*x12576))+((x12580*x12590))+x12579+x12577+(((-1.0)*cj3*x12570*x12589)));
evalcond[4]=(((r20*x12581))+(((-1.0)*r21*x12576*x12589))+((x12570*x12587))+((r21*x12582))+x12572+(((-1.0)*x12585)));
evalcond[5]=(((cj0*x12572))+(((-1.0)*r00*x12582*x12589))+((r02*x12591))+((x12575*x12590))+((r00*x12576))+((r01*x12571))+(((-1.0)*cj1*cj2*x12583)));
evalcond[6]=(((r12*x12591))+(((-1.0)*x12569*x12586))+((gconst10*x12574))+((gconst10*x12568*x12573))+((r11*x12571))+(((-1.0)*cj1*cj2*x12578))+((sj0*x12572)));
evalcond[7]=(((r00*x12581))+(((-1.0)*x12579*x12583))+((r01*x12582))+((r00*x12568*x12571))+(((-1.0)*r02*sj3*x12584))+(((-1.0)*x12575*x12587))+(((-1.0)*x12577*x12583)));
evalcond[8]=(((gconst11*x12573))+((r10*x12568*x12571))+(((-1.0)*x12578*x12579))+(((-1.0)*r12*sj3*x12584))+(((-1.0)*x12577*x12578))+((gconst10*x12569))+(((-1.0)*r11*x12576*x12589)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12592=gconst10*gconst10;
IkReal x12593=r21*r21;
IkReal x12594=gconst11*gconst11;
IkReal x12595=r20*r20;
IkReal x12596=((1.0)*cj3);
IkReal x12597=(r20*sj3);
IkReal x12598=(gconst10*gconst11);
IkReal x12599=(cj2*sj1);
IkReal x12600=(gconst10*r21);
IkReal x12601=(cj1*sj2);
IkReal x12602=((1.0)*gconst11*r20);
CheckValue<IkReal> x12603=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12592*x12593*x12596))+(((-1.0)*x12594*x12595*x12596))+(((-1.0)*x12596*(r22*r22)))+(((2.0)*cj3*r20*r21*x12598)))),-1);
if(!x12603.valid){
continue;
}
CheckValue<IkReal> x12604 = IKatan2WithCheck(IkReal((((gconst11*r21*r22*sj3))+((r22*x12599))+((r22*x12601))+((gconst10*r22*x12597)))),IkReal((((x12600*x12601))+((x12599*x12600))+((sj3*x12593*x12598))+((r21*x12592*x12597))+(((-1.0)*sj3*x12595*x12598))+(((-1.0)*x12601*x12602))+(((-1.0)*r21*x12594*x12597))+(((-1.0)*x12599*x12602)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12604.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12603.value)))+(x12604.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12605=IKsin(j4);
IkReal x12606=IKcos(j4);
IkReal x12607=(cj3*r10);
IkReal x12608=(gconst11*r20);
IkReal x12609=(gconst11*sj3);
IkReal x12610=(sj1*sj2);
IkReal x12611=(gconst11*r00);
IkReal x12612=(cj3*r11);
IkReal x12613=(gconst10*sj3);
IkReal x12614=(cj2*sj1);
IkReal x12615=(cj3*r01);
IkReal x12616=((1.0)*sj0);
IkReal x12617=(cj1*sj2);
IkReal x12618=(cj3*r21);
IkReal x12619=(cj3*gconst10);
IkReal x12620=((1.0)*cj0);
IkReal x12621=((1.0)*x12606);
IkReal x12622=((1.0)*x12605);
IkReal x12623=((1.0)*cj1*cj2);
IkReal x12624=(cj3*x12605);
IkReal x12625=(gconst10*x12605);
IkReal x12626=(gconst10*x12606);
evalcond[0]=((((-1.0)*r22*x12621))+((r21*x12625))+(((-1.0)*x12608*x12622)));
evalcond[1]=(cj0+(((-1.0)*r12*x12621))+(((-1.0)*gconst11*r10*x12622))+((r11*x12625)));
evalcond[2]=((((-1.0)*r02*x12621))+(((-1.0)*x12611*x12622))+((r01*x12625))+(((-1.0)*x12616)));
evalcond[3]=((((-1.0)*cj3*x12608*x12621))+((x12618*x12626))+((r22*x12624))+((r20*x12613))+x12614+x12617+((r21*x12609)));
evalcond[4]=((((-1.0)*x12623))+((gconst11*x12618))+((sj3*x12606*x12608))+((r20*x12619))+x12610+(((-1.0)*r21*x12613*x12621))+(((-1.0)*r22*sj3*x12622)));
evalcond[5]=(((r02*x12624))+((r01*x12609))+(((-1.0)*cj3*x12611*x12621))+((x12615*x12626))+(((-1.0)*cj1*cj2*x12620))+((r00*x12613))+((cj0*x12610)));
evalcond[6]=(((r11*x12609))+((sj0*x12610))+(((-1.0)*gconst11*x12607*x12621))+((r12*x12624))+((x12612*x12626))+(((-1.0)*cj1*cj2*x12616))+((r10*x12613)));
evalcond[7]=(((gconst11*x12615))+(((-1.0)*r01*x12613*x12621))+(((-1.0)*r02*sj3*x12622))+(((-1.0)*x12617*x12620))+((r00*x12619))+(((-1.0)*x12614*x12620))+((r00*x12606*x12609)));
evalcond[8]=((((-1.0)*x12614*x12616))+((gconst10*x12607))+((gconst11*x12612))+(((-1.0)*r11*x12613*x12621))+(((-1.0)*x12616*x12617))+(((-1.0)*r12*sj3*x12622))+((r10*x12606*x12609)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12627=((1.0)*sj0);
IkReal x12628=((1.0)*gconst10);
CheckValue<IkReal> x12629=IKPowWithIntegerCheck(IKsign(((((-1.0)*r20*x12628))+(((-1.0)*gconst11*r21)))),-1);
if(!x12629.valid){
continue;
}
CheckValue<IkReal> x12630 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x12627))+(((-1.0)*cj0*r02)))),IkReal(((((-1.0)*cj0*r01*x12628))+((cj0*gconst11*r00))+(((-1.0)*gconst10*r11*x12627))+((gconst11*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12630.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12629.value)))+(x12630.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12631=IKsin(j4);
IkReal x12632=IKcos(j4);
IkReal x12633=(cj3*r10);
IkReal x12634=(gconst11*r20);
IkReal x12635=(gconst11*sj3);
IkReal x12636=(sj1*sj2);
IkReal x12637=(gconst11*r00);
IkReal x12638=(cj3*r11);
IkReal x12639=(gconst10*sj3);
IkReal x12640=(cj2*sj1);
IkReal x12641=(cj3*r01);
IkReal x12642=((1.0)*sj0);
IkReal x12643=(cj1*sj2);
IkReal x12644=(cj3*r21);
IkReal x12645=(cj3*gconst10);
IkReal x12646=((1.0)*cj0);
IkReal x12647=((1.0)*x12632);
IkReal x12648=((1.0)*x12631);
IkReal x12649=((1.0)*cj1*cj2);
IkReal x12650=(cj3*x12631);
IkReal x12651=(gconst10*x12631);
IkReal x12652=(gconst10*x12632);
evalcond[0]=(((r21*x12651))+(((-1.0)*r22*x12647))+(((-1.0)*x12634*x12648)));
evalcond[1]=(cj0+((r11*x12651))+(((-1.0)*gconst11*r10*x12648))+(((-1.0)*r12*x12647)));
evalcond[2]=((((-1.0)*r02*x12647))+(((-1.0)*x12637*x12648))+(((-1.0)*x12642))+((r01*x12651)));
evalcond[3]=(((r22*x12650))+(((-1.0)*cj3*x12634*x12647))+((r20*x12639))+((x12644*x12652))+x12643+x12640+((r21*x12635)));
evalcond[4]=((((-1.0)*r21*x12639*x12647))+((r20*x12645))+((sj3*x12632*x12634))+x12636+(((-1.0)*x12649))+((gconst11*x12644))+(((-1.0)*r22*sj3*x12648)));
evalcond[5]=(((x12641*x12652))+((r02*x12650))+((r01*x12635))+((cj0*x12636))+((r00*x12639))+(((-1.0)*cj1*cj2*x12646))+(((-1.0)*cj3*x12637*x12647)));
evalcond[6]=(((r11*x12635))+(((-1.0)*gconst11*x12633*x12647))+(((-1.0)*cj1*cj2*x12642))+((sj0*x12636))+((r12*x12650))+((r10*x12639))+((x12638*x12652)));
evalcond[7]=((((-1.0)*r01*x12639*x12647))+((r00*x12645))+(((-1.0)*x12643*x12646))+(((-1.0)*x12640*x12646))+((r00*x12632*x12635))+((gconst11*x12641))+(((-1.0)*r02*sj3*x12648)));
evalcond[8]=((((-1.0)*r12*sj3*x12648))+(((-1.0)*x12642*x12643))+(((-1.0)*x12640*x12642))+((gconst10*x12633))+((r10*x12632*x12635))+(((-1.0)*r11*x12639*x12647))+((gconst11*x12638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12653=((1.0)*gconst11);
CheckValue<IkReal> x12654 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*gconst10*r21))+(((-1.0)*cj0*r20*x12653)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12654.valid){
continue;
}
CheckValue<IkReal> x12655=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst10*r00))+(((-1.0)*r01*x12653)))),-1);
if(!x12655.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12654.value)+(((1.5707963267949)*(x12655.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x12656=IKsin(j4);
IkReal x12657=IKcos(j4);
IkReal x12658=(cj3*r10);
IkReal x12659=(gconst11*r20);
IkReal x12660=(gconst11*sj3);
IkReal x12661=(sj1*sj2);
IkReal x12662=(gconst11*r00);
IkReal x12663=(cj3*r11);
IkReal x12664=(gconst10*sj3);
IkReal x12665=(cj2*sj1);
IkReal x12666=(cj3*r01);
IkReal x12667=((1.0)*sj0);
IkReal x12668=(cj1*sj2);
IkReal x12669=(cj3*r21);
IkReal x12670=(cj3*gconst10);
IkReal x12671=((1.0)*cj0);
IkReal x12672=((1.0)*x12657);
IkReal x12673=((1.0)*x12656);
IkReal x12674=((1.0)*cj1*cj2);
IkReal x12675=(cj3*x12656);
IkReal x12676=(gconst10*x12656);
IkReal x12677=(gconst10*x12657);
evalcond[0]=(((r21*x12676))+(((-1.0)*r22*x12672))+(((-1.0)*x12659*x12673)));
evalcond[1]=(cj0+(((-1.0)*r12*x12672))+((r11*x12676))+(((-1.0)*gconst11*r10*x12673)));
evalcond[2]=((((-1.0)*x12662*x12673))+(((-1.0)*x12667))+(((-1.0)*r02*x12672))+((r01*x12676)));
evalcond[3]=((((-1.0)*cj3*x12659*x12672))+((r21*x12660))+((x12669*x12677))+((r22*x12675))+x12668+x12665+((r20*x12664)));
evalcond[4]=(((r20*x12670))+(((-1.0)*x12674))+((sj3*x12657*x12659))+(((-1.0)*r21*x12664*x12672))+(((-1.0)*r22*sj3*x12673))+((gconst11*x12669))+x12661);
evalcond[5]=((((-1.0)*cj3*x12662*x12672))+((r02*x12675))+((x12666*x12677))+((r01*x12660))+((cj0*x12661))+(((-1.0)*cj1*cj2*x12671))+((r00*x12664)));
evalcond[6]=(((sj0*x12661))+((r10*x12664))+((r12*x12675))+((x12663*x12677))+((r11*x12660))+(((-1.0)*cj1*cj2*x12667))+(((-1.0)*gconst11*x12658*x12672)));
evalcond[7]=((((-1.0)*r02*sj3*x12673))+(((-1.0)*x12665*x12671))+((r00*x12657*x12660))+(((-1.0)*r01*x12664*x12672))+((gconst11*x12666))+((r00*x12670))+(((-1.0)*x12668*x12671)));
evalcond[8]=(((gconst10*x12658))+(((-1.0)*x12667*x12668))+(((-1.0)*r11*x12664*x12672))+(((-1.0)*x12665*x12667))+((gconst11*x12663))+((r10*x12657*x12660))+(((-1.0)*r12*sj3*x12673)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j0))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12678=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12678;
j4eval[1]=IKsign(x12678);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12679=((1.0)*cj5);
IkReal x12680=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12679)));
j4eval[0]=x12680;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x12679))))));
j4eval[2]=IKsign(x12680);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=1.0;
j0=0;
IkReal x12681=cj5*cj5;
IkReal x12682=(cj3*r21);
IkReal x12683=(cj5*sj5);
IkReal x12684=((1.0)*cj3);
IkReal x12685=((((-1.0)*r11*x12682))+(((-1.0)*r10*r20*x12681*x12684))+((cj3*r11*r20*x12683))+((r11*x12681*x12682))+(((-1.0)*r12*r22*x12684))+((r10*x12682*x12683)));
j4eval[0]=x12685;
j4eval[1]=IKsign(x12685);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12686=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12686;
j4eval[1]=IKsign(x12686);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12687=((1.0)*cj5);
IkReal x12688=((((-1.0)*r01*x12687))+(((-1.0)*r00*sj5)));
j4eval[0]=x12688;
j4eval[1]=((IKabs(((((-1.0)*r20*x12687))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12688);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x12689=cj5*cj5;
IkReal x12690=r11*r11;
IkReal x12691=(r11*sj5);
IkReal x12692=(cj5*r10);
IkReal x12693=((r12*r12)+(((-1.0)*x12689*x12690))+((x12689*(r10*r10)))+x12690+(((-2.0)*x12691*x12692)));
j4eval[0]=x12693;
j4eval[1]=IKsign(x12693);
j4eval[2]=((IKabs(r12))+(IKabs((x12692+(((-1.0)*x12691))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12694=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12694);
rxp1_1=(px*r21);
rxp1_2=(r11*x12694);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12695=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12695);
rxp1_1=(px*r21);
rxp1_2=(r11*x12695);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12696=((1.0)*sj1);
CheckValue<IkReal> x12697=IKPowWithIntegerCheck(r02,-1);
if(!x12697.valid){
continue;
}
CheckValue<IkReal> x12698=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12698.valid){
continue;
}
if( IKabs(((x12697.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12696)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12698.value)*(((((-1.0)*sj2*x12696))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12697.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12696))))))+IKsqr(((x12698.value)*(((((-1.0)*sj2*x12696))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12697.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x12696))))), ((x12698.value)*(((((-1.0)*sj2*x12696))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12699=IKsin(j4);
IkReal x12700=IKcos(j4);
IkReal x12701=(cj5*r20);
IkReal x12702=((1.0)*cj2);
IkReal x12703=(cj5*r10);
IkReal x12704=((1.0)*x12699);
IkReal x12705=(sj5*x12699);
IkReal x12706=((1.0)*sj5*x12700);
evalcond[0]=((-1.0)*r02*x12700);
evalcond[1]=(((r21*x12705))+(((-1.0)*x12701*x12704)));
evalcond[2]=((((-1.0)*r11*x12706))+((x12700*x12703)));
evalcond[3]=((1.0)+(((-1.0)*x12703*x12704))+((r11*x12705)));
evalcond[4]=((((-1.0)*sj1*x12702))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12704)));
evalcond[5]=(((x12700*x12701))+((sj1*sj2))+(((-1.0)*r21*x12706))+(((-1.0)*cj1*x12702)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12707=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12707.valid){
continue;
}
CheckValue<IkReal> x12708=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x12708.valid){
continue;
}
if( IKabs(((-1.0)*(x12707.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12707.value)))+IKsqr(((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12707.value)), ((x12708.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12709=IKsin(j4);
IkReal x12710=IKcos(j4);
IkReal x12711=(cj5*r20);
IkReal x12712=((1.0)*cj2);
IkReal x12713=(cj5*r10);
IkReal x12714=((1.0)*x12709);
IkReal x12715=(sj5*x12709);
IkReal x12716=((1.0)*sj5*x12710);
evalcond[0]=((-1.0)*r02*x12710);
evalcond[1]=(((r21*x12715))+(((-1.0)*x12711*x12714)));
evalcond[2]=(((x12710*x12713))+(((-1.0)*r11*x12716)));
evalcond[3]=((1.0)+((r11*x12715))+(((-1.0)*x12713*x12714)));
evalcond[4]=((((-1.0)*sj1*x12712))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12714)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r21*x12716))+((x12710*x12711))+(((-1.0)*cj1*x12712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12717=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12717);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12717);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12718=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x12718);
rxp1_0=(pz*r11);
rxp1_1=(r01*x12718);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12719=IKPowWithIntegerCheck(r22,-1);
if(!x12719.valid){
continue;
}
CheckValue<IkReal> x12720=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12720.valid){
continue;
}
if( IKabs(((x12719.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12720.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12719.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x12720.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12719.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x12720.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12721=IKsin(j4);
IkReal x12722=IKcos(j4);
IkReal x12723=((1.0)*cj2);
IkReal x12724=(cj5*x12722);
IkReal x12725=(sj5*x12721);
IkReal x12726=((1.0)*sj5*x12722);
IkReal x12727=((1.0)*cj5*x12721);
evalcond[0]=((-1.0)*r22*x12722);
evalcond[1]=((((-1.0)*r00*x12727))+((r01*x12725)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12721))+(((-1.0)*cj1*x12723)));
evalcond[3]=(((r10*x12724))+(((-1.0)*r11*x12726)));
evalcond[4]=((1.0)+((r11*x12725))+(((-1.0)*r10*x12727)));
evalcond[5]=((((-1.0)*sj1*x12723))+(((-1.0)*r01*x12726))+(((-1.0)*cj1*sj2))+((r00*x12724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12728=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x12728.valid){
continue;
}
CheckValue<IkReal> x12729=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x12729.valid){
continue;
}
if( IKabs(((-1.0)*(x12728.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12729.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12728.value)))+IKsqr(((x12729.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12728.value)), ((x12729.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12730=IKsin(j4);
IkReal x12731=IKcos(j4);
IkReal x12732=((1.0)*cj2);
IkReal x12733=(cj5*x12731);
IkReal x12734=(sj5*x12730);
IkReal x12735=((1.0)*sj5*x12731);
IkReal x12736=((1.0)*cj5*x12730);
evalcond[0]=((-1.0)*r22*x12731);
evalcond[1]=((((-1.0)*r00*x12736))+((r01*x12734)));
evalcond[2]=(((sj1*sj2))+(((-1.0)*r22*x12730))+(((-1.0)*cj1*x12732)));
evalcond[3]=(((r10*x12733))+(((-1.0)*r11*x12735)));
evalcond[4]=((1.0)+((r11*x12734))+(((-1.0)*r10*x12736)));
evalcond[5]=((((-1.0)*sj1*x12732))+(((-1.0)*r01*x12735))+(((-1.0)*cj1*sj2))+((r00*x12733)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12737=cj5*cj5;
IkReal x12738=r11*r11;
IkReal x12739=(cj5*r10);
IkReal x12740=(r11*sj5);
CheckValue<IkReal> x12741=IKPowWithIntegerCheck(IKsign(((r12*r12)+(((-2.0)*x12739*x12740))+((x12737*(r10*r10)))+x12738+(((-1.0)*x12737*x12738)))),-1);
if(!x12741.valid){
continue;
}
CheckValue<IkReal> x12742 = IKatan2WithCheck(IkReal(((((-1.0)*x12740))+x12739)),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x12742.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12741.value)))+(x12742.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12743=IKsin(j4);
IkReal x12744=IKcos(j4);
IkReal x12745=(cj5*r10);
IkReal x12746=(r01*sj5);
IkReal x12747=((1.0)*cj2);
IkReal x12748=(cj5*r00);
IkReal x12749=(cj5*r20);
IkReal x12750=((1.0)*x12744);
IkReal x12751=((1.0)*x12743);
IkReal x12752=(sj5*x12743);
evalcond[0]=((((-1.0)*r22*x12750))+(((-1.0)*x12749*x12751))+((r21*x12752)));
evalcond[1]=((((-1.0)*r02*x12750))+((x12743*x12746))+(((-1.0)*x12748*x12751)));
evalcond[2]=(((x12744*x12745))+(((-1.0)*r12*x12751))+(((-1.0)*r11*sj5*x12750)));
evalcond[3]=((1.0)+((r11*x12752))+(((-1.0)*x12745*x12751))+(((-1.0)*r12*x12750)));
evalcond[4]=(((x12744*x12749))+(((-1.0)*r21*sj5*x12750))+(((-1.0)*r22*x12751))+((sj1*sj2))+(((-1.0)*cj1*x12747)));
evalcond[5]=(((x12744*x12748))+(((-1.0)*r02*x12751))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x12747))+(((-1.0)*x12746*x12750)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12753=((1.0)*cj5);
CheckValue<IkReal> x12754=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x12753)))),-1);
if(!x12754.valid){
continue;
}
CheckValue<IkReal> x12755 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x12753)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12754.value)))+(x12755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12756=IKsin(j4);
IkReal x12757=IKcos(j4);
IkReal x12758=(cj5*r10);
IkReal x12759=(r01*sj5);
IkReal x12760=((1.0)*cj2);
IkReal x12761=(cj5*r00);
IkReal x12762=(cj5*r20);
IkReal x12763=((1.0)*x12757);
IkReal x12764=((1.0)*x12756);
IkReal x12765=(sj5*x12756);
evalcond[0]=(((r21*x12765))+(((-1.0)*x12762*x12764))+(((-1.0)*r22*x12763)));
evalcond[1]=(((x12756*x12759))+(((-1.0)*r02*x12763))+(((-1.0)*x12761*x12764)));
evalcond[2]=((((-1.0)*r12*x12764))+(((-1.0)*r11*sj5*x12763))+((x12757*x12758)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12763))+(((-1.0)*x12758*x12764))+((r11*x12765)));
evalcond[4]=((((-1.0)*r21*sj5*x12763))+(((-1.0)*r22*x12764))+((sj1*sj2))+((x12757*x12762))+(((-1.0)*cj1*x12760)));
evalcond[5]=((((-1.0)*x12759*x12763))+(((-1.0)*sj1*x12760))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12764))+((x12757*x12761)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12766=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12766.valid){
continue;
}
CheckValue<IkReal> x12767 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x12767.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12766.value)))+(x12767.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12768=IKsin(j4);
IkReal x12769=IKcos(j4);
IkReal x12770=(cj5*r10);
IkReal x12771=(r01*sj5);
IkReal x12772=((1.0)*cj2);
IkReal x12773=(cj5*r00);
IkReal x12774=(cj5*r20);
IkReal x12775=((1.0)*x12769);
IkReal x12776=((1.0)*x12768);
IkReal x12777=(sj5*x12768);
evalcond[0]=((((-1.0)*r22*x12775))+(((-1.0)*x12774*x12776))+((r21*x12777)));
evalcond[1]=(((x12768*x12771))+(((-1.0)*x12773*x12776))+(((-1.0)*r02*x12775)));
evalcond[2]=((((-1.0)*r11*sj5*x12775))+(((-1.0)*r12*x12776))+((x12769*x12770)));
evalcond[3]=((1.0)+(((-1.0)*r12*x12775))+(((-1.0)*x12770*x12776))+((r11*x12777)));
evalcond[4]=((((-1.0)*r22*x12776))+(((-1.0)*cj1*x12772))+((sj1*sj2))+(((-1.0)*r21*sj5*x12775))+((x12769*x12774)));
evalcond[5]=((((-1.0)*x12771*x12775))+(((-1.0)*cj1*sj2))+(((-1.0)*r02*x12776))+(((-1.0)*sj1*x12772))+((x12769*x12773)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12778=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12778;
j4eval[1]=IKsign(x12778);
j4eval[2]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*cj5*r00))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12779=((1.0)*cj5);
IkReal x12780=((((-1.0)*r00*sj5))+(((-1.0)*r01*x12779)));
j4eval[0]=x12780;
j4eval[1]=((IKabs(((((-1.0)*r20*x12779))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12780);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x12781=(sj1*sj2);
IkReal x12782=(cj5*r10);
IkReal x12783=(r11*sj5);
IkReal x12784=(cj1*cj2);
IkReal x12785=((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)));
j4eval[0]=x12785;
j4eval[1]=((IKabs((((r12*x12784))+(((-1.0)*r12*x12781)))))+(IKabs((((x12782*x12784))+(((-1.0)*x12783*x12784))+((x12781*x12783))+(((-1.0)*x12781*x12782))))));
j4eval[2]=IKsign(x12785);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x12786=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12786);
rxp1_1=(px*r21);
rxp1_2=(r11*x12786);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=r02;
j4eval[1]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x12787=((-1.0)*px);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x12787);
rxp1_1=(px*r21);
rxp1_2=(r11*x12787);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x12788=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x12788)));
j4eval[1]=(((r21*sj5))+(((-1.0)*r20*x12788)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12789=((1.0)*cj5);
CheckValue<IkReal> x12790=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x12789))),-1);
if(!x12790.valid){
continue;
}
CheckValue<IkReal> x12791=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*r20*x12789))),-1);
if(!x12791.valid){
continue;
}
if( IKabs(((-1.0)*(x12790.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12791.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x12790.value)))+IKsqr(((x12791.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x12790.value)), ((x12791.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12792=IKsin(j4);
IkReal x12793=IKcos(j4);
IkReal x12794=((1.0)*cj2);
IkReal x12795=(r21*sj5);
IkReal x12796=(r11*sj5);
IkReal x12797=((1.0)*cj5*x12792);
IkReal x12798=((1.0)*cj5*x12793);
evalcond[0]=((-1.0)*r02*x12793);
evalcond[1]=(((x12792*x12795))+(((-1.0)*r20*x12797)));
evalcond[2]=(((r02*x12792))+(((-1.0)*sj1*x12794))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12798))+((x12793*x12796)));
evalcond[4]=((1.0)+((x12792*x12796))+(((-1.0)*r10*x12797)));
evalcond[5]=((((-1.0)*r20*x12798))+((x12793*x12795))+((sj1*sj2))+(((-1.0)*cj1*x12794)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12799=IKPowWithIntegerCheck(r02,-1);
if(!x12799.valid){
continue;
}
CheckValue<IkReal> x12800=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x12800.valid){
continue;
}
if( IKabs(((x12799.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x12800.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x12799.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x12800.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x12799.value)*((((cj2*sj1))+((cj1*sj2))))), ((x12800.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12801=IKsin(j4);
IkReal x12802=IKcos(j4);
IkReal x12803=((1.0)*cj2);
IkReal x12804=(r21*sj5);
IkReal x12805=(r11*sj5);
IkReal x12806=((1.0)*cj5*x12801);
IkReal x12807=((1.0)*cj5*x12802);
evalcond[0]=((-1.0)*r02*x12802);
evalcond[1]=(((x12801*x12804))+(((-1.0)*r20*x12806)));
evalcond[2]=(((r02*x12801))+(((-1.0)*sj1*x12803))+(((-1.0)*cj1*sj2)));
evalcond[3]=((((-1.0)*r10*x12807))+((x12802*x12805)));
evalcond[4]=((1.0)+((x12801*x12805))+(((-1.0)*r10*x12806)));
evalcond[5]=(((sj1*sj2))+(((-1.0)*r20*x12807))+((x12802*x12804))+(((-1.0)*cj1*x12803)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12808=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12808;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12808);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12809=((1.0)*cj5);
IkReal x12810=((((-1.0)*r21*x12809))+(((-1.0)*r20*sj5)));
j4eval[0]=x12810;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x12809))+((r11*sj5))))));
j4eval[2]=IKsign(x12810);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12811=cj5*cj5;
IkReal x12812=(r11*r21);
IkReal x12813=((1.0)*r20);
IkReal x12814=(cj5*sj5);
IkReal x12815=((((-1.0)*r12*r22))+((r11*r20*x12814))+(((-1.0)*x12812))+(((-1.0)*r10*x12811*x12813))+((r10*r21*x12814))+((x12811*x12812)));
j4eval[0]=x12815;
j4eval[1]=((IKabs(r22))+(IKabs(((((-1.0)*cj5*x12813))+((r21*sj5))))));
j4eval[2]=IKsign(x12815);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12816=cj5*cj5;
IkReal x12817=(r21*sj5);
IkReal x12818=(r11*r21);
IkReal x12819=((1.0)*r20);
CheckValue<IkReal> x12820=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*x12816*x12819))+(((-1.0)*r12*r22))+(((-1.0)*x12818))+((x12816*x12818))+((cj5*r10*x12817))+((cj5*r11*r20*sj5)))),-1);
if(!x12820.valid){
continue;
}
CheckValue<IkReal> x12821 = IKatan2WithCheck(IkReal((x12817+(((-1.0)*cj5*x12819)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12821.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12820.value)))+(x12821.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12822=IKcos(j4);
IkReal x12823=IKsin(j4);
IkReal x12824=(cj5*r00);
IkReal x12825=(cj5*r20);
IkReal x12826=(cj5*r10);
IkReal x12827=((1.0)*x12822);
IkReal x12828=((1.0)*x12823);
IkReal x12829=(sj5*x12822);
IkReal x12830=(sj5*x12823);
evalcond[0]=((((-1.0)*x12825*x12827))+((r22*x12823))+((r21*x12829)));
evalcond[1]=((((-1.0)*x12826*x12827))+((r12*x12823))+((r11*x12829)));
evalcond[2]=((((-1.0)*x12825*x12828))+((r21*x12830))+(((-1.0)*r22*x12827)));
evalcond[3]=((((-1.0)*r02*x12827))+(((-1.0)*x12824*x12828))+((r01*x12830)));
evalcond[4]=((-1.0)+((r01*x12829))+(((-1.0)*x12824*x12827))+((r02*x12823)));
evalcond[5]=((1.0)+((r11*x12830))+(((-1.0)*x12826*x12828))+(((-1.0)*r12*x12827)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12831=((1.0)*cj5);
CheckValue<IkReal> x12832=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12831))+(((-1.0)*r20*sj5)))),-1);
if(!x12832.valid){
continue;
}
CheckValue<IkReal> x12833 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x12831)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12833.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12832.value)))+(x12833.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12834=IKcos(j4);
IkReal x12835=IKsin(j4);
IkReal x12836=(cj5*r00);
IkReal x12837=(cj5*r20);
IkReal x12838=(cj5*r10);
IkReal x12839=((1.0)*x12834);
IkReal x12840=((1.0)*x12835);
IkReal x12841=(sj5*x12834);
IkReal x12842=(sj5*x12835);
evalcond[0]=((((-1.0)*x12837*x12839))+((r22*x12835))+((r21*x12841)));
evalcond[1]=(((r12*x12835))+(((-1.0)*x12838*x12839))+((r11*x12841)));
evalcond[2]=((((-1.0)*r22*x12839))+((r21*x12842))+(((-1.0)*x12837*x12840)));
evalcond[3]=(((r01*x12842))+(((-1.0)*r02*x12839))+(((-1.0)*x12836*x12840)));
evalcond[4]=((-1.0)+((r01*x12841))+(((-1.0)*x12836*x12839))+((r02*x12835)));
evalcond[5]=((1.0)+(((-1.0)*x12838*x12840))+((r11*x12842))+(((-1.0)*r12*x12839)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12843 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12843.valid){
continue;
}
CheckValue<IkReal> x12844=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12844.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12843.value)+(((1.5707963267949)*(x12844.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12845=IKcos(j4);
IkReal x12846=IKsin(j4);
IkReal x12847=(cj5*r00);
IkReal x12848=(cj5*r20);
IkReal x12849=(cj5*r10);
IkReal x12850=((1.0)*x12845);
IkReal x12851=((1.0)*x12846);
IkReal x12852=(sj5*x12845);
IkReal x12853=(sj5*x12846);
evalcond[0]=((((-1.0)*x12848*x12850))+((r22*x12846))+((r21*x12852)));
evalcond[1]=(((r11*x12852))+((r12*x12846))+(((-1.0)*x12849*x12850)));
evalcond[2]=((((-1.0)*x12848*x12851))+(((-1.0)*r22*x12850))+((r21*x12853)));
evalcond[3]=((((-1.0)*x12847*x12851))+(((-1.0)*r02*x12850))+((r01*x12853)));
evalcond[4]=((-1.0)+(((-1.0)*x12847*x12850))+((r01*x12852))+((r02*x12846)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12850))+((r11*x12853))+(((-1.0)*x12849*x12851)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12854=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12854;
j4eval[1]=IKsign(x12854);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12855=((1.0)*cj5);
IkReal x12856=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12855)));
j4eval[0]=x12856;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12855)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12856);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=0;
sj1=0;
cj1=1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x12857=cj5*cj5;
IkReal x12858=(r11*r21);
IkReal x12859=((1.0)*r20);
IkReal x12860=(cj5*sj5);
IkReal x12861=(((x12857*x12858))+((r10*r21*x12860))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12857*x12859))+(((-1.0)*x12858))+((r11*r20*x12860)));
j4eval[0]=x12861;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12859)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12861);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12862=cj5*cj5;
IkReal x12863=(r21*sj5);
IkReal x12864=(r11*r21);
IkReal x12865=((1.0)*r20);
CheckValue<IkReal> x12866 = IKatan2WithCheck(IkReal((x12863+(((-1.0)*cj5*x12865)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12866.valid){
continue;
}
CheckValue<IkReal> x12867=IKPowWithIntegerCheck(IKsign(((((-1.0)*x12864))+(((-1.0)*r10*x12862*x12865))+(((-1.0)*r12*r22))+((cj5*r10*x12863))+((x12862*x12864))+((cj5*r11*r20*sj5)))),-1);
if(!x12867.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12866.value)+(((1.5707963267949)*(x12867.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12868=IKcos(j4);
IkReal x12869=IKsin(j4);
IkReal x12870=(cj5*r00);
IkReal x12871=(cj5*r20);
IkReal x12872=(cj5*r10);
IkReal x12873=((1.0)*x12868);
IkReal x12874=((1.0)*x12869);
IkReal x12875=(sj5*x12868);
IkReal x12876=(sj5*x12869);
evalcond[0]=((((-1.0)*x12871*x12873))+((r21*x12875))+((r22*x12869)));
evalcond[1]=(((r12*x12869))+(((-1.0)*x12872*x12873))+((r11*x12875)));
evalcond[2]=((((-1.0)*r22*x12873))+(((-1.0)*x12871*x12874))+((r21*x12876)));
evalcond[3]=(((r01*x12876))+(((-1.0)*r02*x12873))+(((-1.0)*x12870*x12874)));
evalcond[4]=((1.0)+((r01*x12875))+((r02*x12869))+(((-1.0)*x12870*x12873)));
evalcond[5]=((1.0)+(((-1.0)*x12872*x12874))+(((-1.0)*r12*x12873))+((r11*x12876)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12877=((1.0)*cj5);
CheckValue<IkReal> x12878 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12877)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12878.valid){
continue;
}
CheckValue<IkReal> x12879=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x12877))+(((-1.0)*r10*sj5)))),-1);
if(!x12879.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12878.value)+(((1.5707963267949)*(x12879.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12880=IKcos(j4);
IkReal x12881=IKsin(j4);
IkReal x12882=(cj5*r00);
IkReal x12883=(cj5*r20);
IkReal x12884=(cj5*r10);
IkReal x12885=((1.0)*x12880);
IkReal x12886=((1.0)*x12881);
IkReal x12887=(sj5*x12880);
IkReal x12888=(sj5*x12881);
evalcond[0]=((((-1.0)*x12883*x12885))+((r22*x12881))+((r21*x12887)));
evalcond[1]=((((-1.0)*x12884*x12885))+((r12*x12881))+((r11*x12887)));
evalcond[2]=((((-1.0)*r22*x12885))+(((-1.0)*x12883*x12886))+((r21*x12888)));
evalcond[3]=((((-1.0)*r02*x12885))+((r01*x12888))+(((-1.0)*x12882*x12886)));
evalcond[4]=((1.0)+((r01*x12887))+(((-1.0)*x12882*x12885))+((r02*x12881)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12885))+(((-1.0)*x12884*x12886))+((r11*x12888)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12889=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12889.valid){
continue;
}
CheckValue<IkReal> x12890 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12890.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12889.value)))+(x12890.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12891=IKcos(j4);
IkReal x12892=IKsin(j4);
IkReal x12893=(cj5*r00);
IkReal x12894=(cj5*r20);
IkReal x12895=(cj5*r10);
IkReal x12896=((1.0)*x12891);
IkReal x12897=((1.0)*x12892);
IkReal x12898=(sj5*x12891);
IkReal x12899=(sj5*x12892);
evalcond[0]=(((r21*x12898))+((r22*x12892))+(((-1.0)*x12894*x12896)));
evalcond[1]=(((r12*x12892))+(((-1.0)*x12895*x12896))+((r11*x12898)));
evalcond[2]=((((-1.0)*r22*x12896))+((r21*x12899))+(((-1.0)*x12894*x12897)));
evalcond[3]=((((-1.0)*x12893*x12897))+((r01*x12899))+(((-1.0)*r02*x12896)));
evalcond[4]=((1.0)+(((-1.0)*x12893*x12896))+((r01*x12898))+((r02*x12892)));
evalcond[5]=((1.0)+(((-1.0)*x12895*x12897))+((r11*x12899))+(((-1.0)*r12*x12896)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12900=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x12900;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12900);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12901=((1.0)*cj5);
IkReal x12902=((((-1.0)*r21*x12901))+(((-1.0)*r20*sj5)));
j4eval[0]=x12902;
j4eval[1]=((IKabs(((((-1.0)*r10*x12901))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x12902);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x12903=cj5*cj5;
IkReal x12904=(r11*r21);
IkReal x12905=((1.0)*r20);
IkReal x12906=(cj5*sj5);
IkReal x12907=((((-1.0)*r12*r22))+(((-1.0)*x12904))+((r11*r20*x12906))+(((-1.0)*r10*x12903*x12905))+((x12903*x12904))+((r10*r21*x12906)));
j4eval[0]=x12907;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*x12905)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12907);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12908=cj5*cj5;
IkReal x12909=(r21*sj5);
IkReal x12910=(r11*r21);
IkReal x12911=((1.0)*r20);
CheckValue<IkReal> x12912 = IKatan2WithCheck(IkReal((x12909+(((-1.0)*cj5*x12911)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12912.valid){
continue;
}
CheckValue<IkReal> x12913=IKPowWithIntegerCheck(IKsign((((x12908*x12910))+(((-1.0)*r12*r22))+(((-1.0)*r10*x12908*x12911))+(((-1.0)*x12910))+((cj5*r10*x12909))+((cj5*r11*r20*sj5)))),-1);
if(!x12913.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12912.value)+(((1.5707963267949)*(x12913.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12914=IKcos(j4);
IkReal x12915=IKsin(j4);
IkReal x12916=(cj5*r00);
IkReal x12917=(cj5*r20);
IkReal x12918=(cj5*r10);
IkReal x12919=((1.0)*x12914);
IkReal x12920=((1.0)*x12915);
IkReal x12921=(sj5*x12914);
IkReal x12922=(sj5*x12915);
evalcond[0]=((((-1.0)*x12917*x12919))+((r21*x12921))+((r22*x12915)));
evalcond[1]=(((r11*x12921))+((r12*x12915))+(((-1.0)*x12918*x12919)));
evalcond[2]=((((-1.0)*x12917*x12920))+(((-1.0)*r22*x12919))+((r21*x12922)));
evalcond[3]=((((-1.0)*r02*x12919))+((r01*x12922))+(((-1.0)*x12916*x12920)));
evalcond[4]=((-1.0)+((r02*x12915))+(((-1.0)*x12916*x12919))+((r01*x12921)));
evalcond[5]=((1.0)+(((-1.0)*x12918*x12920))+((r11*x12922))+(((-1.0)*r12*x12919)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12923=((1.0)*cj5);
CheckValue<IkReal> x12924 = IKatan2WithCheck(IkReal(((((-1.0)*r10*x12923))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12924.valid){
continue;
}
CheckValue<IkReal> x12925=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x12923))+(((-1.0)*r20*sj5)))),-1);
if(!x12925.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12924.value)+(((1.5707963267949)*(x12925.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12926=IKcos(j4);
IkReal x12927=IKsin(j4);
IkReal x12928=(cj5*r00);
IkReal x12929=(cj5*r20);
IkReal x12930=(cj5*r10);
IkReal x12931=((1.0)*x12926);
IkReal x12932=((1.0)*x12927);
IkReal x12933=(sj5*x12926);
IkReal x12934=(sj5*x12927);
evalcond[0]=((((-1.0)*x12929*x12931))+((r22*x12927))+((r21*x12933)));
evalcond[1]=(((r11*x12933))+(((-1.0)*x12930*x12931))+((r12*x12927)));
evalcond[2]=((((-1.0)*x12929*x12932))+(((-1.0)*r22*x12931))+((r21*x12934)));
evalcond[3]=((((-1.0)*x12928*x12932))+(((-1.0)*r02*x12931))+((r01*x12934)));
evalcond[4]=((-1.0)+(((-1.0)*x12928*x12931))+((r02*x12927))+((r01*x12933)));
evalcond[5]=((1.0)+((r11*x12934))+(((-1.0)*r12*x12931))+(((-1.0)*x12930*x12932)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12935 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12935.valid){
continue;
}
CheckValue<IkReal> x12936=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x12936.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12935.value)+(((1.5707963267949)*(x12936.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12937=IKcos(j4);
IkReal x12938=IKsin(j4);
IkReal x12939=(cj5*r00);
IkReal x12940=(cj5*r20);
IkReal x12941=(cj5*r10);
IkReal x12942=((1.0)*x12937);
IkReal x12943=((1.0)*x12938);
IkReal x12944=(sj5*x12937);
IkReal x12945=(sj5*x12938);
evalcond[0]=(((r21*x12944))+((r22*x12938))+(((-1.0)*x12940*x12942)));
evalcond[1]=(((r12*x12938))+((r11*x12944))+(((-1.0)*x12941*x12942)));
evalcond[2]=(((r21*x12945))+(((-1.0)*r22*x12942))+(((-1.0)*x12940*x12943)));
evalcond[3]=((((-1.0)*x12939*x12943))+((r01*x12945))+(((-1.0)*r02*x12942)));
evalcond[4]=((-1.0)+(((-1.0)*x12939*x12942))+((r02*x12938))+((r01*x12944)));
evalcond[5]=((1.0)+((r11*x12945))+(((-1.0)*x12941*x12943))+(((-1.0)*r12*x12942)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12946=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12946;
j4eval[1]=IKsign(x12946);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12947=((1.0)*cj5);
IkReal x12948=((((-1.0)*r11*x12947))+(((-1.0)*r10*sj5)));
j4eval[0]=x12948;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12947)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12948);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=1.5707963267949;
sj1=1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x12949=cj5*cj5;
IkReal x12950=(r11*r21);
IkReal x12951=((1.0)*r20);
IkReal x12952=(cj5*sj5);
IkReal x12953=((((-1.0)*r10*x12949*x12951))+(((-1.0)*r12*r22))+((r10*r21*x12952))+((r11*r20*x12952))+((x12949*x12950))+(((-1.0)*x12950)));
j4eval[0]=x12953;
j4eval[1]=((IKabs(((((-1.0)*cj5*x12951))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12953);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12954=cj5*cj5;
IkReal x12955=(r21*sj5);
IkReal x12956=(r11*r21);
IkReal x12957=((1.0)*r20);
CheckValue<IkReal> x12958 = IKatan2WithCheck(IkReal((x12955+(((-1.0)*cj5*x12957)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12958.valid){
continue;
}
CheckValue<IkReal> x12959=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+(((-1.0)*r10*x12954*x12957))+(((-1.0)*x12956))+((x12954*x12956))+((cj5*r10*x12955))+((cj5*r11*r20*sj5)))),-1);
if(!x12959.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12958.value)+(((1.5707963267949)*(x12959.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12960=IKcos(j4);
IkReal x12961=IKsin(j4);
IkReal x12962=(cj5*r00);
IkReal x12963=(cj5*r20);
IkReal x12964=(cj5*r10);
IkReal x12965=((1.0)*x12960);
IkReal x12966=((1.0)*x12961);
IkReal x12967=(sj5*x12960);
IkReal x12968=(sj5*x12961);
evalcond[0]=(((r22*x12961))+((r21*x12967))+(((-1.0)*x12963*x12965)));
evalcond[1]=(((r11*x12967))+((r12*x12961))+(((-1.0)*x12964*x12965)));
evalcond[2]=((((-1.0)*r22*x12965))+((r21*x12968))+(((-1.0)*x12963*x12966)));
evalcond[3]=(((r01*x12968))+(((-1.0)*x12962*x12966))+(((-1.0)*r02*x12965)));
evalcond[4]=((1.0)+((r01*x12967))+(((-1.0)*x12962*x12965))+((r02*x12961)));
evalcond[5]=((1.0)+(((-1.0)*r12*x12965))+((r11*x12968))+(((-1.0)*x12964*x12966)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x12969=((1.0)*cj5);
CheckValue<IkReal> x12970 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x12969)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x12970.valid){
continue;
}
CheckValue<IkReal> x12971=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x12969)))),-1);
if(!x12971.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x12970.value)+(((1.5707963267949)*(x12971.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12972=IKcos(j4);
IkReal x12973=IKsin(j4);
IkReal x12974=(cj5*r00);
IkReal x12975=(cj5*r20);
IkReal x12976=(cj5*r10);
IkReal x12977=((1.0)*x12972);
IkReal x12978=((1.0)*x12973);
IkReal x12979=(sj5*x12972);
IkReal x12980=(sj5*x12973);
evalcond[0]=((((-1.0)*x12975*x12977))+((r22*x12973))+((r21*x12979)));
evalcond[1]=((((-1.0)*x12976*x12977))+((r11*x12979))+((r12*x12973)));
evalcond[2]=(((r21*x12980))+(((-1.0)*r22*x12977))+(((-1.0)*x12975*x12978)));
evalcond[3]=((((-1.0)*x12974*x12978))+((r01*x12980))+(((-1.0)*r02*x12977)));
evalcond[4]=((1.0)+(((-1.0)*x12974*x12977))+((r01*x12979))+((r02*x12973)));
evalcond[5]=((1.0)+(((-1.0)*x12976*x12978))+((r11*x12980))+(((-1.0)*r12*x12977)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x12981=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x12981.valid){
continue;
}
CheckValue<IkReal> x12982 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x12982.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x12981.value)))+(x12982.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x12983=IKcos(j4);
IkReal x12984=IKsin(j4);
IkReal x12985=(cj5*r00);
IkReal x12986=(cj5*r20);
IkReal x12987=(cj5*r10);
IkReal x12988=((1.0)*x12983);
IkReal x12989=((1.0)*x12984);
IkReal x12990=(sj5*x12983);
IkReal x12991=(sj5*x12984);
evalcond[0]=(((r22*x12984))+((r21*x12990))+(((-1.0)*x12986*x12988)));
evalcond[1]=((((-1.0)*x12987*x12988))+((r11*x12990))+((r12*x12984)));
evalcond[2]=((((-1.0)*r22*x12988))+((r21*x12991))+(((-1.0)*x12986*x12989)));
evalcond[3]=(((r01*x12991))+(((-1.0)*r02*x12988))+(((-1.0)*x12985*x12989)));
evalcond[4]=((1.0)+((r01*x12990))+(((-1.0)*x12985*x12988))+((r02*x12984)));
evalcond[5]=((1.0)+(((-1.0)*x12987*x12989))+((r11*x12991))+(((-1.0)*r12*x12988)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((1.5707963267949)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12992=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x12992;
j4eval[1]=IKsign(x12992);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12993=((1.0)*cj5);
IkReal x12994=((((-1.0)*r10*sj5))+(((-1.0)*r11*x12993)));
j4eval[0]=x12994;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x12993)))))+(IKabs(r22)));
j4eval[2]=IKsign(x12994);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=1.5707963267949;
sj2=1.0;
cj2=0;
IkReal x12995=cj5*cj5;
IkReal x12996=(r11*r21);
IkReal x12997=((1.0)*r20);
IkReal x12998=(cj5*sj5);
IkReal x12999=(((r10*r21*x12998))+(((-1.0)*r12*r22))+((x12995*x12996))+((r11*r20*x12998))+(((-1.0)*r10*x12995*x12997))+(((-1.0)*x12996)));
j4eval[0]=x12999;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x12997))))));
j4eval[2]=IKsign(x12999);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13000=cj5*cj5;
IkReal x13001=(r21*sj5);
IkReal x13002=(r11*r21);
IkReal x13003=((1.0)*r20);
CheckValue<IkReal> x13004 = IKatan2WithCheck(IkReal((x13001+(((-1.0)*cj5*x13003)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13004.valid){
continue;
}
CheckValue<IkReal> x13005=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((cj5*r10*x13001))+(((-1.0)*x13002))+((x13000*x13002))+(((-1.0)*r10*x13000*x13003))+((cj5*r11*r20*sj5)))),-1);
if(!x13005.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13004.value)+(((1.5707963267949)*(x13005.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13006=IKcos(j4);
IkReal x13007=IKsin(j4);
IkReal x13008=(cj5*r00);
IkReal x13009=(cj5*r20);
IkReal x13010=(cj5*r10);
IkReal x13011=((1.0)*x13006);
IkReal x13012=((1.0)*x13007);
IkReal x13013=(sj5*x13006);
IkReal x13014=(sj5*x13007);
evalcond[0]=(((r21*x13013))+(((-1.0)*x13009*x13011))+((r22*x13007)));
evalcond[1]=(((r12*x13007))+((r11*x13013))+(((-1.0)*x13010*x13011)));
evalcond[2]=((((-1.0)*r22*x13011))+((r21*x13014))+(((-1.0)*x13009*x13012)));
evalcond[3]=(((r01*x13014))+(((-1.0)*x13008*x13012))+(((-1.0)*r02*x13011)));
evalcond[4]=((1.0)+((r01*x13013))+(((-1.0)*x13008*x13011))+((r02*x13007)));
evalcond[5]=((1.0)+((r11*x13014))+(((-1.0)*x13010*x13012))+(((-1.0)*r12*x13011)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13015=((1.0)*cj5);
CheckValue<IkReal> x13016 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13015)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13016.valid){
continue;
}
CheckValue<IkReal> x13017=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13015)))),-1);
if(!x13017.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13016.value)+(((1.5707963267949)*(x13017.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13018=IKcos(j4);
IkReal x13019=IKsin(j4);
IkReal x13020=(cj5*r00);
IkReal x13021=(cj5*r20);
IkReal x13022=(cj5*r10);
IkReal x13023=((1.0)*x13018);
IkReal x13024=((1.0)*x13019);
IkReal x13025=(sj5*x13018);
IkReal x13026=(sj5*x13019);
evalcond[0]=((((-1.0)*x13021*x13023))+((r21*x13025))+((r22*x13019)));
evalcond[1]=(((r11*x13025))+((r12*x13019))+(((-1.0)*x13022*x13023)));
evalcond[2]=((((-1.0)*x13021*x13024))+(((-1.0)*r22*x13023))+((r21*x13026)));
evalcond[3]=(((r01*x13026))+(((-1.0)*r02*x13023))+(((-1.0)*x13020*x13024)));
evalcond[4]=((1.0)+((r01*x13025))+((r02*x13019))+(((-1.0)*x13020*x13023)));
evalcond[5]=((1.0)+((r11*x13026))+(((-1.0)*x13022*x13024))+(((-1.0)*r12*x13023)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13027=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13027.valid){
continue;
}
CheckValue<IkReal> x13028 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13028.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13027.value)))+(x13028.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13029=IKcos(j4);
IkReal x13030=IKsin(j4);
IkReal x13031=(cj5*r00);
IkReal x13032=(cj5*r20);
IkReal x13033=(cj5*r10);
IkReal x13034=((1.0)*x13029);
IkReal x13035=((1.0)*x13030);
IkReal x13036=(sj5*x13029);
IkReal x13037=(sj5*x13030);
evalcond[0]=(((r22*x13030))+(((-1.0)*x13032*x13034))+((r21*x13036)));
evalcond[1]=(((r11*x13036))+((r12*x13030))+(((-1.0)*x13033*x13034)));
evalcond[2]=((((-1.0)*x13032*x13035))+(((-1.0)*r22*x13034))+((r21*x13037)));
evalcond[3]=((((-1.0)*x13031*x13035))+(((-1.0)*r02*x13034))+((r01*x13037)));
evalcond[4]=((1.0)+(((-1.0)*x13031*x13034))+((r01*x13036))+((r02*x13030)));
evalcond[5]=((1.0)+((r11*x13037))+(((-1.0)*x13033*x13035))+(((-1.0)*r12*x13034)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j1, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j2), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13038=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13038;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13038);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13039=((1.0)*cj5);
IkReal x13040=((((-1.0)*r21*x13039))+(((-1.0)*r20*sj5)));
j4eval[0]=x13040;
j4eval[1]=((IKabs((((r11*sj5))+(((-1.0)*r10*x13039)))))+(IKabs(r12)));
j4eval[2]=IKsign(x13040);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=3.14159265358979;
sj1=0;
cj1=-1.0;
j2=-1.5707963267949;
sj2=-1.0;
cj2=0;
IkReal x13041=cj5*cj5;
IkReal x13042=(r11*r21);
IkReal x13043=((1.0)*r20);
IkReal x13044=(cj5*sj5);
IkReal x13045=((((-1.0)*x13042))+(((-1.0)*r10*x13041*x13043))+((r11*r20*x13044))+(((-1.0)*r12*r22))+((x13041*x13042))+((r10*r21*x13044)));
j4eval[0]=x13045;
j4eval[1]=((IKabs(((((-1.0)*cj5*x13043))+((r21*sj5)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13045);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13046=cj5*cj5;
IkReal x13047=(r21*sj5);
IkReal x13048=(r11*r21);
IkReal x13049=((1.0)*r20);
CheckValue<IkReal> x13050 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13049))+x13047)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13050.valid){
continue;
}
CheckValue<IkReal> x13051=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13048))+(((-1.0)*r12*r22))+((x13046*x13048))+((cj5*r10*x13047))+(((-1.0)*r10*x13046*x13049))+((cj5*r11*r20*sj5)))),-1);
if(!x13051.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13050.value)+(((1.5707963267949)*(x13051.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13052=IKcos(j4);
IkReal x13053=IKsin(j4);
IkReal x13054=(cj5*r00);
IkReal x13055=(cj5*r20);
IkReal x13056=(cj5*r10);
IkReal x13057=((1.0)*x13052);
IkReal x13058=((1.0)*x13053);
IkReal x13059=(sj5*x13052);
IkReal x13060=(sj5*x13053);
evalcond[0]=(((r21*x13059))+((r22*x13053))+(((-1.0)*x13055*x13057)));
evalcond[1]=(((r12*x13053))+(((-1.0)*x13056*x13057))+((r11*x13059)));
evalcond[2]=(((r21*x13060))+(((-1.0)*r22*x13057))+(((-1.0)*x13055*x13058)));
evalcond[3]=((((-1.0)*x13054*x13058))+(((-1.0)*r02*x13057))+((r01*x13060)));
evalcond[4]=((-1.0)+((r02*x13053))+(((-1.0)*x13054*x13057))+((r01*x13059)));
evalcond[5]=((1.0)+(((-1.0)*x13056*x13058))+(((-1.0)*r12*x13057))+((r11*x13060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13061=((1.0)*cj5);
CheckValue<IkReal> x13062=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13061))+(((-1.0)*r20*sj5)))),-1);
if(!x13062.valid){
continue;
}
CheckValue<IkReal> x13063 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13061)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13063.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13062.value)))+(x13063.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13064=IKcos(j4);
IkReal x13065=IKsin(j4);
IkReal x13066=(cj5*r00);
IkReal x13067=(cj5*r20);
IkReal x13068=(cj5*r10);
IkReal x13069=((1.0)*x13064);
IkReal x13070=((1.0)*x13065);
IkReal x13071=(sj5*x13064);
IkReal x13072=(sj5*x13065);
evalcond[0]=(((r21*x13071))+((r22*x13065))+(((-1.0)*x13067*x13069)));
evalcond[1]=(((r12*x13065))+((r11*x13071))+(((-1.0)*x13068*x13069)));
evalcond[2]=(((r21*x13072))+(((-1.0)*x13067*x13070))+(((-1.0)*r22*x13069)));
evalcond[3]=(((r01*x13072))+(((-1.0)*r02*x13069))+(((-1.0)*x13066*x13070)));
evalcond[4]=((-1.0)+((r02*x13065))+((r01*x13071))+(((-1.0)*x13066*x13069)));
evalcond[5]=((1.0)+(((-1.0)*x13068*x13070))+((r11*x13072))+(((-1.0)*r12*x13069)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13073 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13073.valid){
continue;
}
CheckValue<IkReal> x13074=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13074.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13073.value)+(((1.5707963267949)*(x13074.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13075=IKcos(j4);
IkReal x13076=IKsin(j4);
IkReal x13077=(cj5*r00);
IkReal x13078=(cj5*r20);
IkReal x13079=(cj5*r10);
IkReal x13080=((1.0)*x13075);
IkReal x13081=((1.0)*x13076);
IkReal x13082=(sj5*x13075);
IkReal x13083=(sj5*x13076);
evalcond[0]=(((r22*x13076))+(((-1.0)*x13078*x13080))+((r21*x13082)));
evalcond[1]=(((r11*x13082))+((r12*x13076))+(((-1.0)*x13079*x13080)));
evalcond[2]=((((-1.0)*r22*x13080))+(((-1.0)*x13078*x13081))+((r21*x13083)));
evalcond[3]=((((-1.0)*r02*x13080))+(((-1.0)*x13077*x13081))+((r01*x13083)));
evalcond[4]=((-1.0)+(((-1.0)*x13077*x13080))+((r02*x13076))+((r01*x13082)));
evalcond[5]=((1.0)+((r11*x13083))+(((-1.0)*x13079*x13081))+(((-1.0)*r12*x13080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(((3.14159265358979)+j2), 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13084=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x13084;
j4eval[1]=IKsign(x13084);
j4eval[2]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13085=((1.0)*cj5);
IkReal x13086=((((-1.0)*r11*x13085))+(((-1.0)*r10*sj5)));
j4eval[0]=x13086;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x13085)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13086);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=0;
sj2=0;
cj2=1.0;
IkReal x13087=cj5*cj5;
IkReal x13088=(r11*r21);
IkReal x13089=((1.0)*r20);
IkReal x13090=(cj5*sj5);
IkReal x13091=((((-1.0)*r10*x13087*x13089))+(((-1.0)*r12*r22))+((r11*r20*x13090))+((r10*r21*x13090))+((x13087*x13088))+(((-1.0)*x13088)));
j4eval[0]=x13091;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13089))))));
j4eval[2]=IKsign(x13091);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13092=cj5*cj5;
IkReal x13093=(r21*sj5);
IkReal x13094=(r11*r21);
IkReal x13095=((1.0)*r20);
CheckValue<IkReal> x13096=IKPowWithIntegerCheck(IKsign((((cj5*r10*x13093))+(((-1.0)*r10*x13092*x13095))+(((-1.0)*r12*r22))+((x13092*x13094))+(((-1.0)*x13094))+((cj5*r11*r20*sj5)))),-1);
if(!x13096.valid){
continue;
}
CheckValue<IkReal> x13097 = IKatan2WithCheck(IkReal((x13093+(((-1.0)*cj5*x13095)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13097.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13096.value)))+(x13097.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13098=IKcos(j4);
IkReal x13099=IKsin(j4);
IkReal x13100=(cj5*r00);
IkReal x13101=(cj5*r20);
IkReal x13102=(cj5*r10);
IkReal x13103=((1.0)*x13098);
IkReal x13104=((1.0)*x13099);
IkReal x13105=(sj5*x13098);
IkReal x13106=(sj5*x13099);
evalcond[0]=((((-1.0)*x13101*x13103))+((r22*x13099))+((r21*x13105)));
evalcond[1]=((((-1.0)*x13102*x13103))+((r12*x13099))+((r11*x13105)));
evalcond[2]=((((-1.0)*x13101*x13104))+((r21*x13106))+(((-1.0)*r22*x13103)));
evalcond[3]=(((r01*x13106))+(((-1.0)*x13100*x13104))+(((-1.0)*r02*x13103)));
evalcond[4]=((1.0)+((r02*x13099))+((r01*x13105))+(((-1.0)*x13100*x13103)));
evalcond[5]=((1.0)+(((-1.0)*x13102*x13104))+(((-1.0)*r12*x13103))+((r11*x13106)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13107=((1.0)*cj5);
CheckValue<IkReal> x13108 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*r20*x13107)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13108.valid){
continue;
}
CheckValue<IkReal> x13109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x13107)))),-1);
if(!x13109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13108.value)+(((1.5707963267949)*(x13109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13110=IKcos(j4);
IkReal x13111=IKsin(j4);
IkReal x13112=(cj5*r00);
IkReal x13113=(cj5*r20);
IkReal x13114=(cj5*r10);
IkReal x13115=((1.0)*x13110);
IkReal x13116=((1.0)*x13111);
IkReal x13117=(sj5*x13110);
IkReal x13118=(sj5*x13111);
evalcond[0]=(((r22*x13111))+((r21*x13117))+(((-1.0)*x13113*x13115)));
evalcond[1]=(((r12*x13111))+(((-1.0)*x13114*x13115))+((r11*x13117)));
evalcond[2]=(((r21*x13118))+(((-1.0)*x13113*x13116))+(((-1.0)*r22*x13115)));
evalcond[3]=((((-1.0)*x13112*x13116))+(((-1.0)*r02*x13115))+((r01*x13118)));
evalcond[4]=((1.0)+(((-1.0)*x13112*x13115))+((r02*x13111))+((r01*x13117)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13115))+(((-1.0)*x13114*x13116))+((r11*x13118)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13119=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13119.valid){
continue;
}
CheckValue<IkReal> x13120 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13120.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13119.value)))+(x13120.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13121=IKcos(j4);
IkReal x13122=IKsin(j4);
IkReal x13123=(cj5*r00);
IkReal x13124=(cj5*r20);
IkReal x13125=(cj5*r10);
IkReal x13126=((1.0)*x13121);
IkReal x13127=((1.0)*x13122);
IkReal x13128=(sj5*x13121);
IkReal x13129=(sj5*x13122);
evalcond[0]=((((-1.0)*x13124*x13126))+((r22*x13122))+((r21*x13128)));
evalcond[1]=((((-1.0)*x13125*x13126))+((r11*x13128))+((r12*x13122)));
evalcond[2]=((((-1.0)*x13124*x13127))+(((-1.0)*r22*x13126))+((r21*x13129)));
evalcond[3]=((((-1.0)*r02*x13126))+(((-1.0)*x13123*x13127))+((r01*x13129)));
evalcond[4]=((1.0)+(((-1.0)*x13123*x13126))+((r01*x13128))+((r02*x13122)));
evalcond[5]=((1.0)+(((-1.0)*x13125*x13127))+((r11*x13129))+(((-1.0)*r12*x13126)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(((-3.14159265358979)+(IKfmod(j2, 6.28318530717959)))))+(IKabs(((-3.14159265358979)+(IKfmod(((4.71238898038469)+j1), 6.28318530717959))))));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13130=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x13130;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x13130);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13131=((1.0)*cj5);
IkReal x13132=((((-1.0)*r21*x13131))+(((-1.0)*r20*sj5)));
j4eval[0]=x13132;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x13131))+((r11*sj5))))));
j4eval[2]=IKsign(x13132);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j1=-1.5707963267949;
sj1=-1.0;
cj1=0;
j2=3.14159265358979;
sj2=0;
cj2=-1.0;
IkReal x13133=cj5*cj5;
IkReal x13134=(r11*r21);
IkReal x13135=((1.0)*r20);
IkReal x13136=(cj5*sj5);
IkReal x13137=((((-1.0)*r12*r22))+((r10*r21*x13136))+((x13133*x13134))+(((-1.0)*r10*x13133*x13135))+((r11*r20*x13136))+(((-1.0)*x13134)));
j4eval[0]=x13137;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*cj5*x13135))))));
j4eval[2]=IKsign(x13137);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13138=cj5*cj5;
IkReal x13139=(r21*sj5);
IkReal x13140=(r11*r21);
IkReal x13141=((1.0)*r20);
CheckValue<IkReal> x13142 = IKatan2WithCheck(IkReal(((((-1.0)*cj5*x13141))+x13139)),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13142.valid){
continue;
}
CheckValue<IkReal> x13143=IKPowWithIntegerCheck(IKsign(((((-1.0)*r12*r22))+((x13138*x13140))+((cj5*r10*x13139))+(((-1.0)*r10*x13138*x13141))+(((-1.0)*x13140))+((cj5*r11*r20*sj5)))),-1);
if(!x13143.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13142.value)+(((1.5707963267949)*(x13143.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13144=IKcos(j4);
IkReal x13145=IKsin(j4);
IkReal x13146=(cj5*r00);
IkReal x13147=(cj5*r20);
IkReal x13148=(cj5*r10);
IkReal x13149=((1.0)*x13144);
IkReal x13150=((1.0)*x13145);
IkReal x13151=(sj5*x13144);
IkReal x13152=(sj5*x13145);
evalcond[0]=((((-1.0)*x13147*x13149))+((r21*x13151))+((r22*x13145)));
evalcond[1]=(((r12*x13145))+((r11*x13151))+(((-1.0)*x13148*x13149)));
evalcond[2]=(((r21*x13152))+(((-1.0)*x13147*x13150))+(((-1.0)*r22*x13149)));
evalcond[3]=((((-1.0)*x13146*x13150))+(((-1.0)*r02*x13149))+((r01*x13152)));
evalcond[4]=((-1.0)+(((-1.0)*x13146*x13149))+((r02*x13145))+((r01*x13151)));
evalcond[5]=((1.0)+(((-1.0)*x13148*x13150))+(((-1.0)*r12*x13149))+((r11*x13152)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13153=((1.0)*cj5);
CheckValue<IkReal> x13154=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x13153))+(((-1.0)*r20*sj5)))),-1);
if(!x13154.valid){
continue;
}
CheckValue<IkReal> x13155 = IKatan2WithCheck(IkReal((((r11*sj5))+(((-1.0)*r10*x13153)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13155.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13154.value)))+(x13155.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13156=IKcos(j4);
IkReal x13157=IKsin(j4);
IkReal x13158=(cj5*r00);
IkReal x13159=(cj5*r20);
IkReal x13160=(cj5*r10);
IkReal x13161=((1.0)*x13156);
IkReal x13162=((1.0)*x13157);
IkReal x13163=(sj5*x13156);
IkReal x13164=(sj5*x13157);
evalcond[0]=(((r22*x13157))+(((-1.0)*x13159*x13161))+((r21*x13163)));
evalcond[1]=((((-1.0)*x13160*x13161))+((r11*x13163))+((r12*x13157)));
evalcond[2]=((((-1.0)*r22*x13161))+(((-1.0)*x13159*x13162))+((r21*x13164)));
evalcond[3]=(((r01*x13164))+(((-1.0)*x13158*x13162))+(((-1.0)*r02*x13161)));
evalcond[4]=((-1.0)+((r02*x13157))+((r01*x13163))+(((-1.0)*x13158*x13161)));
evalcond[5]=((1.0)+(((-1.0)*x13160*x13162))+(((-1.0)*r12*x13161))+((r11*x13164)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13165 = IKatan2WithCheck(IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IkReal(((-1.0)*r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x13165.valid){
continue;
}
CheckValue<IkReal> x13166=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x13166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13165.value)+(((1.5707963267949)*(x13166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13167=IKcos(j4);
IkReal x13168=IKsin(j4);
IkReal x13169=(cj5*r00);
IkReal x13170=(cj5*r20);
IkReal x13171=(cj5*r10);
IkReal x13172=((1.0)*x13167);
IkReal x13173=((1.0)*x13168);
IkReal x13174=(sj5*x13167);
IkReal x13175=(sj5*x13168);
evalcond[0]=(((r22*x13168))+(((-1.0)*x13170*x13172))+((r21*x13174)));
evalcond[1]=((((-1.0)*x13171*x13172))+((r11*x13174))+((r12*x13168)));
evalcond[2]=((((-1.0)*x13170*x13173))+(((-1.0)*r22*x13172))+((r21*x13175)));
evalcond[3]=(((r01*x13175))+(((-1.0)*x13169*x13173))+(((-1.0)*r02*x13172)));
evalcond[4]=((-1.0)+((r01*x13174))+(((-1.0)*x13169*x13172))+((r02*x13168)));
evalcond[5]=((1.0)+(((-1.0)*r12*x13172))+(((-1.0)*x13171*x13173))+((r11*x13175)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13176=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13176);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13176);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13177=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13177);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13177);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13178=((1.0)*cj5);
j4eval[0]=(((r11*sj5))+(((-1.0)*r10*x13178)));
j4eval[1]=((((-1.0)*r00*x13178))+((r01*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13179=((1.0)*cj5);
CheckValue<IkReal> x13180=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x13179))),-1);
if(!x13180.valid){
continue;
}
CheckValue<IkReal> x13181=IKPowWithIntegerCheck(((((-1.0)*r00*x13179))+((r01*sj5))),-1);
if(!x13181.valid){
continue;
}
if( IKabs(((-1.0)*(x13180.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13181.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13180.value)))+IKsqr(((x13181.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13180.value)), ((x13181.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13182=IKsin(j4);
IkReal x13183=IKcos(j4);
IkReal x13184=((1.0)*cj5);
IkReal x13185=((1.0)*cj2);
IkReal x13186=(sj5*x13183);
IkReal x13187=(sj5*x13182);
evalcond[0]=((-1.0)*r22*x13183);
evalcond[1]=(((r22*x13182))+((sj1*sj2))+(((-1.0)*cj1*x13185)));
evalcond[2]=(((r01*x13187))+(((-1.0)*r00*x13182*x13184)));
evalcond[3]=(((r11*x13186))+(((-1.0)*r10*x13183*x13184)));
evalcond[4]=((1.0)+((r11*x13187))+(((-1.0)*r10*x13182*x13184)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x13186))+(((-1.0)*sj1*x13185))+(((-1.0)*r00*x13183*x13184)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13188=IKPowWithIntegerCheck(r22,-1);
if(!x13188.valid){
continue;
}
CheckValue<IkReal> x13189=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13189.valid){
continue;
}
if( IKabs(((x13188.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13189.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13188.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))+IKsqr(((x13189.value)*((((cj2*sj1))+((cj1*sj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13188.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))), ((x13189.value)*((((cj2*sj1))+((cj1*sj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13190=IKsin(j4);
IkReal x13191=IKcos(j4);
IkReal x13192=((1.0)*cj5);
IkReal x13193=((1.0)*cj2);
IkReal x13194=(sj5*x13191);
IkReal x13195=(sj5*x13190);
evalcond[0]=((-1.0)*r22*x13191);
evalcond[1]=((((-1.0)*cj1*x13193))+((sj1*sj2))+((r22*x13190)));
evalcond[2]=((((-1.0)*r00*x13190*x13192))+((r01*x13195)));
evalcond[3]=(((r11*x13194))+(((-1.0)*r10*x13191*x13192)));
evalcond[4]=((1.0)+((r11*x13195))+(((-1.0)*r10*x13190*x13192)));
evalcond[5]=((((-1.0)*r00*x13191*x13192))+(((-1.0)*cj1*sj2))+((r01*x13194))+(((-1.0)*sj1*x13193)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13196=(sj1*sj2);
IkReal x13197=(cj5*r10);
IkReal x13198=(r11*sj5);
IkReal x13199=(cj1*cj2);
CheckValue<IkReal> x13200=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*cj5*r01)))),-1);
if(!x13200.valid){
continue;
}
CheckValue<IkReal> x13201 = IKatan2WithCheck(IkReal(((((-1.0)*x13196*x13197))+((x13197*x13199))+((x13196*x13198))+(((-1.0)*x13198*x13199)))),IkReal((((r12*x13199))+(((-1.0)*r12*x13196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13201.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13200.value)))+(x13201.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13202=IKcos(j4);
IkReal x13203=IKsin(j4);
IkReal x13204=(cj5*r00);
IkReal x13205=(cj5*r10);
IkReal x13206=(r21*sj5);
IkReal x13207=((1.0)*cj2);
IkReal x13208=(cj5*r20);
IkReal x13209=((1.0)*x13202);
IkReal x13210=((1.0)*x13203);
IkReal x13211=(sj5*x13203);
IkReal x13212=(sj5*x13202);
evalcond[0]=(((r11*x13212))+((r12*x13203))+(((-1.0)*x13205*x13209)));
evalcond[1]=(((x13203*x13206))+(((-1.0)*x13208*x13210))+(((-1.0)*r22*x13209)));
evalcond[2]=(((r01*x13211))+(((-1.0)*r02*x13209))+(((-1.0)*x13204*x13210)));
evalcond[3]=((1.0)+((r11*x13211))+(((-1.0)*r12*x13209))+(((-1.0)*x13205*x13210)));
evalcond[4]=(((x13202*x13206))+(((-1.0)*cj1*x13207))+(((-1.0)*x13208*x13209))+((sj1*sj2))+((r22*x13203)));
evalcond[5]=(((r01*x13212))+((r02*x13203))+(((-1.0)*cj1*sj2))+(((-1.0)*x13204*x13209))+(((-1.0)*sj1*x13207)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13213=((1.0)*cj5);
CheckValue<IkReal> x13214 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x13213)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13214.valid){
continue;
}
CheckValue<IkReal> x13215=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13213)))),-1);
if(!x13215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13214.value)+(((1.5707963267949)*(x13215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13216=IKcos(j4);
IkReal x13217=IKsin(j4);
IkReal x13218=(cj5*r00);
IkReal x13219=(cj5*r10);
IkReal x13220=(r21*sj5);
IkReal x13221=((1.0)*cj2);
IkReal x13222=(cj5*r20);
IkReal x13223=((1.0)*x13216);
IkReal x13224=((1.0)*x13217);
IkReal x13225=(sj5*x13217);
IkReal x13226=(sj5*x13216);
evalcond[0]=(((r12*x13217))+((r11*x13226))+(((-1.0)*x13219*x13223)));
evalcond[1]=((((-1.0)*r22*x13223))+((x13217*x13220))+(((-1.0)*x13222*x13224)));
evalcond[2]=((((-1.0)*x13218*x13224))+(((-1.0)*r02*x13223))+((r01*x13225)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13223))+((r11*x13225))+(((-1.0)*x13219*x13224)));
evalcond[4]=((((-1.0)*cj1*x13221))+((sj1*sj2))+((r22*x13217))+(((-1.0)*x13222*x13223))+((x13216*x13220)));
evalcond[5]=((((-1.0)*cj1*sj2))+(((-1.0)*x13218*x13223))+(((-1.0)*sj1*x13221))+((r01*x13226))+((r02*x13217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13227=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13227.valid){
continue;
}
CheckValue<IkReal> x13228 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13227.value)))+(x13228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13229=IKcos(j4);
IkReal x13230=IKsin(j4);
IkReal x13231=(cj5*r00);
IkReal x13232=(cj5*r10);
IkReal x13233=(r21*sj5);
IkReal x13234=((1.0)*cj2);
IkReal x13235=(cj5*r20);
IkReal x13236=((1.0)*x13229);
IkReal x13237=((1.0)*x13230);
IkReal x13238=(sj5*x13230);
IkReal x13239=(sj5*x13229);
evalcond[0]=((((-1.0)*x13232*x13236))+((r11*x13239))+((r12*x13230)));
evalcond[1]=(((x13230*x13233))+(((-1.0)*x13235*x13237))+(((-1.0)*r22*x13236)));
evalcond[2]=(((r01*x13238))+(((-1.0)*r02*x13236))+(((-1.0)*x13231*x13237)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13236))+(((-1.0)*x13232*x13237))+((r11*x13238)));
evalcond[4]=((((-1.0)*cj1*x13234))+((x13229*x13233))+(((-1.0)*x13235*x13236))+((sj1*sj2))+((r22*x13230)));
evalcond[5]=((((-1.0)*sj1*x13234))+((r01*x13239))+(((-1.0)*cj1*sj2))+((r02*x13230))+(((-1.0)*x13231*x13236)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13240=((-1.0)*r00);
IkReal x13242 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13242)==0){
continue;
}
IkReal x13241=pow(x13242,-0.5);
CheckValue<IkReal> x13243 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13240),IKFAST_ATAN2_MAGTHRESH);
if(!x13243.valid){
continue;
}
IkReal gconst18=((-1.0)*(x13243.value));
IkReal gconst19=(r01*x13241);
IkReal gconst20=(x13240*x13241);
CheckValue<IkReal> x13244 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13244.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13244.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13245=((-1.0)*r00);
IkReal x13246=x13241;
CheckValue<IkReal> x13248 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13245),IKFAST_ATAN2_MAGTHRESH);
if(!x13248.valid){
continue;
}
IkReal x13247=((-1.0)*(x13248.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13247;
IkReal gconst18=x13247;
IkReal gconst19=(r01*x13246);
IkReal gconst20=(x13245*x13246);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x13249=((-1.0)*r00);
IkReal x13250=x13241;
CheckValue<IkReal> x13252 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x13249),IKFAST_ATAN2_MAGTHRESH);
if(!x13252.valid){
continue;
}
IkReal x13251=((-1.0)*(x13252.value));
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst19;
cj5=gconst20;
j5=x13251;
IkReal gconst18=x13251;
IkReal gconst19=(r01*x13250);
IkReal gconst20=(x13249*x13250);
CheckValue<IkReal> x13260=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x13260.valid){
continue;
}
IkReal x13253=x13260.value;
IkReal x13254=(sj3*x13253);
IkReal x13255=(r11*x13254);
IkReal x13256=(r21*x13254);
IkReal x13257=(r20*x13254);
IkReal x13258=(r10*x13254);
IkReal x13259=(r00*r01*x13254);
j4eval[0]=IKsign((((r00*r01*r10*x13256))+((r12*r22*sj3))+((r10*x13257*(r00*r00)))+((r21*x13255*(r01*r01)))+((r00*r01*r20*x13255))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13261=gconst19*gconst19;
IkReal x13262=gconst20*gconst20;
IkReal x13263=(gconst20*sj3);
IkReal x13264=((1.0)*cj3);
IkReal x13265=(r10*sj3);
IkReal x13266=(gconst19*r21);
IkReal x13267=(r11*r20);
IkReal x13268=(cj3*gconst20);
IkReal x13269=((1.0)*r10*r20);
IkReal x13270=(r21*x13261);
CheckValue<IkReal> x13271=IKPowWithIntegerCheck(IKsign((((r10*x13266*x13268))+(((-1.0)*r10*r20*x13262*x13264))+(((-1.0)*r12*r22*x13264))+((gconst19*x13267*x13268))+(((-1.0)*r11*x13264*x13270)))),-1);
if(!x13271.valid){
continue;
}
CheckValue<IkReal> x13272 = IKatan2WithCheck(IkReal((((gconst19*r22*x13265))+((r11*r22*x13263)))),IkReal(((((-1.0)*sj3*x13262*x13267))+((x13265*x13270))+(((-1.0)*gconst19*x13263*x13269))+((r11*x13263*x13266)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13272.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13271.value)))+(x13272.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13273=IKsin(j4);
IkReal x13274=IKcos(j4);
IkReal x13275=(sj1*sj2);
IkReal x13276=(gconst20*sj3);
IkReal x13277=(gconst19*r21);
IkReal x13278=(gconst20*r10);
IkReal x13279=(cj3*gconst19);
IkReal x13280=(gconst19*sj3);
IkReal x13281=((1.0)*cj1);
IkReal x13282=(cj3*gconst20);
IkReal x13283=(cj2*sj1);
IkReal x13284=(cj2*x13281);
IkReal x13285=((1.0)*x13274);
IkReal x13286=((1.0)*x13273);
IkReal x13287=(cj3*x13273);
IkReal x13288=(gconst19*x13273);
evalcond[0]=((((-1.0)*r22*x13285))+(((-1.0)*gconst20*r20*x13286))+((x13273*x13277)));
evalcond[1]=((((-1.0)*gconst20*r00*x13286))+(((-1.0)*r02*x13285))+((r01*x13288)));
evalcond[2]=((1.0)+((r11*x13288))+(((-1.0)*x13278*x13286))+(((-1.0)*r12*x13285)));
evalcond[3]=(((r12*x13287))+((r11*x13276))+((r10*x13280))+((r11*x13274*x13279))+(((-1.0)*cj3*x13278*x13285)));
evalcond[4]=(((r11*x13282))+((r10*x13279))+(((-1.0)*r11*x13280*x13285))+(((-1.0)*r12*sj3*x13286))+((r10*x13274*x13276)));
evalcond[5]=(((cj3*x13274*x13277))+((r21*x13276))+(((-1.0)*r20*x13282*x13285))+((r20*x13280))+((cj1*sj2))+((r22*x13287))+x13283);
evalcond[6]=(((r01*x13276))+(((-1.0)*r00*x13282*x13285))+((r01*x13274*x13279))+((r02*x13287))+x13275+((r00*x13280))+(((-1.0)*x13284)));
evalcond[7]=(((r20*x13279))+(((-1.0)*r22*sj3*x13286))+(((-1.0)*sj3*x13277*x13285))+((r20*x13274*x13276))+((r21*x13282))+x13275+(((-1.0)*x13284)));
evalcond[8]=((((-1.0)*r01*x13280*x13285))+(((-1.0)*sj2*x13281))+((r00*x13274*x13276))+((r00*x13279))+(((-1.0)*x13283))+((r01*x13282))+(((-1.0)*r02*sj3*x13286)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13289=gconst19*gconst19;
IkReal x13290=gconst20*gconst20;
IkReal x13291=(r21*sj3);
IkReal x13292=(cj3*r11);
IkReal x13293=(gconst19*gconst20);
IkReal x13294=((1.0)*r10);
IkReal x13295=(cj3*r10);
IkReal x13296=(r20*x13290);
CheckValue<IkReal> x13297=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13291*x13293*x13294))+((r11*x13289*x13291))+((r10*sj3*x13296))+(((-1.0)*r11*r20*sj3*x13293))+((r12*r22*sj3)))),-1);
if(!x13297.valid){
continue;
}
CheckValue<IkReal> x13298 = IKatan2WithCheck(IkReal((((gconst20*r22*x13292))+((gconst19*r22*x13295)))),IkReal(((((-1.0)*cj3*r20*x13293*x13294))+(((-1.0)*x13292*x13296))+((r21*x13289*x13295))+((r21*x13292*x13293)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13298.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13297.value)))+(x13298.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13299=IKsin(j4);
IkReal x13300=IKcos(j4);
IkReal x13301=(sj1*sj2);
IkReal x13302=(gconst20*sj3);
IkReal x13303=(gconst19*r21);
IkReal x13304=(gconst20*r10);
IkReal x13305=(cj3*gconst19);
IkReal x13306=(gconst19*sj3);
IkReal x13307=((1.0)*cj1);
IkReal x13308=(cj3*gconst20);
IkReal x13309=(cj2*sj1);
IkReal x13310=(cj2*x13307);
IkReal x13311=((1.0)*x13300);
IkReal x13312=((1.0)*x13299);
IkReal x13313=(cj3*x13299);
IkReal x13314=(gconst19*x13299);
evalcond[0]=((((-1.0)*gconst20*r20*x13312))+((x13299*x13303))+(((-1.0)*r22*x13311)));
evalcond[1]=((((-1.0)*gconst20*r00*x13312))+((r01*x13314))+(((-1.0)*r02*x13311)));
evalcond[2]=((1.0)+((r11*x13314))+(((-1.0)*x13304*x13312))+(((-1.0)*r12*x13311)));
evalcond[3]=(((r11*x13300*x13305))+((r10*x13306))+(((-1.0)*cj3*x13304*x13311))+((r11*x13302))+((r12*x13313)));
evalcond[4]=(((r10*x13305))+(((-1.0)*r11*x13306*x13311))+((r11*x13308))+((r10*x13300*x13302))+(((-1.0)*r12*sj3*x13312)));
evalcond[5]=(((cj3*x13300*x13303))+((r21*x13302))+((r20*x13306))+(((-1.0)*r20*x13308*x13311))+((cj1*sj2))+((r22*x13313))+x13309);
evalcond[6]=(((r01*x13300*x13305))+((r00*x13306))+((r01*x13302))+(((-1.0)*x13310))+(((-1.0)*r00*x13308*x13311))+x13301+((r02*x13313)));
evalcond[7]=(((r21*x13308))+(((-1.0)*r22*sj3*x13312))+((r20*x13305))+(((-1.0)*sj3*x13303*x13311))+((r20*x13300*x13302))+(((-1.0)*x13310))+x13301);
evalcond[8]=((((-1.0)*r01*x13306*x13311))+(((-1.0)*r02*sj3*x13312))+((r00*x13305))+((r01*x13308))+((r00*x13300*x13302))+(((-1.0)*sj2*x13307))+(((-1.0)*x13309)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13315 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*gconst20*r00))+((gconst19*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13315.valid){
continue;
}
CheckValue<IkReal> x13316=IKPowWithIntegerCheck(IKsign((((gconst20*r21))+((gconst19*r20)))),-1);
if(!x13316.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13315.value)+(((1.5707963267949)*(x13316.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13317=IKsin(j4);
IkReal x13318=IKcos(j4);
IkReal x13319=(sj1*sj2);
IkReal x13320=(gconst20*sj3);
IkReal x13321=(gconst19*r21);
IkReal x13322=(gconst20*r10);
IkReal x13323=(cj3*gconst19);
IkReal x13324=(gconst19*sj3);
IkReal x13325=((1.0)*cj1);
IkReal x13326=(cj3*gconst20);
IkReal x13327=(cj2*sj1);
IkReal x13328=(cj2*x13325);
IkReal x13329=((1.0)*x13318);
IkReal x13330=((1.0)*x13317);
IkReal x13331=(cj3*x13317);
IkReal x13332=(gconst19*x13317);
evalcond[0]=((((-1.0)*r22*x13329))+((x13317*x13321))+(((-1.0)*gconst20*r20*x13330)));
evalcond[1]=((((-1.0)*r02*x13329))+((r01*x13332))+(((-1.0)*gconst20*r00*x13330)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13329))+(((-1.0)*x13322*x13330))+((r11*x13332)));
evalcond[3]=(((r10*x13324))+(((-1.0)*cj3*x13322*x13329))+((r11*x13318*x13323))+((r11*x13320))+((r12*x13331)));
evalcond[4]=(((r10*x13323))+((r10*x13318*x13320))+(((-1.0)*r11*x13324*x13329))+(((-1.0)*r12*sj3*x13330))+((r11*x13326)));
evalcond[5]=((((-1.0)*r20*x13326*x13329))+((r22*x13331))+((cj1*sj2))+((r20*x13324))+((r21*x13320))+((cj3*x13318*x13321))+x13327);
evalcond[6]=(((r01*x13318*x13323))+(((-1.0)*r00*x13326*x13329))+((r02*x13331))+((r00*x13324))+((r01*x13320))+(((-1.0)*x13328))+x13319);
evalcond[7]=(((r20*x13323))+((r20*x13318*x13320))+(((-1.0)*sj3*x13321*x13329))+((r21*x13326))+(((-1.0)*r22*sj3*x13330))+(((-1.0)*x13328))+x13319);
evalcond[8]=((((-1.0)*x13327))+(((-1.0)*r02*sj3*x13330))+((r00*x13323))+((r01*x13326))+((r00*x13318*x13320))+(((-1.0)*r01*x13324*x13329))+(((-1.0)*sj2*x13325)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13333=((-1.0)*r01);
IkReal x13335 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x13335)==0){
continue;
}
IkReal x13334=pow(x13335,-0.5);
CheckValue<IkReal> x13336 = IKatan2WithCheck(IkReal(x13333),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13336.valid){
continue;
}
IkReal gconst21=((3.14159265358979)+(((-1.0)*(x13336.value))));
IkReal gconst22=(x13333*x13334);
IkReal gconst23=((1.0)*r00*x13334);
CheckValue<IkReal> x13337 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13337.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13337.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x13338=((-1.0)*r01);
CheckValue<IkReal> x13341 = IKatan2WithCheck(IkReal(x13338),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13341.valid){
continue;
}
IkReal x13339=((1.0)*(x13341.value));
IkReal x13340=x13334;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13339)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13339)));
IkReal gconst22=(x13338*x13340);
IkReal gconst23=((1.0)*r00*x13340);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
IkReal x13342=((-1.0)*r01);
CheckValue<IkReal> x13345 = IKatan2WithCheck(IkReal(x13342),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x13345.valid){
continue;
}
IkReal x13343=((1.0)*(x13345.value));
IkReal x13344=x13334;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst22;
cj5=gconst23;
j5=((3.14159265)+(((-1.0)*x13343)));
IkReal gconst21=((3.14159265358979)+(((-1.0)*x13343)));
IkReal gconst22=(x13342*x13344);
IkReal gconst23=((1.0)*r00*x13344);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13346=gconst22*gconst22;
IkReal x13347=gconst23*gconst23;
IkReal x13348=(r21*sj3);
IkReal x13349=((1.0)*cj3);
IkReal x13350=(gconst23*r11);
IkReal x13351=(r22*sj3);
IkReal x13352=(gconst22*r10);
IkReal x13353=((1.0)*r20*sj3);
CheckValue<IkReal> x13354=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*r21*x13346*x13349))+(((-1.0)*r10*r20*x13347*x13349))+((cj3*gconst22*r20*x13350))+((cj3*gconst23*r21*x13352))+(((-1.0)*r12*r22*x13349)))),-1);
if(!x13354.valid){
continue;
}
CheckValue<IkReal> x13355 = IKatan2WithCheck(IkReal((((x13350*x13351))+((x13351*x13352)))),IkReal(((((-1.0)*r11*x13347*x13353))+((r10*x13346*x13348))+(((-1.0)*gconst23*x13352*x13353))+((gconst22*x13348*x13350)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13355.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13354.value)))+(x13355.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13356=IKsin(j4);
IkReal x13357=IKcos(j4);
IkReal x13358=(sj1*sj2);
IkReal x13359=(gconst23*sj3);
IkReal x13360=(gconst22*sj3);
IkReal x13361=(cj2*sj1);
IkReal x13362=((1.0)*cj1);
IkReal x13363=(cj3*gconst23);
IkReal x13364=(cj3*gconst22);
IkReal x13365=(cj2*x13362);
IkReal x13366=((1.0)*x13357);
IkReal x13367=(cj3*x13356);
IkReal x13368=(gconst22*x13356);
IkReal x13369=((1.0)*sj3*x13356);
IkReal x13370=(x13357*x13364);
IkReal x13371=((1.0)*gconst23*x13356);
evalcond[0]=((((-1.0)*r22*x13366))+(((-1.0)*r20*x13371))+((r21*x13368)));
evalcond[1]=(((r01*x13368))+(((-1.0)*r00*x13371))+(((-1.0)*r02*x13366)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13366))+(((-1.0)*r10*x13371))+((r11*x13368)));
evalcond[3]=(((r12*x13367))+((r10*x13360))+((r11*x13370))+(((-1.0)*r10*x13363*x13366))+((r11*x13359)));
evalcond[4]=(((r10*x13364))+(((-1.0)*r12*x13369))+((r11*x13363))+((r10*x13357*x13359))+(((-1.0)*r11*x13360*x13366)));
evalcond[5]=(((r20*x13360))+((cj1*sj2))+((r21*x13359))+(((-1.0)*r20*x13363*x13366))+((r22*x13367))+((r21*x13370))+x13361);
evalcond[6]=(((r01*x13370))+((r00*x13360))+(((-1.0)*r00*x13363*x13366))+((r01*x13359))+(((-1.0)*x13365))+x13358+((r02*x13367)));
evalcond[7]=(((r20*x13357*x13359))+(((-1.0)*r22*x13369))+((r20*x13364))+(((-1.0)*r21*x13360*x13366))+(((-1.0)*x13365))+((r21*x13363))+x13358);
evalcond[8]=((((-1.0)*x13361))+(((-1.0)*sj2*x13362))+(((-1.0)*r01*x13360*x13366))+((r01*x13363))+((r00*x13364))+(((-1.0)*r02*x13369))+((r00*x13357*x13359)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13372=((1.0)*gconst23);
CheckValue<IkReal> x13373=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst22*r00))+(((-1.0)*r01*x13372)))),-1);
if(!x13373.valid){
continue;
}
CheckValue<IkReal> x13374 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13372))+((gconst22*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13374.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13373.value)))+(x13374.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13375=IKsin(j4);
IkReal x13376=IKcos(j4);
IkReal x13377=(sj1*sj2);
IkReal x13378=(gconst23*sj3);
IkReal x13379=(gconst22*sj3);
IkReal x13380=(cj2*sj1);
IkReal x13381=((1.0)*cj1);
IkReal x13382=(cj3*gconst23);
IkReal x13383=(cj3*gconst22);
IkReal x13384=(cj2*x13381);
IkReal x13385=((1.0)*x13376);
IkReal x13386=(cj3*x13375);
IkReal x13387=(gconst22*x13375);
IkReal x13388=((1.0)*sj3*x13375);
IkReal x13389=(x13376*x13383);
IkReal x13390=((1.0)*gconst23*x13375);
evalcond[0]=((((-1.0)*r22*x13385))+(((-1.0)*r20*x13390))+((r21*x13387)));
evalcond[1]=(((r01*x13387))+(((-1.0)*r00*x13390))+(((-1.0)*r02*x13385)));
evalcond[2]=((1.0)+((r11*x13387))+(((-1.0)*r10*x13390))+(((-1.0)*r12*x13385)));
evalcond[3]=(((r10*x13379))+((r11*x13389))+((r11*x13378))+(((-1.0)*r10*x13382*x13385))+((r12*x13386)));
evalcond[4]=(((r11*x13382))+((r10*x13376*x13378))+((r10*x13383))+(((-1.0)*r11*x13379*x13385))+(((-1.0)*r12*x13388)));
evalcond[5]=(((cj1*sj2))+((r20*x13379))+((r22*x13386))+((r21*x13378))+x13380+(((-1.0)*r20*x13382*x13385))+((r21*x13389)));
evalcond[6]=(((r00*x13379))+((r01*x13378))+(((-1.0)*r00*x13382*x13385))+((r01*x13389))+(((-1.0)*x13384))+((r02*x13386))+x13377);
evalcond[7]=((((-1.0)*r22*x13388))+((r20*x13383))+(((-1.0)*r21*x13379*x13385))+(((-1.0)*x13384))+((r20*x13376*x13378))+x13377+((r21*x13382)));
evalcond[8]=((((-1.0)*x13380))+((r01*x13382))+((r00*x13383))+((r00*x13376*x13378))+(((-1.0)*r02*x13388))+(((-1.0)*r01*x13379*x13385))+(((-1.0)*sj2*x13381)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13391=IKPowWithIntegerCheck(IKsign((((gconst22*r20))+((gconst23*r21)))),-1);
if(!x13391.valid){
continue;
}
CheckValue<IkReal> x13392 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst22*r01))+(((-1.0)*gconst23*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13392.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13391.value)))+(x13392.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13393=IKsin(j4);
IkReal x13394=IKcos(j4);
IkReal x13395=(sj1*sj2);
IkReal x13396=(gconst23*sj3);
IkReal x13397=(gconst22*sj3);
IkReal x13398=(cj2*sj1);
IkReal x13399=((1.0)*cj1);
IkReal x13400=(cj3*gconst23);
IkReal x13401=(cj3*gconst22);
IkReal x13402=(cj2*x13399);
IkReal x13403=((1.0)*x13394);
IkReal x13404=(cj3*x13393);
IkReal x13405=(gconst22*x13393);
IkReal x13406=((1.0)*sj3*x13393);
IkReal x13407=(x13394*x13401);
IkReal x13408=((1.0)*gconst23*x13393);
evalcond[0]=(((r21*x13405))+(((-1.0)*r20*x13408))+(((-1.0)*r22*x13403)));
evalcond[1]=((((-1.0)*r02*x13403))+((r01*x13405))+(((-1.0)*r00*x13408)));
evalcond[2]=((1.0)+((r11*x13405))+(((-1.0)*r10*x13408))+(((-1.0)*r12*x13403)));
evalcond[3]=(((r11*x13396))+((r10*x13397))+((r11*x13407))+((r12*x13404))+(((-1.0)*r10*x13400*x13403)));
evalcond[4]=(((r11*x13400))+((r10*x13401))+(((-1.0)*r11*x13397*x13403))+((r10*x13394*x13396))+(((-1.0)*r12*x13406)));
evalcond[5]=(((r21*x13396))+((r20*x13397))+((cj1*sj2))+((r21*x13407))+(((-1.0)*r20*x13400*x13403))+((r22*x13404))+x13398);
evalcond[6]=(((r01*x13407))+((r00*x13397))+(((-1.0)*x13402))+((r01*x13396))+((r02*x13404))+(((-1.0)*r00*x13400*x13403))+x13395);
evalcond[7]=(((r21*x13400))+(((-1.0)*x13402))+(((-1.0)*r21*x13397*x13403))+((r20*x13394*x13396))+(((-1.0)*r22*x13406))+((r20*x13401))+x13395);
evalcond[8]=((((-1.0)*r02*x13406))+((r01*x13400))+(((-1.0)*x13398))+((r00*x13401))+(((-1.0)*r01*x13397*x13403))+((r00*x13394*x13396))+(((-1.0)*sj2*x13399)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13410 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13410)==0){
continue;
}
IkReal x13409=pow(x13410,-0.5);
CheckValue<IkReal> x13411 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13411.valid){
continue;
}
IkReal gconst24=((-1.0)*(x13411.value));
IkReal gconst25=((-1.0)*r21*x13409);
IkReal gconst26=(r20*x13409);
CheckValue<IkReal> x13412 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13412.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x13412.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x13415 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13415.valid){
continue;
}
IkReal x13413=((-1.0)*(x13415.value));
IkReal x13414=x13409;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13413;
IkReal gconst24=x13413;
IkReal gconst25=((-1.0)*r21*x13414);
IkReal gconst26=(r20*x13414);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13418 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13418.valid){
continue;
}
IkReal x13416=((-1.0)*(x13418.value));
IkReal x13417=x13409;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst25;
cj5=gconst26;
j5=x13416;
IkReal gconst24=x13416;
IkReal gconst25=((-1.0)*r21*x13417);
IkReal gconst26=(r20*x13417);
CheckValue<IkReal> x13426=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x13426.valid){
continue;
}
IkReal x13419=x13426.value;
IkReal x13420=(sj3*x13419);
IkReal x13421=(r11*x13420);
IkReal x13422=(r00*x13420);
IkReal x13423=(r01*x13420);
IkReal x13424=(r10*x13420);
IkReal x13425=(r20*r21*x13420);
j4eval[0]=IKsign((((r02*r12*sj3))+((r10*x13422*(r20*r20)))+((r10*r20*r21*x13423))+((r00*r20*r21*x13421))+((r01*x13421*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13427=gconst25*gconst25;
IkReal x13428=gconst26*gconst26;
IkReal x13429=(r00*r11);
IkReal x13430=(r01*r10);
IkReal x13431=(r02*sj3);
IkReal x13432=(gconst25*r10);
IkReal x13433=(gconst26*r11);
IkReal x13434=((1.0)*sj3);
IkReal x13435=((1.0)*cj3);
IkReal x13436=(cj3*gconst25*gconst26);
CheckValue<IkReal> x13437 = IKatan2WithCheck(IkReal((((x13431*x13433))+((x13431*x13432)))),IkReal((((sj3*x13427*x13430))+(((-1.0)*x13428*x13429*x13434))+((gconst25*r01*sj3*x13433))+(((-1.0)*gconst26*r00*x13432*x13434)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13437.valid){
continue;
}
CheckValue<IkReal> x13438=IKPowWithIntegerCheck(IKsign((((x13429*x13436))+(((-1.0)*r00*r10*x13428*x13435))+(((-1.0)*r01*r11*x13427*x13435))+((x13430*x13436))+(((-1.0)*r02*r12*x13435)))),-1);
if(!x13438.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13437.value)+(((1.5707963267949)*(x13438.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13439=IKsin(j4);
IkReal x13440=IKcos(j4);
IkReal x13441=(sj1*sj2);
IkReal x13442=(gconst26*sj3);
IkReal x13443=(gconst25*sj3);
IkReal x13444=(gconst26*r10);
IkReal x13445=(gconst25*r11);
IkReal x13446=(cj3*gconst25);
IkReal x13447=((1.0)*cj2);
IkReal x13448=(cj1*sj2);
IkReal x13449=(gconst26*r00);
IkReal x13450=(gconst26*r20);
IkReal x13451=(cj3*gconst26);
IkReal x13452=(cj1*x13447);
IkReal x13453=((1.0)*x13440);
IkReal x13454=((1.0)*x13439);
IkReal x13455=(cj3*x13439);
IkReal x13456=(gconst25*x13439);
evalcond[0]=((((-1.0)*r22*x13453))+((r21*x13456))+(((-1.0)*x13450*x13454)));
evalcond[1]=((((-1.0)*x13449*x13454))+(((-1.0)*r02*x13453))+((r01*x13456)));
evalcond[2]=((1.0)+((x13439*x13445))+(((-1.0)*r12*x13453))+(((-1.0)*x13444*x13454)));
evalcond[3]=((((-1.0)*cj3*x13444*x13453))+((r12*x13455))+((r10*x13443))+((r11*x13442))+((cj3*x13440*x13445)));
evalcond[4]=(((r10*x13440*x13442))+((r11*x13451))+(((-1.0)*r11*x13443*x13453))+(((-1.0)*r12*sj3*x13454))+((r10*x13446)));
evalcond[5]=(x13448+((cj2*sj1))+(((-1.0)*cj3*x13450*x13453))+((r20*x13443))+((r22*x13455))+((r21*x13440*x13446))+((r21*x13442)));
evalcond[6]=(x13441+(((-1.0)*cj3*x13449*x13453))+((r01*x13440*x13446))+(((-1.0)*x13452))+((r00*x13443))+((r01*x13442))+((r02*x13455)));
evalcond[7]=(x13441+((r21*x13451))+(((-1.0)*x13452))+(((-1.0)*r21*x13443*x13453))+((r20*x13446))+((r20*x13440*x13442))+(((-1.0)*r22*sj3*x13454)));
evalcond[8]=((((-1.0)*r01*x13443*x13453))+(((-1.0)*r02*sj3*x13454))+((r00*x13446))+((r00*x13440*x13442))+(((-1.0)*x13448))+((r01*x13451))+(((-1.0)*sj1*x13447)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13457=gconst26*gconst26;
IkReal x13458=gconst25*gconst25;
IkReal x13459=(r01*r10);
IkReal x13460=(cj3*r11);
IkReal x13461=(gconst25*gconst26);
IkReal x13462=(cj3*r10);
IkReal x13463=(r00*x13457);
IkReal x13464=((1.0)*sj3*x13461);
CheckValue<IkReal> x13465 = IKatan2WithCheck(IkReal((((gconst25*r02*x13462))+((gconst26*r02*x13460)))),IkReal(((((-1.0)*r00*x13461*x13462))+(((-1.0)*x13460*x13463))+((r01*x13460*x13461))+((cj3*x13458*x13459)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13465.valid){
continue;
}
CheckValue<IkReal> x13466=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*r00*r11*x13464))+(((-1.0)*x13459*x13464))+((r01*r11*sj3*x13458))+((r10*sj3*x13463)))),-1);
if(!x13466.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13465.value)+(((1.5707963267949)*(x13466.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13467=IKsin(j4);
IkReal x13468=IKcos(j4);
IkReal x13469=(sj1*sj2);
IkReal x13470=(gconst26*sj3);
IkReal x13471=(gconst25*sj3);
IkReal x13472=(gconst26*r10);
IkReal x13473=(gconst25*r11);
IkReal x13474=(cj3*gconst25);
IkReal x13475=((1.0)*cj2);
IkReal x13476=(cj1*sj2);
IkReal x13477=(gconst26*r00);
IkReal x13478=(gconst26*r20);
IkReal x13479=(cj3*gconst26);
IkReal x13480=(cj1*x13475);
IkReal x13481=((1.0)*x13468);
IkReal x13482=((1.0)*x13467);
IkReal x13483=(cj3*x13467);
IkReal x13484=(gconst25*x13467);
evalcond[0]=((((-1.0)*r22*x13481))+(((-1.0)*x13478*x13482))+((r21*x13484)));
evalcond[1]=((((-1.0)*x13477*x13482))+(((-1.0)*r02*x13481))+((r01*x13484)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13481))+(((-1.0)*x13472*x13482))+((x13467*x13473)));
evalcond[3]=(((r11*x13470))+((r10*x13471))+((cj3*x13468*x13473))+(((-1.0)*cj3*x13472*x13481))+((r12*x13483)));
evalcond[4]=(((r11*x13479))+((r10*x13474))+((r10*x13468*x13470))+(((-1.0)*r12*sj3*x13482))+(((-1.0)*r11*x13471*x13481)));
evalcond[5]=(x13476+((cj2*sj1))+((r21*x13470))+((r21*x13468*x13474))+(((-1.0)*cj3*x13478*x13481))+((r20*x13471))+((r22*x13483)));
evalcond[6]=(x13469+(((-1.0)*x13480))+((r02*x13483))+((r00*x13471))+((r01*x13470))+((r01*x13468*x13474))+(((-1.0)*cj3*x13477*x13481)));
evalcond[7]=(x13469+(((-1.0)*x13480))+((r21*x13479))+((r20*x13468*x13470))+(((-1.0)*r21*x13471*x13481))+(((-1.0)*r22*sj3*x13482))+((r20*x13474)));
evalcond[8]=(((r00*x13474))+((r01*x13479))+(((-1.0)*sj1*x13475))+((r00*x13468*x13470))+(((-1.0)*x13476))+(((-1.0)*r01*x13471*x13481))+(((-1.0)*r02*sj3*x13482)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13485=((1.0)*gconst26);
CheckValue<IkReal> x13486 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13485))+((gconst25*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13486.valid){
continue;
}
CheckValue<IkReal> x13487=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13485))+(((-1.0)*gconst25*r00)))),-1);
if(!x13487.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13486.value)+(((1.5707963267949)*(x13487.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13488=IKsin(j4);
IkReal x13489=IKcos(j4);
IkReal x13490=(sj1*sj2);
IkReal x13491=(gconst26*sj3);
IkReal x13492=(gconst25*sj3);
IkReal x13493=(gconst26*r10);
IkReal x13494=(gconst25*r11);
IkReal x13495=(cj3*gconst25);
IkReal x13496=((1.0)*cj2);
IkReal x13497=(cj1*sj2);
IkReal x13498=(gconst26*r00);
IkReal x13499=(gconst26*r20);
IkReal x13500=(cj3*gconst26);
IkReal x13501=(cj1*x13496);
IkReal x13502=((1.0)*x13489);
IkReal x13503=((1.0)*x13488);
IkReal x13504=(cj3*x13488);
IkReal x13505=(gconst25*x13488);
evalcond[0]=((((-1.0)*x13499*x13503))+((r21*x13505))+(((-1.0)*r22*x13502)));
evalcond[1]=((((-1.0)*x13498*x13503))+(((-1.0)*r02*x13502))+((r01*x13505)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13502))+((x13488*x13494))+(((-1.0)*x13493*x13503)));
evalcond[3]=(((cj3*x13489*x13494))+(((-1.0)*cj3*x13493*x13502))+((r12*x13504))+((r10*x13492))+((r11*x13491)));
evalcond[4]=((((-1.0)*r11*x13492*x13502))+(((-1.0)*r12*sj3*x13503))+((r11*x13500))+((r10*x13495))+((r10*x13489*x13491)));
evalcond[5]=(x13497+((cj2*sj1))+((r21*x13489*x13495))+((r22*x13504))+((r20*x13492))+((r21*x13491))+(((-1.0)*cj3*x13499*x13502)));
evalcond[6]=(x13490+((r02*x13504))+(((-1.0)*x13501))+((r01*x13491))+((r00*x13492))+((r01*x13489*x13495))+(((-1.0)*cj3*x13498*x13502)));
evalcond[7]=(x13490+(((-1.0)*r22*sj3*x13503))+((r20*x13495))+(((-1.0)*r21*x13492*x13502))+(((-1.0)*x13501))+((r20*x13489*x13491))+((r21*x13500)));
evalcond[8]=((((-1.0)*x13497))+((r00*x13489*x13491))+(((-1.0)*r01*x13492*x13502))+(((-1.0)*r02*sj3*x13503))+((r00*x13495))+((r01*x13500))+(((-1.0)*sj1*x13496)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x13507 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x13507)==0){
continue;
}
IkReal x13506=pow(x13507,-0.5);
CheckValue<IkReal> x13508 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13508.valid){
continue;
}
IkReal gconst27=((3.14159265358979)+(((-1.0)*(x13508.value))));
IkReal gconst28=((1.0)*r21*x13506);
IkReal gconst29=((-1.0)*r20*x13506);
CheckValue<IkReal> x13509 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13509.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x13509.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13512 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13512.valid){
continue;
}
IkReal x13510=((1.0)*(x13512.value));
IkReal x13511=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13510)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13510)));
IkReal gconst28=((1.0)*r21*x13511);
IkReal gconst29=((-1.0)*r20*x13511);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13515 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13515.valid){
continue;
}
IkReal x13513=((1.0)*(x13515.value));
IkReal x13514=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13513)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13513)));
IkReal gconst28=((1.0)*r21*x13514);
IkReal gconst29=((-1.0)*r20*x13514);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x13518 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13518.valid){
continue;
}
IkReal x13516=((1.0)*(x13518.value));
IkReal x13517=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13516)));
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13516)));
IkReal gconst28=((1.0)*r21*x13517);
IkReal gconst29=((-1.0)*r20*x13517);
j4eval[0]=r02;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13521 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13521.valid){
continue;
}
IkReal x13519=((1.0)*(x13521.value));
IkReal x13520=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13519)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13519)));
IkReal gconst28=((1.0)*r21*x13520);
IkReal gconst29=((-1.0)*r20*x13520);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13524 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13524.valid){
continue;
}
IkReal x13522=((1.0)*(x13524.value));
IkReal x13523=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13522)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13522)));
IkReal gconst28=((1.0)*r21*x13523);
IkReal gconst29=((-1.0)*r20*x13523);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13527 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13527.valid){
continue;
}
IkReal x13525=((1.0)*(x13527.value));
IkReal x13526=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13525)));
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13525)));
IkReal gconst28=((1.0)*r21*x13526);
IkReal gconst29=((-1.0)*r20*x13526);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13528=(gconst29*r10);
IkReal x13529=(gconst28*r11);
CheckValue<IkReal> x13530=IKPowWithIntegerCheck(IKsign(((x13528*x13528)+(r12*r12)+(x13529*x13529)+(((-2.0)*x13528*x13529)))),-1);
if(!x13530.valid){
continue;
}
CheckValue<IkReal> x13531 = IKatan2WithCheck(IkReal((x13528+(((-1.0)*x13529)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13531.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13530.value)))+(x13531.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13532=IKsin(j4);
IkReal x13533=IKcos(j4);
IkReal x13534=(gconst28*r11);
IkReal x13535=((1.0)*cj2);
IkReal x13536=((1.0)*x13533);
IkReal x13537=(gconst29*x13533);
IkReal x13538=(gconst28*x13532);
IkReal x13539=((1.0)*x13532);
IkReal x13540=(gconst29*x13539);
evalcond[0]=((((-1.0)*r22*x13536))+((r21*x13538))+(((-1.0)*r20*x13540)));
evalcond[1]=((((-1.0)*r00*x13540))+(((-1.0)*r02*x13536))+((r01*x13538)));
evalcond[2]=((((-1.0)*x13534*x13536))+(((-1.0)*r12*x13539))+((r10*x13537)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13536))+(((-1.0)*r10*x13540))+((x13532*x13534)));
evalcond[4]=((((-1.0)*r22*x13539))+((r20*x13537))+(((-1.0)*cj1*x13535))+((sj1*sj2))+(((-1.0)*gconst28*r21*x13536)));
evalcond[5]=((((-1.0)*sj1*x13535))+(((-1.0)*cj1*sj2))+(((-1.0)*gconst28*r01*x13536))+(((-1.0)*r02*x13539))+((r00*x13537)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13541=((1.0)*gconst29);
CheckValue<IkReal> x13542 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst28*r21))+(((-1.0)*r20*x13541)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13542.valid){
continue;
}
CheckValue<IkReal> x13543=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13541))+(((-1.0)*gconst28*r00)))),-1);
if(!x13543.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13542.value)+(((1.5707963267949)*(x13543.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13544=IKsin(j4);
IkReal x13545=IKcos(j4);
IkReal x13546=(gconst28*r11);
IkReal x13547=((1.0)*cj2);
IkReal x13548=((1.0)*x13545);
IkReal x13549=(gconst29*x13545);
IkReal x13550=(gconst28*x13544);
IkReal x13551=((1.0)*x13544);
IkReal x13552=(gconst29*x13551);
evalcond[0]=(((r21*x13550))+(((-1.0)*r22*x13548))+(((-1.0)*r20*x13552)));
evalcond[1]=((((-1.0)*r00*x13552))+((r01*x13550))+(((-1.0)*r02*x13548)));
evalcond[2]=(((r10*x13549))+(((-1.0)*x13546*x13548))+(((-1.0)*r12*x13551)));
evalcond[3]=((1.0)+((x13544*x13546))+(((-1.0)*r10*x13552))+(((-1.0)*r12*x13548)));
evalcond[4]=((((-1.0)*gconst28*r21*x13548))+((sj1*sj2))+((r20*x13549))+(((-1.0)*cj1*x13547))+(((-1.0)*r22*x13551)));
evalcond[5]=((((-1.0)*gconst28*r01*x13548))+((r00*x13549))+(((-1.0)*r02*x13551))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13547)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13553=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13553.valid){
continue;
}
CheckValue<IkReal> x13554 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13554.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13553.value)))+(x13554.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13555=IKsin(j4);
IkReal x13556=IKcos(j4);
IkReal x13557=(gconst28*r11);
IkReal x13558=((1.0)*cj2);
IkReal x13559=((1.0)*x13556);
IkReal x13560=(gconst29*x13556);
IkReal x13561=(gconst28*x13555);
IkReal x13562=((1.0)*x13555);
IkReal x13563=(gconst29*x13562);
evalcond[0]=(((r21*x13561))+(((-1.0)*r20*x13563))+(((-1.0)*r22*x13559)));
evalcond[1]=(((r01*x13561))+(((-1.0)*r02*x13559))+(((-1.0)*r00*x13563)));
evalcond[2]=((((-1.0)*x13557*x13559))+((r10*x13560))+(((-1.0)*r12*x13562)));
evalcond[3]=((1.0)+(((-1.0)*r10*x13563))+((x13555*x13557))+(((-1.0)*r12*x13559)));
evalcond[4]=((((-1.0)*gconst28*r21*x13559))+((r20*x13560))+((sj1*sj2))+(((-1.0)*cj1*x13558))+(((-1.0)*r22*x13562)));
evalcond[5]=(((r00*x13560))+(((-1.0)*gconst28*r01*x13559))+(((-1.0)*r02*x13562))+(((-1.0)*cj1*sj2))+(((-1.0)*sj1*x13558)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13566 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13566.valid){
continue;
}
IkReal x13564=((1.0)*(x13566.value));
IkReal x13565=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13564)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13564)));
IkReal gconst28=((1.0)*r21*x13565);
IkReal gconst29=((-1.0)*r20*x13565);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13569 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13569.valid){
continue;
}
IkReal x13567=((1.0)*(x13569.value));
IkReal x13568=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13567)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13567)));
IkReal gconst28=((1.0)*r21*x13568);
IkReal gconst29=((-1.0)*r20*x13568);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13572 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13572.valid){
continue;
}
IkReal x13570=((1.0)*(x13572.value));
IkReal x13571=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13570)));
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13570)));
IkReal gconst28=((1.0)*r21*x13571);
IkReal gconst29=((-1.0)*r20*x13571);
IkReal x13573=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13577=IKPowWithIntegerCheck(x13573,-1);
if(!x13577.valid){
continue;
}
IkReal x13574=x13577.value;
IkReal x13575=((1.0)*x13574);
IkReal x13576=((((-1.0)*x13575*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13574))+(((-1.0)*x13575*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12))));
j4eval[0]=x13576;
j4eval[1]=r12;
j4eval[2]=x13573;
j4eval[3]=IKsign(x13576);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13578=(gconst28*r11);
IkReal x13579=(gconst29*r10);
CheckValue<IkReal> x13580=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13579*x13579)))+(((-1.0)*(x13578*x13578)))+(((-1.0)*(r12*r12)))+(((2.0)*x13578*x13579)))),-1);
if(!x13580.valid){
continue;
}
CheckValue<IkReal> x13581 = IKatan2WithCheck(IkReal((x13578+(((-1.0)*x13579)))),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13581.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13580.value)))+(x13581.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13582=IKcos(j4);
IkReal x13583=IKsin(j4);
IkReal x13584=(gconst29*r10);
IkReal x13585=(gconst29*r20);
IkReal x13586=(gconst28*r21);
IkReal x13587=((1.0)*cj2);
IkReal x13588=(gconst29*r00);
IkReal x13589=((1.0)*x13582);
IkReal x13590=((1.0)*x13583);
IkReal x13591=(gconst28*x13582);
IkReal x13592=(gconst28*x13583);
evalcond[0]=(((r11*x13591))+((r12*x13583))+(((-1.0)*x13584*x13589)));
evalcond[1]=(((x13583*x13586))+(((-1.0)*x13585*x13590))+(((-1.0)*r22*x13589)));
evalcond[2]=((((-1.0)*r02*x13589))+((r01*x13592))+(((-1.0)*x13588*x13590)));
evalcond[3]=((1.0)+((r11*x13592))+(((-1.0)*r12*x13589))+(((-1.0)*x13584*x13590)));
evalcond[4]=((((-1.0)*x13585*x13589))+((x13582*x13586))+((sj1*sj2))+(((-1.0)*cj1*x13587))+((r22*x13583)));
evalcond[5]=(((r01*x13591))+(((-1.0)*sj1*x13587))+(((-1.0)*cj1*sj2))+(((-1.0)*x13588*x13589))+((r02*x13583)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13593=((1.0)*gconst29);
CheckValue<IkReal> x13594=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13593))+(((-1.0)*gconst28*r00)))),-1);
if(!x13594.valid){
continue;
}
CheckValue<IkReal> x13595 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13593))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13595.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13594.value)))+(x13595.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13596=IKcos(j4);
IkReal x13597=IKsin(j4);
IkReal x13598=(gconst29*r10);
IkReal x13599=(gconst29*r20);
IkReal x13600=(gconst28*r21);
IkReal x13601=((1.0)*cj2);
IkReal x13602=(gconst29*r00);
IkReal x13603=((1.0)*x13596);
IkReal x13604=((1.0)*x13597);
IkReal x13605=(gconst28*x13596);
IkReal x13606=(gconst28*x13597);
evalcond[0]=(((r11*x13605))+(((-1.0)*x13598*x13603))+((r12*x13597)));
evalcond[1]=((((-1.0)*x13599*x13604))+(((-1.0)*r22*x13603))+((x13597*x13600)));
evalcond[2]=((((-1.0)*r02*x13603))+((r01*x13606))+(((-1.0)*x13602*x13604)));
evalcond[3]=((1.0)+((r11*x13606))+(((-1.0)*r12*x13603))+(((-1.0)*x13598*x13604)));
evalcond[4]=((((-1.0)*x13599*x13603))+((r22*x13597))+(((-1.0)*cj1*x13601))+((sj1*sj2))+((x13596*x13600)));
evalcond[5]=((((-1.0)*sj1*x13601))+(((-1.0)*cj1*sj2))+((r02*x13597))+((r01*x13605))+(((-1.0)*x13602*x13603)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13607=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13607.valid){
continue;
}
CheckValue<IkReal> x13608 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13608.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13607.value)))+(x13608.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13609=IKcos(j4);
IkReal x13610=IKsin(j4);
IkReal x13611=(gconst29*r10);
IkReal x13612=(gconst29*r20);
IkReal x13613=(gconst28*r21);
IkReal x13614=((1.0)*cj2);
IkReal x13615=(gconst29*r00);
IkReal x13616=((1.0)*x13609);
IkReal x13617=((1.0)*x13610);
IkReal x13618=(gconst28*x13609);
IkReal x13619=(gconst28*x13610);
evalcond[0]=(((r11*x13618))+((r12*x13610))+(((-1.0)*x13611*x13616)));
evalcond[1]=((((-1.0)*x13612*x13617))+((x13610*x13613))+(((-1.0)*r22*x13616)));
evalcond[2]=((((-1.0)*r02*x13616))+((r01*x13619))+(((-1.0)*x13615*x13617)));
evalcond[3]=((1.0)+((r11*x13619))+(((-1.0)*x13611*x13617))+(((-1.0)*r12*x13616)));
evalcond[4]=((((-1.0)*cj1*x13614))+((x13609*x13613))+((sj1*sj2))+(((-1.0)*x13612*x13616))+((r22*x13610)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r01*x13618))+(((-1.0)*x13615*x13616))+((r02*x13610))+(((-1.0)*sj1*x13614)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13622 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13622.valid){
continue;
}
IkReal x13620=((1.0)*(x13622.value));
IkReal x13621=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13620)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13620)));
IkReal gconst28=((1.0)*r21*x13621);
IkReal gconst29=((-1.0)*r20*x13621);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13625 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13625.valid){
continue;
}
IkReal x13623=((1.0)*(x13625.value));
IkReal x13624=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13623)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13623)));
IkReal gconst28=((1.0)*r21*x13624);
IkReal gconst29=((-1.0)*r20*x13624);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[4];
CheckValue<IkReal> x13628 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13628.valid){
continue;
}
IkReal x13626=((1.0)*(x13628.value));
IkReal x13627=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13626)));
sj3=0;
cj3=1.0;
j3=0;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13626)));
IkReal gconst28=((1.0)*r21*x13627);
IkReal gconst29=((-1.0)*r20*x13627);
IkReal x13629=((1.0)+(((-1.0)*(r22*r22))));
CheckValue<IkReal> x13633=IKPowWithIntegerCheck(x13629,-1);
if(!x13633.valid){
continue;
}
IkReal x13630=x13633.value;
IkReal x13631=((1.0)*x13630);
IkReal x13632=((((-1.0)*x13631*(r10*r10)*(r20*r20)))+(((-1.0)*(r12*r12)))+(((-1.0)*x13631*(r11*r11)*(r21*r21)))+(((-2.0)*r10*r11*r20*r21*x13630)));
j4eval[0]=x13632;
j4eval[1]=r12;
j4eval[2]=x13629;
j4eval[3]=IKsign(x13632);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13634=(gconst28*r11);
IkReal x13635=(gconst29*r10);
CheckValue<IkReal> x13636 = IKatan2WithCheck(IkReal(((((-1.0)*x13635))+x13634)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x13636.valid){
continue;
}
CheckValue<IkReal> x13637=IKPowWithIntegerCheck(IKsign(((((-1.0)*(x13635*x13635)))+(((-1.0)*(x13634*x13634)))+(((-1.0)*(r12*r12)))+(((2.0)*x13634*x13635)))),-1);
if(!x13637.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13636.value)+(((1.5707963267949)*(x13637.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13638=IKcos(j4);
IkReal x13639=IKsin(j4);
IkReal x13640=(gconst29*r10);
IkReal x13641=(gconst29*r20);
IkReal x13642=(gconst28*r21);
IkReal x13643=(gconst29*r00);
IkReal x13644=((1.0)*x13638);
IkReal x13645=((1.0)*x13639);
IkReal x13646=(gconst28*x13638);
IkReal x13647=(gconst28*x13639);
evalcond[0]=(((r12*x13639))+((r11*x13646))+(((-1.0)*x13640*x13644)));
evalcond[1]=(((x13639*x13642))+(((-1.0)*x13641*x13645))+(((-1.0)*r22*x13644)));
evalcond[2]=((((-1.0)*x13643*x13645))+((r01*x13647))+(((-1.0)*r02*x13644)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13644))+((r11*x13647))+(((-1.0)*x13640*x13645)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x13641*x13644))+((cj1*sj2))+((r22*x13639))+((x13638*x13642)));
evalcond[5]=((((-1.0)*x13643*x13644))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13639))+((r01*x13646)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13648=((1.0)*gconst29);
CheckValue<IkReal> x13649=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13648)))),-1);
if(!x13649.valid){
continue;
}
CheckValue<IkReal> x13650 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13648))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13650.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13649.value)))+(x13650.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13651=IKcos(j4);
IkReal x13652=IKsin(j4);
IkReal x13653=(gconst29*r10);
IkReal x13654=(gconst29*r20);
IkReal x13655=(gconst28*r21);
IkReal x13656=(gconst29*r00);
IkReal x13657=((1.0)*x13651);
IkReal x13658=((1.0)*x13652);
IkReal x13659=(gconst28*x13651);
IkReal x13660=(gconst28*x13652);
evalcond[0]=(((r12*x13652))+(((-1.0)*x13653*x13657))+((r11*x13659)));
evalcond[1]=((((-1.0)*r22*x13657))+((x13652*x13655))+(((-1.0)*x13654*x13658)));
evalcond[2]=((((-1.0)*r02*x13657))+((r01*x13660))+(((-1.0)*x13656*x13658)));
evalcond[3]=((1.0)+((r11*x13660))+(((-1.0)*r12*x13657))+(((-1.0)*x13653*x13658)));
evalcond[4]=(((cj2*sj1))+((x13651*x13655))+((cj1*sj2))+(((-1.0)*x13654*x13657))+((r22*x13652)));
evalcond[5]=(((r01*x13659))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r02*x13652))+(((-1.0)*x13656*x13657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13661=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13661.valid){
continue;
}
CheckValue<IkReal> x13662 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13662.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13661.value)))+(x13662.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13663=IKcos(j4);
IkReal x13664=IKsin(j4);
IkReal x13665=(gconst29*r10);
IkReal x13666=(gconst29*r20);
IkReal x13667=(gconst28*r21);
IkReal x13668=(gconst29*r00);
IkReal x13669=((1.0)*x13663);
IkReal x13670=((1.0)*x13664);
IkReal x13671=(gconst28*x13663);
IkReal x13672=(gconst28*x13664);
evalcond[0]=(((r12*x13664))+((r11*x13671))+(((-1.0)*x13665*x13669)));
evalcond[1]=((((-1.0)*r22*x13669))+((x13664*x13667))+(((-1.0)*x13666*x13670)));
evalcond[2]=((((-1.0)*x13668*x13670))+((r01*x13672))+(((-1.0)*r02*x13669)));
evalcond[3]=((1.0)+(((-1.0)*r12*x13669))+((r11*x13672))+(((-1.0)*x13665*x13670)));
evalcond[4]=(((cj2*sj1))+((r22*x13664))+((cj1*sj2))+(((-1.0)*x13666*x13669))+((x13663*x13667)));
evalcond[5]=((((-1.0)*x13668*x13669))+((r02*x13664))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r01*x13671)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x13675 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13675.valid){
continue;
}
IkReal x13673=((1.0)*(x13675.value));
IkReal x13674=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13673)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13673)));
IkReal gconst28=((1.0)*r21*x13674);
IkReal gconst29=((-1.0)*r20*x13674);
j4eval[0]=0;
j4eval[1]=r02;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x13678 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13678.valid){
continue;
}
IkReal x13676=((1.0)*(x13678.value));
IkReal x13677=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13676)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13676)));
IkReal gconst28=((1.0)*r21*x13677);
IkReal gconst29=((-1.0)*r20*x13677);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
CheckValue<IkReal> x13681 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x13681.valid){
continue;
}
IkReal x13679=((1.0)*(x13681.value));
IkReal x13680=x13506;
sj0=0;
cj0=1.0;
j0=0;
sj5=gconst28;
cj5=gconst29;
j5=((3.14159265)+(((-1.0)*x13679)));
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
IkReal gconst27=((3.14159265358979)+(((-1.0)*x13679)));
IkReal gconst28=((1.0)*r21*x13680);
IkReal gconst29=((-1.0)*r20*x13680);
j4eval[0]=r12;
j4eval[1]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13682=(gconst29*r10);
IkReal x13683=(gconst28*r11);
CheckValue<IkReal> x13684=IKPowWithIntegerCheck(IKsign(((r12*r12)+(x13683*x13683)+(x13682*x13682)+(((-2.0)*x13682*x13683)))),-1);
if(!x13684.valid){
continue;
}
CheckValue<IkReal> x13685 = IKatan2WithCheck(IkReal((x13682+(((-1.0)*x13683)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13685.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13684.value)))+(x13685.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13686=IKsin(j4);
IkReal x13687=IKcos(j4);
IkReal x13688=(gconst28*r11);
IkReal x13689=((1.0)*x13687);
IkReal x13690=(gconst29*x13687);
IkReal x13691=(gconst28*x13686);
IkReal x13692=((1.0)*x13686);
IkReal x13693=(gconst29*x13692);
evalcond[0]=((((-1.0)*r20*x13693))+(((-1.0)*r22*x13689))+((r21*x13691)));
evalcond[1]=(((r01*x13691))+(((-1.0)*r00*x13693))+(((-1.0)*r02*x13689)));
evalcond[2]=((((-1.0)*x13688*x13689))+((r10*x13690))+(((-1.0)*r12*x13692)));
evalcond[3]=((1.0)+((x13686*x13688))+(((-1.0)*r12*x13689))+(((-1.0)*r10*x13693)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r20*x13690))+(((-1.0)*gconst28*r21*x13689))+(((-1.0)*r22*x13692)));
evalcond[5]=(((r00*x13690))+(((-1.0)*gconst28*r01*x13689))+(((-1.0)*r02*x13692))+(((-1.0)*cj1*cj2))+((sj1*sj2)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13694=((1.0)*gconst29);
CheckValue<IkReal> x13695=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst28*r00))+(((-1.0)*r01*x13694)))),-1);
if(!x13695.valid){
continue;
}
CheckValue<IkReal> x13696 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13694))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13696.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13695.value)))+(x13696.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13697=IKsin(j4);
IkReal x13698=IKcos(j4);
IkReal x13699=(gconst28*r11);
IkReal x13700=((1.0)*x13698);
IkReal x13701=(gconst29*x13698);
IkReal x13702=(gconst28*x13697);
IkReal x13703=((1.0)*x13697);
IkReal x13704=(gconst29*x13703);
evalcond[0]=((((-1.0)*r22*x13700))+((r21*x13702))+(((-1.0)*r20*x13704)));
evalcond[1]=((((-1.0)*r00*x13704))+((r01*x13702))+(((-1.0)*r02*x13700)));
evalcond[2]=((((-1.0)*r12*x13703))+((r10*x13701))+(((-1.0)*x13699*x13700)));
evalcond[3]=((1.0)+((x13697*x13699))+(((-1.0)*r12*x13700))+(((-1.0)*r10*x13704)));
evalcond[4]=((((-1.0)*gconst28*r21*x13700))+(((-1.0)*r22*x13703))+((cj2*sj1))+((r20*x13701))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13701))+(((-1.0)*r02*x13703))+(((-1.0)*gconst28*r01*x13700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13705=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13705.valid){
continue;
}
CheckValue<IkReal> x13706 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13706.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13705.value)))+(x13706.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13707=IKsin(j4);
IkReal x13708=IKcos(j4);
IkReal x13709=(gconst28*r11);
IkReal x13710=((1.0)*x13708);
IkReal x13711=(gconst29*x13708);
IkReal x13712=(gconst28*x13707);
IkReal x13713=((1.0)*x13707);
IkReal x13714=(gconst29*x13713);
evalcond[0]=(((r21*x13712))+(((-1.0)*r22*x13710))+(((-1.0)*r20*x13714)));
evalcond[1]=((((-1.0)*r00*x13714))+((r01*x13712))+(((-1.0)*r02*x13710)));
evalcond[2]=((((-1.0)*x13709*x13710))+(((-1.0)*r12*x13713))+((r10*x13711)));
evalcond[3]=((1.0)+((x13707*x13709))+(((-1.0)*r12*x13710))+(((-1.0)*r10*x13714)));
evalcond[4]=((((-1.0)*gconst28*r21*x13710))+((cj2*sj1))+(((-1.0)*r22*x13713))+((r20*x13711))+((cj1*sj2)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13711))+(((-1.0)*r02*x13713))+(((-1.0)*gconst28*r01*x13710)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r02);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((1.0)+r12);
op[1]=((((-2.0)*gconst29*r10))+(((2.0)*gconst28*r11)));
op[2]=((1.0)+(((-1.0)*r12)));
polyroots2(op,zeror,numroots);
IkReal j4array[2], cj4array[2], sj4array[2], tempj4array[1];
int numsolutions = 0;
for(int ij4 = 0; ij4 < numroots; ++ij4)
{
IkReal htj4 = zeror[ij4];
tempj4array[0]=((2.0)*(atan(htj4)));
for(int kj4 = 0; kj4 < 1; ++kj4)
{
j4array[numsolutions] = tempj4array[kj4];
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
sj4array[numsolutions] = IKsin(j4array[numsolutions]);
cj4array[numsolutions] = IKcos(j4array[numsolutions]);
numsolutions++;
}
}
bool j4valid[2]={true,true};
_nj4 = 2;
for(int ij4 = 0; ij4 < numsolutions; ++ij4)
    {
if( !j4valid[ij4] )
{
    continue;
}
    j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
htj4 = IKtan(j4/2);

_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < numsolutions; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13715=gconst28*gconst28;
IkReal x13716=gconst29*gconst29;
IkReal x13717=(r11*r21);
IkReal x13718=(gconst29*sj3);
IkReal x13719=((1.0)*cj3);
IkReal x13720=(r10*r20);
IkReal x13721=(r10*r21);
IkReal x13722=(r11*r20);
IkReal x13723=(cj3*gconst28*gconst29);
CheckValue<IkReal> x13724 = IKatan2WithCheck(IkReal((((r11*r22*x13718))+((gconst28*r10*r22*sj3)))),IkReal(((((-1.0)*gconst28*x13718*x13720))+(((-1.0)*sj3*x13716*x13722))+((gconst28*x13717*x13718))+((sj3*x13715*x13721)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13724.valid){
continue;
}
CheckValue<IkReal> x13725=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13716*x13719*x13720))+((x13722*x13723))+((x13721*x13723))+(((-1.0)*x13715*x13717*x13719))+(((-1.0)*r12*r22*x13719)))),-1);
if(!x13725.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x13724.value)+(((1.5707963267949)*(x13725.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13726=IKsin(j4);
IkReal x13727=IKcos(j4);
IkReal x13728=(sj1*sj2);
IkReal x13729=(gconst29*r20);
IkReal x13730=(gconst28*r20);
IkReal x13731=((1.0)*cj2);
IkReal x13732=(r11*sj3);
IkReal x13733=(cj1*sj2);
IkReal x13734=(gconst29*r01);
IkReal x13735=(gconst29*r10);
IkReal x13736=(cj3*gconst28);
IkReal x13737=(cj3*gconst29);
IkReal x13738=(gconst28*sj3);
IkReal x13739=(gconst29*r00);
IkReal x13740=(cj1*x13731);
IkReal x13741=((1.0)*x13727);
IkReal x13742=((1.0)*x13726);
IkReal x13743=(gconst28*x13726);
IkReal x13744=(cj3*x13726);
IkReal x13745=(sj3*x13727);
evalcond[0]=((((-1.0)*r22*x13741))+((r21*x13743))+(((-1.0)*x13729*x13742)));
evalcond[1]=((((-1.0)*r02*x13741))+((r01*x13743))+(((-1.0)*x13739*x13742)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13741))+(((-1.0)*x13735*x13742))+((r11*x13743)));
evalcond[3]=(((r10*x13738))+(((-1.0)*cj3*x13735*x13741))+((r11*x13727*x13736))+((r12*x13744))+((gconst29*x13732)));
evalcond[4]=(((r10*x13736))+(((-1.0)*gconst28*x13732*x13741))+((r11*x13737))+(((-1.0)*r12*sj3*x13742))+((x13735*x13745)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13733+(((-1.0)*cj3*x13729*x13741))+((r21*x13727*x13736))+((r22*x13744))+((sj3*x13730)));
evalcond[6]=(((r00*x13738))+x13728+((r01*x13727*x13736))+((sj3*x13734))+(((-1.0)*r00*x13737*x13741))+(((-1.0)*x13740))+((r02*x13744)));
evalcond[7]=(((x13729*x13745))+x13728+(((-1.0)*r21*x13738*x13741))+((r21*x13737))+(((-1.0)*r22*sj3*x13742))+(((-1.0)*x13740))+((cj3*x13730)));
evalcond[8]=(((r00*x13736))+(((-1.0)*sj1*x13731))+(((-1.0)*r02*sj3*x13742))+((x13739*x13745))+(((-1.0)*r01*x13738*x13741))+(((-1.0)*x13733))+((cj3*x13734)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13746=((1.0)*gconst29);
CheckValue<IkReal> x13747=IKPowWithIntegerCheck(IKsign(((((-1.0)*r01*x13746))+(((-1.0)*gconst28*r00)))),-1);
if(!x13747.valid){
continue;
}
CheckValue<IkReal> x13748 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13746))+((gconst28*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13748.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13747.value)))+(x13748.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13749=IKsin(j4);
IkReal x13750=IKcos(j4);
IkReal x13751=(sj1*sj2);
IkReal x13752=(gconst29*r20);
IkReal x13753=(gconst28*r20);
IkReal x13754=((1.0)*cj2);
IkReal x13755=(r11*sj3);
IkReal x13756=(cj1*sj2);
IkReal x13757=(gconst29*r01);
IkReal x13758=(gconst29*r10);
IkReal x13759=(cj3*gconst28);
IkReal x13760=(cj3*gconst29);
IkReal x13761=(gconst28*sj3);
IkReal x13762=(gconst29*r00);
IkReal x13763=(cj1*x13754);
IkReal x13764=((1.0)*x13750);
IkReal x13765=((1.0)*x13749);
IkReal x13766=(gconst28*x13749);
IkReal x13767=(cj3*x13749);
IkReal x13768=(sj3*x13750);
evalcond[0]=((((-1.0)*x13752*x13765))+(((-1.0)*r22*x13764))+((r21*x13766)));
evalcond[1]=(((r01*x13766))+(((-1.0)*r02*x13764))+(((-1.0)*x13762*x13765)));
evalcond[2]=((1.0)+((r11*x13766))+(((-1.0)*x13758*x13765))+(((-1.0)*r12*x13764)));
evalcond[3]=((((-1.0)*cj3*x13758*x13764))+((r10*x13761))+((gconst29*x13755))+((r12*x13767))+((r11*x13750*x13759)));
evalcond[4]=(((r11*x13760))+(((-1.0)*gconst28*x13755*x13764))+((r10*x13759))+(((-1.0)*r12*sj3*x13765))+((x13758*x13768)));
evalcond[5]=(((cj2*sj1))+(((-1.0)*cj3*x13752*x13764))+((gconst29*r21*sj3))+x13756+((r21*x13750*x13759))+((sj3*x13753))+((r22*x13767)));
evalcond[6]=(x13751+((r00*x13761))+((sj3*x13757))+(((-1.0)*r00*x13760*x13764))+((r01*x13750*x13759))+((r02*x13767))+(((-1.0)*x13763)));
evalcond[7]=((((-1.0)*r21*x13761*x13764))+x13751+(((-1.0)*r22*sj3*x13765))+((x13752*x13768))+((r21*x13760))+((cj3*x13753))+(((-1.0)*x13763)));
evalcond[8]=((((-1.0)*sj1*x13754))+(((-1.0)*x13756))+(((-1.0)*r01*x13761*x13764))+((x13762*x13768))+(((-1.0)*r02*sj3*x13765))+((r00*x13759))+((cj3*x13757)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13769=IKPowWithIntegerCheck(IKsign((((gconst29*r21))+((gconst28*r20)))),-1);
if(!x13769.valid){
continue;
}
CheckValue<IkReal> x13770 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst28*r01))+(((-1.0)*gconst29*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13770.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13769.value)))+(x13770.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13771=IKsin(j4);
IkReal x13772=IKcos(j4);
IkReal x13773=(sj1*sj2);
IkReal x13774=(gconst29*r20);
IkReal x13775=(gconst28*r20);
IkReal x13776=((1.0)*cj2);
IkReal x13777=(r11*sj3);
IkReal x13778=(cj1*sj2);
IkReal x13779=(gconst29*r01);
IkReal x13780=(gconst29*r10);
IkReal x13781=(cj3*gconst28);
IkReal x13782=(cj3*gconst29);
IkReal x13783=(gconst28*sj3);
IkReal x13784=(gconst29*r00);
IkReal x13785=(cj1*x13776);
IkReal x13786=((1.0)*x13772);
IkReal x13787=((1.0)*x13771);
IkReal x13788=(gconst28*x13771);
IkReal x13789=(cj3*x13771);
IkReal x13790=(sj3*x13772);
evalcond[0]=((((-1.0)*x13774*x13787))+((r21*x13788))+(((-1.0)*r22*x13786)));
evalcond[1]=((((-1.0)*x13784*x13787))+((r01*x13788))+(((-1.0)*r02*x13786)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13786))+((r11*x13788))+(((-1.0)*x13780*x13787)));
evalcond[3]=(((gconst29*x13777))+(((-1.0)*cj3*x13780*x13786))+((r11*x13772*x13781))+((r12*x13789))+((r10*x13783)));
evalcond[4]=((((-1.0)*gconst28*x13777*x13786))+((x13780*x13790))+((r11*x13782))+(((-1.0)*r12*sj3*x13787))+((r10*x13781)));
evalcond[5]=(((cj2*sj1))+((gconst29*r21*sj3))+x13778+(((-1.0)*cj3*x13774*x13786))+((sj3*x13775))+((r22*x13789))+((r21*x13772*x13781)));
evalcond[6]=(x13773+((r00*x13783))+((sj3*x13779))+((r02*x13789))+((r01*x13772*x13781))+(((-1.0)*x13785))+(((-1.0)*r00*x13782*x13786)));
evalcond[7]=(x13773+(((-1.0)*r21*x13783*x13786))+((cj3*x13775))+(((-1.0)*x13785))+(((-1.0)*r22*sj3*x13787))+((r21*x13782))+((x13774*x13790)));
evalcond[8]=((((-1.0)*x13778))+((x13784*x13790))+((r00*x13781))+(((-1.0)*r02*sj3*x13787))+(((-1.0)*sj1*x13776))+((cj3*x13779))+(((-1.0)*r01*x13783*x13786)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13791=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13791);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13791);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13792=(r11*sj5);
IkReal x13793=((1.0)*cj5*r10);
j4eval[0]=(x13792+(((-1.0)*x13793)));
j4eval[1]=((((-1.0)*cj3*x13793))+((cj3*x13792)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13794=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13794);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13794);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x13795=(cj5*r10);
IkReal x13796=(r11*sj5);
j4eval[0]=(x13796+(((-1.0)*x13795)));
j4eval[1]=((((-1.0)*sj3*x13796))+((sj3*x13795)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x13797=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13797);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13797);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j3))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13798=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13798);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13798);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
IkReal x13799=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x13799))+((r11*sj5)));
j4eval[1]=(((r01*sj5))+(((-1.0)*r00*x13799)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13800=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13800);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13800);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=1.0;
j3=0;
j4eval[0]=r22;
j4eval[1]=(((r01*sj5))+(((-1.0)*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13801=((1.0)*sj1);
CheckValue<IkReal> x13802=IKPowWithIntegerCheck(r22,-1);
if(!x13802.valid){
continue;
}
CheckValue<IkReal> x13803=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*cj5*r00))),-1);
if(!x13803.valid){
continue;
}
if( IKabs(((x13802.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13801)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13803.value)*(((((-1.0)*sj2*x13801))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13802.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13801))))))+IKsqr(((x13803.value)*(((((-1.0)*sj2*x13801))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13802.value)*(((((-1.0)*cj1*sj2))+(((-1.0)*cj2*x13801))))), ((x13803.value)*(((((-1.0)*sj2*x13801))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13804=IKsin(j4);
IkReal x13805=IKcos(j4);
IkReal x13806=((1.0)*cj5);
IkReal x13807=(sj5*x13805);
IkReal x13808=(sj5*x13804);
evalcond[0]=((-1.0)*r22*x13805);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13804)));
evalcond[2]=(((r01*x13808))+(((-1.0)*r00*x13804*x13806)));
evalcond[3]=(((r11*x13807))+(((-1.0)*r10*x13805*x13806)));
evalcond[4]=((1.0)+((r11*x13808))+(((-1.0)*r10*x13804*x13806)));
evalcond[5]=(((r01*x13807))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13805*x13806)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13809=((1.0)*cj5);
CheckValue<IkReal> x13810=IKPowWithIntegerCheck(((((-1.0)*r10*x13809))+((r11*sj5))),-1);
if(!x13810.valid){
continue;
}
CheckValue<IkReal> x13811=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*r00*x13809))),-1);
if(!x13811.valid){
continue;
}
if( IKabs(((-1.0)*(x13810.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13811.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13810.value)))+IKsqr(((x13811.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13810.value)), ((x13811.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13812=IKsin(j4);
IkReal x13813=IKcos(j4);
IkReal x13814=((1.0)*cj5);
IkReal x13815=(sj5*x13813);
IkReal x13816=(sj5*x13812);
evalcond[0]=((-1.0)*r22*x13813);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+((r22*x13812)));
evalcond[2]=(((r01*x13816))+(((-1.0)*r00*x13812*x13814)));
evalcond[3]=(((r11*x13815))+(((-1.0)*r10*x13813*x13814)));
evalcond[4]=((1.0)+((r11*x13816))+(((-1.0)*r10*x13812*x13814)));
evalcond[5]=(((r01*x13815))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r00*x13813*x13814)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x13817=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13817);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13817);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=r22;
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x13818=((-1.0)*pz);
sj0=0;
cj0=1.0;
j0=0;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x13818);
rxp1_0=(pz*r11);
rxp1_1=(r01*x13818);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
sj3=0;
cj3=-1.0;
j3=3.14159265358979;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=((((-1.0)*r01*sj5))+((cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13819=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x13819.valid){
continue;
}
CheckValue<IkReal> x13820=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13820.valid){
continue;
}
if( IKabs(((-1.0)*(x13819.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13820.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13819.value)))+IKsqr(((x13820.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13819.value)), ((x13820.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13821=IKsin(j4);
IkReal x13822=IKcos(j4);
IkReal x13823=(cj5*x13822);
IkReal x13824=(sj5*x13821);
IkReal x13825=((1.0)*cj5*x13821);
IkReal x13826=((1.0)*sj5*x13822);
evalcond[0]=((-1.0)*r22*x13822);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13821)));
evalcond[2]=(((r01*x13824))+(((-1.0)*r00*x13825)));
evalcond[3]=(((r10*x13823))+(((-1.0)*r11*x13826)));
evalcond[4]=((1.0)+((r11*x13824))+(((-1.0)*r10*x13825)));
evalcond[5]=(((r00*x13823))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r01*x13826)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13827=IKPowWithIntegerCheck(r22,-1);
if(!x13827.valid){
continue;
}
CheckValue<IkReal> x13828=IKPowWithIntegerCheck(((((-1.0)*r01*sj5))+((cj5*r00))),-1);
if(!x13828.valid){
continue;
}
if( IKabs(((x13827.value)*((((cj2*sj1))+((cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13828.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13827.value)*((((cj2*sj1))+((cj1*sj2))))))+IKsqr(((x13828.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13827.value)*((((cj2*sj1))+((cj1*sj2))))), ((x13828.value)*(((((-1.0)*sj1*sj2))+((cj1*cj2))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x13829=IKsin(j4);
IkReal x13830=IKcos(j4);
IkReal x13831=(cj5*x13830);
IkReal x13832=(sj5*x13829);
IkReal x13833=((1.0)*cj5*x13829);
IkReal x13834=((1.0)*sj5*x13830);
evalcond[0]=((-1.0)*r22*x13830);
evalcond[1]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r22*x13829)));
evalcond[2]=(((r01*x13832))+(((-1.0)*r00*x13833)));
evalcond[3]=((((-1.0)*r11*x13834))+((r10*x13831)));
evalcond[4]=((1.0)+(((-1.0)*r10*x13833))+((r11*x13832)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((r00*x13831))+(((-1.0)*r01*x13834)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13835=((1.0)*r10);
CheckValue<IkReal> x13836=IKPowWithIntegerCheck(cj3,-1);
if(!x13836.valid){
continue;
}
CheckValue<IkReal> x13837=IKPowWithIntegerCheck(r22,-1);
if(!x13837.valid){
continue;
}
CheckValue<IkReal> x13838=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x13835))+((cj3*r11*sj5))),-1);
if(!x13838.valid){
continue;
}
if( IKabs(((x13836.value)*(x13837.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13838.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13835)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x13836.value)*(x13837.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x13838.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13835))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x13836.value)*(x13837.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x13838.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x13835))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13839=IKsin(j4);
IkReal x13840=IKcos(j4);
IkReal x13841=(sj1*sj2);
IkReal x13842=(r11*sj5);
IkReal x13843=(r00*sj3);
IkReal x13844=(cj5*r01);
IkReal x13845=((1.0)*cj1);
IkReal x13846=(cj3*sj5);
IkReal x13847=(cj5*r11);
IkReal x13848=(r10*sj3);
IkReal x13849=(cj2*sj1);
IkReal x13850=((1.0)*cj5);
IkReal x13851=((1.0)*sj3);
IkReal x13852=(r01*sj5);
IkReal x13853=(cj2*x13845);
IkReal x13854=(cj3*x13840);
IkReal x13855=(r22*x13839);
IkReal x13856=(cj5*x13840);
IkReal x13857=(x13839*x13850);
evalcond[0]=((-1.0)*r22*x13840);
evalcond[1]=(x13849+((cj1*sj2))+((cj3*x13855)));
evalcond[2]=(((x13839*x13852))+(((-1.0)*r00*x13857)));
evalcond[3]=((1.0)+((x13839*x13842))+(((-1.0)*r10*x13857)));
evalcond[4]=(x13841+(((-1.0)*x13851*x13855))+(((-1.0)*x13853)));
evalcond[5]=(((sj5*x13848))+((sj3*x13847))+((x13842*x13854))+(((-1.0)*r10*x13850*x13854)));
evalcond[6]=(((x13848*x13856))+(((-1.0)*x13840*x13842*x13851))+((r10*x13846))+((cj3*x13847)));
evalcond[7]=(x13841+((sj5*x13843))+((sj3*x13844))+((r01*x13840*x13846))+(((-1.0)*r00*x13850*x13854))+(((-1.0)*x13853)));
evalcond[8]=((((-1.0)*x13840*x13851*x13852))+(((-1.0)*sj2*x13845))+((x13843*x13856))+(((-1.0)*x13849))+((cj3*x13844))+((r00*x13846)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13858=(cj5*r10);
IkReal x13859=((1.0)*r11);
CheckValue<IkReal> x13860=IKPowWithIntegerCheck(((((-1.0)*x13858))+((r11*sj5))),-1);
if(!x13860.valid){
continue;
}
CheckValue<IkReal> x13861=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x13859))+((sj3*x13858))),-1);
if(!x13861.valid){
continue;
}
if( IKabs(((-1.0)*(x13860.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13861.value)*(((((-1.0)*cj3*cj5*x13859))+(((-1.0)*cj3*r10*sj5)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13860.value)))+IKsqr(((x13861.value)*(((((-1.0)*cj3*cj5*x13859))+(((-1.0)*cj3*r10*sj5))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13860.value)), ((x13861.value)*(((((-1.0)*cj3*cj5*x13859))+(((-1.0)*cj3*r10*sj5))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13862=IKsin(j4);
IkReal x13863=IKcos(j4);
IkReal x13864=(sj1*sj2);
IkReal x13865=(r11*sj5);
IkReal x13866=(r00*sj3);
IkReal x13867=(cj5*r01);
IkReal x13868=((1.0)*cj1);
IkReal x13869=(cj3*sj5);
IkReal x13870=(cj5*r11);
IkReal x13871=(r10*sj3);
IkReal x13872=(cj2*sj1);
IkReal x13873=((1.0)*cj5);
IkReal x13874=((1.0)*sj3);
IkReal x13875=(r01*sj5);
IkReal x13876=(cj2*x13868);
IkReal x13877=(cj3*x13863);
IkReal x13878=(r22*x13862);
IkReal x13879=(cj5*x13863);
IkReal x13880=(x13862*x13873);
evalcond[0]=((-1.0)*r22*x13863);
evalcond[1]=(((cj3*x13878))+x13872+((cj1*sj2)));
evalcond[2]=((((-1.0)*r00*x13880))+((x13862*x13875)));
evalcond[3]=((1.0)+((x13862*x13865))+(((-1.0)*r10*x13880)));
evalcond[4]=(x13864+(((-1.0)*x13876))+(((-1.0)*x13874*x13878)));
evalcond[5]=(((sj3*x13870))+((sj5*x13871))+((x13865*x13877))+(((-1.0)*r10*x13873*x13877)));
evalcond[6]=(((cj3*x13870))+((x13871*x13879))+(((-1.0)*x13863*x13865*x13874))+((r10*x13869)));
evalcond[7]=(((r01*x13863*x13869))+x13864+(((-1.0)*x13876))+((sj3*x13867))+((sj5*x13866))+(((-1.0)*r00*x13873*x13877)));
evalcond[8]=((((-1.0)*x13863*x13874*x13875))+((r00*x13869))+(((-1.0)*x13872))+(((-1.0)*sj2*x13868))+((x13866*x13879))+((cj3*x13867)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13881=((1.0)*sj3);
IkReal x13882=(r11*sj5);
IkReal x13883=((1.0)*cj5*r10);
CheckValue<IkReal> x13884=IKPowWithIntegerCheck((x13882+(((-1.0)*x13883))),-1);
if(!x13884.valid){
continue;
}
CheckValue<IkReal> x13885=IKPowWithIntegerCheck(((((-1.0)*cj3*x13883))+((cj3*x13882))),-1);
if(!x13885.valid){
continue;
}
if( IKabs(((-1.0)*(x13884.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x13885.value)*(((((-1.0)*cj5*r11*x13881))+(((-1.0)*r10*sj5*x13881)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x13884.value)))+IKsqr(((x13885.value)*(((((-1.0)*cj5*r11*x13881))+(((-1.0)*r10*sj5*x13881))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x13884.value)), ((x13885.value)*(((((-1.0)*cj5*r11*x13881))+(((-1.0)*r10*sj5*x13881))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13886=IKsin(j4);
IkReal x13887=IKcos(j4);
IkReal x13888=(sj1*sj2);
IkReal x13889=(r11*sj5);
IkReal x13890=(r00*sj3);
IkReal x13891=(cj5*r01);
IkReal x13892=((1.0)*cj1);
IkReal x13893=(cj3*sj5);
IkReal x13894=(cj5*r11);
IkReal x13895=(r10*sj3);
IkReal x13896=(cj2*sj1);
IkReal x13897=((1.0)*cj5);
IkReal x13898=((1.0)*sj3);
IkReal x13899=(r01*sj5);
IkReal x13900=(cj2*x13892);
IkReal x13901=(cj3*x13887);
IkReal x13902=(r22*x13886);
IkReal x13903=(cj5*x13887);
IkReal x13904=(x13886*x13897);
evalcond[0]=((-1.0)*r22*x13887);
evalcond[1]=(x13896+((cj1*sj2))+((cj3*x13902)));
evalcond[2]=((((-1.0)*r00*x13904))+((x13886*x13899)));
evalcond[3]=((1.0)+((x13886*x13889))+(((-1.0)*r10*x13904)));
evalcond[4]=(x13888+(((-1.0)*x13898*x13902))+(((-1.0)*x13900)));
evalcond[5]=(((sj5*x13895))+((x13889*x13901))+((sj3*x13894))+(((-1.0)*r10*x13897*x13901)));
evalcond[6]=(((x13895*x13903))+((cj3*x13894))+((r10*x13893))+(((-1.0)*x13887*x13889*x13898)));
evalcond[7]=(((sj5*x13890))+x13888+((sj3*x13891))+((r01*x13887*x13893))+(((-1.0)*r00*x13897*x13901))+(((-1.0)*x13900)));
evalcond[8]=((((-1.0)*x13887*x13898*x13899))+(((-1.0)*sj2*x13892))+((cj3*x13891))+(((-1.0)*x13896))+((r00*x13893))+((x13890*x13903)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13905=cj5*cj5;
IkReal x13906=((1.0)*cj3);
IkReal x13907=(r10*r21);
IkReal x13908=(cj5*sj5);
IkReal x13909=(r11*r21);
IkReal x13910=(r11*r20);
IkReal x13911=(r22*sj3);
IkReal x13912=(r10*r20);
IkReal x13913=((1.0)*sj3*x13905);
CheckValue<IkReal> x13914=IKPowWithIntegerCheck(IKsign(((((-1.0)*x13905*x13906*x13912))+((cj3*x13908*x13910))+(((-1.0)*r12*r22*x13906))+((cj3*x13907*x13908))+((cj3*x13905*x13909))+(((-1.0)*x13906*x13909)))),-1);
if(!x13914.valid){
continue;
}
CheckValue<IkReal> x13915 = IKatan2WithCheck(IkReal((((cj5*r11*x13911))+((r10*sj5*x13911)))),IkReal(((((-1.0)*sj3*x13908*x13912))+(((-1.0)*x13907*x13913))+(((-1.0)*x13910*x13913))+((sj3*x13907))+((sj3*x13908*x13909)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13915.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13914.value)))+(x13915.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13916=IKsin(j4);
IkReal x13917=IKcos(j4);
IkReal x13918=(sj1*sj2);
IkReal x13919=(cj5*sj3);
IkReal x13920=(cj5*r10);
IkReal x13921=(r00*sj5);
IkReal x13922=(r11*sj5);
IkReal x13923=(cj3*cj5);
IkReal x13924=((1.0)*cj1);
IkReal x13925=(cj3*sj5);
IkReal x13926=(r21*sj5);
IkReal x13927=(cj2*sj1);
IkReal x13928=(sj3*sj5);
IkReal x13929=(r01*sj5);
IkReal x13930=(cj2*x13924);
IkReal x13931=((1.0)*x13917);
IkReal x13932=((1.0)*x13916);
IkReal x13933=(cj3*x13916);
IkReal x13934=(cj3*x13917);
evalcond[0]=(((x13916*x13926))+(((-1.0)*cj5*r20*x13932))+(((-1.0)*r22*x13931)));
evalcond[1]=((((-1.0)*cj5*r00*x13932))+((x13916*x13929))+(((-1.0)*r02*x13931)));
evalcond[2]=((1.0)+(((-1.0)*r12*x13931))+((x13916*x13922))+(((-1.0)*x13920*x13932)));
evalcond[3]=(((r10*x13928))+((r11*x13919))+(((-1.0)*cj3*x13920*x13931))+((x13922*x13934))+((r12*x13933)));
evalcond[4]=((((-1.0)*r12*sj3*x13932))+((r10*x13925))+(((-1.0)*sj3*x13922*x13931))+((r10*x13917*x13919))+((r11*x13923)));
evalcond[5]=((((-1.0)*r20*x13923*x13931))+((r20*x13928))+((cj1*sj2))+x13927+((r21*x13917*x13925))+((r22*x13933))+((r21*x13919)));
evalcond[6]=(((sj3*x13921))+x13918+(((-1.0)*x13930))+(((-1.0)*r00*x13923*x13931))+((r01*x13917*x13925))+((r01*x13919))+((r02*x13933)));
evalcond[7]=(((r21*x13923))+((r20*x13925))+(((-1.0)*r22*sj3*x13932))+((r20*x13917*x13919))+x13918+(((-1.0)*x13930))+(((-1.0)*sj3*x13926*x13931)));
evalcond[8]=((((-1.0)*sj2*x13924))+(((-1.0)*r02*sj3*x13932))+(((-1.0)*x13927))+((r01*x13923))+((r00*x13917*x13919))+((cj3*x13921))+(((-1.0)*r01*x13928*x13931)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13935=((1.0)*cj5);
CheckValue<IkReal> x13936=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x13935)))),-1);
if(!x13936.valid){
continue;
}
CheckValue<IkReal> x13937 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*r20*x13935))+((r21*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13937.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13936.value)))+(x13937.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13938=IKsin(j4);
IkReal x13939=IKcos(j4);
IkReal x13940=(sj1*sj2);
IkReal x13941=(cj5*sj3);
IkReal x13942=(cj5*r10);
IkReal x13943=(r00*sj5);
IkReal x13944=(r11*sj5);
IkReal x13945=(cj3*cj5);
IkReal x13946=((1.0)*cj1);
IkReal x13947=(cj3*sj5);
IkReal x13948=(r21*sj5);
IkReal x13949=(cj2*sj1);
IkReal x13950=(sj3*sj5);
IkReal x13951=(r01*sj5);
IkReal x13952=(cj2*x13946);
IkReal x13953=((1.0)*x13939);
IkReal x13954=((1.0)*x13938);
IkReal x13955=(cj3*x13938);
IkReal x13956=(cj3*x13939);
evalcond[0]=((((-1.0)*cj5*r20*x13954))+(((-1.0)*r22*x13953))+((x13938*x13948)));
evalcond[1]=(((x13938*x13951))+(((-1.0)*r02*x13953))+(((-1.0)*cj5*r00*x13954)));
evalcond[2]=((1.0)+(((-1.0)*x13942*x13954))+(((-1.0)*r12*x13953))+((x13938*x13944)));
evalcond[3]=(((r12*x13955))+((x13944*x13956))+(((-1.0)*cj3*x13942*x13953))+((r10*x13950))+((r11*x13941)));
evalcond[4]=((((-1.0)*r12*sj3*x13954))+((r10*x13939*x13941))+(((-1.0)*sj3*x13944*x13953))+((r10*x13947))+((r11*x13945)));
evalcond[5]=(((r21*x13939*x13947))+((cj1*sj2))+x13949+((r22*x13955))+(((-1.0)*r20*x13945*x13953))+((r20*x13950))+((r21*x13941)));
evalcond[6]=((((-1.0)*r00*x13945*x13953))+(((-1.0)*x13952))+x13940+((sj3*x13943))+((r01*x13941))+((r02*x13955))+((r01*x13939*x13947)));
evalcond[7]=(((r20*x13939*x13941))+(((-1.0)*sj3*x13948*x13953))+(((-1.0)*x13952))+x13940+((r20*x13947))+(((-1.0)*r22*sj3*x13954))+((r21*x13945)));
evalcond[8]=(((cj3*x13943))+(((-1.0)*x13949))+(((-1.0)*r02*sj3*x13954))+(((-1.0)*sj2*x13946))+(((-1.0)*r01*x13950*x13953))+((r01*x13945))+((r00*x13939*x13941)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x13957=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x13957.valid){
continue;
}
CheckValue<IkReal> x13958 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*cj5*r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x13958.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13957.value)))+(x13958.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x13959=IKsin(j4);
IkReal x13960=IKcos(j4);
IkReal x13961=(sj1*sj2);
IkReal x13962=(cj5*sj3);
IkReal x13963=(cj5*r10);
IkReal x13964=(r00*sj5);
IkReal x13965=(r11*sj5);
IkReal x13966=(cj3*cj5);
IkReal x13967=((1.0)*cj1);
IkReal x13968=(cj3*sj5);
IkReal x13969=(r21*sj5);
IkReal x13970=(cj2*sj1);
IkReal x13971=(sj3*sj5);
IkReal x13972=(r01*sj5);
IkReal x13973=(cj2*x13967);
IkReal x13974=((1.0)*x13960);
IkReal x13975=((1.0)*x13959);
IkReal x13976=(cj3*x13959);
IkReal x13977=(cj3*x13960);
evalcond[0]=(((x13959*x13969))+(((-1.0)*r22*x13974))+(((-1.0)*cj5*r20*x13975)));
evalcond[1]=((((-1.0)*r02*x13974))+((x13959*x13972))+(((-1.0)*cj5*r00*x13975)));
evalcond[2]=((1.0)+((x13959*x13965))+(((-1.0)*r12*x13974))+(((-1.0)*x13963*x13975)));
evalcond[3]=(((r10*x13971))+((r11*x13962))+((r12*x13976))+(((-1.0)*cj3*x13963*x13974))+((x13965*x13977)));
evalcond[4]=(((r10*x13960*x13962))+((r10*x13968))+(((-1.0)*r12*sj3*x13975))+((r11*x13966))+(((-1.0)*sj3*x13965*x13974)));
evalcond[5]=(((cj1*sj2))+x13970+(((-1.0)*r20*x13966*x13974))+((r20*x13971))+((r21*x13960*x13968))+((r21*x13962))+((r22*x13976)));
evalcond[6]=(((r02*x13976))+x13961+((sj3*x13964))+(((-1.0)*r00*x13966*x13974))+(((-1.0)*x13973))+((r01*x13962))+((r01*x13960*x13968)));
evalcond[7]=(x13961+(((-1.0)*r22*sj3*x13975))+((r20*x13968))+(((-1.0)*sj3*x13969*x13974))+(((-1.0)*x13973))+((r21*x13966))+((r20*x13960*x13962)));
evalcond[8]=((((-1.0)*sj2*x13967))+(((-1.0)*r02*sj3*x13975))+(((-1.0)*r01*x13971*x13974))+(((-1.0)*x13970))+((cj3*x13964))+((r01*x13966))+((r00*x13960*x13962)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13978=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13978;
j4eval[1]=IKsign(x13978);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13979=((1.0)*cj5);
IkReal x13980=((((-1.0)*r21*x13979))+(((-1.0)*r20*sj5)));
j4eval[0]=x13980;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13979))))));
j4eval[2]=IKsign(x13980);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal x13981=cj5*cj5;
IkReal x13982=(cj3*r21);
IkReal x13983=(cj5*sj5);
IkReal x13984=((1.0)*cj3);
IkReal x13985=(((r10*x13982*x13983))+((cj3*r11*r20*x13983))+(((-1.0)*r10*r20*x13981*x13984))+(((-1.0)*r11*x13982))+((r11*x13981*x13982))+(((-1.0)*r12*r22*x13984)));
j4eval[0]=x13985;
j4eval[1]=IKsign(x13985);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13986=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x13986;
j4eval[1]=IKsign(x13986);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13987=((1.0)*cj5);
IkReal x13988=((((-1.0)*r21*x13987))+(((-1.0)*r20*sj5)));
j4eval[0]=x13988;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x13987))))));
j4eval[2]=IKsign(x13988);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x13989=cj5*cj5;
IkReal x13990=r11*r11;
IkReal x13991=(cj5*r10);
IkReal x13992=(r11*sj5);
IkReal x13993=((((-1.0)*x13989*(r10*r10)))+(((-1.0)*(r12*r12)))+((x13989*x13990))+(((2.0)*x13991*x13992))+(((-1.0)*x13990)));
j4eval[0]=x13993;
j4eval[1]=((IKabs(r12))+(IKabs((x13991+(((-1.0)*x13992))))));
j4eval[2]=IKsign(x13993);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x13994=cj5*cj5;
IkReal x13995=r11*r11;
IkReal x13996=(cj5*r10);
IkReal x13997=(r11*sj5);
CheckValue<IkReal> x13998=IKPowWithIntegerCheck(IKsign(((((2.0)*x13996*x13997))+((x13994*x13995))+(((-1.0)*(r12*r12)))+(((-1.0)*x13994*(r10*r10)))+(((-1.0)*x13995)))),-1);
if(!x13998.valid){
continue;
}
CheckValue<IkReal> x13999 = IKatan2WithCheck(IkReal((x13996+(((-1.0)*x13997)))),IkReal(r12),IKFAST_ATAN2_MAGTHRESH);
if(!x13999.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x13998.value)))+(x13999.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14000=IKsin(j4);
IkReal x14001=IKcos(j4);
IkReal x14002=(cj5*r10);
IkReal x14003=(r01*sj5);
IkReal x14004=(cj5*r00);
IkReal x14005=(cj5*r20);
IkReal x14006=((1.0)*x14001);
IkReal x14007=((1.0)*x14000);
IkReal x14008=(sj5*x14000);
evalcond[0]=(((r21*x14008))+(((-1.0)*x14005*x14007))+(((-1.0)*r22*x14006)));
evalcond[1]=((((-1.0)*r02*x14006))+((x14000*x14003))+(((-1.0)*x14004*x14007)));
evalcond[2]=((((-1.0)*r11*sj5*x14006))+(((-1.0)*r12*x14007))+((x14001*x14002)));
evalcond[3]=((-1.0)+((r11*x14008))+(((-1.0)*x14002*x14007))+(((-1.0)*r12*x14006)));
evalcond[4]=((((-1.0)*r02*x14007))+((cj2*sj1))+((cj1*sj2))+(((-1.0)*x14003*x14006))+((x14001*x14004)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14006))+((x14001*x14005))+(((-1.0)*r22*x14007)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14009=((1.0)*cj5);
CheckValue<IkReal> x14010=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14009))+(((-1.0)*r20*sj5)))),-1);
if(!x14010.valid){
continue;
}
CheckValue<IkReal> x14011 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14009))+((r01*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14011.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14010.value)))+(x14011.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14012=IKsin(j4);
IkReal x14013=IKcos(j4);
IkReal x14014=(cj5*r10);
IkReal x14015=(r01*sj5);
IkReal x14016=(cj5*r00);
IkReal x14017=(cj5*r20);
IkReal x14018=((1.0)*x14013);
IkReal x14019=((1.0)*x14012);
IkReal x14020=(sj5*x14012);
evalcond[0]=(((r21*x14020))+(((-1.0)*x14017*x14019))+(((-1.0)*r22*x14018)));
evalcond[1]=(((x14012*x14015))+(((-1.0)*r02*x14018))+(((-1.0)*x14016*x14019)));
evalcond[2]=((((-1.0)*r11*sj5*x14018))+(((-1.0)*r12*x14019))+((x14013*x14014)));
evalcond[3]=((-1.0)+((r11*x14020))+(((-1.0)*x14014*x14019))+(((-1.0)*r12*x14018)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14015*x14018))+(((-1.0)*r02*x14019))+((cj1*sj2))+((x14013*x14016)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+((x14013*x14017))+(((-1.0)*r21*sj5*x14018))+(((-1.0)*r22*x14019)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14021 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14021.valid){
continue;
}
CheckValue<IkReal> x14022=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14022.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14021.value)+(((1.5707963267949)*(x14022.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14023=IKsin(j4);
IkReal x14024=IKcos(j4);
IkReal x14025=(cj5*r10);
IkReal x14026=(r01*sj5);
IkReal x14027=(cj5*r00);
IkReal x14028=(cj5*r20);
IkReal x14029=((1.0)*x14024);
IkReal x14030=((1.0)*x14023);
IkReal x14031=(sj5*x14023);
evalcond[0]=((((-1.0)*x14028*x14030))+((r21*x14031))+(((-1.0)*r22*x14029)));
evalcond[1]=(((x14023*x14026))+(((-1.0)*r02*x14029))+(((-1.0)*x14027*x14030)));
evalcond[2]=(((x14024*x14025))+(((-1.0)*r11*sj5*x14029))+(((-1.0)*r12*x14030)));
evalcond[3]=((-1.0)+((r11*x14031))+(((-1.0)*r12*x14029))+(((-1.0)*x14025*x14030)));
evalcond[4]=(((cj2*sj1))+((x14024*x14027))+((cj1*sj2))+(((-1.0)*r02*x14030))+(((-1.0)*x14026*x14029)));
evalcond[5]=(((x14024*x14028))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*sj5*x14029))+(((-1.0)*r22*x14030)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14032=(((r00*sj5))+((cj5*r01)));
j4eval[0]=x14032;
j4eval[1]=IKsign(x14032);
j4eval[2]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14033=((1.0)*cj5);
IkReal x14034=((((-1.0)*r21*x14033))+(((-1.0)*r20*sj5)));
j4eval[0]=x14034;
j4eval[1]=((IKabs(r02))+(IKabs((((r01*sj5))+(((-1.0)*r00*x14033))))));
j4eval[2]=IKsign(x14034);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14035=cj5*cj5;
IkReal x14036=r11*r11;
IkReal x14037=(r11*sj5);
IkReal x14038=(cj5*r10);
IkReal x14039=((((-2.0)*x14037*x14038))+(r12*r12)+(((-1.0)*x14035*x14036))+x14036+((x14035*(r10*r10))));
j4eval[0]=x14039;
j4eval[1]=IKsign(x14039);
j4eval[2]=((IKabs(r12))+(IKabs(((((-1.0)*x14038))+x14037))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14040=cj5*cj5;
IkReal x14041=r11*r11;
IkReal x14042=(cj5*r10);
IkReal x14043=(r11*sj5);
CheckValue<IkReal> x14044 = IKatan2WithCheck(IkReal(((((-1.0)*x14042))+x14043)),IkReal(((-1.0)*r12)),IKFAST_ATAN2_MAGTHRESH);
if(!x14044.valid){
continue;
}
CheckValue<IkReal> x14045=IKPowWithIntegerCheck(IKsign(((r12*r12)+((x14040*(r10*r10)))+(((-1.0)*x14040*x14041))+x14041+(((-2.0)*x14042*x14043)))),-1);
if(!x14045.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14044.value)+(((1.5707963267949)*(x14045.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14046=IKcos(j4);
IkReal x14047=IKsin(j4);
IkReal x14048=(cj5*r00);
IkReal x14049=(cj5*r10);
IkReal x14050=(r21*sj5);
IkReal x14051=(cj5*r20);
IkReal x14052=((1.0)*x14046);
IkReal x14053=((1.0)*x14047);
IkReal x14054=(sj5*x14047);
IkReal x14055=(sj5*x14046);
evalcond[0]=(((r11*x14055))+(((-1.0)*x14049*x14052))+((r12*x14047)));
evalcond[1]=((((-1.0)*x14051*x14053))+(((-1.0)*r22*x14052))+((x14047*x14050)));
evalcond[2]=((((-1.0)*x14048*x14053))+(((-1.0)*r02*x14052))+((r01*x14054)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14052))+((r11*x14054))+(((-1.0)*x14049*x14053)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*x14048*x14052))+((cj1*sj2))+((r02*x14047))+((r01*x14055)));
evalcond[5]=(((r22*x14047))+(((-1.0)*x14051*x14052))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14046*x14050)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14056=((1.0)*cj5);
CheckValue<IkReal> x14057=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14056))+(((-1.0)*r20*sj5)))),-1);
if(!x14057.valid){
continue;
}
CheckValue<IkReal> x14058 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14056)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14058.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14057.value)))+(x14058.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14059=IKcos(j4);
IkReal x14060=IKsin(j4);
IkReal x14061=(cj5*r00);
IkReal x14062=(cj5*r10);
IkReal x14063=(r21*sj5);
IkReal x14064=(cj5*r20);
IkReal x14065=((1.0)*x14059);
IkReal x14066=((1.0)*x14060);
IkReal x14067=(sj5*x14060);
IkReal x14068=(sj5*x14059);
evalcond[0]=(((r11*x14068))+((r12*x14060))+(((-1.0)*x14062*x14065)));
evalcond[1]=(((x14060*x14063))+(((-1.0)*r22*x14065))+(((-1.0)*x14064*x14066)));
evalcond[2]=(((r01*x14067))+(((-1.0)*x14061*x14066))+(((-1.0)*r02*x14065)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14065))+((r11*x14067))+(((-1.0)*x14062*x14066)));
evalcond[4]=(((r02*x14060))+((cj2*sj1))+((cj1*sj2))+((r01*x14068))+(((-1.0)*x14061*x14065)));
evalcond[5]=(((r22*x14060))+(((-1.0)*x14064*x14065))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x14059*x14063)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14069 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14069.valid){
continue;
}
CheckValue<IkReal> x14070=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14070.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14069.value)+(((1.5707963267949)*(x14070.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14071=IKcos(j4);
IkReal x14072=IKsin(j4);
IkReal x14073=(cj5*r00);
IkReal x14074=(cj5*r10);
IkReal x14075=(r21*sj5);
IkReal x14076=(cj5*r20);
IkReal x14077=((1.0)*x14071);
IkReal x14078=((1.0)*x14072);
IkReal x14079=(sj5*x14072);
IkReal x14080=(sj5*x14071);
evalcond[0]=(((r11*x14080))+(((-1.0)*x14074*x14077))+((r12*x14072)));
evalcond[1]=((((-1.0)*r22*x14077))+(((-1.0)*x14076*x14078))+((x14072*x14075)));
evalcond[2]=((((-1.0)*x14073*x14078))+((r01*x14079))+(((-1.0)*r02*x14077)));
evalcond[3]=((-1.0)+(((-1.0)*r12*x14077))+((r11*x14079))+(((-1.0)*x14074*x14078)));
evalcond[4]=(((cj2*sj1))+((r02*x14072))+((r01*x14080))+((cj1*sj2))+(((-1.0)*x14073*x14077)));
evalcond[5]=(((r22*x14072))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x14076*x14077))+((x14071*x14075)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14082 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14082)==0){
continue;
}
IkReal x14081=pow(x14082,-0.5);
CheckValue<IkReal> x14083 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14083.valid){
continue;
}
IkReal gconst36=((-1.0)*(x14083.value));
IkReal gconst37=((-1.0)*r01*x14081);
IkReal gconst38=(r00*x14081);
CheckValue<IkReal> x14084 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14084.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14084.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14087 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14087.valid){
continue;
}
IkReal x14085=((-1.0)*(x14087.value));
IkReal x14086=x14081;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14085;
IkReal gconst36=x14085;
IkReal gconst37=((-1.0)*r01*x14086);
IkReal gconst38=(r00*x14086);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14090 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14090.valid){
continue;
}
IkReal x14088=((-1.0)*(x14090.value));
IkReal x14089=x14081;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst37;
cj5=gconst38;
j5=x14088;
IkReal gconst36=x14088;
IkReal gconst37=((-1.0)*r01*x14089);
IkReal gconst38=(r00*x14089);
CheckValue<IkReal> x14098=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r02*r02)))),-1);
if(!x14098.valid){
continue;
}
IkReal x14091=x14098.value;
IkReal x14092=(sj3*x14091);
IkReal x14093=(r11*x14092);
IkReal x14094=(r21*x14092);
IkReal x14095=(r20*x14092);
IkReal x14096=(r10*x14092);
IkReal x14097=(r00*r01*x14092);
j4eval[0]=IKsign((((r00*r01*r10*x14094))+((r00*r01*r20*x14093))+((r21*x14093*(r01*r01)))+((r12*r22*sj3))+((r10*x14095*(r00*r00)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14099=gconst38*gconst38;
IkReal x14100=gconst37*gconst37;
IkReal x14101=((1.0)*cj3);
IkReal x14102=(r11*r20);
IkReal x14103=(r10*sj3);
IkReal x14104=(gconst37*gconst38);
IkReal x14105=(r11*sj3);
IkReal x14106=(r21*x14100);
IkReal x14107=(cj3*x14104);
CheckValue<IkReal> x14108 = IKatan2WithCheck(IkReal((((gconst38*r22*x14105))+((gconst37*r22*x14103)))),IkReal((((x14103*x14106))+(((-1.0)*r20*x14103*x14104))+((r21*x14104*x14105))+(((-1.0)*sj3*x14099*x14102)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14108.valid){
continue;
}
CheckValue<IkReal> x14109=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14101*x14106))+((x14102*x14107))+(((-1.0)*r10*r20*x14099*x14101))+((r10*r21*x14107))+(((-1.0)*r12*r22*x14101)))),-1);
if(!x14109.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14108.value)+(((1.5707963267949)*(x14109.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14110=IKsin(j4);
IkReal x14111=IKcos(j4);
IkReal x14112=(cj2*sj1);
IkReal x14113=(cj1*sj2);
IkReal x14114=(gconst38*r21);
IkReal x14115=(cj3*r20);
IkReal x14116=(gconst38*r10);
IkReal x14117=(cj3*gconst37);
IkReal x14118=(sj1*sj2);
IkReal x14119=(gconst38*r00);
IkReal x14120=(cj1*cj2);
IkReal x14121=(gconst37*sj3);
IkReal x14122=(gconst38*r20);
IkReal x14123=(gconst38*r01);
IkReal x14124=(gconst38*r11);
IkReal x14125=((1.0)*x14111);
IkReal x14126=((1.0)*x14110);
IkReal x14127=(cj3*x14110);
IkReal x14128=(sj3*x14111);
IkReal x14129=(gconst37*x14110);
IkReal x14130=(x14112+x14113);
evalcond[0]=(((r21*x14129))+(((-1.0)*r22*x14125))+(((-1.0)*x14122*x14126)));
evalcond[1]=(((r01*x14129))+(((-1.0)*r02*x14125))+(((-1.0)*x14119*x14126)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14125))+((r11*x14129))+(((-1.0)*x14116*x14126)));
evalcond[3]=(((r12*x14127))+((r11*x14111*x14117))+(((-1.0)*cj3*x14116*x14125))+((r10*x14121))+((sj3*x14124)));
evalcond[4]=((((-1.0)*r12*sj3*x14126))+((cj3*x14124))+(((-1.0)*r11*x14121*x14125))+((r10*x14117))+((x14116*x14128)));
evalcond[5]=((((-1.0)*gconst38*x14115*x14125))+((sj3*x14114))+((r22*x14127))+((r21*x14111*x14117))+((r20*x14121))+x14130);
evalcond[6]=(((r00*x14121))+(((-1.0)*cj3*x14119*x14125))+(((-1.0)*x14118))+((r01*x14111*x14117))+x14120+((sj3*x14123))+((r02*x14127)));
evalcond[7]=((((-1.0)*r01*x14121*x14125))+((cj3*x14123))+((r00*x14117))+(((-1.0)*r02*sj3*x14126))+x14130+((x14119*x14128)));
evalcond[8]=((((-1.0)*r22*sj3*x14126))+((x14122*x14128))+((cj3*x14114))+(((-1.0)*x14120))+(((-1.0)*r21*x14121*x14125))+x14118+((gconst37*x14115)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14131=gconst38*gconst38;
IkReal x14132=gconst37*gconst37;
IkReal x14133=(gconst37*r10);
IkReal x14134=(cj3*r22);
IkReal x14135=((1.0)*gconst38);
IkReal x14136=(r21*sj3);
IkReal x14137=(gconst38*r11);
IkReal x14138=(cj3*r20);
IkReal x14139=(cj3*r21);
IkReal x14140=(r20*sj3);
CheckValue<IkReal> x14141 = IKatan2WithCheck(IkReal((((x14134*x14137))+((x14133*x14134)))),IkReal((((r10*x14132*x14139))+((gconst37*x14137*x14139))+(((-1.0)*r11*x14131*x14138))+(((-1.0)*x14133*x14135*x14138)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14141.valid){
continue;
}
CheckValue<IkReal> x14142=IKPowWithIntegerCheck(IKsign((((r11*x14132*x14136))+((r10*x14131*x14140))+(((-1.0)*x14133*x14135*x14136))+((r12*r22*sj3))+(((-1.0)*gconst37*r11*x14135*x14140)))),-1);
if(!x14142.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14141.value)+(((1.5707963267949)*(x14142.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14143=IKsin(j4);
IkReal x14144=IKcos(j4);
IkReal x14145=(cj2*sj1);
IkReal x14146=(cj1*sj2);
IkReal x14147=(gconst38*r21);
IkReal x14148=(cj3*r20);
IkReal x14149=(gconst38*r10);
IkReal x14150=(cj3*gconst37);
IkReal x14151=(sj1*sj2);
IkReal x14152=(gconst38*r00);
IkReal x14153=(cj1*cj2);
IkReal x14154=(gconst37*sj3);
IkReal x14155=(gconst38*r20);
IkReal x14156=(gconst38*r01);
IkReal x14157=(gconst38*r11);
IkReal x14158=((1.0)*x14144);
IkReal x14159=((1.0)*x14143);
IkReal x14160=(cj3*x14143);
IkReal x14161=(sj3*x14144);
IkReal x14162=(gconst37*x14143);
IkReal x14163=(x14146+x14145);
evalcond[0]=((((-1.0)*r22*x14158))+((r21*x14162))+(((-1.0)*x14155*x14159)));
evalcond[1]=((((-1.0)*r02*x14158))+(((-1.0)*x14152*x14159))+((r01*x14162)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14158))+((r11*x14162))+(((-1.0)*x14149*x14159)));
evalcond[3]=(((r10*x14154))+((sj3*x14157))+(((-1.0)*cj3*x14149*x14158))+((r11*x14144*x14150))+((r12*x14160)));
evalcond[4]=((((-1.0)*r11*x14154*x14158))+((cj3*x14157))+((r10*x14150))+((x14149*x14161))+(((-1.0)*r12*sj3*x14159)));
evalcond[5]=(((r21*x14144*x14150))+((sj3*x14147))+((r22*x14160))+x14163+(((-1.0)*gconst38*x14148*x14158))+((r20*x14154)));
evalcond[6]=(((sj3*x14156))+((r02*x14160))+(((-1.0)*cj3*x14152*x14158))+((r01*x14144*x14150))+((r00*x14154))+x14153+(((-1.0)*x14151)));
evalcond[7]=(((cj3*x14156))+(((-1.0)*r02*sj3*x14159))+(((-1.0)*r01*x14154*x14158))+((r00*x14150))+x14163+((x14152*x14161)));
evalcond[8]=(((cj3*x14147))+(((-1.0)*r21*x14154*x14158))+((x14155*x14161))+((gconst37*x14148))+(((-1.0)*r22*sj3*x14159))+x14151+(((-1.0)*x14153)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14164=((1.0)*gconst38);
CheckValue<IkReal> x14165 = IKatan2WithCheck(IkReal(r02),IkReal((((gconst37*r01))+(((-1.0)*r00*x14164)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14165.valid){
continue;
}
CheckValue<IkReal> x14166=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst37*r20))+(((-1.0)*r21*x14164)))),-1);
if(!x14166.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14165.value)+(((1.5707963267949)*(x14166.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14167=IKsin(j4);
IkReal x14168=IKcos(j4);
IkReal x14169=(cj2*sj1);
IkReal x14170=(cj1*sj2);
IkReal x14171=(gconst38*r21);
IkReal x14172=(cj3*r20);
IkReal x14173=(gconst38*r10);
IkReal x14174=(cj3*gconst37);
IkReal x14175=(sj1*sj2);
IkReal x14176=(gconst38*r00);
IkReal x14177=(cj1*cj2);
IkReal x14178=(gconst37*sj3);
IkReal x14179=(gconst38*r20);
IkReal x14180=(gconst38*r01);
IkReal x14181=(gconst38*r11);
IkReal x14182=((1.0)*x14168);
IkReal x14183=((1.0)*x14167);
IkReal x14184=(cj3*x14167);
IkReal x14185=(sj3*x14168);
IkReal x14186=(gconst37*x14167);
IkReal x14187=(x14170+x14169);
evalcond[0]=((((-1.0)*r22*x14182))+(((-1.0)*x14179*x14183))+((r21*x14186)));
evalcond[1]=((((-1.0)*x14176*x14183))+((r01*x14186))+(((-1.0)*r02*x14182)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14182))+(((-1.0)*x14173*x14183))+((r11*x14186)));
evalcond[3]=(((sj3*x14181))+((r12*x14184))+(((-1.0)*cj3*x14173*x14182))+((r10*x14178))+((r11*x14168*x14174)));
evalcond[4]=((((-1.0)*r12*sj3*x14183))+((cj3*x14181))+(((-1.0)*r11*x14178*x14182))+((x14173*x14185))+((r10*x14174)));
evalcond[5]=((((-1.0)*gconst38*x14172*x14182))+((r21*x14168*x14174))+((r20*x14178))+((r22*x14184))+x14187+((sj3*x14171)));
evalcond[6]=(((r01*x14168*x14174))+((r02*x14184))+((r00*x14178))+((sj3*x14180))+(((-1.0)*x14175))+(((-1.0)*cj3*x14176*x14182))+x14177);
evalcond[7]=(((cj3*x14180))+((r00*x14174))+((x14176*x14185))+(((-1.0)*r02*sj3*x14183))+(((-1.0)*r01*x14178*x14182))+x14187);
evalcond[8]=(((gconst37*x14172))+(((-1.0)*r21*x14178*x14182))+((x14179*x14185))+(((-1.0)*x14177))+((cj3*x14171))+x14175+(((-1.0)*r22*sj3*x14183)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14189 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14189)==0){
continue;
}
IkReal x14188=pow(x14189,-0.5);
CheckValue<IkReal> x14190 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14190.valid){
continue;
}
IkReal gconst39=((3.14159265358979)+(((-1.0)*(x14190.value))));
IkReal gconst40=((1.0)*r01*x14188);
IkReal gconst41=((-1.0)*r00*x14188);
CheckValue<IkReal> x14191 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14191.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14191.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14194 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14194.valid){
continue;
}
IkReal x14192=((1.0)*(x14194.value));
IkReal x14193=x14188;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14192)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14192)));
IkReal gconst40=((1.0)*r01*x14193);
IkReal gconst41=((-1.0)*r00*x14193);
j4eval[0]=0;
j4eval[1]=r22;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14197 = IKatan2WithCheck(IkReal(r01),IkReal(r00),IKFAST_ATAN2_MAGTHRESH);
if(!x14197.valid){
continue;
}
IkReal x14195=((1.0)*(x14197.value));
IkReal x14196=x14188;
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
sj5=gconst40;
cj5=gconst41;
j5=((3.14159265)+(((-1.0)*x14195)));
IkReal gconst39=((3.14159265358979)+(((-1.0)*x14195)));
IkReal gconst40=((1.0)*r01*x14196);
IkReal gconst41=((-1.0)*r00*x14196);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14198=gconst41*gconst41;
IkReal x14199=gconst40*gconst40;
IkReal x14200=(gconst40*r10);
IkReal x14201=(r22*sj3);
IkReal x14202=(r11*sj3);
IkReal x14203=((1.0)*cj3);
IkReal x14204=(gconst41*r21);
IkReal x14205=(gconst41*r20);
IkReal x14206=(r21*x14199);
IkReal x14207=((1.0)*r20*x14198);
CheckValue<IkReal> x14208=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14203*x14206))+(((-1.0)*r12*r22*x14203))+(((-1.0)*r10*r20*x14198*x14203))+((cj3*gconst40*r11*x14205))+((cj3*x14200*x14204)))),-1);
if(!x14208.valid){
continue;
}
CheckValue<IkReal> x14209 = IKatan2WithCheck(IkReal((((x14200*x14201))+((gconst41*r11*x14201)))),IkReal(((((-1.0)*sj3*x14200*x14205))+(((-1.0)*x14202*x14207))+((gconst40*x14202*x14204))+((r10*sj3*x14206)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14209.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14208.value)))+(x14209.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14210=IKsin(j4);
IkReal x14211=IKcos(j4);
IkReal x14212=(cj2*sj1);
IkReal x14213=(cj1*sj2);
IkReal x14214=(gconst40*sj3);
IkReal x14215=(gconst41*sj3);
IkReal x14216=(gconst41*r20);
IkReal x14217=(cj3*gconst41);
IkReal x14218=(sj1*sj2);
IkReal x14219=(cj1*cj2);
IkReal x14220=(cj3*gconst40);
IkReal x14221=((1.0)*x14211);
IkReal x14222=((1.0)*x14210);
IkReal x14223=(cj3*x14210);
IkReal x14224=(gconst40*x14210);
IkReal x14225=(x14213+x14212);
IkReal x14226=(x14211*x14220);
evalcond[0]=((((-1.0)*x14216*x14222))+((r21*x14224))+(((-1.0)*r22*x14221)));
evalcond[1]=((((-1.0)*gconst41*r00*x14222))+(((-1.0)*r02*x14221))+((r01*x14224)));
evalcond[2]=((-1.0)+(((-1.0)*r12*x14221))+((r11*x14224))+(((-1.0)*gconst41*r10*x14222)));
evalcond[3]=(((r11*x14215))+((r10*x14214))+(((-1.0)*r10*x14217*x14221))+((r11*x14226))+((r12*x14223)));
evalcond[4]=(((r11*x14217))+((r10*x14211*x14215))+((r10*x14220))+(((-1.0)*r11*x14214*x14221))+(((-1.0)*r12*sj3*x14222)));
evalcond[5]=((((-1.0)*cj3*x14216*x14221))+((r22*x14223))+((r21*x14226))+((r21*x14215))+((r20*x14214))+x14225);
evalcond[6]=(((r02*x14223))+(((-1.0)*r00*x14217*x14221))+((r01*x14215))+((r00*x14214))+(((-1.0)*x14218))+((r01*x14226))+x14219);
evalcond[7]=(((r01*x14217))+((r00*x14211*x14215))+((r00*x14220))+(((-1.0)*r02*sj3*x14222))+(((-1.0)*r01*x14214*x14221))+x14225);
evalcond[8]=(((r20*x14220))+((r20*x14211*x14215))+(((-1.0)*x14219))+((r21*x14217))+x14218+(((-1.0)*r22*sj3*x14222))+(((-1.0)*r21*x14214*x14221)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14227=((1.0)*gconst41);
CheckValue<IkReal> x14228=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14227))+(((-1.0)*gconst40*r20)))),-1);
if(!x14228.valid){
continue;
}
CheckValue<IkReal> x14229 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14227))+((gconst40*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14229.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14228.value)))+(x14229.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14230=IKsin(j4);
IkReal x14231=IKcos(j4);
IkReal x14232=(cj2*sj1);
IkReal x14233=(cj1*sj2);
IkReal x14234=(gconst40*sj3);
IkReal x14235=(gconst41*sj3);
IkReal x14236=(gconst41*r20);
IkReal x14237=(cj3*gconst41);
IkReal x14238=(sj1*sj2);
IkReal x14239=(cj1*cj2);
IkReal x14240=(cj3*gconst40);
IkReal x14241=((1.0)*x14231);
IkReal x14242=((1.0)*x14230);
IkReal x14243=(cj3*x14230);
IkReal x14244=(gconst40*x14230);
IkReal x14245=(x14233+x14232);
IkReal x14246=(x14231*x14240);
evalcond[0]=(((r21*x14244))+(((-1.0)*r22*x14241))+(((-1.0)*x14236*x14242)));
evalcond[1]=((((-1.0)*gconst41*r00*x14242))+((r01*x14244))+(((-1.0)*r02*x14241)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14242))+((r11*x14244))+(((-1.0)*r12*x14241)));
evalcond[3]=(((r10*x14234))+((r12*x14243))+((r11*x14246))+((r11*x14235))+(((-1.0)*r10*x14237*x14241)));
evalcond[4]=((((-1.0)*r11*x14234*x14241))+((r10*x14240))+((r10*x14231*x14235))+((r11*x14237))+(((-1.0)*r12*sj3*x14242)));
evalcond[5]=(((r21*x14246))+((r20*x14234))+((r21*x14235))+(((-1.0)*cj3*x14236*x14241))+x14245+((r22*x14243)));
evalcond[6]=((((-1.0)*r00*x14237*x14241))+((r02*x14243))+((r01*x14235))+((r00*x14234))+(((-1.0)*x14238))+((r01*x14246))+x14239);
evalcond[7]=((((-1.0)*r02*sj3*x14242))+((r00*x14231*x14235))+(((-1.0)*r01*x14234*x14241))+((r01*x14237))+x14245+((r00*x14240)));
evalcond[8]=((((-1.0)*r22*sj3*x14242))+((r20*x14231*x14235))+((r21*x14237))+(((-1.0)*r21*x14234*x14241))+((r20*x14240))+(((-1.0)*x14239))+x14238);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14247 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst40*r21))+(((-1.0)*gconst41*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14247.valid){
continue;
}
CheckValue<IkReal> x14248=IKPowWithIntegerCheck(IKsign((((gconst41*r01))+((gconst40*r00)))),-1);
if(!x14248.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14247.value)+(((1.5707963267949)*(x14248.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14249=IKsin(j4);
IkReal x14250=IKcos(j4);
IkReal x14251=(cj2*sj1);
IkReal x14252=(cj1*sj2);
IkReal x14253=(gconst40*sj3);
IkReal x14254=(gconst41*sj3);
IkReal x14255=(gconst41*r20);
IkReal x14256=(cj3*gconst41);
IkReal x14257=(sj1*sj2);
IkReal x14258=(cj1*cj2);
IkReal x14259=(cj3*gconst40);
IkReal x14260=((1.0)*x14250);
IkReal x14261=((1.0)*x14249);
IkReal x14262=(cj3*x14249);
IkReal x14263=(gconst40*x14249);
IkReal x14264=(x14252+x14251);
IkReal x14265=(x14250*x14259);
evalcond[0]=(((r21*x14263))+(((-1.0)*r22*x14260))+(((-1.0)*x14255*x14261)));
evalcond[1]=((((-1.0)*r02*x14260))+(((-1.0)*gconst41*r00*x14261))+((r01*x14263)));
evalcond[2]=((-1.0)+(((-1.0)*gconst41*r10*x14261))+((r11*x14263))+(((-1.0)*r12*x14260)));
evalcond[3]=(((r11*x14265))+((r12*x14262))+((r10*x14253))+((r11*x14254))+(((-1.0)*r10*x14256*x14260)));
evalcond[4]=((((-1.0)*r12*sj3*x14261))+((r10*x14259))+((r11*x14256))+(((-1.0)*r11*x14253*x14260))+((r10*x14250*x14254)));
evalcond[5]=(((r21*x14254))+((r21*x14265))+(((-1.0)*cj3*x14255*x14260))+((r20*x14253))+((r22*x14262))+x14264);
evalcond[6]=(((r02*x14262))+(((-1.0)*r00*x14256*x14260))+((r00*x14253))+x14258+(((-1.0)*x14257))+((r01*x14254))+((r01*x14265)));
evalcond[7]=((((-1.0)*r02*sj3*x14261))+(((-1.0)*r01*x14253*x14260))+((r00*x14250*x14254))+((r00*x14259))+x14264+((r01*x14256)));
evalcond[8]=(((r20*x14250*x14254))+((r21*x14256))+(((-1.0)*r22*sj3*x14261))+(((-1.0)*r21*x14253*x14260))+((r20*x14259))+x14257+(((-1.0)*x14258)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14266=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14266);
rxp1_1=(px*r21);
rxp1_2=(r11*x14266);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14267=(r11*sj5);
IkReal x14268=((1.0)*cj5*r10);
j4eval[0]=((((-1.0)*x14268))+x14267);
j4eval[1]=(((cj3*x14267))+(((-1.0)*cj3*x14268)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14269=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14269);
rxp1_1=(px*r21);
rxp1_2=(r11*x14269);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x14270=(cj5*r10);
IkReal x14271=(r11*sj5);
j4eval[0]=((((-1.0)*x14270))+x14271);
j4eval[1]=(((sj3*x14270))+(((-1.0)*sj3*x14271)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14272=((-1.0)*px);
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x14272);
rxp1_1=(px*r21);
rxp1_2=(r11*x14272);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=(((cj3*r11*sj5))+(((-1.0)*cj3*cj5*r10)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14273=((1.0)*r10);
CheckValue<IkReal> x14274=IKPowWithIntegerCheck(cj3,-1);
if(!x14274.valid){
continue;
}
CheckValue<IkReal> x14275=IKPowWithIntegerCheck(r02,-1);
if(!x14275.valid){
continue;
}
CheckValue<IkReal> x14276=IKPowWithIntegerCheck((((cj3*r11*sj5))+(((-1.0)*cj3*cj5*x14273))),-1);
if(!x14276.valid){
continue;
}
if( IKabs(((x14274.value)*(x14275.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14276.value)*(((((-1.0)*sj3*sj5*x14273))+(((-1.0)*cj5*r11*sj3)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14274.value)*(x14275.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x14276.value)*(((((-1.0)*sj3*sj5*x14273))+(((-1.0)*cj5*r11*sj3))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14274.value)*(x14275.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x14276.value)*(((((-1.0)*sj3*sj5*x14273))+(((-1.0)*cj5*r11*sj3))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14277=IKsin(j4);
IkReal x14278=IKcos(j4);
IkReal x14279=(cj2*sj1);
IkReal x14280=(cj1*sj2);
IkReal x14281=(cj5*r10);
IkReal x14282=(sj1*sj2);
IkReal x14283=(cj5*sj3);
IkReal x14284=(r11*sj5);
IkReal x14285=(cj3*sj5);
IkReal x14286=(r21*sj5);
IkReal x14287=(cj1*cj2);
IkReal x14288=(cj3*cj5);
IkReal x14289=(sj3*sj5);
IkReal x14290=((1.0)*x14277);
IkReal x14291=(r20*x14278);
IkReal x14292=(cj3*x14278);
IkReal x14293=(sj3*x14278);
IkReal x14294=(x14279+x14280);
evalcond[0]=((-1.0)*r02*x14278);
evalcond[1]=((((-1.0)*cj5*r20*x14290))+((x14277*x14286)));
evalcond[2]=(((cj3*r02*x14277))+(((-1.0)*x14282))+x14287);
evalcond[3]=((((-1.0)*r02*sj3*x14290))+x14294);
evalcond[4]=((-1.0)+(((-1.0)*x14281*x14290))+((x14277*x14284)));
evalcond[5]=(((r10*x14289))+((x14284*x14292))+((r11*x14283))+(((-1.0)*x14281*x14292)));
evalcond[6]=(((x14281*x14293))+((r10*x14285))+((r11*x14288))+(((-1.0)*x14284*x14293)));
evalcond[7]=((((-1.0)*x14288*x14291))+((r21*x14283))+((r21*x14278*x14285))+x14294+((r20*x14289)));
evalcond[8]=(((r21*x14288))+(((-1.0)*x14286*x14293))+((x14283*x14291))+(((-1.0)*x14287))+x14282+((r20*x14285)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14295=(cj5*r10);
IkReal x14296=((1.0)*r11);
CheckValue<IkReal> x14297=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*x14295))),-1);
if(!x14297.valid){
continue;
}
CheckValue<IkReal> x14298=IKPowWithIntegerCheck(((((-1.0)*sj3*sj5*x14296))+((sj3*x14295))),-1);
if(!x14298.valid){
continue;
}
if( IKabs(x14297.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14298.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14296)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14297.value)+IKsqr(((x14298.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14296))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14297.value, ((x14298.value)*(((((-1.0)*cj3*r10*sj5))+(((-1.0)*cj3*cj5*x14296))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14299=IKsin(j4);
IkReal x14300=IKcos(j4);
IkReal x14301=(cj2*sj1);
IkReal x14302=(cj1*sj2);
IkReal x14303=(cj5*r10);
IkReal x14304=(sj1*sj2);
IkReal x14305=(cj5*sj3);
IkReal x14306=(r11*sj5);
IkReal x14307=(cj3*sj5);
IkReal x14308=(r21*sj5);
IkReal x14309=(cj1*cj2);
IkReal x14310=(cj3*cj5);
IkReal x14311=(sj3*sj5);
IkReal x14312=((1.0)*x14299);
IkReal x14313=(r20*x14300);
IkReal x14314=(cj3*x14300);
IkReal x14315=(sj3*x14300);
IkReal x14316=(x14301+x14302);
evalcond[0]=((-1.0)*r02*x14300);
evalcond[1]=((((-1.0)*cj5*r20*x14312))+((x14299*x14308)));
evalcond[2]=(((cj3*r02*x14299))+(((-1.0)*x14304))+x14309);
evalcond[3]=((((-1.0)*r02*sj3*x14312))+x14316);
evalcond[4]=((-1.0)+((x14299*x14306))+(((-1.0)*x14303*x14312)));
evalcond[5]=(((r11*x14305))+(((-1.0)*x14303*x14314))+((x14306*x14314))+((r10*x14311)));
evalcond[6]=(((r11*x14310))+((x14303*x14315))+((r10*x14307))+(((-1.0)*x14306*x14315)));
evalcond[7]=(((r21*x14300*x14307))+((r20*x14311))+x14316+((r21*x14305))+(((-1.0)*x14310*x14313)));
evalcond[8]=(((r20*x14307))+((x14305*x14313))+(((-1.0)*x14309))+((r21*x14310))+x14304+(((-1.0)*x14308*x14315)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14317=((1.0)*r10);
IkReal x14318=(r11*sj5);
CheckValue<IkReal> x14319=IKPowWithIntegerCheck(((((-1.0)*cj5*x14317))+x14318),-1);
if(!x14319.valid){
continue;
}
CheckValue<IkReal> x14320=IKPowWithIntegerCheck((((cj3*x14318))+(((-1.0)*cj3*cj5*x14317))),-1);
if(!x14320.valid){
continue;
}
if( IKabs(x14319.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14320.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14317)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x14319.value)+IKsqr(((x14320.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14317))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x14319.value, ((x14320.value)*(((((-1.0)*cj5*r11*sj3))+(((-1.0)*sj3*sj5*x14317))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14321=IKsin(j4);
IkReal x14322=IKcos(j4);
IkReal x14323=(cj2*sj1);
IkReal x14324=(cj1*sj2);
IkReal x14325=(cj5*r10);
IkReal x14326=(sj1*sj2);
IkReal x14327=(cj5*sj3);
IkReal x14328=(r11*sj5);
IkReal x14329=(cj3*sj5);
IkReal x14330=(r21*sj5);
IkReal x14331=(cj1*cj2);
IkReal x14332=(cj3*cj5);
IkReal x14333=(sj3*sj5);
IkReal x14334=((1.0)*x14321);
IkReal x14335=(r20*x14322);
IkReal x14336=(cj3*x14322);
IkReal x14337=(sj3*x14322);
IkReal x14338=(x14324+x14323);
evalcond[0]=((-1.0)*r02*x14322);
evalcond[1]=((((-1.0)*cj5*r20*x14334))+((x14321*x14330)));
evalcond[2]=(((cj3*r02*x14321))+x14331+(((-1.0)*x14326)));
evalcond[3]=((((-1.0)*r02*sj3*x14334))+x14338);
evalcond[4]=((-1.0)+((x14321*x14328))+(((-1.0)*x14325*x14334)));
evalcond[5]=(((r11*x14327))+((r10*x14333))+(((-1.0)*x14325*x14336))+((x14328*x14336)));
evalcond[6]=(((r11*x14332))+((x14325*x14337))+((r10*x14329))+(((-1.0)*x14328*x14337)));
evalcond[7]=(((r20*x14333))+((r21*x14322*x14329))+((r21*x14327))+(((-1.0)*x14332*x14335))+x14338);
evalcond[8]=((((-1.0)*x14330*x14337))+(((-1.0)*x14331))+((r20*x14329))+x14326+((x14327*x14335))+((r21*x14332)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14339=cj5*cj5;
IkReal x14340=((1.0)*cj3);
IkReal x14341=(r10*r21);
IkReal x14342=(cj5*sj5);
IkReal x14343=(r11*r21);
IkReal x14344=(r11*r20);
IkReal x14345=(r22*sj3);
IkReal x14346=(r10*r20);
IkReal x14347=((1.0)*sj3*x14339);
CheckValue<IkReal> x14348=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14340*x14343))+(((-1.0)*x14339*x14340*x14346))+((cj3*x14341*x14342))+(((-1.0)*r12*r22*x14340))+((cj3*x14339*x14343))+((cj3*x14342*x14344)))),-1);
if(!x14348.valid){
continue;
}
CheckValue<IkReal> x14349 = IKatan2WithCheck(IkReal((((cj5*r11*x14345))+((r10*sj5*x14345)))),IkReal((((sj3*x14342*x14343))+(((-1.0)*sj3*x14342*x14346))+(((-1.0)*x14341*x14347))+((sj3*x14341))+(((-1.0)*x14344*x14347)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14349.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14348.value)))+(x14349.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14350=IKsin(j4);
IkReal x14351=IKcos(j4);
IkReal x14352=(cj2*sj1);
IkReal x14353=(cj1*sj2);
IkReal x14354=(cj5*sj3);
IkReal x14355=(cj5*r10);
IkReal x14356=(r00*sj5);
IkReal x14357=(sj1*sj2);
IkReal x14358=(r11*sj5);
IkReal x14359=(cj3*cj5);
IkReal x14360=(cj3*sj5);
IkReal x14361=(r21*sj5);
IkReal x14362=(cj1*cj2);
IkReal x14363=(sj3*sj5);
IkReal x14364=(r01*sj5);
IkReal x14365=((1.0)*x14351);
IkReal x14366=((1.0)*x14350);
IkReal x14367=(cj3*x14350);
IkReal x14368=(cj3*x14351);
IkReal x14369=(x14352+x14353);
evalcond[0]=((((-1.0)*r22*x14365))+(((-1.0)*cj5*r20*x14366))+((x14350*x14361)));
evalcond[1]=((((-1.0)*r02*x14365))+(((-1.0)*cj5*r00*x14366))+((x14350*x14364)));
evalcond[2]=((-1.0)+((x14350*x14358))+(((-1.0)*r12*x14365))+(((-1.0)*x14355*x14366)));
evalcond[3]=((((-1.0)*cj3*x14355*x14365))+((r10*x14363))+((r11*x14354))+((x14358*x14368))+((r12*x14367)));
evalcond[4]=(((r10*x14360))+((r11*x14359))+(((-1.0)*r12*sj3*x14366))+(((-1.0)*sj3*x14358*x14365))+((r10*x14351*x14354)));
evalcond[5]=(((r20*x14363))+((r21*x14354))+((r21*x14351*x14360))+x14369+(((-1.0)*r20*x14359*x14365))+((r22*x14367)));
evalcond[6]=(((sj3*x14356))+((r01*x14351*x14360))+((r02*x14367))+(((-1.0)*x14357))+((r01*x14354))+x14362+(((-1.0)*r00*x14359*x14365)));
evalcond[7]=(((cj3*x14356))+(((-1.0)*r01*x14363*x14365))+((r01*x14359))+(((-1.0)*r02*sj3*x14366))+((r00*x14351*x14354))+x14369);
evalcond[8]=(((r20*x14360))+(((-1.0)*x14362))+((r20*x14351*x14354))+((r21*x14359))+x14357+(((-1.0)*r22*sj3*x14366))+(((-1.0)*sj3*x14361*x14365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14370=((1.0)*cj5);
CheckValue<IkReal> x14371=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x14370))+(((-1.0)*r20*sj5)))),-1);
if(!x14371.valid){
continue;
}
CheckValue<IkReal> x14372 = IKatan2WithCheck(IkReal(r02),IkReal((((r01*sj5))+(((-1.0)*r00*x14370)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14372.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14371.value)))+(x14372.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14373=IKsin(j4);
IkReal x14374=IKcos(j4);
IkReal x14375=(cj2*sj1);
IkReal x14376=(cj1*sj2);
IkReal x14377=(cj5*sj3);
IkReal x14378=(cj5*r10);
IkReal x14379=(r00*sj5);
IkReal x14380=(sj1*sj2);
IkReal x14381=(r11*sj5);
IkReal x14382=(cj3*cj5);
IkReal x14383=(cj3*sj5);
IkReal x14384=(r21*sj5);
IkReal x14385=(cj1*cj2);
IkReal x14386=(sj3*sj5);
IkReal x14387=(r01*sj5);
IkReal x14388=((1.0)*x14374);
IkReal x14389=((1.0)*x14373);
IkReal x14390=(cj3*x14373);
IkReal x14391=(cj3*x14374);
IkReal x14392=(x14375+x14376);
evalcond[0]=(((x14373*x14384))+(((-1.0)*cj5*r20*x14389))+(((-1.0)*r22*x14388)));
evalcond[1]=(((x14373*x14387))+(((-1.0)*cj5*r00*x14389))+(((-1.0)*r02*x14388)));
evalcond[2]=((-1.0)+(((-1.0)*x14378*x14389))+(((-1.0)*r12*x14388))+((x14373*x14381)));
evalcond[3]=((((-1.0)*cj3*x14378*x14388))+((r12*x14390))+((r10*x14386))+((r11*x14377))+((x14381*x14391)));
evalcond[4]=(((r10*x14374*x14377))+((r10*x14383))+((r11*x14382))+(((-1.0)*sj3*x14381*x14388))+(((-1.0)*r12*sj3*x14389)));
evalcond[5]=(((r21*x14374*x14383))+((r21*x14377))+((r20*x14386))+((r22*x14390))+x14392+(((-1.0)*r20*x14382*x14388)));
evalcond[6]=(((r01*x14377))+(((-1.0)*x14380))+(((-1.0)*r00*x14382*x14388))+((r02*x14390))+((r01*x14374*x14383))+((sj3*x14379))+x14385);
evalcond[7]=(((r01*x14382))+((r00*x14374*x14377))+((cj3*x14379))+(((-1.0)*r01*x14386*x14388))+x14392+(((-1.0)*r02*sj3*x14389)));
evalcond[8]=(((r20*x14383))+(((-1.0)*x14385))+(((-1.0)*sj3*x14384*x14388))+((r21*x14382))+(((-1.0)*r22*sj3*x14389))+((r20*x14374*x14377))+x14380);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14393 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14393.valid){
continue;
}
CheckValue<IkReal> x14394=IKPowWithIntegerCheck(IKsign((((r00*sj5))+((cj5*r01)))),-1);
if(!x14394.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14393.value)+(((1.5707963267949)*(x14394.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14395=IKsin(j4);
IkReal x14396=IKcos(j4);
IkReal x14397=(cj2*sj1);
IkReal x14398=(cj1*sj2);
IkReal x14399=(cj5*sj3);
IkReal x14400=(cj5*r10);
IkReal x14401=(r00*sj5);
IkReal x14402=(sj1*sj2);
IkReal x14403=(r11*sj5);
IkReal x14404=(cj3*cj5);
IkReal x14405=(cj3*sj5);
IkReal x14406=(r21*sj5);
IkReal x14407=(cj1*cj2);
IkReal x14408=(sj3*sj5);
IkReal x14409=(r01*sj5);
IkReal x14410=((1.0)*x14396);
IkReal x14411=((1.0)*x14395);
IkReal x14412=(cj3*x14395);
IkReal x14413=(cj3*x14396);
IkReal x14414=(x14397+x14398);
evalcond[0]=(((x14395*x14406))+(((-1.0)*r22*x14410))+(((-1.0)*cj5*r20*x14411)));
evalcond[1]=(((x14395*x14409))+(((-1.0)*r02*x14410))+(((-1.0)*cj5*r00*x14411)));
evalcond[2]=((-1.0)+((x14395*x14403))+(((-1.0)*x14400*x14411))+(((-1.0)*r12*x14410)));
evalcond[3]=(((r10*x14408))+((r12*x14412))+(((-1.0)*cj3*x14400*x14410))+((r11*x14399))+((x14403*x14413)));
evalcond[4]=(((r10*x14405))+((r11*x14404))+(((-1.0)*r12*sj3*x14411))+((r10*x14396*x14399))+(((-1.0)*sj3*x14403*x14410)));
evalcond[5]=(((r21*x14399))+((r22*x14412))+((r21*x14396*x14405))+x14414+(((-1.0)*r20*x14404*x14410))+((r20*x14408)));
evalcond[6]=(((r01*x14399))+((sj3*x14401))+(((-1.0)*x14402))+((r02*x14412))+x14407+(((-1.0)*r00*x14404*x14410))+((r01*x14396*x14405)));
evalcond[7]=(((r00*x14396*x14399))+(((-1.0)*r01*x14408*x14410))+((r01*x14404))+((cj3*x14401))+x14414+(((-1.0)*r02*sj3*x14411)));
evalcond[8]=(((r21*x14404))+(((-1.0)*x14407))+(((-1.0)*r22*sj3*x14411))+x14402+((r20*x14396*x14399))+(((-1.0)*sj3*x14406*x14410))+((r20*x14405)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14415=((-1.0)*r00);
IkReal x14417 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14417)==0){
continue;
}
IkReal x14416=pow(x14417,-0.5);
CheckValue<IkReal> x14418 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14415),IKFAST_ATAN2_MAGTHRESH);
if(!x14418.valid){
continue;
}
IkReal gconst12=((-1.0)*(x14418.value));
IkReal gconst13=(r01*x14416);
IkReal gconst14=(x14415*x14416);
CheckValue<IkReal> x14419 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14419.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14419.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
IkReal x14420=((-1.0)*r00);
IkReal x14421=x14416;
CheckValue<IkReal> x14423 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(x14420),IKFAST_ATAN2_MAGTHRESH);
if(!x14423.valid){
continue;
}
IkReal x14422=((-1.0)*(x14423.value));
sj5=gconst13;
cj5=gconst14;
j5=x14422;
IkReal gconst12=x14422;
IkReal gconst13=(r01*x14421);
IkReal gconst14=(x14420*x14421);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14424=((1.0)*sj0);
IkReal x14425=((1.0)*cj0);
CheckValue<IkReal> x14426=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst13*r20))+(((-1.0)*gconst14*r21)))),-1);
if(!x14426.valid){
continue;
}
CheckValue<IkReal> x14427 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14425))+(((-1.0)*r12*x14424)))),IkReal(((((-1.0)*gconst13*r01*x14425))+((cj0*gconst14*r00))+((gconst14*r10*sj0))+(((-1.0)*gconst13*r11*x14424)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14427.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14426.value)))+(x14427.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14428=IKsin(j4);
IkReal x14429=IKcos(j4);
IkReal x14430=((1.0)*r22);
IkReal x14431=((1.0)*r12);
IkReal x14432=(gconst13*sj3);
IkReal x14433=(gconst13*r01);
IkReal x14434=(sj1*sj2);
IkReal x14435=(gconst14*sj3);
IkReal x14436=(cj2*sj1);
IkReal x14437=((1.0)*sj0);
IkReal x14438=(cj3*gconst13);
IkReal x14439=(cj3*gconst14);
IkReal x14440=((1.0)*cj0);
IkReal x14441=((1.0)*gconst14);
IkReal x14442=(cj1*sj2);
IkReal x14443=(sj3*x14428);
IkReal x14444=((1.0)*cj1*cj2);
IkReal x14445=(cj3*x14429);
IkReal x14446=(cj3*x14428);
IkReal x14447=(gconst13*x14428);
IkReal x14448=((1.0)*x14429);
IkReal x14449=(x14428*x14441);
evalcond[0]=((((-1.0)*x14429*x14430))+((r21*x14447))+(((-1.0)*r20*x14449)));
evalcond[1]=(cj0+((r11*x14447))+(((-1.0)*x14429*x14431))+(((-1.0)*r10*x14449)));
evalcond[2]=((((-1.0)*x14437))+((x14428*x14433))+(((-1.0)*r02*x14448))+(((-1.0)*r00*x14449)));
evalcond[3]=(((r21*x14435))+((r20*x14432))+(((-1.0)*r20*x14439*x14448))+((r21*x14429*x14438))+x14442+x14436+((r22*x14446)));
evalcond[4]=(((r21*x14439))+(((-1.0)*x14444))+(((-1.0)*x14430*x14443))+((r20*x14438))+x14434+(((-1.0)*r21*x14432*x14448))+((r20*x14429*x14435)));
evalcond[5]=(((cj0*x14434))+((r00*x14432))+((r01*x14435))+(((-1.0)*r00*x14439*x14448))+(((-1.0)*cj1*cj2*x14440))+((r02*x14446))+((x14433*x14445)));
evalcond[6]=((((-1.0)*cj1*cj2*x14437))+((r11*x14435))+((r12*x14446))+((sj0*x14434))+((r10*x14432))+(((-1.0)*r10*x14439*x14448))+((r11*x14429*x14438)));
evalcond[7]=((((-1.0)*r02*x14443))+((r00*x14429*x14435))+(((-1.0)*x14440*x14442))+(((-1.0)*x14436*x14440))+((r00*x14438))+((r01*x14439))+(((-1.0)*r01*x14432*x14448)));
evalcond[8]=((((-1.0)*x14436*x14437))+((r11*x14439))+(((-1.0)*r11*x14432*x14448))+((r10*x14438))+(((-1.0)*x14437*x14442))+(((-1.0)*x14431*x14443))+((r10*x14429*x14435)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14450=((1.0)*gconst14);
CheckValue<IkReal> x14451=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14450))+(((-1.0)*gconst13*r10)))),-1);
if(!x14451.valid){
continue;
}
CheckValue<IkReal> x14452 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x14450))+((gconst13*r21*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14452.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14451.value)))+(x14452.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14453=IKsin(j4);
IkReal x14454=IKcos(j4);
IkReal x14455=((1.0)*r22);
IkReal x14456=((1.0)*r12);
IkReal x14457=(gconst13*sj3);
IkReal x14458=(gconst13*r01);
IkReal x14459=(sj1*sj2);
IkReal x14460=(gconst14*sj3);
IkReal x14461=(cj2*sj1);
IkReal x14462=((1.0)*sj0);
IkReal x14463=(cj3*gconst13);
IkReal x14464=(cj3*gconst14);
IkReal x14465=((1.0)*cj0);
IkReal x14466=((1.0)*gconst14);
IkReal x14467=(cj1*sj2);
IkReal x14468=(sj3*x14453);
IkReal x14469=((1.0)*cj1*cj2);
IkReal x14470=(cj3*x14454);
IkReal x14471=(cj3*x14453);
IkReal x14472=(gconst13*x14453);
IkReal x14473=((1.0)*x14454);
IkReal x14474=(x14453*x14466);
evalcond[0]=((((-1.0)*x14454*x14455))+((r21*x14472))+(((-1.0)*r20*x14474)));
evalcond[1]=((((-1.0)*x14454*x14456))+cj0+(((-1.0)*r10*x14474))+((r11*x14472)));
evalcond[2]=((((-1.0)*r00*x14474))+(((-1.0)*r02*x14473))+(((-1.0)*x14462))+((x14453*x14458)));
evalcond[3]=(((r21*x14454*x14463))+((r21*x14460))+((r22*x14471))+((r20*x14457))+x14461+x14467+(((-1.0)*r20*x14464*x14473)));
evalcond[4]=(((r20*x14454*x14460))+((r21*x14464))+x14459+(((-1.0)*x14455*x14468))+(((-1.0)*x14469))+((r20*x14463))+(((-1.0)*r21*x14457*x14473)));
evalcond[5]=(((cj0*x14459))+((r01*x14460))+((r00*x14457))+(((-1.0)*r00*x14464*x14473))+((r02*x14471))+(((-1.0)*cj1*cj2*x14465))+((x14458*x14470)));
evalcond[6]=(((sj0*x14459))+((r11*x14454*x14463))+((r10*x14457))+((r11*x14460))+(((-1.0)*cj1*cj2*x14462))+((r12*x14471))+(((-1.0)*r10*x14464*x14473)));
evalcond[7]=(((r00*x14454*x14460))+((r01*x14464))+((r00*x14463))+(((-1.0)*r02*x14468))+(((-1.0)*r01*x14457*x14473))+(((-1.0)*x14465*x14467))+(((-1.0)*x14461*x14465)));
evalcond[8]=((((-1.0)*x14462*x14467))+((r10*x14463))+(((-1.0)*x14456*x14468))+((r10*x14454*x14460))+((r11*x14464))+(((-1.0)*x14461*x14462))+(((-1.0)*r11*x14457*x14473)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14475=((-1.0)*r01);
IkReal x14477 = ((1.0)+(((-1.0)*(r02*r02))));
if(IKabs(x14477)==0){
continue;
}
IkReal x14476=pow(x14477,-0.5);
CheckValue<IkReal> x14478 = IKatan2WithCheck(IkReal(x14475),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14478.valid){
continue;
}
IkReal gconst15=((3.14159265358979)+(((-1.0)*(x14478.value))));
IkReal gconst16=(x14475*x14476);
IkReal gconst17=((1.0)*r00*x14476);
CheckValue<IkReal> x14479 = IKatan2WithCheck(IkReal(((-1.0)*r01)),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14479.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14479.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[5];
IkReal x14480=((-1.0)*r01);
CheckValue<IkReal> x14483 = IKatan2WithCheck(IkReal(x14480),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14483.valid){
continue;
}
IkReal x14481=((1.0)*(x14483.value));
IkReal x14482=x14476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14481)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14481)));
IkReal gconst16=(x14480*x14482);
IkReal gconst17=((1.0)*r00*x14482);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=cj0;
j4eval[3]=r22;
j4eval[4]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  || IKabs(j4eval[4]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x14484=((-1.0)*r01);
CheckValue<IkReal> x14487 = IKatan2WithCheck(IkReal(x14484),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14487.valid){
continue;
}
IkReal x14485=((1.0)*(x14487.value));
IkReal x14486=x14476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14485)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14485)));
IkReal gconst16=(x14484*x14486);
IkReal gconst17=((1.0)*r00*x14486);
j4eval[0]=r22;
j4eval[1]=sj0;
j4eval[2]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14488=((-1.0)*r01);
CheckValue<IkReal> x14491 = IKatan2WithCheck(IkReal(x14488),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14491.valid){
continue;
}
IkReal x14489=((1.0)*(x14491.value));
IkReal x14490=x14476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14489)));
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14489)));
IkReal gconst16=(x14488*x14490);
IkReal gconst17=((1.0)*r00*x14490);
IkReal x14492=r02*r02;
IkReal x14493=(r12*sj0);
IkReal x14494=((1.0)*cj0);
IkReal x14495=x14476;
j4eval[0]=((IKabs((((r02*x14493*x14495))+((cj0*x14492*x14495))+(((-1.0)*x14494*x14495)))))+(IKabs(((((-1.0)*x14493))+(((-1.0)*r02*x14494))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
IkReal x14496=((-1.0)*r01);
CheckValue<IkReal> x14499 = IKatan2WithCheck(IkReal(x14496),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14499.valid){
continue;
}
IkReal x14497=((1.0)*(x14499.value));
IkReal x14498=x14476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14497)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14497)));
IkReal gconst16=(x14496*x14498);
IkReal gconst17=((1.0)*r00*x14498);
j4eval[0]=0;
j4eval[1]=0;
j4eval[2]=r22;
j4eval[3]=((1.0)+(((-1.0)*(r02*r02))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x14500=((-1.0)*r01);
CheckValue<IkReal> x14503 = IKatan2WithCheck(IkReal(x14500),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14503.valid){
continue;
}
IkReal x14501=((1.0)*(x14503.value));
IkReal x14502=x14476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14501)));
sj0=0;
cj0=-1.0;
j0=3.14159265358979;
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14501)));
IkReal gconst16=(x14500*x14502);
IkReal gconst17=((1.0)*r00*x14502);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14504=gconst16*gconst16;
IkReal x14505=gconst17*gconst17;
IkReal x14506=(r11*sj3);
IkReal x14507=(cj3*r10);
IkReal x14508=((1.0)*cj3);
IkReal x14509=(r10*sj3);
IkReal x14510=(gconst16*gconst17);
IkReal x14511=(r21*x14504);
IkReal x14512=((1.0)*r20*x14505);
CheckValue<IkReal> x14513 = IKatan2WithCheck(IkReal((((gconst16*r22*x14509))+((gconst17*r22*x14506)))),IkReal(((((-1.0)*r20*x14509*x14510))+((x14509*x14511))+((r21*x14506*x14510))+(((-1.0)*x14506*x14512)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14513.valid){
continue;
}
CheckValue<IkReal> x14514=IKPowWithIntegerCheck(IKsign((((cj3*r11*r20*x14510))+((r21*x14507*x14510))+(((-1.0)*x14507*x14512))+(((-1.0)*r12*r22*x14508))+(((-1.0)*r11*x14508*x14511)))),-1);
if(!x14514.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14513.value)+(((1.5707963267949)*(x14514.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14515=IKsin(j4);
IkReal x14516=IKcos(j4);
IkReal x14517=(cj2*sj1);
IkReal x14518=(cj1*sj2);
IkReal x14519=(gconst16*r21);
IkReal x14520=(cj3*gconst17);
IkReal x14521=(gconst16*r20);
IkReal x14522=(sj1*sj2);
IkReal x14523=(gconst17*r20);
IkReal x14524=(gconst17*sj3);
IkReal x14525=(gconst16*r10);
IkReal x14526=(cj1*cj2);
IkReal x14527=(gconst16*sj3);
IkReal x14528=((1.0)*x14516);
IkReal x14529=((1.0)*x14515);
IkReal x14530=(gconst16*x14515);
IkReal x14531=(cj3*x14516);
IkReal x14532=(cj3*x14515);
IkReal x14533=(x14517+x14518);
evalcond[0]=((((-1.0)*x14523*x14529))+(((-1.0)*r22*x14528))+((x14515*x14519)));
evalcond[1]=((((-1.0)*gconst17*r00*x14529))+((r01*x14530))+(((-1.0)*r02*x14528)));
evalcond[2]=((-1.0)+((r11*x14530))+(((-1.0)*gconst17*r10*x14529))+(((-1.0)*r12*x14528)));
evalcond[3]=((((-1.0)*r10*x14520*x14528))+((r12*x14532))+((sj3*x14525))+((r11*x14524))+((gconst16*r11*x14531)));
evalcond[4]=((((-1.0)*r12*sj3*x14529))+((r10*x14516*x14524))+((cj3*x14525))+((r11*x14520))+(((-1.0)*r11*x14527*x14528)));
evalcond[5]=(((sj3*x14521))+(((-1.0)*r20*x14520*x14528))+((r22*x14532))+x14533+((r21*x14524))+((x14519*x14531)));
evalcond[6]=((((-1.0)*x14522))+((r02*x14532))+((r01*x14524))+((r00*x14527))+(((-1.0)*r00*x14520*x14528))+x14526+((gconst16*r01*x14531)));
evalcond[7]=(((r01*x14520))+x14533+(((-1.0)*r02*sj3*x14529))+(((-1.0)*r01*x14527*x14528))+((r00*x14516*x14524))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*x14526))+((cj3*x14521))+x14522+((sj3*x14516*x14523))+(((-1.0)*r22*sj3*x14529))+((r21*x14520))+(((-1.0)*sj3*x14519*x14528)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14534=((1.0)*gconst17);
CheckValue<IkReal> x14535 = IKatan2WithCheck(IkReal(r02),IkReal(((((-1.0)*r00*x14534))+((gconst16*r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14535.valid){
continue;
}
CheckValue<IkReal> x14536=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*r21*x14534)))),-1);
if(!x14536.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14535.value)+(((1.5707963267949)*(x14536.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14537=IKsin(j4);
IkReal x14538=IKcos(j4);
IkReal x14539=(cj2*sj1);
IkReal x14540=(cj1*sj2);
IkReal x14541=(gconst16*r21);
IkReal x14542=(cj3*gconst17);
IkReal x14543=(gconst16*r20);
IkReal x14544=(sj1*sj2);
IkReal x14545=(gconst17*r20);
IkReal x14546=(gconst17*sj3);
IkReal x14547=(gconst16*r10);
IkReal x14548=(cj1*cj2);
IkReal x14549=(gconst16*sj3);
IkReal x14550=((1.0)*x14538);
IkReal x14551=((1.0)*x14537);
IkReal x14552=(gconst16*x14537);
IkReal x14553=(cj3*x14538);
IkReal x14554=(cj3*x14537);
IkReal x14555=(x14539+x14540);
evalcond[0]=((((-1.0)*x14545*x14551))+(((-1.0)*r22*x14550))+((x14537*x14541)));
evalcond[1]=((((-1.0)*r02*x14550))+((r01*x14552))+(((-1.0)*gconst17*r00*x14551)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14551))+(((-1.0)*r12*x14550))+((r11*x14552)));
evalcond[3]=(((r11*x14546))+((r12*x14554))+(((-1.0)*r10*x14542*x14550))+((sj3*x14547))+((gconst16*r11*x14553)));
evalcond[4]=(((r11*x14542))+((cj3*x14547))+(((-1.0)*r11*x14549*x14550))+(((-1.0)*r12*sj3*x14551))+((r10*x14538*x14546)));
evalcond[5]=(((r21*x14546))+(((-1.0)*r20*x14542*x14550))+x14555+((sj3*x14543))+((x14541*x14553))+((r22*x14554)));
evalcond[6]=(((gconst16*r01*x14553))+((r01*x14546))+(((-1.0)*x14544))+((r00*x14549))+((r02*x14554))+x14548+(((-1.0)*r00*x14542*x14550)));
evalcond[7]=(((r01*x14542))+((r00*x14538*x14546))+(((-1.0)*r01*x14549*x14550))+x14555+(((-1.0)*r02*sj3*x14551))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r22*sj3*x14551))+(((-1.0)*x14548))+((cj3*x14543))+((r21*x14542))+(((-1.0)*sj3*x14541*x14550))+((sj3*x14538*x14545))+x14544);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14556=IKPowWithIntegerCheck(IKsign((((gconst17*r01))+((gconst16*r00)))),-1);
if(!x14556.valid){
continue;
}
CheckValue<IkReal> x14557 = IKatan2WithCheck(IkReal(r22),IkReal(((((-1.0)*gconst17*r20))+((gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14557.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14556.value)))+(x14557.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14558=IKsin(j4);
IkReal x14559=IKcos(j4);
IkReal x14560=(cj2*sj1);
IkReal x14561=(cj1*sj2);
IkReal x14562=(gconst16*r21);
IkReal x14563=(cj3*gconst17);
IkReal x14564=(gconst16*r20);
IkReal x14565=(sj1*sj2);
IkReal x14566=(gconst17*r20);
IkReal x14567=(gconst17*sj3);
IkReal x14568=(gconst16*r10);
IkReal x14569=(cj1*cj2);
IkReal x14570=(gconst16*sj3);
IkReal x14571=((1.0)*x14559);
IkReal x14572=((1.0)*x14558);
IkReal x14573=(gconst16*x14558);
IkReal x14574=(cj3*x14559);
IkReal x14575=(cj3*x14558);
IkReal x14576=(x14561+x14560);
evalcond[0]=((((-1.0)*r22*x14571))+((x14558*x14562))+(((-1.0)*x14566*x14572)));
evalcond[1]=((((-1.0)*r02*x14571))+(((-1.0)*gconst17*r00*x14572))+((r01*x14573)));
evalcond[2]=((-1.0)+(((-1.0)*gconst17*r10*x14572))+(((-1.0)*r12*x14571))+((r11*x14573)));
evalcond[3]=((((-1.0)*r10*x14563*x14571))+((r11*x14567))+((r12*x14575))+((gconst16*r11*x14574))+((sj3*x14568)));
evalcond[4]=(((r10*x14559*x14567))+(((-1.0)*r11*x14570*x14571))+((r11*x14563))+((cj3*x14568))+(((-1.0)*r12*sj3*x14572)));
evalcond[5]=(((r21*x14567))+(((-1.0)*r20*x14563*x14571))+((x14562*x14574))+x14576+((r22*x14575))+((sj3*x14564)));
evalcond[6]=(((r01*x14567))+((r02*x14575))+x14569+(((-1.0)*x14565))+(((-1.0)*r00*x14563*x14571))+((gconst16*r01*x14574))+((r00*x14570)));
evalcond[7]=(((r01*x14563))+((r00*x14559*x14567))+x14576+(((-1.0)*r01*x14570*x14571))+((cj3*gconst16*r00))+(((-1.0)*r02*sj3*x14572)));
evalcond[8]=(((r21*x14563))+(((-1.0)*r22*sj3*x14572))+x14565+((cj3*x14564))+(((-1.0)*x14569))+(((-1.0)*sj3*x14562*x14571))+((sj3*x14559*x14566)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
j4array[0]=0;
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(r22);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x14577=((-1.0)*r01);
CheckValue<IkReal> x14580 = IKatan2WithCheck(IkReal(x14577),IkReal(((-1.0)*r00)),IKFAST_ATAN2_MAGTHRESH);
if(!x14580.valid){
continue;
}
IkReal x14578=((1.0)*(x14580.value));
IkReal x14579=x14476;
sj5=gconst16;
cj5=gconst17;
j5=((3.14159265)+(((-1.0)*x14578)));
r22=0;
npz=(((px*r02))+((py*r12)));
rxp2_0=(pz*r12);
rxp2_1=((-1.0)*pz*r02);
IkReal gconst15=((3.14159265358979)+(((-1.0)*x14578)));
IkReal gconst16=(x14577*x14579);
IkReal gconst17=((1.0)*r00*x14579);
IkReal x14581=r02*r02;
IkReal x14582=(r12*sj0);
IkReal x14583=((1.0)*cj0);
IkReal x14584=x14476;
j4eval[0]=((IKabs(((((-1.0)*x14583*x14584))+((cj0*x14581*x14584))+((r02*x14582*x14584)))))+(IKabs(((((-1.0)*r02*x14583))+(((-1.0)*x14582))))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14585=((1.0)*r12);
IkReal x14586=(sj1*sj2);
IkReal x14587=(cj1*cj2);
IkReal x14588=((1.0)*sj3);
IkReal x14589=(gconst16*r21);
IkReal x14590=(cj3*gconst16*r20);
IkReal x14591=(gconst17*r20*sj3);
IkReal x14592=(cj3*gconst17*r21);
CheckValue<IkReal> x14593=IKPowWithIntegerCheck((((gconst17*r10*sj3*x14589))+((gconst16*r11*x14591))+(((-1.0)*gconst16*r11*x14588*x14589))+(((-1.0)*r10*r20*x14588*(gconst17*gconst17)))),-1);
if(!x14593.valid){
continue;
}
CheckValue<IkReal> x14594=IKPowWithIntegerCheck(((((-1.0)*x14588*x14589))+x14591),-1);
if(!x14594.valid){
continue;
}
if( IKabs(((x14593.value)*(((((-1.0)*x14585*x14586))+(((-1.0)*cj0*gconst17*r20*x14588))+(((-1.0)*x14585*x14590))+(((-1.0)*x14585*x14592))+((cj0*sj3*x14589))+((r12*x14587)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x14594.value)*(((((-1.0)*x14586))+(((-1.0)*x14590))+(((-1.0)*x14592))+x14587)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x14593.value)*(((((-1.0)*x14585*x14586))+(((-1.0)*cj0*gconst17*r20*x14588))+(((-1.0)*x14585*x14590))+(((-1.0)*x14585*x14592))+((cj0*sj3*x14589))+((r12*x14587))))))+IKsqr(((x14594.value)*(((((-1.0)*x14586))+(((-1.0)*x14590))+(((-1.0)*x14592))+x14587))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x14593.value)*(((((-1.0)*x14585*x14586))+(((-1.0)*cj0*gconst17*r20*x14588))+(((-1.0)*x14585*x14590))+(((-1.0)*x14585*x14592))+((cj0*sj3*x14589))+((r12*x14587))))), ((x14594.value)*(((((-1.0)*x14586))+(((-1.0)*x14590))+(((-1.0)*x14592))+x14587))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14595=IKsin(j4);
IkReal x14596=IKcos(j4);
IkReal x14597=((1.0)*gconst17);
IkReal x14598=(gconst17*sj3);
IkReal x14599=(gconst16*r21);
IkReal x14600=(cj3*gconst17);
IkReal x14601=(sj1*sj2);
IkReal x14602=((1.0)*sj0);
IkReal x14603=(gconst16*sj3);
IkReal x14604=(cj3*gconst16);
IkReal x14605=(cj2*sj1);
IkReal x14606=((1.0)*cj0);
IkReal x14607=((1.0)*sj3);
IkReal x14608=(cj1*sj2);
IkReal x14609=(cj3*x14596);
IkReal x14610=(gconst16*x14595);
IkReal x14611=((1.0)*x14596);
IkReal x14612=((1.0)*cj1*cj2);
IkReal x14613=(r02*x14595);
IkReal x14614=(r12*x14595);
evalcond[0]=(((x14595*x14599))+(((-1.0)*r20*x14595*x14597)));
evalcond[1]=(cj0+(((-1.0)*r12*x14611))+(((-1.0)*r10*x14595*x14597))+((r11*x14610)));
evalcond[2]=(((r01*x14610))+(((-1.0)*r00*x14595*x14597))+(((-1.0)*r02*x14611))+(((-1.0)*x14602)));
evalcond[3]=(((r21*x14598))+((x14599*x14609))+(((-1.0)*r20*x14597*x14609))+x14608+x14605+((r20*x14603)));
evalcond[4]=(((r21*x14600))+x14601+(((-1.0)*x14596*x14599*x14607))+((r20*x14604))+(((-1.0)*x14612))+((r20*x14596*x14598)));
evalcond[5]=(((cj0*x14601))+(((-1.0)*cj1*cj2*x14606))+((r00*x14603))+((cj3*x14613))+((r01*x14596*x14604))+(((-1.0)*r00*x14597*x14609))+((r01*x14598)));
evalcond[6]=(((r11*x14596*x14604))+((sj0*x14601))+((r10*x14603))+(((-1.0)*cj1*cj2*x14602))+((cj3*x14614))+(((-1.0)*r10*x14597*x14609))+((r11*x14598)));
evalcond[7]=(((r00*x14596*x14598))+((r01*x14600))+(((-1.0)*r01*x14603*x14611))+(((-1.0)*x14607*x14613))+((r00*x14604))+(((-1.0)*x14606*x14608))+(((-1.0)*x14605*x14606)));
evalcond[8]=(((r10*x14596*x14598))+((r10*x14604))+(((-1.0)*r11*x14603*x14611))+(((-1.0)*x14607*x14614))+((r11*x14600))+(((-1.0)*x14602*x14608))+(((-1.0)*x14602*x14605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14615=((1.0)*sj0);
IkReal x14616=((1.0)*cj0);
CheckValue<IkReal> x14617=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14617.valid){
continue;
}
CheckValue<IkReal> x14618 = IKatan2WithCheck(IkReal(((((-1.0)*r12*x14615))+(((-1.0)*r02*x14616)))),IkReal(((((-1.0)*gconst16*r01*x14616))+((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r11*x14615)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14618.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14617.value)))+(x14618.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14619=IKsin(j4);
IkReal x14620=IKcos(j4);
IkReal x14621=((1.0)*gconst17);
IkReal x14622=(gconst17*sj3);
IkReal x14623=(gconst16*r21);
IkReal x14624=(cj3*gconst17);
IkReal x14625=(sj1*sj2);
IkReal x14626=((1.0)*sj0);
IkReal x14627=(gconst16*sj3);
IkReal x14628=(cj3*gconst16);
IkReal x14629=(cj2*sj1);
IkReal x14630=((1.0)*cj0);
IkReal x14631=((1.0)*sj3);
IkReal x14632=(cj1*sj2);
IkReal x14633=(cj3*x14620);
IkReal x14634=(gconst16*x14619);
IkReal x14635=((1.0)*x14620);
IkReal x14636=((1.0)*cj1*cj2);
IkReal x14637=(r02*x14619);
IkReal x14638=(r12*x14619);
evalcond[0]=(((x14619*x14623))+(((-1.0)*r20*x14619*x14621)));
evalcond[1]=(cj0+((r11*x14634))+(((-1.0)*r10*x14619*x14621))+(((-1.0)*r12*x14635)));
evalcond[2]=((((-1.0)*x14626))+((r01*x14634))+(((-1.0)*r02*x14635))+(((-1.0)*r00*x14619*x14621)));
evalcond[3]=(((r21*x14622))+(((-1.0)*r20*x14621*x14633))+((r20*x14627))+((x14623*x14633))+x14632+x14629);
evalcond[4]=(((r21*x14624))+((r20*x14628))+(((-1.0)*x14636))+((r20*x14620*x14622))+(((-1.0)*x14620*x14623*x14631))+x14625);
evalcond[5]=(((r01*x14620*x14628))+((cj3*x14637))+(((-1.0)*r00*x14621*x14633))+(((-1.0)*cj1*cj2*x14630))+((cj0*x14625))+((r00*x14627))+((r01*x14622)));
evalcond[6]=(((r11*x14622))+((cj3*x14638))+((r10*x14627))+((r11*x14620*x14628))+(((-1.0)*r10*x14621*x14633))+(((-1.0)*cj1*cj2*x14626))+((sj0*x14625)));
evalcond[7]=(((r00*x14620*x14622))+(((-1.0)*x14629*x14630))+((r00*x14628))+(((-1.0)*x14630*x14632))+((r01*x14624))+(((-1.0)*x14631*x14637))+(((-1.0)*r01*x14627*x14635)));
evalcond[8]=((((-1.0)*x14626*x14632))+(((-1.0)*r11*x14627*x14635))+((r10*x14620*x14622))+((r11*x14624))+((r10*x14628))+(((-1.0)*x14626*x14629))+(((-1.0)*x14631*x14638)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14639=((1.0)*sj0);
IkReal x14640=((1.0)*cj0);
CheckValue<IkReal> x14641=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r20))+(((-1.0)*gconst17*r21)))),-1);
if(!x14641.valid){
continue;
}
CheckValue<IkReal> x14642 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x14640))+(((-1.0)*r12*x14639)))),IkReal((((cj0*gconst17*r00))+((gconst17*r10*sj0))+(((-1.0)*gconst16*r01*x14640))+(((-1.0)*gconst16*r11*x14639)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14642.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14641.value)))+(x14642.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14643=IKsin(j4);
IkReal x14644=IKcos(j4);
IkReal x14645=(cj3*gconst17);
IkReal x14646=(gconst16*r21);
IkReal x14647=(gconst17*sj3);
IkReal x14648=(gconst16*r20);
IkReal x14649=(sj1*sj2);
IkReal x14650=(gconst16*r10);
IkReal x14651=(cj2*sj1);
IkReal x14652=(gconst16*sj3);
IkReal x14653=((1.0)*cj0);
IkReal x14654=((1.0)*sj0);
IkReal x14655=(cj1*sj2);
IkReal x14656=((1.0)*x14644);
IkReal x14657=(gconst16*x14643);
IkReal x14658=(cj3*x14644);
IkReal x14659=(cj3*x14643);
IkReal x14660=((1.0)*cj1*cj2);
IkReal x14661=((1.0)*gconst17*x14643);
IkReal x14662=((1.0)*sj3*x14643);
evalcond[0]=((((-1.0)*r22*x14656))+((x14643*x14646))+(((-1.0)*r20*x14661)));
evalcond[1]=(cj0+(((-1.0)*r12*x14656))+(((-1.0)*r10*x14661))+((r11*x14657)));
evalcond[2]=(((r01*x14657))+(((-1.0)*r02*x14656))+(((-1.0)*r00*x14661))+(((-1.0)*x14654)));
evalcond[3]=(((r22*x14659))+(((-1.0)*r20*x14645*x14656))+((sj3*x14648))+((r21*x14647))+x14651+x14655+((x14646*x14658)));
evalcond[4]=((((-1.0)*r22*x14662))+(((-1.0)*sj3*x14646*x14656))+((r21*x14645))+x14649+((r20*x14644*x14647))+((cj3*x14648))+(((-1.0)*x14660)));
evalcond[5]=(((gconst16*r01*x14658))+((cj0*x14649))+((r01*x14647))+(((-1.0)*r00*x14645*x14656))+((r00*x14652))+(((-1.0)*cj1*cj2*x14653))+((r02*x14659)));
evalcond[6]=(((r11*x14647))+((r12*x14659))+((sj0*x14649))+(((-1.0)*r10*x14645*x14656))+((sj3*x14650))+(((-1.0)*cj1*cj2*x14654))+((gconst16*r11*x14658)));
evalcond[7]=(((r01*x14645))+(((-1.0)*x14653*x14655))+(((-1.0)*r02*x14662))+((cj3*gconst16*r00))+(((-1.0)*x14651*x14653))+((r00*x14644*x14647))+(((-1.0)*r01*x14652*x14656)));
evalcond[8]=(((r11*x14645))+(((-1.0)*x14654*x14655))+(((-1.0)*r12*x14662))+(((-1.0)*r11*x14652*x14656))+((cj3*x14650))+(((-1.0)*x14651*x14654))+((r10*x14644*x14647)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14663=((1.0)*gconst17);
CheckValue<IkReal> x14664=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r10))+(((-1.0)*r11*x14663)))),-1);
if(!x14664.valid){
continue;
}
CheckValue<IkReal> x14665 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal((((gconst16*r21*sj0))+(((-1.0)*r20*sj0*x14663)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14665.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14664.value)))+(x14665.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14666=IKsin(j4);
IkReal x14667=IKcos(j4);
IkReal x14668=(cj3*gconst17);
IkReal x14669=(gconst16*r21);
IkReal x14670=(gconst17*sj3);
IkReal x14671=(gconst16*r20);
IkReal x14672=(sj1*sj2);
IkReal x14673=(gconst16*r10);
IkReal x14674=(cj2*sj1);
IkReal x14675=(gconst16*sj3);
IkReal x14676=((1.0)*cj0);
IkReal x14677=((1.0)*sj0);
IkReal x14678=(cj1*sj2);
IkReal x14679=((1.0)*x14667);
IkReal x14680=(gconst16*x14666);
IkReal x14681=(cj3*x14667);
IkReal x14682=(cj3*x14666);
IkReal x14683=((1.0)*cj1*cj2);
IkReal x14684=((1.0)*gconst17*x14666);
IkReal x14685=((1.0)*sj3*x14666);
evalcond[0]=(((x14666*x14669))+(((-1.0)*r22*x14679))+(((-1.0)*r20*x14684)));
evalcond[1]=(cj0+((r11*x14680))+(((-1.0)*r12*x14679))+(((-1.0)*r10*x14684)));
evalcond[2]=((((-1.0)*r00*x14684))+((r01*x14680))+(((-1.0)*x14677))+(((-1.0)*r02*x14679)));
evalcond[3]=((((-1.0)*r20*x14668*x14679))+((x14669*x14681))+((r21*x14670))+x14678+x14674+((sj3*x14671))+((r22*x14682)));
evalcond[4]=(((r21*x14668))+(((-1.0)*x14683))+(((-1.0)*r22*x14685))+x14672+((cj3*x14671))+(((-1.0)*sj3*x14669*x14679))+((r20*x14667*x14670)));
evalcond[5]=((((-1.0)*r00*x14668*x14679))+((cj0*x14672))+((r00*x14675))+((r01*x14670))+(((-1.0)*cj1*cj2*x14676))+((r02*x14682))+((gconst16*r01*x14681)));
evalcond[6]=(((sj0*x14672))+((r12*x14682))+(((-1.0)*cj1*cj2*x14677))+((gconst16*r11*x14681))+((r11*x14670))+((sj3*x14673))+(((-1.0)*r10*x14668*x14679)));
evalcond[7]=((((-1.0)*x14676*x14678))+(((-1.0)*r02*x14685))+((r00*x14667*x14670))+(((-1.0)*x14674*x14676))+((r01*x14668))+(((-1.0)*r01*x14675*x14679))+((cj3*gconst16*r00)));
evalcond[8]=((((-1.0)*r11*x14675*x14679))+(((-1.0)*x14674*x14677))+((cj3*x14673))+((r11*x14668))+((r10*x14667*x14670))+(((-1.0)*x14677*x14678))+(((-1.0)*r12*x14685)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14686=((1.0)*gconst17);
CheckValue<IkReal> x14687 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal(((((-1.0)*cj0*r20*x14686))+((cj0*gconst16*r21)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14687.valid){
continue;
}
CheckValue<IkReal> x14688=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst16*r00))+(((-1.0)*r01*x14686)))),-1);
if(!x14688.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14687.value)+(((1.5707963267949)*(x14688.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14689=IKsin(j4);
IkReal x14690=IKcos(j4);
IkReal x14691=(cj3*gconst17);
IkReal x14692=(gconst16*r21);
IkReal x14693=(gconst17*sj3);
IkReal x14694=(gconst16*r20);
IkReal x14695=(sj1*sj2);
IkReal x14696=(gconst16*r10);
IkReal x14697=(cj2*sj1);
IkReal x14698=(gconst16*sj3);
IkReal x14699=((1.0)*cj0);
IkReal x14700=((1.0)*sj0);
IkReal x14701=(cj1*sj2);
IkReal x14702=((1.0)*x14690);
IkReal x14703=(gconst16*x14689);
IkReal x14704=(cj3*x14690);
IkReal x14705=(cj3*x14689);
IkReal x14706=((1.0)*cj1*cj2);
IkReal x14707=((1.0)*gconst17*x14689);
IkReal x14708=((1.0)*sj3*x14689);
evalcond[0]=((((-1.0)*r20*x14707))+((x14689*x14692))+(((-1.0)*r22*x14702)));
evalcond[1]=(cj0+(((-1.0)*r10*x14707))+(((-1.0)*r12*x14702))+((r11*x14703)));
evalcond[2]=((((-1.0)*x14700))+((r01*x14703))+(((-1.0)*r00*x14707))+(((-1.0)*r02*x14702)));
evalcond[3]=(((sj3*x14694))+((x14692*x14704))+x14697+x14701+(((-1.0)*r20*x14691*x14702))+((r22*x14705))+((r21*x14693)));
evalcond[4]=((((-1.0)*x14706))+((cj3*x14694))+(((-1.0)*sj3*x14692*x14702))+x14695+(((-1.0)*r22*x14708))+((r20*x14690*x14693))+((r21*x14691)));
evalcond[5]=(((r00*x14698))+((cj0*x14695))+((gconst16*r01*x14704))+((r01*x14693))+(((-1.0)*cj1*cj2*x14699))+((r02*x14705))+(((-1.0)*r00*x14691*x14702)));
evalcond[6]=(((gconst16*r11*x14704))+((sj3*x14696))+((r11*x14693))+(((-1.0)*cj1*cj2*x14700))+((r12*x14705))+(((-1.0)*r10*x14691*x14702))+((sj0*x14695)));
evalcond[7]=(((r01*x14691))+(((-1.0)*x14699*x14701))+(((-1.0)*x14697*x14699))+((r00*x14690*x14693))+(((-1.0)*r01*x14698*x14702))+((cj3*gconst16*r00))+(((-1.0)*r02*x14708)));
evalcond[8]=(((r10*x14690*x14693))+(((-1.0)*r11*x14698*x14702))+((cj3*x14696))+((r11*x14691))+(((-1.0)*r12*x14708))+(((-1.0)*x14700*x14701))+(((-1.0)*x14697*x14700)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14709=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14709;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14709);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14710=((1.0)*cj5);
IkReal x14711=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14710)));
j4eval[0]=x14711;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14710))))));
j4eval[2]=IKsign(x14711);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
IkReal x14712=cj5*cj5;
IkReal x14713=(cj3*r01);
IkReal x14714=(cj5*sj5);
IkReal x14715=((1.0)*cj3);
IkReal x14716=(((cj3*r00*r21*x14714))+((r20*x14713*x14714))+(((-1.0)*r21*x14713))+((r21*x14712*x14713))+(((-1.0)*r00*r20*x14712*x14715))+(((-1.0)*r02*r22*x14715)));
j4eval[0]=x14716;
j4eval[1]=IKsign(x14716);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14717=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14717;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14717);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14718=((1.0)*cj5);
IkReal x14719=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14718)));
j4eval[0]=x14719;
j4eval[1]=((IKabs(r22))+(IKabs((((r21*sj5))+(((-1.0)*r20*x14718))))));
j4eval[2]=IKsign(x14719);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x14720=cj5*cj5;
IkReal x14721=r01*r01;
IkReal x14722=(r01*sj5);
IkReal x14723=(cj5*r00);
IkReal x14724=((((-1.0)*x14721))+(((2.0)*x14722*x14723))+((x14720*x14721))+(((-1.0)*(r02*r02)))+(((-1.0)*x14720*(r00*r00))));
j4eval[0]=x14724;
j4eval[1]=IKsign(x14724);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x14722))+x14723))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14725=cj5*cj5;
IkReal x14726=r01*r01;
IkReal x14727=(r01*sj5);
IkReal x14728=(cj5*r00);
CheckValue<IkReal> x14729=IKPowWithIntegerCheck(IKsign(((((-1.0)*x14726))+(((2.0)*x14727*x14728))+(((-1.0)*(r02*r02)))+(((-1.0)*x14725*(r00*r00)))+((x14725*x14726)))),-1);
if(!x14729.valid){
continue;
}
CheckValue<IkReal> x14730 = IKatan2WithCheck(IkReal(((((-1.0)*x14727))+x14728)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x14730.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14729.value)))+(x14730.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14731=IKsin(j4);
IkReal x14732=IKcos(j4);
IkReal x14733=(cj5*r10);
IkReal x14734=(r01*sj5);
IkReal x14735=((1.0)*cj2);
IkReal x14736=(cj5*r00);
IkReal x14737=(cj5*r20);
IkReal x14738=((1.0)*x14732);
IkReal x14739=((1.0)*x14731);
IkReal x14740=(sj5*x14731);
evalcond[0]=(((r21*x14740))+(((-1.0)*x14737*x14739))+(((-1.0)*r22*x14738)));
evalcond[1]=((((-1.0)*r12*x14738))+((r11*x14740))+(((-1.0)*x14733*x14739)));
evalcond[2]=(((x14732*x14736))+(((-1.0)*r02*x14739))+(((-1.0)*x14734*x14738)));
evalcond[3]=((-1.0)+((x14731*x14734))+(((-1.0)*x14736*x14739))+(((-1.0)*r02*x14738)));
evalcond[4]=((((-1.0)*r21*sj5*x14738))+((sj1*sj2))+((x14732*x14737))+(((-1.0)*cj1*x14735))+(((-1.0)*r22*x14739)));
evalcond[5]=((((-1.0)*sj1*x14735))+(((-1.0)*r12*x14739))+(((-1.0)*cj1*sj2))+((x14732*x14733))+(((-1.0)*r11*sj5*x14738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14741=((1.0)*cj5);
CheckValue<IkReal> x14742 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14741)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14742.valid){
continue;
}
CheckValue<IkReal> x14743=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14741)))),-1);
if(!x14743.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14742.value)+(((1.5707963267949)*(x14743.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14744=IKsin(j4);
IkReal x14745=IKcos(j4);
IkReal x14746=(cj5*r10);
IkReal x14747=(r01*sj5);
IkReal x14748=((1.0)*cj2);
IkReal x14749=(cj5*r00);
IkReal x14750=(cj5*r20);
IkReal x14751=((1.0)*x14745);
IkReal x14752=((1.0)*x14744);
IkReal x14753=(sj5*x14744);
evalcond[0]=((((-1.0)*x14750*x14752))+((r21*x14753))+(((-1.0)*r22*x14751)));
evalcond[1]=((((-1.0)*r12*x14751))+(((-1.0)*x14746*x14752))+((r11*x14753)));
evalcond[2]=(((x14745*x14749))+(((-1.0)*r02*x14752))+(((-1.0)*x14747*x14751)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14751))+(((-1.0)*x14749*x14752))+((x14744*x14747)));
evalcond[4]=(((x14745*x14750))+(((-1.0)*r21*sj5*x14751))+((sj1*sj2))+(((-1.0)*cj1*x14748))+(((-1.0)*r22*x14752)));
evalcond[5]=((((-1.0)*r11*sj5*x14751))+(((-1.0)*r12*x14752))+(((-1.0)*cj1*sj2))+((x14745*x14746))+(((-1.0)*sj1*x14748)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14754=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14754.valid){
continue;
}
CheckValue<IkReal> x14755 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14755.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14754.value)))+(x14755.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14756=IKsin(j4);
IkReal x14757=IKcos(j4);
IkReal x14758=(cj5*r10);
IkReal x14759=(r01*sj5);
IkReal x14760=((1.0)*cj2);
IkReal x14761=(cj5*r00);
IkReal x14762=(cj5*r20);
IkReal x14763=((1.0)*x14757);
IkReal x14764=((1.0)*x14756);
IkReal x14765=(sj5*x14756);
evalcond[0]=((((-1.0)*r22*x14763))+((r21*x14765))+(((-1.0)*x14762*x14764)));
evalcond[1]=((((-1.0)*x14758*x14764))+(((-1.0)*r12*x14763))+((r11*x14765)));
evalcond[2]=((((-1.0)*r02*x14764))+(((-1.0)*x14759*x14763))+((x14757*x14761)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14763))+((x14756*x14759))+(((-1.0)*x14761*x14764)));
evalcond[4]=(((sj1*sj2))+(((-1.0)*r21*sj5*x14763))+(((-1.0)*r22*x14764))+(((-1.0)*cj1*x14760))+((x14757*x14762)));
evalcond[5]=((((-1.0)*sj1*x14760))+(((-1.0)*cj1*sj2))+(((-1.0)*r12*x14764))+(((-1.0)*r11*sj5*x14763))+((x14757*x14758)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14766=(((cj5*r21))+((r20*sj5)));
j4eval[0]=x14766;
j4eval[1]=((IKabs(((((-1.0)*cj5*r10))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x14766);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14767=((1.0)*cj5);
IkReal x14768=((((-1.0)*r10*sj5))+(((-1.0)*r11*x14767)));
j4eval[0]=x14768;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*r20*x14767)))))+(IKabs(r22)));
j4eval[2]=IKsign(x14768);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x14769=cj5*cj5;
IkReal x14770=r01*r01;
IkReal x14771=(cj5*r00);
IkReal x14772=(r01*sj5);
IkReal x14773=((((-2.0)*x14771*x14772))+((x14769*(r00*r00)))+x14770+(r02*r02)+(((-1.0)*x14769*x14770)));
j4eval[0]=x14773;
j4eval[1]=IKsign(x14773);
j4eval[2]=((IKabs(((((-1.0)*x14771))+x14772)))+(IKabs(r02)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14774=cj5*cj5;
IkReal x14775=r01*r01;
IkReal x14776=(r01*sj5);
IkReal x14777=(cj5*r00);
CheckValue<IkReal> x14778 = IKatan2WithCheck(IkReal(((((-1.0)*x14777))+x14776)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x14778.valid){
continue;
}
CheckValue<IkReal> x14779=IKPowWithIntegerCheck(IKsign(((((-2.0)*x14776*x14777))+x14775+(r02*r02)+(((-1.0)*x14774*x14775))+((x14774*(r00*r00))))),-1);
if(!x14779.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14778.value)+(((1.5707963267949)*(x14779.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14780=IKcos(j4);
IkReal x14781=IKsin(j4);
IkReal x14782=(cj5*r00);
IkReal x14783=(cj5*r10);
IkReal x14784=(r21*sj5);
IkReal x14785=((1.0)*cj2);
IkReal x14786=(cj5*r20);
IkReal x14787=((1.0)*x14780);
IkReal x14788=((1.0)*x14781);
IkReal x14789=(sj5*x14781);
IkReal x14790=(sj5*x14780);
evalcond[0]=(((r01*x14790))+(((-1.0)*x14782*x14787))+((r02*x14781)));
evalcond[1]=((((-1.0)*x14786*x14788))+((x14781*x14784))+(((-1.0)*r22*x14787)));
evalcond[2]=((((-1.0)*x14783*x14788))+(((-1.0)*r12*x14787))+((r11*x14789)));
evalcond[3]=((-1.0)+((r01*x14789))+(((-1.0)*x14782*x14788))+(((-1.0)*r02*x14787)));
evalcond[4]=(((x14780*x14784))+((sj1*sj2))+(((-1.0)*cj1*x14785))+(((-1.0)*x14786*x14787))+((r22*x14781)));
evalcond[5]=((((-1.0)*x14783*x14787))+(((-1.0)*sj1*x14785))+(((-1.0)*cj1*sj2))+((r11*x14790))+((r12*x14781)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14791=((1.0)*cj5);
CheckValue<IkReal> x14792=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x14791)))),-1);
if(!x14792.valid){
continue;
}
CheckValue<IkReal> x14793 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x14791)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14793.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14792.value)))+(x14793.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14794=IKcos(j4);
IkReal x14795=IKsin(j4);
IkReal x14796=(cj5*r00);
IkReal x14797=(cj5*r10);
IkReal x14798=(r21*sj5);
IkReal x14799=((1.0)*cj2);
IkReal x14800=(cj5*r20);
IkReal x14801=((1.0)*x14794);
IkReal x14802=((1.0)*x14795);
IkReal x14803=(sj5*x14795);
IkReal x14804=(sj5*x14794);
evalcond[0]=((((-1.0)*x14796*x14801))+((r01*x14804))+((r02*x14795)));
evalcond[1]=((((-1.0)*r22*x14801))+(((-1.0)*x14800*x14802))+((x14795*x14798)));
evalcond[2]=((((-1.0)*x14797*x14802))+(((-1.0)*r12*x14801))+((r11*x14803)));
evalcond[3]=((-1.0)+(((-1.0)*x14796*x14802))+((r01*x14803))+(((-1.0)*r02*x14801)));
evalcond[4]=((((-1.0)*x14800*x14801))+((sj1*sj2))+((x14794*x14798))+(((-1.0)*cj1*x14799))+((r22*x14795)));
evalcond[5]=((((-1.0)*x14797*x14801))+(((-1.0)*sj1*x14799))+(((-1.0)*cj1*sj2))+((r12*x14795))+((r11*x14804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14805=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x14805.valid){
continue;
}
CheckValue<IkReal> x14806 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14806.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14805.value)))+(x14806.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x14807=IKcos(j4);
IkReal x14808=IKsin(j4);
IkReal x14809=(cj5*r00);
IkReal x14810=(cj5*r10);
IkReal x14811=(r21*sj5);
IkReal x14812=((1.0)*cj2);
IkReal x14813=(cj5*r20);
IkReal x14814=((1.0)*x14807);
IkReal x14815=((1.0)*x14808);
IkReal x14816=(sj5*x14808);
IkReal x14817=(sj5*x14807);
evalcond[0]=((((-1.0)*x14809*x14814))+((r01*x14817))+((r02*x14808)));
evalcond[1]=((((-1.0)*r22*x14814))+((x14808*x14811))+(((-1.0)*x14813*x14815)));
evalcond[2]=((((-1.0)*r12*x14814))+((r11*x14816))+(((-1.0)*x14810*x14815)));
evalcond[3]=((-1.0)+(((-1.0)*r02*x14814))+(((-1.0)*x14809*x14815))+((r01*x14816)));
evalcond[4]=((((-1.0)*x14813*x14814))+((sj1*sj2))+((r22*x14808))+((x14807*x14811))+(((-1.0)*cj1*x14812)));
evalcond[5]=((((-1.0)*cj1*sj2))+((r11*x14817))+((r12*x14808))+(((-1.0)*x14810*x14814))+(((-1.0)*sj1*x14812)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14819 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14819)==0){
continue;
}
IkReal x14818=pow(x14819,-0.5);
CheckValue<IkReal> x14820 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14820.valid){
continue;
}
IkReal gconst48=((-1.0)*(x14820.value));
IkReal gconst49=((-1.0)*r21*x14818);
IkReal gconst50=(r20*x14818);
CheckValue<IkReal> x14821 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14821.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x14821.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x14824 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14824.valid){
continue;
}
IkReal x14822=((-1.0)*(x14824.value));
IkReal x14823=x14818;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14822;
IkReal gconst48=x14822;
IkReal gconst49=((-1.0)*r21*x14823);
IkReal gconst50=(r20*x14823);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14827 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14827.valid){
continue;
}
IkReal x14825=((-1.0)*(x14827.value));
IkReal x14826=x14818;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst49;
cj5=gconst50;
j5=x14825;
IkReal gconst48=x14825;
IkReal gconst49=((-1.0)*r21*x14826);
IkReal gconst50=(r20*x14826);
CheckValue<IkReal> x14835=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r22*r22)))),-1);
if(!x14835.valid){
continue;
}
IkReal x14828=x14835.value;
IkReal x14829=(sj3*x14828);
IkReal x14830=(r11*x14829);
IkReal x14831=(r00*x14829);
IkReal x14832=(r01*x14829);
IkReal x14833=(r10*x14829);
IkReal x14834=(r20*r21*x14829);
j4eval[0]=IKsign((((r02*r12*sj3))+((r00*r20*r21*x14830))+((r10*r20*r21*x14832))+((r10*x14831*(r20*r20)))+((r01*x14830*(r21*r21)))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14836=gconst49*gconst49;
IkReal x14837=gconst50*gconst50;
IkReal x14838=((1.0)*cj3);
IkReal x14839=(gconst50*r01);
IkReal x14840=(gconst49*r10);
IkReal x14841=(r12*sj3);
IkReal x14842=(gconst49*r00);
IkReal x14843=(r00*sj3);
IkReal x14844=(r11*x14836);
IkReal x14845=(r10*x14837);
CheckValue<IkReal> x14846 = IKatan2WithCheck(IkReal((((x14841*x14842))+((x14839*x14841)))),IkReal((((x14843*x14844))+((gconst49*r11*sj3*x14839))+(((-1.0)*r01*sj3*x14845))+(((-1.0)*gconst50*x14840*x14843)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14846.valid){
continue;
}
CheckValue<IkReal> x14847=IKPowWithIntegerCheck(IKsign((((cj3*x14839*x14840))+(((-1.0)*r02*r12*x14838))+(((-1.0)*r01*x14838*x14844))+(((-1.0)*r00*x14838*x14845))+((cj3*gconst50*r11*x14842)))),-1);
if(!x14847.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14846.value)+(((1.5707963267949)*(x14847.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14848=IKsin(j4);
IkReal x14849=IKcos(j4);
IkReal x14850=(sj1*sj2);
IkReal x14851=(gconst50*r20);
IkReal x14852=(gconst50*sj3);
IkReal x14853=(cj3*r01);
IkReal x14854=(gconst50*r10);
IkReal x14855=(gconst49*sj3);
IkReal x14856=((1.0)*cj2);
IkReal x14857=(cj1*sj2);
IkReal x14858=(cj3*r11);
IkReal x14859=(gconst50*r00);
IkReal x14860=(cj3*r21);
IkReal x14861=(cj3*gconst49);
IkReal x14862=(cj1*x14856);
IkReal x14863=((1.0)*x14849);
IkReal x14864=((1.0)*x14848);
IkReal x14865=(gconst49*x14848);
IkReal x14866=(gconst49*x14849);
IkReal x14867=(cj3*x14848);
evalcond[0]=((((-1.0)*x14851*x14864))+((r21*x14865))+(((-1.0)*r22*x14863)));
evalcond[1]=(((r11*x14865))+(((-1.0)*x14854*x14864))+(((-1.0)*r12*x14863)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x14863))+(((-1.0)*x14859*x14864))+((r01*x14865)));
evalcond[3]=(((r02*x14867))+(((-1.0)*cj3*x14859*x14863))+((x14853*x14866))+((r00*x14855))+((r01*x14852)));
evalcond[4]=((((-1.0)*r02*sj3*x14864))+((r00*x14849*x14852))+(((-1.0)*r01*x14855*x14863))+((gconst50*x14853))+((r00*x14861)));
evalcond[5]=(((r21*x14852))+((cj2*sj1))+((r20*x14855))+x14857+(((-1.0)*cj3*x14851*x14863))+((x14860*x14866))+((r22*x14867)));
evalcond[6]=((((-1.0)*cj3*x14854*x14863))+x14850+((r11*x14852))+((r12*x14867))+((x14858*x14866))+((r10*x14855))+(((-1.0)*x14862)));
evalcond[7]=(((r20*x14861))+x14850+((gconst50*x14860))+(((-1.0)*r21*x14855*x14863))+(((-1.0)*x14862))+(((-1.0)*r22*sj3*x14864))+((sj3*x14849*x14851)));
evalcond[8]=((((-1.0)*sj1*x14856))+(((-1.0)*r11*x14855*x14863))+((r10*x14861))+((gconst50*x14858))+(((-1.0)*r12*sj3*x14864))+((r10*x14849*x14852))+(((-1.0)*x14857)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14868=gconst49*gconst49;
IkReal x14869=gconst50*gconst50;
IkReal x14870=(cj3*r12);
IkReal x14871=(gconst49*r00);
IkReal x14872=(r01*r11);
IkReal x14873=(r00*r11);
IkReal x14874=(cj3*gconst50);
IkReal x14875=((1.0)*r01*r10);
IkReal x14876=(gconst49*gconst50*sj3);
CheckValue<IkReal> x14877 = IKatan2WithCheck(IkReal((((x14870*x14871))+((gconst50*r01*x14870)))),IkReal(((((-1.0)*r10*x14871*x14874))+((cj3*x14868*x14873))+(((-1.0)*cj3*x14869*x14875))+((gconst49*x14872*x14874)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14877.valid){
continue;
}
CheckValue<IkReal> x14878=IKPowWithIntegerCheck(IKsign((((r02*r12*sj3))+(((-1.0)*x14875*x14876))+(((-1.0)*gconst50*r11*sj3*x14871))+((sj3*x14868*x14872))+((r00*r10*sj3*x14869)))),-1);
if(!x14878.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14877.value)+(((1.5707963267949)*(x14878.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14879=IKsin(j4);
IkReal x14880=IKcos(j4);
IkReal x14881=(sj1*sj2);
IkReal x14882=(gconst50*r20);
IkReal x14883=(gconst50*sj3);
IkReal x14884=(cj3*r01);
IkReal x14885=(gconst50*r10);
IkReal x14886=(gconst49*sj3);
IkReal x14887=((1.0)*cj2);
IkReal x14888=(cj1*sj2);
IkReal x14889=(cj3*r11);
IkReal x14890=(gconst50*r00);
IkReal x14891=(cj3*r21);
IkReal x14892=(cj3*gconst49);
IkReal x14893=(cj1*x14887);
IkReal x14894=((1.0)*x14880);
IkReal x14895=((1.0)*x14879);
IkReal x14896=(gconst49*x14879);
IkReal x14897=(gconst49*x14880);
IkReal x14898=(cj3*x14879);
evalcond[0]=((((-1.0)*r22*x14894))+((r21*x14896))+(((-1.0)*x14882*x14895)));
evalcond[1]=(((r11*x14896))+(((-1.0)*x14885*x14895))+(((-1.0)*r12*x14894)));
evalcond[2]=((-1.0)+((r01*x14896))+(((-1.0)*x14890*x14895))+(((-1.0)*r02*x14894)));
evalcond[3]=(((r02*x14898))+(((-1.0)*cj3*x14890*x14894))+((x14884*x14897))+((r00*x14886))+((r01*x14883)));
evalcond[4]=(((r00*x14892))+((r00*x14880*x14883))+(((-1.0)*r01*x14886*x14894))+((gconst50*x14884))+(((-1.0)*r02*sj3*x14895)));
evalcond[5]=(((cj2*sj1))+((x14891*x14897))+x14888+(((-1.0)*cj3*x14882*x14894))+((r22*x14898))+((r21*x14883))+((r20*x14886)));
evalcond[6]=(((r11*x14883))+((r12*x14898))+((r10*x14886))+((x14889*x14897))+x14881+(((-1.0)*x14893))+(((-1.0)*cj3*x14885*x14894)));
evalcond[7]=(x14881+((gconst50*x14891))+(((-1.0)*r21*x14886*x14894))+((sj3*x14880*x14882))+(((-1.0)*x14893))+((r20*x14892))+(((-1.0)*r22*sj3*x14895)));
evalcond[8]=(((r10*x14892))+(((-1.0)*r12*sj3*x14895))+(((-1.0)*r11*x14886*x14894))+((gconst50*x14889))+((r10*x14880*x14883))+(((-1.0)*x14888))+(((-1.0)*sj1*x14887)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14899=((1.0)*gconst50);
CheckValue<IkReal> x14900=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst49*r10))+(((-1.0)*r11*x14899)))),-1);
if(!x14900.valid){
continue;
}
CheckValue<IkReal> x14901 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst49*r21))+(((-1.0)*r20*x14899)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14901.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14900.value)))+(x14901.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14902=IKsin(j4);
IkReal x14903=IKcos(j4);
IkReal x14904=(sj1*sj2);
IkReal x14905=(gconst50*r20);
IkReal x14906=(gconst50*sj3);
IkReal x14907=(cj3*r01);
IkReal x14908=(gconst50*r10);
IkReal x14909=(gconst49*sj3);
IkReal x14910=((1.0)*cj2);
IkReal x14911=(cj1*sj2);
IkReal x14912=(cj3*r11);
IkReal x14913=(gconst50*r00);
IkReal x14914=(cj3*r21);
IkReal x14915=(cj3*gconst49);
IkReal x14916=(cj1*x14910);
IkReal x14917=((1.0)*x14903);
IkReal x14918=((1.0)*x14902);
IkReal x14919=(gconst49*x14902);
IkReal x14920=(gconst49*x14903);
IkReal x14921=(cj3*x14902);
evalcond[0]=(((r21*x14919))+(((-1.0)*r22*x14917))+(((-1.0)*x14905*x14918)));
evalcond[1]=((((-1.0)*r12*x14917))+((r11*x14919))+(((-1.0)*x14908*x14918)));
evalcond[2]=((-1.0)+((r01*x14919))+(((-1.0)*r02*x14917))+(((-1.0)*x14913*x14918)));
evalcond[3]=((((-1.0)*cj3*x14913*x14917))+((r00*x14909))+((r01*x14906))+((x14907*x14920))+((r02*x14921)));
evalcond[4]=(((r00*x14903*x14906))+((r00*x14915))+(((-1.0)*r02*sj3*x14918))+((gconst50*x14907))+(((-1.0)*r01*x14909*x14917)));
evalcond[5]=(((cj2*sj1))+((r21*x14906))+((x14914*x14920))+x14911+(((-1.0)*cj3*x14905*x14917))+((r22*x14921))+((r20*x14909)));
evalcond[6]=((((-1.0)*x14916))+((r11*x14906))+x14904+(((-1.0)*cj3*x14908*x14917))+((x14912*x14920))+((r12*x14921))+((r10*x14909)));
evalcond[7]=(((sj3*x14903*x14905))+(((-1.0)*x14916))+x14904+(((-1.0)*r22*sj3*x14918))+(((-1.0)*r21*x14909*x14917))+((r20*x14915))+((gconst50*x14914)));
evalcond[8]=(((r10*x14915))+(((-1.0)*r12*sj3*x14918))+(((-1.0)*r11*x14909*x14917))+(((-1.0)*x14911))+((gconst50*x14912))+((r10*x14903*x14906))+(((-1.0)*sj1*x14910)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x14923 = ((1.0)+(((-1.0)*(r22*r22))));
if(IKabs(x14923)==0){
continue;
}
IkReal x14922=pow(x14923,-0.5);
CheckValue<IkReal> x14924 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14924.valid){
continue;
}
IkReal gconst51=((3.14159265358979)+(((-1.0)*(x14924.value))));
IkReal gconst52=((1.0)*r21*x14922);
IkReal gconst53=((-1.0)*r20*x14922);
CheckValue<IkReal> x14925 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14925.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x14925.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[4];
CheckValue<IkReal> x14928 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14928.valid){
continue;
}
IkReal x14926=((1.0)*(x14928.value));
IkReal x14927=x14922;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14926)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14926)));
IkReal gconst52=((1.0)*r21*x14927);
IkReal gconst53=((-1.0)*r20*x14927);
j4eval[0]=0;
j4eval[1]=r12;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
j4eval[3]=0;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  || IKabs(j4eval[3]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x14931 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14931.valid){
continue;
}
IkReal x14929=((1.0)*(x14931.value));
IkReal x14930=x14922;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14929)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14929)));
IkReal gconst52=((1.0)*r21*x14930);
IkReal gconst53=((-1.0)*r20*x14930);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
CheckValue<IkReal> x14934 = IKatan2WithCheck(IkReal(r21),IkReal(r20),IKFAST_ATAN2_MAGTHRESH);
if(!x14934.valid){
continue;
}
IkReal x14932=((1.0)*(x14934.value));
IkReal x14933=x14922;
sj0=1.0;
cj0=0;
j0=1.5707963267949;
sj5=gconst52;
cj5=gconst53;
j5=((3.14159265)+(((-1.0)*x14932)));
IkReal gconst51=((3.14159265358979)+(((-1.0)*x14932)));
IkReal gconst52=((1.0)*r21*x14933);
IkReal gconst53=((-1.0)*r20*x14933);
j4eval[0]=r12;
j4eval[1]=sj3;
j4eval[2]=((1.0)+(((-1.0)*(r22*r22))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14935=gconst52*gconst52;
IkReal x14936=gconst53*gconst53;
IkReal x14937=(gconst53*r01);
IkReal x14938=(cj3*r20);
IkReal x14939=(r22*sj3);
IkReal x14940=((1.0)*cj3);
IkReal x14941=(gconst52*sj3);
IkReal x14942=((1.0)*r00);
IkReal x14943=(gconst52*r00);
IkReal x14944=(r21*x14935);
CheckValue<IkReal> x14945=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x14940))+((gconst52*x14937*x14938))+(((-1.0)*x14936*x14938*x14942))+((cj3*gconst53*r21*x14943))+(((-1.0)*r01*x14940*x14944)))),-1);
if(!x14945.valid){
continue;
}
CheckValue<IkReal> x14946 = IKatan2WithCheck(IkReal((((x14937*x14939))+((x14939*x14943)))),IkReal((((r00*sj3*x14944))+(((-1.0)*r01*r20*sj3*x14936))+(((-1.0)*gconst53*r20*x14941*x14942))+((r21*x14937*x14941)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14946.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14945.value)))+(x14946.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14947=IKsin(j4);
IkReal x14948=IKcos(j4);
IkReal x14949=(sj1*sj2);
IkReal x14950=((1.0)*cj1);
IkReal x14951=(cj3*gconst52);
IkReal x14952=(gconst53*sj3);
IkReal x14953=(cj3*gconst53);
IkReal x14954=(cj2*sj1);
IkReal x14955=(gconst52*sj3);
IkReal x14956=(cj2*x14950);
IkReal x14957=((1.0)*x14948);
IkReal x14958=((1.0)*x14947);
IkReal x14959=(gconst52*x14947);
IkReal x14960=(cj3*x14947);
evalcond[0]=((((-1.0)*gconst53*r20*x14958))+(((-1.0)*r22*x14957))+((r21*x14959)));
evalcond[1]=((((-1.0)*r12*x14957))+(((-1.0)*gconst53*r10*x14958))+((r11*x14959)));
evalcond[2]=((-1.0)+((r01*x14959))+(((-1.0)*r02*x14957))+(((-1.0)*gconst53*r00*x14958)));
evalcond[3]=(((r01*x14948*x14951))+(((-1.0)*r00*x14953*x14957))+((r01*x14952))+((r00*x14955))+((r02*x14960)));
evalcond[4]=((((-1.0)*r02*sj3*x14958))+((r01*x14953))+((r00*x14951))+((r00*x14948*x14952))+(((-1.0)*r01*x14955*x14957)));
evalcond[5]=(((r22*x14960))+((r21*x14948*x14951))+x14954+((cj1*sj2))+((r21*x14952))+((r20*x14955))+(((-1.0)*r20*x14953*x14957)));
evalcond[6]=((((-1.0)*r10*x14953*x14957))+((r11*x14948*x14951))+x14949+((r12*x14960))+((r10*x14955))+(((-1.0)*x14956))+((r11*x14952)));
evalcond[7]=(x14949+(((-1.0)*r21*x14955*x14957))+(((-1.0)*x14956))+(((-1.0)*r22*sj3*x14958))+((r21*x14953))+((r20*x14951))+((r20*x14948*x14952)));
evalcond[8]=((((-1.0)*sj2*x14950))+((r10*x14951))+(((-1.0)*r12*sj3*x14958))+(((-1.0)*r11*x14955*x14957))+(((-1.0)*x14954))+((r10*x14948*x14952))+((r11*x14953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x14961=((1.0)*gconst53);
CheckValue<IkReal> x14962=IKPowWithIntegerCheck(IKsign(((((-1.0)*r11*x14961))+(((-1.0)*gconst52*r10)))),-1);
if(!x14962.valid){
continue;
}
CheckValue<IkReal> x14963 = IKatan2WithCheck(IkReal(r22),IkReal((((gconst52*r21))+(((-1.0)*r20*x14961)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14963.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x14962.value)))+(x14963.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14964=IKsin(j4);
IkReal x14965=IKcos(j4);
IkReal x14966=(sj1*sj2);
IkReal x14967=((1.0)*cj1);
IkReal x14968=(cj3*gconst52);
IkReal x14969=(gconst53*sj3);
IkReal x14970=(cj3*gconst53);
IkReal x14971=(cj2*sj1);
IkReal x14972=(gconst52*sj3);
IkReal x14973=(cj2*x14967);
IkReal x14974=((1.0)*x14965);
IkReal x14975=((1.0)*x14964);
IkReal x14976=(gconst52*x14964);
IkReal x14977=(cj3*x14964);
evalcond[0]=((((-1.0)*gconst53*r20*x14975))+(((-1.0)*r22*x14974))+((r21*x14976)));
evalcond[1]=((((-1.0)*r12*x14974))+((r11*x14976))+(((-1.0)*gconst53*r10*x14975)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14975))+((r01*x14976))+(((-1.0)*r02*x14974)));
evalcond[3]=(((r01*x14969))+((r02*x14977))+((r01*x14965*x14968))+(((-1.0)*r00*x14970*x14974))+((r00*x14972)));
evalcond[4]=(((r00*x14965*x14969))+(((-1.0)*r01*x14972*x14974))+(((-1.0)*r02*sj3*x14975))+((r00*x14968))+((r01*x14970)));
evalcond[5]=(((r22*x14977))+x14971+((cj1*sj2))+((r20*x14972))+((r21*x14965*x14968))+(((-1.0)*r20*x14970*x14974))+((r21*x14969)));
evalcond[6]=(x14966+((r12*x14977))+((r11*x14965*x14968))+(((-1.0)*r10*x14970*x14974))+(((-1.0)*x14973))+((r11*x14969))+((r10*x14972)));
evalcond[7]=((((-1.0)*r22*sj3*x14975))+x14966+(((-1.0)*x14973))+(((-1.0)*r21*x14972*x14974))+((r20*x14965*x14969))+((r20*x14968))+((r21*x14970)));
evalcond[8]=(((r10*x14965*x14969))+(((-1.0)*sj2*x14967))+(((-1.0)*x14971))+(((-1.0)*r11*x14972*x14974))+((r11*x14970))+((r10*x14968))+(((-1.0)*r12*sj3*x14975)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x14978 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*gconst53*r10))+((gconst52*r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x14978.valid){
continue;
}
CheckValue<IkReal> x14979=IKPowWithIntegerCheck(IKsign((((gconst53*r21))+((gconst52*r20)))),-1);
if(!x14979.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x14978.value)+(((1.5707963267949)*(x14979.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x14980=IKsin(j4);
IkReal x14981=IKcos(j4);
IkReal x14982=(sj1*sj2);
IkReal x14983=((1.0)*cj1);
IkReal x14984=(cj3*gconst52);
IkReal x14985=(gconst53*sj3);
IkReal x14986=(cj3*gconst53);
IkReal x14987=(cj2*sj1);
IkReal x14988=(gconst52*sj3);
IkReal x14989=(cj2*x14983);
IkReal x14990=((1.0)*x14981);
IkReal x14991=((1.0)*x14980);
IkReal x14992=(gconst52*x14980);
IkReal x14993=(cj3*x14980);
evalcond[0]=(((r21*x14992))+(((-1.0)*gconst53*r20*x14991))+(((-1.0)*r22*x14990)));
evalcond[1]=((((-1.0)*r12*x14990))+(((-1.0)*gconst53*r10*x14991))+((r11*x14992)));
evalcond[2]=((-1.0)+(((-1.0)*gconst53*r00*x14991))+((r01*x14992))+(((-1.0)*r02*x14990)));
evalcond[3]=(((r02*x14993))+((r00*x14988))+((r01*x14985))+(((-1.0)*r00*x14986*x14990))+((r01*x14981*x14984)));
evalcond[4]=((((-1.0)*r01*x14988*x14990))+(((-1.0)*r02*sj3*x14991))+((r00*x14984))+((r01*x14986))+((r00*x14981*x14985)));
evalcond[5]=(((r20*x14988))+x14987+((cj1*sj2))+((r21*x14985))+(((-1.0)*r20*x14986*x14990))+((r21*x14981*x14984))+((r22*x14993)));
evalcond[6]=((((-1.0)*r10*x14986*x14990))+((r11*x14981*x14984))+x14982+((r10*x14988))+((r12*x14993))+((r11*x14985))+(((-1.0)*x14989)));
evalcond[7]=(((r20*x14984))+((r20*x14981*x14985))+(((-1.0)*r21*x14988*x14990))+(((-1.0)*r22*sj3*x14991))+x14982+((r21*x14986))+(((-1.0)*x14989)));
evalcond[8]=((((-1.0)*sj2*x14983))+((r10*x14984))+(((-1.0)*r12*sj3*x14991))+((r11*x14986))+(((-1.0)*x14987))+((r10*x14981*x14985))+(((-1.0)*r11*x14988*x14990)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r21))+(IKabs(r20)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x14994=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14994);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14994);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14995=(r01*sj5);
IkReal x14996=((1.0)*cj5*r00);
j4eval[0]=((((-1.0)*x14996))+x14995);
j4eval[1]=((((-1.0)*cj3*x14996))+((cj3*x14995)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x14997=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x14997);
rxp1_0=(pz*r11);
rxp1_1=(r01*x14997);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
IkReal x14998=(cj5*r00);
IkReal x14999=(r01*sj5);
j4eval[0]=(x14999+(((-1.0)*x14998)));
j4eval[1]=(((sj3*x14998))+(((-1.0)*sj3*x14999)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15000=((-1.0)*pz);
sj0=1.0;
cj0=0;
j0=1.5707963267949;
r20=0;
r21=0;
r02=0;
r12=0;
npx=(((px*r00))+((py*r10)));
npy=(((px*r01))+((py*r11)));
npz=(pz*r22);
rxp0_0=(pz*r10);
rxp0_1=(r00*x15000);
rxp1_0=(pz*r11);
rxp1_1=(r01*x15000);
rxp2_0=((-1.0)*py*r22);
rxp2_1=(px*r22);
rxp2_2=0;
j4eval[0]=cj3;
j4eval[1]=r22;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15001=((1.0)*r00);
CheckValue<IkReal> x15002=IKPowWithIntegerCheck(cj3,-1);
if(!x15002.valid){
continue;
}
CheckValue<IkReal> x15003=IKPowWithIntegerCheck(r22,-1);
if(!x15003.valid){
continue;
}
CheckValue<IkReal> x15004=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15001))),-1);
if(!x15004.valid){
continue;
}
if( IKabs(((x15002.value)*(x15003.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15004.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15001)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15002.value)*(x15003.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))))+IKsqr(((x15004.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15001))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15002.value)*(x15003.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj1*sj2))))), ((x15004.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15001))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15005=IKsin(j4);
IkReal x15006=IKcos(j4);
IkReal x15007=(sj1*sj2);
IkReal x15008=(cj5*sj3);
IkReal x15009=(r11*sj5);
IkReal x15010=(cj3*cj5);
IkReal x15011=((1.0)*cj1);
IkReal x15012=(cj3*sj5);
IkReal x15013=(sj3*sj5);
IkReal x15014=(cj2*sj1);
IkReal x15015=(r01*sj5);
IkReal x15016=((1.0)*sj3);
IkReal x15017=(cj2*x15011);
IkReal x15018=(r10*x15006);
IkReal x15019=(r22*x15005);
IkReal x15020=(cj3*x15006);
IkReal x15021=((1.0)*cj5*x15005);
evalcond[0]=((-1.0)*r22*x15006);
evalcond[1]=(((cj3*x15019))+((cj1*sj2))+x15014);
evalcond[2]=((((-1.0)*r10*x15021))+((x15005*x15009)));
evalcond[3]=((-1.0)+((x15005*x15015))+(((-1.0)*r00*x15021)));
evalcond[4]=((((-1.0)*x15017))+x15007+(((-1.0)*x15016*x15019)));
evalcond[5]=(((r01*x15008))+((r01*x15006*x15012))+((r00*x15013))+(((-1.0)*r00*x15006*x15010)));
evalcond[6]=(((r00*x15006*x15008))+(((-1.0)*r01*x15006*x15013))+((r00*x15012))+((r01*x15010)));
evalcond[7]=((((-1.0)*x15017))+((r10*x15013))+x15007+((r11*x15008))+((x15009*x15020))+(((-1.0)*x15010*x15018)));
evalcond[8]=((((-1.0)*x15014))+((r10*x15012))+((r11*x15010))+((x15008*x15018))+(((-1.0)*sj2*x15011))+(((-1.0)*x15006*x15009*x15016)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15022=((1.0)*cj3);
IkReal x15023=(cj5*r00);
IkReal x15024=(r01*sj5);
CheckValue<IkReal> x15025=IKPowWithIntegerCheck(((((-1.0)*x15023))+x15024),-1);
if(!x15025.valid){
continue;
}
CheckValue<IkReal> x15026=IKPowWithIntegerCheck((((sj3*x15023))+(((-1.0)*sj3*x15024))),-1);
if(!x15026.valid){
continue;
}
if( IKabs(x15025.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15026.value)*(((((-1.0)*r00*sj5*x15022))+(((-1.0)*cj5*r01*x15022)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15025.value)+IKsqr(((x15026.value)*(((((-1.0)*r00*sj5*x15022))+(((-1.0)*cj5*r01*x15022))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15025.value, ((x15026.value)*(((((-1.0)*r00*sj5*x15022))+(((-1.0)*cj5*r01*x15022))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15027=IKsin(j4);
IkReal x15028=IKcos(j4);
IkReal x15029=(sj1*sj2);
IkReal x15030=(cj5*sj3);
IkReal x15031=(r11*sj5);
IkReal x15032=(cj3*cj5);
IkReal x15033=((1.0)*cj1);
IkReal x15034=(cj3*sj5);
IkReal x15035=(sj3*sj5);
IkReal x15036=(cj2*sj1);
IkReal x15037=(r01*sj5);
IkReal x15038=((1.0)*sj3);
IkReal x15039=(cj2*x15033);
IkReal x15040=(r10*x15028);
IkReal x15041=(r22*x15027);
IkReal x15042=(cj3*x15028);
IkReal x15043=((1.0)*cj5*x15027);
evalcond[0]=((-1.0)*r22*x15028);
evalcond[1]=(((cj3*x15041))+((cj1*sj2))+x15036);
evalcond[2]=(((x15027*x15031))+(((-1.0)*r10*x15043)));
evalcond[3]=((-1.0)+(((-1.0)*r00*x15043))+((x15027*x15037)));
evalcond[4]=((((-1.0)*x15039))+x15029+(((-1.0)*x15038*x15041)));
evalcond[5]=(((r00*x15035))+((r01*x15030))+((r01*x15028*x15034))+(((-1.0)*r00*x15028*x15032)));
evalcond[6]=(((r00*x15034))+((r01*x15032))+((r00*x15028*x15030))+(((-1.0)*r01*x15028*x15035)));
evalcond[7]=((((-1.0)*x15039))+((x15031*x15042))+(((-1.0)*x15032*x15040))+x15029+((r10*x15035))+((r11*x15030)));
evalcond[8]=((((-1.0)*sj2*x15033))+(((-1.0)*x15036))+((r10*x15034))+((r11*x15032))+(((-1.0)*x15028*x15031*x15038))+((x15030*x15040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15044=((1.0)*sj3);
IkReal x15045=(r01*sj5);
IkReal x15046=((1.0)*cj5*r00);
CheckValue<IkReal> x15047=IKPowWithIntegerCheck(((((-1.0)*x15046))+x15045),-1);
if(!x15047.valid){
continue;
}
CheckValue<IkReal> x15048=IKPowWithIntegerCheck((((cj3*x15045))+(((-1.0)*cj3*x15046))),-1);
if(!x15048.valid){
continue;
}
if( IKabs(x15047.value) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15048.value)*(((((-1.0)*cj5*r01*x15044))+(((-1.0)*r00*sj5*x15044)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(x15047.value)+IKsqr(((x15048.value)*(((((-1.0)*cj5*r01*x15044))+(((-1.0)*r00*sj5*x15044))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(x15047.value, ((x15048.value)*(((((-1.0)*cj5*r01*x15044))+(((-1.0)*r00*sj5*x15044))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15049=IKsin(j4);
IkReal x15050=IKcos(j4);
IkReal x15051=(sj1*sj2);
IkReal x15052=(cj5*sj3);
IkReal x15053=(r11*sj5);
IkReal x15054=(cj3*cj5);
IkReal x15055=((1.0)*cj1);
IkReal x15056=(cj3*sj5);
IkReal x15057=(sj3*sj5);
IkReal x15058=(cj2*sj1);
IkReal x15059=(r01*sj5);
IkReal x15060=((1.0)*sj3);
IkReal x15061=(cj2*x15055);
IkReal x15062=(r10*x15050);
IkReal x15063=(r22*x15049);
IkReal x15064=(cj3*x15050);
IkReal x15065=((1.0)*cj5*x15049);
evalcond[0]=((-1.0)*r22*x15050);
evalcond[1]=(((cj1*sj2))+x15058+((cj3*x15063)));
evalcond[2]=((((-1.0)*r10*x15065))+((x15049*x15053)));
evalcond[3]=((-1.0)+((x15049*x15059))+(((-1.0)*r00*x15065)));
evalcond[4]=(x15051+(((-1.0)*x15060*x15063))+(((-1.0)*x15061)));
evalcond[5]=(((r01*x15052))+(((-1.0)*r00*x15050*x15054))+((r01*x15050*x15056))+((r00*x15057)));
evalcond[6]=(((r01*x15054))+(((-1.0)*r01*x15050*x15057))+((r00*x15050*x15052))+((r00*x15056)));
evalcond[7]=(((r10*x15057))+((x15053*x15064))+x15051+((r11*x15052))+(((-1.0)*x15061))+(((-1.0)*x15054*x15062)));
evalcond[8]=((((-1.0)*x15058))+((r10*x15056))+((x15052*x15062))+(((-1.0)*sj2*x15055))+((r11*x15054))+(((-1.0)*x15050*x15053*x15060)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15066=cj5*cj5;
IkReal x15067=(cj3*r20);
IkReal x15068=(r21*sj3);
IkReal x15069=((1.0)*cj3);
IkReal x15070=(r01*r21);
IkReal x15071=(r01*sj3);
IkReal x15072=(r00*sj5);
IkReal x15073=(cj5*r01*sj5);
IkReal x15074=((1.0)*x15066);
CheckValue<IkReal> x15075=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15069*x15070))+((cj3*x15066*x15070))+((cj3*cj5*r21*x15072))+(((-1.0)*r02*r22*x15069))+((x15067*x15073))+(((-1.0)*r00*x15067*x15074)))),-1);
if(!x15075.valid){
continue;
}
CheckValue<IkReal> x15076 = IKatan2WithCheck(IkReal((((r22*sj3*x15072))+((cj5*r22*x15071)))),IkReal((((r00*x15068))+(((-1.0)*r00*x15068*x15074))+((x15068*x15073))+(((-1.0)*cj5*r20*sj3*x15072))+(((-1.0)*r20*x15071*x15074)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15076.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15075.value)))+(x15076.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15077=IKsin(j4);
IkReal x15078=IKcos(j4);
IkReal x15079=(sj1*sj2);
IkReal x15080=(r11*sj5);
IkReal x15081=(cj5*r10);
IkReal x15082=(cj5*r01);
IkReal x15083=(cj5*r00);
IkReal x15084=((1.0)*cj1);
IkReal x15085=(cj3*sj5);
IkReal x15086=(r21*sj5);
IkReal x15087=(cj5*sj3);
IkReal x15088=(sj3*sj5);
IkReal x15089=(cj2*sj1);
IkReal x15090=(r01*sj5);
IkReal x15091=(cj3*cj5);
IkReal x15092=(cj5*r20);
IkReal x15093=(cj2*x15084);
IkReal x15094=((1.0)*x15078);
IkReal x15095=((1.0)*x15077);
IkReal x15096=(cj3*x15078);
IkReal x15097=(sj3*x15078);
IkReal x15098=(cj3*x15077);
evalcond[0]=((((-1.0)*r22*x15094))+(((-1.0)*x15092*x15095))+((x15077*x15086)));
evalcond[1]=((((-1.0)*x15081*x15095))+(((-1.0)*r12*x15094))+((x15077*x15080)));
evalcond[2]=((-1.0)+((x15077*x15090))+(((-1.0)*r02*x15094))+(((-1.0)*x15083*x15095)));
evalcond[3]=(((sj3*x15082))+((r02*x15098))+((r00*x15088))+((r01*x15078*x15085))+(((-1.0)*cj3*x15083*x15094)));
evalcond[4]=((((-1.0)*r02*sj3*x15095))+((x15083*x15097))+((r00*x15085))+((cj3*x15082))+(((-1.0)*r01*x15088*x15094)));
evalcond[5]=(((cj1*sj2))+x15089+((r21*x15087))+((r20*x15088))+(((-1.0)*r20*x15091*x15094))+((r22*x15098))+((r21*x15078*x15085)));
evalcond[6]=(x15079+((x15080*x15096))+(((-1.0)*cj3*x15081*x15094))+((r12*x15098))+((r11*x15087))+(((-1.0)*x15093))+((r10*x15088)));
evalcond[7]=((((-1.0)*r22*sj3*x15095))+(((-1.0)*sj3*x15086*x15094))+((r21*x15091))+((r20*x15078*x15087))+x15079+((r20*x15085))+(((-1.0)*x15093)));
evalcond[8]=((((-1.0)*sj3*x15080*x15094))+(((-1.0)*r12*sj3*x15095))+(((-1.0)*sj2*x15084))+((r11*x15091))+((x15081*x15097))+(((-1.0)*x15089))+((r10*x15085)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15099=((1.0)*cj5);
CheckValue<IkReal> x15100=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15099)))),-1);
if(!x15100.valid){
continue;
}
CheckValue<IkReal> x15101 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*r20*x15099)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15101.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15100.value)))+(x15101.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15102=IKsin(j4);
IkReal x15103=IKcos(j4);
IkReal x15104=(sj1*sj2);
IkReal x15105=(r11*sj5);
IkReal x15106=(cj5*r10);
IkReal x15107=(cj5*r01);
IkReal x15108=(cj5*r00);
IkReal x15109=((1.0)*cj1);
IkReal x15110=(cj3*sj5);
IkReal x15111=(r21*sj5);
IkReal x15112=(cj5*sj3);
IkReal x15113=(sj3*sj5);
IkReal x15114=(cj2*sj1);
IkReal x15115=(r01*sj5);
IkReal x15116=(cj3*cj5);
IkReal x15117=(cj5*r20);
IkReal x15118=(cj2*x15109);
IkReal x15119=((1.0)*x15103);
IkReal x15120=((1.0)*x15102);
IkReal x15121=(cj3*x15103);
IkReal x15122=(sj3*x15103);
IkReal x15123=(cj3*x15102);
evalcond[0]=((((-1.0)*x15117*x15120))+(((-1.0)*r22*x15119))+((x15102*x15111)));
evalcond[1]=((((-1.0)*x15106*x15120))+((x15102*x15105))+(((-1.0)*r12*x15119)));
evalcond[2]=((-1.0)+(((-1.0)*x15108*x15120))+(((-1.0)*r02*x15119))+((x15102*x15115)));
evalcond[3]=(((r01*x15103*x15110))+(((-1.0)*cj3*x15108*x15119))+((r00*x15113))+((r02*x15123))+((sj3*x15107)));
evalcond[4]=((((-1.0)*r01*x15113*x15119))+(((-1.0)*r02*sj3*x15120))+((x15108*x15122))+((r00*x15110))+((cj3*x15107)));
evalcond[5]=(((r20*x15113))+((cj1*sj2))+(((-1.0)*r20*x15116*x15119))+((r22*x15123))+x15114+((r21*x15103*x15110))+((r21*x15112)));
evalcond[6]=(((r10*x15113))+((x15105*x15121))+(((-1.0)*x15118))+((r11*x15112))+x15104+(((-1.0)*cj3*x15106*x15119))+((r12*x15123)));
evalcond[7]=(((r20*x15110))+(((-1.0)*r22*sj3*x15120))+((r20*x15103*x15112))+(((-1.0)*x15118))+(((-1.0)*sj3*x15111*x15119))+x15104+((r21*x15116)));
evalcond[8]=((((-1.0)*x15114))+((r10*x15110))+(((-1.0)*r12*sj3*x15120))+((r11*x15116))+(((-1.0)*sj3*x15105*x15119))+(((-1.0)*sj2*x15109))+((x15106*x15122)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15124=IKPowWithIntegerCheck(IKsign((((cj5*r21))+((r20*sj5)))),-1);
if(!x15124.valid){
continue;
}
CheckValue<IkReal> x15125 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*cj5*r10))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15125.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15124.value)))+(x15125.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15126=IKsin(j4);
IkReal x15127=IKcos(j4);
IkReal x15128=(sj1*sj2);
IkReal x15129=(r11*sj5);
IkReal x15130=(cj5*r10);
IkReal x15131=(cj5*r01);
IkReal x15132=(cj5*r00);
IkReal x15133=((1.0)*cj1);
IkReal x15134=(cj3*sj5);
IkReal x15135=(r21*sj5);
IkReal x15136=(cj5*sj3);
IkReal x15137=(sj3*sj5);
IkReal x15138=(cj2*sj1);
IkReal x15139=(r01*sj5);
IkReal x15140=(cj3*cj5);
IkReal x15141=(cj5*r20);
IkReal x15142=(cj2*x15133);
IkReal x15143=((1.0)*x15127);
IkReal x15144=((1.0)*x15126);
IkReal x15145=(cj3*x15127);
IkReal x15146=(sj3*x15127);
IkReal x15147=(cj3*x15126);
evalcond[0]=((((-1.0)*x15141*x15144))+((x15126*x15135))+(((-1.0)*r22*x15143)));
evalcond[1]=((((-1.0)*x15130*x15144))+((x15126*x15129))+(((-1.0)*r12*x15143)));
evalcond[2]=((-1.0)+(((-1.0)*r02*x15143))+((x15126*x15139))+(((-1.0)*x15132*x15144)));
evalcond[3]=(((sj3*x15131))+((r00*x15137))+((r02*x15147))+(((-1.0)*cj3*x15132*x15143))+((r01*x15127*x15134)));
evalcond[4]=((((-1.0)*r01*x15137*x15143))+((r00*x15134))+((x15132*x15146))+(((-1.0)*r02*sj3*x15144))+((cj3*x15131)));
evalcond[5]=(((r22*x15147))+((r20*x15137))+((r21*x15136))+((cj1*sj2))+x15138+((r21*x15127*x15134))+(((-1.0)*r20*x15140*x15143)));
evalcond[6]=(((r12*x15147))+x15128+(((-1.0)*x15142))+((r10*x15137))+((r11*x15136))+(((-1.0)*cj3*x15130*x15143))+((x15129*x15145)));
evalcond[7]=(((r20*x15134))+(((-1.0)*r22*sj3*x15144))+((r20*x15127*x15136))+(((-1.0)*sj3*x15135*x15143))+x15128+((r21*x15140))+(((-1.0)*x15142)));
evalcond[8]=((((-1.0)*sj3*x15129*x15143))+(((-1.0)*r12*sj3*x15144))+((r11*x15140))+(((-1.0)*x15138))+((x15130*x15146))+((r10*x15134))+(((-1.0)*sj2*x15133)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j0)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15148=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15148;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15148);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15149=((1.0)*cj5);
IkReal x15150=((((-1.0)*r21*x15149))+(((-1.0)*r20*sj5)));
j4eval[0]=x15150;
j4eval[1]=((IKabs(((((-1.0)*r10*x15149))+((r11*sj5)))))+(IKabs(r12)));
j4eval[2]=IKsign(x15150);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
IkReal x15151=cj5*cj5;
IkReal x15152=(cj3*r01);
IkReal x15153=(cj5*sj5);
IkReal x15154=((1.0)*cj3);
IkReal x15155=(((cj3*r00*r21*x15153))+(((-1.0)*r00*r20*x15151*x15154))+(((-1.0)*r02*r22*x15154))+((r20*x15152*x15153))+((r21*x15151*x15152))+(((-1.0)*r21*x15152)));
j4eval[0]=x15155;
j4eval[1]=IKsign(x15155);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15156=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15156;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15156);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15157=((1.0)*cj5);
IkReal x15158=((((-1.0)*r21*x15157))+(((-1.0)*r20*sj5)));
j4eval[0]=x15158;
j4eval[1]=((IKabs(r12))+(IKabs(((((-1.0)*r10*x15157))+((r11*sj5))))));
j4eval[2]=IKsign(x15158);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=1.0;
cj3=0;
j3=1.5707963267949;
IkReal x15159=cj5*cj5;
IkReal x15160=r01*r01;
IkReal x15161=(cj5*r00);
IkReal x15162=(r01*sj5);
IkReal x15163=(((x15159*(r00*r00)))+x15160+(((-2.0)*x15161*x15162))+(r02*r02)+(((-1.0)*x15159*x15160)));
j4eval[0]=x15163;
j4eval[1]=((IKabs(((((-1.0)*x15162))+x15161)))+(IKabs(r02)));
j4eval[2]=IKsign(x15163);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15164=cj5*cj5;
IkReal x15165=r01*r01;
IkReal x15166=(r01*sj5);
IkReal x15167=(cj5*r00);
CheckValue<IkReal> x15168 = IKatan2WithCheck(IkReal(((((-1.0)*x15166))+x15167)),IkReal(r02),IKFAST_ATAN2_MAGTHRESH);
if(!x15168.valid){
continue;
}
CheckValue<IkReal> x15169=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15164*x15165))+((x15164*(r00*r00)))+x15165+(((-2.0)*x15166*x15167))+(r02*r02))),-1);
if(!x15169.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15168.value)+(((1.5707963267949)*(x15169.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15170=IKsin(j4);
IkReal x15171=IKcos(j4);
IkReal x15172=(cj5*r10);
IkReal x15173=(r01*sj5);
IkReal x15174=(cj5*r00);
IkReal x15175=(cj5*r20);
IkReal x15176=((1.0)*x15171);
IkReal x15177=((1.0)*x15170);
IkReal x15178=(sj5*x15170);
evalcond[0]=((((-1.0)*x15175*x15177))+((r21*x15178))+(((-1.0)*r22*x15176)));
evalcond[1]=(((r11*x15178))+(((-1.0)*r12*x15176))+(((-1.0)*x15172*x15177)));
evalcond[2]=((((-1.0)*x15173*x15176))+((x15171*x15174))+(((-1.0)*r02*x15177)));
evalcond[3]=((1.0)+((x15170*x15173))+(((-1.0)*x15174*x15177))+(((-1.0)*r02*x15176)));
evalcond[4]=(((cj2*sj1))+((x15171*x15172))+((cj1*sj2))+(((-1.0)*r11*sj5*x15176))+(((-1.0)*r12*x15177)));
evalcond[5]=(((x15171*x15175))+(((-1.0)*r21*sj5*x15176))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15177)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15179=((1.0)*cj5);
CheckValue<IkReal> x15180 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15179)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15180.valid){
continue;
}
CheckValue<IkReal> x15181=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15179))+(((-1.0)*r20*sj5)))),-1);
if(!x15181.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15180.value)+(((1.5707963267949)*(x15181.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15182=IKsin(j4);
IkReal x15183=IKcos(j4);
IkReal x15184=(cj5*r10);
IkReal x15185=(r01*sj5);
IkReal x15186=(cj5*r00);
IkReal x15187=(cj5*r20);
IkReal x15188=((1.0)*x15183);
IkReal x15189=((1.0)*x15182);
IkReal x15190=(sj5*x15182);
evalcond[0]=(((r21*x15190))+(((-1.0)*x15187*x15189))+(((-1.0)*r22*x15188)));
evalcond[1]=(((r11*x15190))+(((-1.0)*x15184*x15189))+(((-1.0)*r12*x15188)));
evalcond[2]=((((-1.0)*x15185*x15188))+(((-1.0)*r02*x15189))+((x15183*x15186)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15188))+((x15182*x15185))+(((-1.0)*x15186*x15189)));
evalcond[4]=(((cj2*sj1))+(((-1.0)*r11*sj5*x15188))+((cj1*sj2))+((x15183*x15184))+(((-1.0)*r12*x15189)));
evalcond[5]=((((-1.0)*r21*sj5*x15188))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15183*x15187))+(((-1.0)*r22*x15189)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15191 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15191.valid){
continue;
}
CheckValue<IkReal> x15192=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15192.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15191.value)+(((1.5707963267949)*(x15192.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15193=IKsin(j4);
IkReal x15194=IKcos(j4);
IkReal x15195=(cj5*r10);
IkReal x15196=(r01*sj5);
IkReal x15197=(cj5*r00);
IkReal x15198=(cj5*r20);
IkReal x15199=((1.0)*x15194);
IkReal x15200=((1.0)*x15193);
IkReal x15201=(sj5*x15193);
evalcond[0]=((((-1.0)*x15198*x15200))+(((-1.0)*r22*x15199))+((r21*x15201)));
evalcond[1]=((((-1.0)*r12*x15199))+((r11*x15201))+(((-1.0)*x15195*x15200)));
evalcond[2]=((((-1.0)*x15196*x15199))+((x15194*x15197))+(((-1.0)*r02*x15200)));
evalcond[3]=((1.0)+((x15193*x15196))+(((-1.0)*x15197*x15200))+(((-1.0)*r02*x15199)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+(((-1.0)*r11*sj5*x15199))+((x15194*x15195))+(((-1.0)*r12*x15200)));
evalcond[5]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r22*x15200))+((x15194*x15198))+(((-1.0)*r21*sj5*x15199)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15202=(((cj5*r11))+((r10*sj5)));
j4eval[0]=x15202;
j4eval[1]=((IKabs((((r21*sj5))+(((-1.0)*cj5*r20)))))+(IKabs(r22)));
j4eval[2]=IKsign(x15202);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15203=((1.0)*cj5);
IkReal x15204=((((-1.0)*r21*x15203))+(((-1.0)*r20*sj5)));
j4eval[0]=x15204;
j4eval[1]=((IKabs(r12))+(IKabs((((r11*sj5))+(((-1.0)*r10*x15203))))));
j4eval[2]=IKsign(x15204);
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
IkReal x15205=cj5*cj5;
IkReal x15206=r01*r01;
IkReal x15207=(r01*sj5);
IkReal x15208=(cj5*r00);
IkReal x15209=((((2.0)*x15207*x15208))+(((-1.0)*x15206))+(((-1.0)*(r02*r02)))+((x15205*x15206))+(((-1.0)*x15205*(r00*r00))));
j4eval[0]=x15209;
j4eval[1]=IKsign(x15209);
j4eval[2]=((IKabs(r02))+(IKabs(((((-1.0)*x15208))+x15207))));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15210=cj5*cj5;
IkReal x15211=r01*r01;
IkReal x15212=(r01*sj5);
IkReal x15213=(cj5*r00);
CheckValue<IkReal> x15214 = IKatan2WithCheck(IkReal(((((-1.0)*x15213))+x15212)),IkReal(((-1.0)*r02)),IKFAST_ATAN2_MAGTHRESH);
if(!x15214.valid){
continue;
}
CheckValue<IkReal> x15215=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15211))+(((-1.0)*(r02*r02)))+((x15210*x15211))+(((2.0)*x15212*x15213))+(((-1.0)*x15210*(r00*r00))))),-1);
if(!x15215.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15214.value)+(((1.5707963267949)*(x15215.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15216=IKcos(j4);
IkReal x15217=IKsin(j4);
IkReal x15218=(cj5*r00);
IkReal x15219=(cj5*r10);
IkReal x15220=(r21*sj5);
IkReal x15221=(cj5*r20);
IkReal x15222=((1.0)*x15216);
IkReal x15223=((1.0)*x15217);
IkReal x15224=(sj5*x15217);
IkReal x15225=(sj5*x15216);
evalcond[0]=((((-1.0)*x15218*x15222))+((r02*x15217))+((r01*x15225)));
evalcond[1]=((((-1.0)*x15221*x15223))+(((-1.0)*r22*x15222))+((x15217*x15220)));
evalcond[2]=((((-1.0)*r12*x15222))+(((-1.0)*x15219*x15223))+((r11*x15224)));
evalcond[3]=((1.0)+(((-1.0)*r02*x15222))+(((-1.0)*x15218*x15223))+((r01*x15224)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15217))+(((-1.0)*x15219*x15222))+((r11*x15225)));
evalcond[5]=((((-1.0)*x15221*x15222))+((x15216*x15220))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15226=((1.0)*cj5);
CheckValue<IkReal> x15227=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15226))+(((-1.0)*r20*sj5)))),-1);
if(!x15227.valid){
continue;
}
CheckValue<IkReal> x15228 = IKatan2WithCheck(IkReal(r12),IkReal((((r11*sj5))+(((-1.0)*r10*x15226)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15228.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15227.value)))+(x15228.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15229=IKcos(j4);
IkReal x15230=IKsin(j4);
IkReal x15231=(cj5*r00);
IkReal x15232=(cj5*r10);
IkReal x15233=(r21*sj5);
IkReal x15234=(cj5*r20);
IkReal x15235=((1.0)*x15229);
IkReal x15236=((1.0)*x15230);
IkReal x15237=(sj5*x15230);
IkReal x15238=(sj5*x15229);
evalcond[0]=(((r02*x15230))+((r01*x15238))+(((-1.0)*x15231*x15235)));
evalcond[1]=((((-1.0)*r22*x15235))+((x15230*x15233))+(((-1.0)*x15234*x15236)));
evalcond[2]=((((-1.0)*x15232*x15236))+(((-1.0)*r12*x15235))+((r11*x15237)));
evalcond[3]=((1.0)+((r01*x15237))+(((-1.0)*x15231*x15236))+(((-1.0)*r02*x15235)));
evalcond[4]=((((-1.0)*x15232*x15235))+((cj2*sj1))+((cj1*sj2))+((r12*x15230))+((r11*x15238)));
evalcond[5]=(((x15229*x15233))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((r22*x15230))+(((-1.0)*x15234*x15235)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15239 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15239.valid){
continue;
}
CheckValue<IkReal> x15240=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15240.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15239.value)+(((1.5707963267949)*(x15240.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x15241=IKcos(j4);
IkReal x15242=IKsin(j4);
IkReal x15243=(cj5*r00);
IkReal x15244=(cj5*r10);
IkReal x15245=(r21*sj5);
IkReal x15246=(cj5*r20);
IkReal x15247=((1.0)*x15241);
IkReal x15248=((1.0)*x15242);
IkReal x15249=(sj5*x15242);
IkReal x15250=(sj5*x15241);
evalcond[0]=(((r01*x15250))+((r02*x15242))+(((-1.0)*x15243*x15247)));
evalcond[1]=((((-1.0)*x15246*x15248))+(((-1.0)*r22*x15247))+((x15242*x15245)));
evalcond[2]=((((-1.0)*r12*x15247))+(((-1.0)*x15244*x15248))+((r11*x15249)));
evalcond[3]=((1.0)+((r01*x15249))+(((-1.0)*r02*x15247))+(((-1.0)*x15243*x15248)));
evalcond[4]=(((cj2*sj1))+((cj1*sj2))+((r12*x15242))+((r11*x15250))+(((-1.0)*x15244*x15247)));
evalcond[5]=((((-1.0)*x15246*x15247))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((x15241*x15245))+((r22*x15242)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15252 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15252)==0){
continue;
}
IkReal x15251=pow(x15252,-0.5);
CheckValue<IkReal> x15253 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15253.valid){
continue;
}
IkReal gconst60=((-1.0)*(x15253.value));
IkReal gconst61=((-1.0)*r11*x15251);
IkReal gconst62=(r10*x15251);
CheckValue<IkReal> x15254 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15254.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15254.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15257 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15257.valid){
continue;
}
IkReal x15255=((-1.0)*(x15257.value));
IkReal x15256=x15251;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15255;
IkReal gconst60=x15255;
IkReal gconst61=((-1.0)*r11*x15256);
IkReal gconst62=(r10*x15256);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
CheckValue<IkReal> x15260 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15260.valid){
continue;
}
IkReal x15258=((-1.0)*(x15260.value));
IkReal x15259=x15251;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst61;
cj5=gconst62;
j5=x15258;
IkReal gconst60=x15258;
IkReal gconst61=((-1.0)*r11*x15259);
IkReal gconst62=(r10*x15259);
CheckValue<IkReal> x15268=IKPowWithIntegerCheck(((1.0)+(((-1.0)*(r12*r12)))),-1);
if(!x15268.valid){
continue;
}
IkReal x15261=x15268.value;
IkReal x15262=(sj3*x15261);
IkReal x15263=(r20*x15262);
IkReal x15264=(r00*x15262);
IkReal x15265=(r01*x15262);
IkReal x15266=(r21*x15262);
IkReal x15267=(r10*r11*x15262);
j4eval[0]=IKsign((((r01*r10*r11*x15263))+((r10*r11*r21*x15264))+((r00*x15263*(r10*r10)))+((r21*x15265*(r11*r11)))+((r02*r22*sj3))));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15269=gconst61*gconst61;
IkReal x15270=gconst62*gconst62;
IkReal x15271=(cj3*r01);
IkReal x15272=(r22*sj3);
IkReal x15273=(gconst61*r00);
IkReal x15274=((1.0)*cj3);
IkReal x15275=(gconst62*r01);
IkReal x15276=((1.0)*sj3);
IkReal x15277=(gconst61*gconst62*r20);
IkReal x15278=(r21*x15269);
IkReal x15279=(r20*x15270);
CheckValue<IkReal> x15280 = IKatan2WithCheck(IkReal((((x15272*x15273))+((x15272*x15275)))),IkReal((((r00*sj3*x15278))+(((-1.0)*gconst62*r20*x15273*x15276))+(((-1.0)*r01*x15276*x15279))+((gconst61*r21*sj3*x15275)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15280.valid){
continue;
}
CheckValue<IkReal> x15281=IKPowWithIntegerCheck(IKsign((((x15271*x15277))+(((-1.0)*r02*r22*x15274))+((cj3*gconst62*r21*x15273))+(((-1.0)*x15271*x15278))+(((-1.0)*r00*x15274*x15279)))),-1);
if(!x15281.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15280.value)+(((1.5707963267949)*(x15281.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15282=IKsin(j4);
IkReal x15283=IKcos(j4);
IkReal x15284=(cj2*sj1);
IkReal x15285=(cj1*sj2);
IkReal x15286=(gconst61*sj3);
IkReal x15287=(cj3*gconst61);
IkReal x15288=(cj3*gconst62);
IkReal x15289=(sj1*sj2);
IkReal x15290=(gconst62*sj3);
IkReal x15291=(cj1*cj2);
IkReal x15292=((1.0)*x15283);
IkReal x15293=((1.0)*x15282);
IkReal x15294=(gconst61*x15282);
IkReal x15295=(cj3*x15282);
IkReal x15296=(x15285+x15284);
evalcond[0]=((((-1.0)*r22*x15292))+((r21*x15294))+(((-1.0)*gconst62*r20*x15293)));
evalcond[1]=(((r11*x15294))+(((-1.0)*gconst62*r10*x15293))+(((-1.0)*r12*x15292)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15293))+((r01*x15294))+(((-1.0)*r02*x15292)));
evalcond[3]=(((r00*x15286))+(((-1.0)*r00*x15288*x15292))+((r01*x15283*x15287))+((r01*x15290))+((r02*x15295)));
evalcond[4]=(((r01*x15288))+((r00*x15287))+(((-1.0)*r02*sj3*x15293))+((r00*x15283*x15290))+(((-1.0)*r01*x15286*x15292)));
evalcond[5]=(x15296+((r21*x15290))+((r22*x15295))+((r20*x15286))+((r21*x15283*x15287))+(((-1.0)*r20*x15288*x15292)));
evalcond[6]=(((r11*x15283*x15287))+((r11*x15290))+x15291+(((-1.0)*r10*x15288*x15292))+((r12*x15295))+((r10*x15286))+(((-1.0)*x15289)));
evalcond[7]=(((r10*x15283*x15290))+x15296+((r10*x15287))+(((-1.0)*r11*x15286*x15292))+((r11*x15288))+(((-1.0)*r12*sj3*x15293)));
evalcond[8]=((((-1.0)*r21*x15286*x15292))+((r20*x15283*x15290))+(((-1.0)*x15291))+x15289+(((-1.0)*r22*sj3*x15293))+((r20*x15287))+((r21*x15288)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15297=gconst61*gconst61;
IkReal x15298=gconst62*gconst62;
IkReal x15299=(cj3*r22);
IkReal x15300=(gconst62*r01);
IkReal x15301=(gconst61*r00);
IkReal x15302=((1.0)*r20);
IkReal x15303=(cj3*r21);
IkReal x15304=(r21*sj3);
CheckValue<IkReal> x15305 = IKatan2WithCheck(IkReal((((x15299*x15301))+((x15299*x15300)))),IkReal(((((-1.0)*cj3*gconst62*x15301*x15302))+(((-1.0)*cj3*r01*x15298*x15302))+((gconst61*x15300*x15303))+((r00*x15297*x15303)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15305.valid){
continue;
}
CheckValue<IkReal> x15306=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*sj3*x15300*x15302))+((r00*r20*sj3*x15298))+((r01*x15297*x15304))+((r02*r22*sj3))+(((-1.0)*gconst62*x15301*x15304)))),-1);
if(!x15306.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15305.value)+(((1.5707963267949)*(x15306.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15307=IKsin(j4);
IkReal x15308=IKcos(j4);
IkReal x15309=(cj2*sj1);
IkReal x15310=(cj1*sj2);
IkReal x15311=(gconst61*sj3);
IkReal x15312=(cj3*gconst61);
IkReal x15313=(cj3*gconst62);
IkReal x15314=(sj1*sj2);
IkReal x15315=(gconst62*sj3);
IkReal x15316=(cj1*cj2);
IkReal x15317=((1.0)*x15308);
IkReal x15318=((1.0)*x15307);
IkReal x15319=(gconst61*x15307);
IkReal x15320=(cj3*x15307);
IkReal x15321=(x15310+x15309);
evalcond[0]=((((-1.0)*gconst62*r20*x15318))+((r21*x15319))+(((-1.0)*r22*x15317)));
evalcond[1]=(((r11*x15319))+(((-1.0)*gconst62*r10*x15318))+(((-1.0)*r12*x15317)));
evalcond[2]=((1.0)+(((-1.0)*gconst62*r00*x15318))+((r01*x15319))+(((-1.0)*r02*x15317)));
evalcond[3]=(((r01*x15315))+((r00*x15311))+(((-1.0)*r00*x15313*x15317))+((r02*x15320))+((r01*x15308*x15312)));
evalcond[4]=(((r01*x15313))+((r00*x15312))+((r00*x15308*x15315))+(((-1.0)*r01*x15311*x15317))+(((-1.0)*r02*sj3*x15318)));
evalcond[5]=(((r21*x15308*x15312))+((r22*x15320))+x15321+((r21*x15315))+(((-1.0)*r20*x15313*x15317))+((r20*x15311)));
evalcond[6]=(((r11*x15315))+(((-1.0)*x15314))+((r12*x15320))+((r11*x15308*x15312))+x15316+((r10*x15311))+(((-1.0)*r10*x15313*x15317)));
evalcond[7]=(((r11*x15313))+(((-1.0)*r11*x15311*x15317))+x15321+(((-1.0)*r12*sj3*x15318))+((r10*x15308*x15315))+((r10*x15312)));
evalcond[8]=((((-1.0)*x15316))+((r20*x15308*x15315))+x15314+(((-1.0)*r21*x15311*x15317))+(((-1.0)*r22*sj3*x15318))+((r21*x15313))+((r20*x15312)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15322=((1.0)*gconst62);
CheckValue<IkReal> x15323 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst61*r11))+(((-1.0)*r10*x15322)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15323.valid){
continue;
}
CheckValue<IkReal> x15324=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst61*r20))+(((-1.0)*r21*x15322)))),-1);
if(!x15324.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15323.value)+(((1.5707963267949)*(x15324.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15325=IKsin(j4);
IkReal x15326=IKcos(j4);
IkReal x15327=(cj2*sj1);
IkReal x15328=(cj1*sj2);
IkReal x15329=(gconst61*sj3);
IkReal x15330=(cj3*gconst61);
IkReal x15331=(cj3*gconst62);
IkReal x15332=(sj1*sj2);
IkReal x15333=(gconst62*sj3);
IkReal x15334=(cj1*cj2);
IkReal x15335=((1.0)*x15326);
IkReal x15336=((1.0)*x15325);
IkReal x15337=(gconst61*x15325);
IkReal x15338=(cj3*x15325);
IkReal x15339=(x15327+x15328);
evalcond[0]=(((r21*x15337))+(((-1.0)*r22*x15335))+(((-1.0)*gconst62*r20*x15336)));
evalcond[1]=(((r11*x15337))+(((-1.0)*gconst62*r10*x15336))+(((-1.0)*r12*x15335)));
evalcond[2]=((1.0)+((r01*x15337))+(((-1.0)*gconst62*r00*x15336))+(((-1.0)*r02*x15335)));
evalcond[3]=(((r01*x15333))+((r00*x15329))+((r01*x15326*x15330))+(((-1.0)*r00*x15331*x15335))+((r02*x15338)));
evalcond[4]=(((r01*x15331))+((r00*x15330))+(((-1.0)*r02*sj3*x15336))+((r00*x15326*x15333))+(((-1.0)*r01*x15329*x15335)));
evalcond[5]=(x15339+((r21*x15333))+((r21*x15326*x15330))+((r22*x15338))+(((-1.0)*r20*x15331*x15335))+((r20*x15329)));
evalcond[6]=((((-1.0)*x15332))+((r12*x15338))+((r11*x15326*x15330))+((r11*x15333))+x15334+((r10*x15329))+(((-1.0)*r10*x15331*x15335)));
evalcond[7]=(((r11*x15331))+(((-1.0)*r12*sj3*x15336))+x15339+((r10*x15326*x15333))+((r10*x15330))+(((-1.0)*r11*x15329*x15335)));
evalcond[8]=(((r20*x15330))+(((-1.0)*x15334))+x15332+(((-1.0)*r22*sj3*x15336))+((r21*x15331))+((r20*x15326*x15333))+(((-1.0)*r21*x15329*x15335)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15341 = ((1.0)+(((-1.0)*(r12*r12))));
if(IKabs(x15341)==0){
continue;
}
IkReal x15340=pow(x15341,-0.5);
CheckValue<IkReal> x15342 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15342.valid){
continue;
}
IkReal gconst63=((3.14159265358979)+(((-1.0)*(x15342.value))));
IkReal gconst64=((1.0)*r11*x15340);
IkReal gconst65=((-1.0)*r10*x15340);
CheckValue<IkReal> x15343 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15343.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15343.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
CheckValue<IkReal> x15346 = IKatan2WithCheck(IkReal(r11),IkReal(r10),IKFAST_ATAN2_MAGTHRESH);
if(!x15346.valid){
continue;
}
IkReal x15344=((1.0)*(x15346.value));
IkReal x15345=x15340;
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
sj5=gconst64;
cj5=gconst65;
j5=((3.14159265)+(((-1.0)*x15344)));
IkReal gconst63=((3.14159265358979)+(((-1.0)*x15344)));
IkReal gconst64=((1.0)*r11*x15345);
IkReal gconst65=((-1.0)*r10*x15345);
j4eval[0]=1.0;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15347=gconst64*gconst64;
IkReal x15348=gconst65*gconst65;
IkReal x15349=(gconst65*r01);
IkReal x15350=(cj3*r22);
IkReal x15351=(gconst64*r00);
IkReal x15352=(cj3*r21);
IkReal x15353=((1.0)*gconst64*sj3);
IkReal x15354=((1.0)*cj3*r20);
CheckValue<IkReal> x15355=IKPowWithIntegerCheck(IKsign((((r00*r20*sj3*x15348))+(((-1.0)*gconst65*r21*sj3*x15351))+(((-1.0)*r20*x15349*x15353))+((r01*r21*sj3*x15347))+((r02*r22*sj3)))),-1);
if(!x15355.valid){
continue;
}
CheckValue<IkReal> x15356 = IKatan2WithCheck(IkReal((((x15350*x15351))+((x15349*x15350)))),IkReal(((((-1.0)*gconst65*x15351*x15354))+(((-1.0)*r01*x15348*x15354))+((r00*x15347*x15352))+((gconst64*x15349*x15352)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15356.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15355.value)))+(x15356.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15357=IKsin(j4);
IkReal x15358=IKcos(j4);
IkReal x15359=(cj2*sj1);
IkReal x15360=(cj1*sj2);
IkReal x15361=(cj3*gconst64);
IkReal x15362=(gconst65*r21);
IkReal x15363=(sj1*sj2);
IkReal x15364=(gconst65*sj3);
IkReal x15365=(gconst64*sj3);
IkReal x15366=(cj3*gconst65);
IkReal x15367=(cj1*cj2);
IkReal x15368=((1.0)*x15358);
IkReal x15369=((1.0)*x15357);
IkReal x15370=(cj3*x15357);
IkReal x15371=(gconst64*x15357);
IkReal x15372=(x15360+x15359);
evalcond[0]=((((-1.0)*r22*x15368))+((r21*x15371))+(((-1.0)*gconst65*r20*x15369)));
evalcond[1]=((((-1.0)*r12*x15368))+(((-1.0)*gconst65*r10*x15369))+((r11*x15371)));
evalcond[2]=((1.0)+(((-1.0)*gconst65*r00*x15369))+(((-1.0)*r02*x15368))+((r01*x15371)));
evalcond[3]=(((r02*x15370))+((r01*x15358*x15361))+(((-1.0)*r00*x15366*x15368))+((r00*x15365))+((r01*x15364)));
evalcond[4]=(((r00*x15358*x15364))+(((-1.0)*r02*sj3*x15369))+((r00*x15361))+((r01*x15366))+(((-1.0)*r01*x15365*x15368)));
evalcond[5]=(((r21*x15358*x15361))+(((-1.0)*r20*x15366*x15368))+x15372+((r20*x15365))+((sj3*x15362))+((r22*x15370)));
evalcond[6]=(((r10*x15365))+(((-1.0)*r10*x15366*x15368))+x15367+((r11*x15364))+((r11*x15358*x15361))+(((-1.0)*x15363))+((r12*x15370)));
evalcond[7]=((((-1.0)*r12*sj3*x15369))+((r10*x15361))+x15372+((r11*x15366))+((r10*x15358*x15364))+(((-1.0)*r11*x15365*x15368)));
evalcond[8]=(((r20*x15358*x15364))+(((-1.0)*r22*sj3*x15369))+((cj3*x15362))+x15363+(((-1.0)*x15367))+((r20*x15361))+(((-1.0)*r21*x15365*x15368)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15373=((1.0)*gconst65);
CheckValue<IkReal> x15374=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15373))+(((-1.0)*gconst64*r20)))),-1);
if(!x15374.valid){
continue;
}
CheckValue<IkReal> x15375 = IKatan2WithCheck(IkReal(r12),IkReal((((gconst64*r11))+(((-1.0)*r10*x15373)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15375.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15374.value)))+(x15375.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15376=IKsin(j4);
IkReal x15377=IKcos(j4);
IkReal x15378=(cj2*sj1);
IkReal x15379=(cj1*sj2);
IkReal x15380=(cj3*gconst64);
IkReal x15381=(gconst65*r21);
IkReal x15382=(sj1*sj2);
IkReal x15383=(gconst65*sj3);
IkReal x15384=(gconst64*sj3);
IkReal x15385=(cj3*gconst65);
IkReal x15386=(cj1*cj2);
IkReal x15387=((1.0)*x15377);
IkReal x15388=((1.0)*x15376);
IkReal x15389=(cj3*x15376);
IkReal x15390=(gconst64*x15376);
IkReal x15391=(x15379+x15378);
evalcond[0]=(((r21*x15390))+(((-1.0)*r22*x15387))+(((-1.0)*gconst65*r20*x15388)));
evalcond[1]=((((-1.0)*r12*x15387))+(((-1.0)*gconst65*r10*x15388))+((r11*x15390)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15387))+((r01*x15390))+(((-1.0)*gconst65*r00*x15388)));
evalcond[3]=(((r01*x15383))+((r01*x15377*x15380))+(((-1.0)*r00*x15385*x15387))+((r02*x15389))+((r00*x15384)));
evalcond[4]=(((r01*x15385))+(((-1.0)*r01*x15384*x15387))+((r00*x15377*x15383))+(((-1.0)*r02*sj3*x15388))+((r00*x15380)));
evalcond[5]=(((r22*x15389))+x15391+(((-1.0)*r20*x15385*x15387))+((r21*x15377*x15380))+((r20*x15384))+((sj3*x15381)));
evalcond[6]=(((r12*x15389))+((r10*x15384))+((r11*x15383))+x15386+((r11*x15377*x15380))+(((-1.0)*r10*x15385*x15387))+(((-1.0)*x15382)));
evalcond[7]=(((r10*x15377*x15383))+(((-1.0)*r11*x15384*x15387))+(((-1.0)*r12*sj3*x15388))+((r10*x15380))+((r11*x15385))+x15391);
evalcond[8]=((((-1.0)*r21*x15384*x15387))+((cj3*x15381))+x15382+((r20*x15377*x15383))+(((-1.0)*x15386))+((r20*x15380))+(((-1.0)*r22*sj3*x15388)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r10))+(IKabs(r11)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15392=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15392);
rxp0_2=(py*r00);
rxp1_0=(r21*x15392);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15393=(r01*sj5);
IkReal x15394=((1.0)*cj5*r00);
j4eval[0]=(x15393+(((-1.0)*x15394)));
j4eval[1]=(((cj3*x15393))+(((-1.0)*cj3*x15394)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15395=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15395);
rxp0_2=(py*r00);
rxp1_0=(r21*x15395);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
IkReal x15396=(cj5*r00);
IkReal x15397=(r01*sj5);
j4eval[0]=(x15397+(((-1.0)*x15396)));
j4eval[1]=(((sj3*x15396))+(((-1.0)*sj3*x15397)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15398=((-1.0)*py);
sj0=-1.0;
cj0=0;
j0=-1.5707963267949;
r10=0;
r11=0;
r22=0;
r02=0;
npx=(((px*r00))+((pz*r20)));
npy=(((px*r01))+((pz*r21)));
npz=(py*r12);
rxp0_0=(r20*x15398);
rxp0_2=(py*r00);
rxp1_0=(r21*x15398);
rxp1_2=(py*r01);
rxp2_0=(pz*r12);
rxp2_1=0;
rxp2_2=((-1.0)*px*r12);
j4eval[0]=cj3;
j4eval[1]=r12;
j4eval[2]=(((cj3*r01*sj5))+(((-1.0)*cj3*cj5*r00)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15399=((1.0)*r00);
CheckValue<IkReal> x15400=IKPowWithIntegerCheck(cj3,-1);
if(!x15400.valid){
continue;
}
CheckValue<IkReal> x15401=IKPowWithIntegerCheck(r12,-1);
if(!x15401.valid){
continue;
}
CheckValue<IkReal> x15402=IKPowWithIntegerCheck((((cj3*r01*sj5))+(((-1.0)*cj3*cj5*x15399))),-1);
if(!x15402.valid){
continue;
}
if( IKabs(((x15400.value)*(x15401.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15402.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15399)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15400.value)*(x15401.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))))+IKsqr(((x15402.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15399))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15400.value)*(x15401.value)*(((((-1.0)*cj1*cj2))+((sj1*sj2))))), ((x15402.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15399))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15403=IKsin(j4);
IkReal x15404=IKcos(j4);
IkReal x15405=(cj2*sj1);
IkReal x15406=(cj1*sj2);
IkReal x15407=(sj1*sj2);
IkReal x15408=(cj5*sj3);
IkReal x15409=(cj3*cj5);
IkReal x15410=(r21*sj5);
IkReal x15411=(cj1*cj2);
IkReal x15412=(r00*sj5);
IkReal x15413=(r01*sj5);
IkReal x15414=(r20*sj5);
IkReal x15415=((1.0)*x15403);
IkReal x15416=(r20*x15404);
IkReal x15417=(r00*x15404);
IkReal x15418=(cj3*x15404);
IkReal x15419=(x15405+x15406);
IkReal x15420=((1.0)*sj3*x15404);
evalcond[0]=((-1.0)*r12*x15404);
evalcond[1]=(((x15403*x15410))+(((-1.0)*cj5*r20*x15415)));
evalcond[2]=((((-1.0)*x15407))+x15411+((cj3*r12*x15403)));
evalcond[3]=(x15419+(((-1.0)*r12*sj3*x15415)));
evalcond[4]=((1.0)+((x15403*x15413))+(((-1.0)*cj5*r00*x15415)));
evalcond[5]=((((-1.0)*x15409*x15417))+((r01*x15408))+((sj3*x15412))+((x15413*x15418)));
evalcond[6]=(((cj3*x15412))+(((-1.0)*x15413*x15420))+((r01*x15409))+((x15408*x15417)));
evalcond[7]=((((-1.0)*x15409*x15416))+((sj3*x15414))+((x15410*x15418))+x15419+((r21*x15408)));
evalcond[8]=(((cj3*x15414))+(((-1.0)*x15410*x15420))+(((-1.0)*x15411))+((x15408*x15416))+x15407+((r21*x15409)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15421=((1.0)*r01);
IkReal x15422=(cj5*r00);
CheckValue<IkReal> x15423=IKPowWithIntegerCheck((((r01*sj5))+(((-1.0)*x15422))),-1);
if(!x15423.valid){
continue;
}
CheckValue<IkReal> x15424=IKPowWithIntegerCheck((((sj3*x15422))+(((-1.0)*sj3*sj5*x15421))),-1);
if(!x15424.valid){
continue;
}
if( IKabs(((-1.0)*(x15423.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15424.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15421)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15423.value)))+IKsqr(((x15424.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15421))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15423.value)), ((x15424.value)*(((((-1.0)*cj3*r00*sj5))+(((-1.0)*cj3*cj5*x15421))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15425=IKsin(j4);
IkReal x15426=IKcos(j4);
IkReal x15427=(cj2*sj1);
IkReal x15428=(cj1*sj2);
IkReal x15429=(sj1*sj2);
IkReal x15430=(cj5*sj3);
IkReal x15431=(cj3*cj5);
IkReal x15432=(r21*sj5);
IkReal x15433=(cj1*cj2);
IkReal x15434=(r00*sj5);
IkReal x15435=(r01*sj5);
IkReal x15436=(r20*sj5);
IkReal x15437=((1.0)*x15425);
IkReal x15438=(r20*x15426);
IkReal x15439=(r00*x15426);
IkReal x15440=(cj3*x15426);
IkReal x15441=(x15427+x15428);
IkReal x15442=((1.0)*sj3*x15426);
evalcond[0]=((-1.0)*r12*x15426);
evalcond[1]=(((x15425*x15432))+(((-1.0)*cj5*r20*x15437)));
evalcond[2]=(((cj3*r12*x15425))+(((-1.0)*x15429))+x15433);
evalcond[3]=((((-1.0)*r12*sj3*x15437))+x15441);
evalcond[4]=((1.0)+((x15425*x15435))+(((-1.0)*cj5*r00*x15437)));
evalcond[5]=(((sj3*x15434))+((x15435*x15440))+(((-1.0)*x15431*x15439))+((r01*x15430)));
evalcond[6]=((((-1.0)*x15435*x15442))+((x15430*x15439))+((cj3*x15434))+((r01*x15431)));
evalcond[7]=(((r21*x15430))+((x15432*x15440))+((sj3*x15436))+(((-1.0)*x15431*x15438))+x15441);
evalcond[8]=(((r21*x15431))+(((-1.0)*x15432*x15442))+((x15430*x15438))+(((-1.0)*x15433))+((cj3*x15436))+x15429);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15443=((1.0)*r00);
IkReal x15444=(r01*sj5);
CheckValue<IkReal> x15445=IKPowWithIntegerCheck(((((-1.0)*cj5*x15443))+x15444),-1);
if(!x15445.valid){
continue;
}
CheckValue<IkReal> x15446=IKPowWithIntegerCheck(((((-1.0)*cj3*cj5*x15443))+((cj3*x15444))),-1);
if(!x15446.valid){
continue;
}
if( IKabs(((-1.0)*(x15445.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15446.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15443)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*(x15445.value)))+IKsqr(((x15446.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15443))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*(x15445.value)), ((x15446.value)*(((((-1.0)*cj5*r01*sj3))+(((-1.0)*sj3*sj5*x15443))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15447=IKsin(j4);
IkReal x15448=IKcos(j4);
IkReal x15449=(cj2*sj1);
IkReal x15450=(cj1*sj2);
IkReal x15451=(sj1*sj2);
IkReal x15452=(cj5*sj3);
IkReal x15453=(cj3*cj5);
IkReal x15454=(r21*sj5);
IkReal x15455=(cj1*cj2);
IkReal x15456=(r00*sj5);
IkReal x15457=(r01*sj5);
IkReal x15458=(r20*sj5);
IkReal x15459=((1.0)*x15447);
IkReal x15460=(r20*x15448);
IkReal x15461=(r00*x15448);
IkReal x15462=(cj3*x15448);
IkReal x15463=(x15449+x15450);
IkReal x15464=((1.0)*sj3*x15448);
evalcond[0]=((-1.0)*r12*x15448);
evalcond[1]=((((-1.0)*cj5*r20*x15459))+((x15447*x15454)));
evalcond[2]=(x15455+(((-1.0)*x15451))+((cj3*r12*x15447)));
evalcond[3]=(x15463+(((-1.0)*r12*sj3*x15459)));
evalcond[4]=((1.0)+(((-1.0)*cj5*r00*x15459))+((x15447*x15457)));
evalcond[5]=(((sj3*x15456))+((r01*x15452))+((x15457*x15462))+(((-1.0)*x15453*x15461)));
evalcond[6]=(((cj3*x15456))+((r01*x15453))+((x15452*x15461))+(((-1.0)*x15457*x15464)));
evalcond[7]=(((sj3*x15458))+((x15454*x15462))+x15463+(((-1.0)*x15453*x15460))+((r21*x15452)));
evalcond[8]=(((cj3*x15458))+((x15452*x15460))+x15451+((r21*x15453))+(((-1.0)*x15454*x15464))+(((-1.0)*x15455)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15465=cj5*cj5;
IkReal x15466=(cj3*r20);
IkReal x15467=(r21*sj3);
IkReal x15468=((1.0)*cj3);
IkReal x15469=(r01*r21);
IkReal x15470=(r01*sj3);
IkReal x15471=(r00*sj5);
IkReal x15472=(cj5*r01*sj5);
IkReal x15473=((1.0)*x15465);
CheckValue<IkReal> x15474 = IKatan2WithCheck(IkReal((((cj5*r22*x15470))+((r22*sj3*x15471)))),IkReal(((((-1.0)*r20*x15470*x15473))+(((-1.0)*cj5*r20*sj3*x15471))+(((-1.0)*r00*x15467*x15473))+((x15467*x15472))+((r00*x15467)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15474.valid){
continue;
}
CheckValue<IkReal> x15475=IKPowWithIntegerCheck(IKsign(((((-1.0)*r02*r22*x15468))+((cj3*cj5*r21*x15471))+((cj3*x15465*x15469))+(((-1.0)*x15468*x15469))+(((-1.0)*r00*x15466*x15473))+((x15466*x15472)))),-1);
if(!x15475.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15474.value)+(((1.5707963267949)*(x15475.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15476=IKsin(j4);
IkReal x15477=IKcos(j4);
IkReal x15478=(cj2*sj1);
IkReal x15479=(cj1*sj2);
IkReal x15480=(r11*sj5);
IkReal x15481=(cj5*r10);
IkReal x15482=(sj1*sj2);
IkReal x15483=(cj5*r01);
IkReal x15484=(cj5*r00);
IkReal x15485=(cj3*sj5);
IkReal x15486=(r21*sj5);
IkReal x15487=(cj1*cj2);
IkReal x15488=(cj5*sj3);
IkReal x15489=(sj3*sj5);
IkReal x15490=(r01*sj5);
IkReal x15491=(cj3*cj5);
IkReal x15492=(cj5*r20);
IkReal x15493=((1.0)*x15477);
IkReal x15494=((1.0)*x15476);
IkReal x15495=(cj3*x15477);
IkReal x15496=(sj3*x15477);
IkReal x15497=(cj3*x15476);
IkReal x15498=(x15478+x15479);
evalcond[0]=((((-1.0)*x15492*x15494))+(((-1.0)*r22*x15493))+((x15476*x15486)));
evalcond[1]=((((-1.0)*r12*x15493))+(((-1.0)*x15481*x15494))+((x15476*x15480)));
evalcond[2]=((1.0)+((x15476*x15490))+(((-1.0)*x15484*x15494))+(((-1.0)*r02*x15493)));
evalcond[3]=(((sj3*x15483))+((r01*x15477*x15485))+(((-1.0)*cj3*x15484*x15493))+((r02*x15497))+((r00*x15489)));
evalcond[4]=(((x15484*x15496))+(((-1.0)*r02*sj3*x15494))+(((-1.0)*r01*x15489*x15493))+((cj3*x15483))+((r00*x15485)));
evalcond[5]=(((r21*x15488))+(((-1.0)*r20*x15491*x15493))+x15498+((r21*x15477*x15485))+((r22*x15497))+((r20*x15489)));
evalcond[6]=(((r12*x15497))+((r10*x15489))+((r11*x15488))+(((-1.0)*cj3*x15481*x15493))+x15487+(((-1.0)*x15482))+((x15480*x15495)));
evalcond[7]=(((r10*x15485))+((r11*x15491))+(((-1.0)*r12*sj3*x15494))+x15498+((x15481*x15496))+(((-1.0)*sj3*x15480*x15493)));
evalcond[8]=((((-1.0)*sj3*x15486*x15493))+(((-1.0)*r22*sj3*x15494))+((r20*x15477*x15488))+x15482+(((-1.0)*x15487))+((r21*x15491))+((r20*x15485)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15499=((1.0)*cj5);
CheckValue<IkReal> x15500 = IKatan2WithCheck(IkReal(r12),IkReal(((((-1.0)*r10*x15499))+((r11*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15500.valid){
continue;
}
CheckValue<IkReal> x15501=IKPowWithIntegerCheck(IKsign(((((-1.0)*r21*x15499))+(((-1.0)*r20*sj5)))),-1);
if(!x15501.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15500.value)+(((1.5707963267949)*(x15501.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15502=IKsin(j4);
IkReal x15503=IKcos(j4);
IkReal x15504=(cj2*sj1);
IkReal x15505=(cj1*sj2);
IkReal x15506=(r11*sj5);
IkReal x15507=(cj5*r10);
IkReal x15508=(sj1*sj2);
IkReal x15509=(cj5*r01);
IkReal x15510=(cj5*r00);
IkReal x15511=(cj3*sj5);
IkReal x15512=(r21*sj5);
IkReal x15513=(cj1*cj2);
IkReal x15514=(cj5*sj3);
IkReal x15515=(sj3*sj5);
IkReal x15516=(r01*sj5);
IkReal x15517=(cj3*cj5);
IkReal x15518=(cj5*r20);
IkReal x15519=((1.0)*x15503);
IkReal x15520=((1.0)*x15502);
IkReal x15521=(cj3*x15503);
IkReal x15522=(sj3*x15503);
IkReal x15523=(cj3*x15502);
IkReal x15524=(x15504+x15505);
evalcond[0]=((((-1.0)*r22*x15519))+(((-1.0)*x15518*x15520))+((x15502*x15512)));
evalcond[1]=(((x15502*x15506))+(((-1.0)*r12*x15519))+(((-1.0)*x15507*x15520)));
evalcond[2]=((1.0)+(((-1.0)*r02*x15519))+(((-1.0)*x15510*x15520))+((x15502*x15516)));
evalcond[3]=(((r01*x15503*x15511))+(((-1.0)*cj3*x15510*x15519))+((r02*x15523))+((sj3*x15509))+((r00*x15515)));
evalcond[4]=(((x15510*x15522))+((cj3*x15509))+(((-1.0)*r02*sj3*x15520))+((r00*x15511))+(((-1.0)*r01*x15515*x15519)));
evalcond[5]=(((r21*x15514))+(((-1.0)*r20*x15517*x15519))+((r20*x15515))+((r21*x15503*x15511))+x15524+((r22*x15523)));
evalcond[6]=(((r11*x15514))+((x15506*x15521))+((r10*x15515))+((r12*x15523))+(((-1.0)*x15508))+(((-1.0)*cj3*x15507*x15519))+x15513);
evalcond[7]=((((-1.0)*sj3*x15506*x15519))+(((-1.0)*r12*sj3*x15520))+((r11*x15517))+((r10*x15511))+((x15507*x15522))+x15524);
evalcond[8]=((((-1.0)*sj3*x15512*x15519))+((r21*x15517))+((r20*x15503*x15514))+((r20*x15511))+(((-1.0)*r22*sj3*x15520))+x15508+(((-1.0)*x15513)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15525 = IKatan2WithCheck(IkReal(r22),IkReal((((r21*sj5))+(((-1.0)*cj5*r20)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15525.valid){
continue;
}
CheckValue<IkReal> x15526=IKPowWithIntegerCheck(IKsign((((cj5*r11))+((r10*sj5)))),-1);
if(!x15526.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15525.value)+(((1.5707963267949)*(x15526.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15527=IKsin(j4);
IkReal x15528=IKcos(j4);
IkReal x15529=(cj2*sj1);
IkReal x15530=(cj1*sj2);
IkReal x15531=(r11*sj5);
IkReal x15532=(cj5*r10);
IkReal x15533=(sj1*sj2);
IkReal x15534=(cj5*r01);
IkReal x15535=(cj5*r00);
IkReal x15536=(cj3*sj5);
IkReal x15537=(r21*sj5);
IkReal x15538=(cj1*cj2);
IkReal x15539=(cj5*sj3);
IkReal x15540=(sj3*sj5);
IkReal x15541=(r01*sj5);
IkReal x15542=(cj3*cj5);
IkReal x15543=(cj5*r20);
IkReal x15544=((1.0)*x15528);
IkReal x15545=((1.0)*x15527);
IkReal x15546=(cj3*x15528);
IkReal x15547=(sj3*x15528);
IkReal x15548=(cj3*x15527);
IkReal x15549=(x15530+x15529);
evalcond[0]=((((-1.0)*r22*x15544))+(((-1.0)*x15543*x15545))+((x15527*x15537)));
evalcond[1]=((((-1.0)*x15532*x15545))+((x15527*x15531))+(((-1.0)*r12*x15544)));
evalcond[2]=((1.0)+((x15527*x15541))+(((-1.0)*x15535*x15545))+(((-1.0)*r02*x15544)));
evalcond[3]=(((r02*x15548))+((sj3*x15534))+((r00*x15540))+(((-1.0)*cj3*x15535*x15544))+((r01*x15528*x15536)));
evalcond[4]=(((cj3*x15534))+((r00*x15536))+(((-1.0)*r01*x15540*x15544))+((x15535*x15547))+(((-1.0)*r02*sj3*x15545)));
evalcond[5]=(((r20*x15540))+((r21*x15539))+(((-1.0)*r20*x15542*x15544))+x15549+((r21*x15528*x15536))+((r22*x15548)));
evalcond[6]=(((r10*x15540))+(((-1.0)*x15533))+(((-1.0)*cj3*x15532*x15544))+((x15531*x15546))+x15538+((r12*x15548))+((r11*x15539)));
evalcond[7]=(((r10*x15536))+((x15532*x15547))+(((-1.0)*r12*sj3*x15545))+(((-1.0)*sj3*x15531*x15544))+((r11*x15542))+x15549);
evalcond[8]=(((r20*x15528*x15539))+((r20*x15536))+(((-1.0)*sj3*x15537*x15544))+((r21*x15542))+(((-1.0)*x15538))+(((-1.0)*r22*sj3*x15545))+x15533);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(r01))+(IKabs(r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15550=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15550);
rxp1_1=(px*r21);
rxp1_2=(r11*x15550);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15551=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15551);
rxp1_1=(px*r21);
rxp1_2=(r11*x15551);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
IkReal x15552=((1.0)*cj5);
j4eval[0]=((((-1.0)*r10*x15552))+((r11*sj5)));
j4eval[1]=(((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15552)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15553=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15553);
rxp1_1=(px*r21);
rxp1_2=(r11*x15553);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15554=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15554);
rxp1_1=(px*r21);
rxp1_2=(r11*x15554);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15555=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15555);
rxp1_1=(px*r21);
rxp1_2=(r11*x15555);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r20))+(((-1.0)*r21*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15556=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15556);
rxp1_1=(px*r21);
rxp1_2=(r11*x15556);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=1.0;
cj3=0;
j3=1.5707963267949;
j4eval[0]=(((cj5*r10))+(((-1.0)*r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15559=IKPowWithIntegerCheck((((cj5*r10))+(((-1.0)*r11*sj5))),-1);
if(!x15559.valid){
continue;
}
IkReal x15557=x15559.value;
IkReal x15558=(sj0*x15557);
cj4array[0]=(((cj1*sj2*x15558))+((cj2*sj1*x15558)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15560=IKsin(j4);
IkReal x15561=IKcos(j4);
IkReal x15562=(cj5*r20);
IkReal x15563=(r21*sj5);
IkReal x15564=((1.0)*x15560);
IkReal x15565=((1.0)*x15561);
evalcond[0]=((-1.0)*r02*x15560);
evalcond[1]=((((-1.0)*r02*x15565))+(((-1.0)*sj0)));
evalcond[2]=(((x15560*x15563))+(((-1.0)*x15562*x15564)));
evalcond[3]=((((-1.0)*cj5*r10*x15564))+((r11*sj5*x15560)));
evalcond[4]=(((x15561*x15562))+(((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15563*x15565)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15567=IKPowWithIntegerCheck((((cj5*r20))+(((-1.0)*r21*sj5))),-1);
if(!x15567.valid){
continue;
}
IkReal x15566=x15567.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15566))+((cj1*cj2*x15566)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15568=IKsin(j4);
IkReal x15569=IKcos(j4);
IkReal x15570=(r11*sj5);
IkReal x15571=((1.0)*sj0);
IkReal x15572=((1.0)*x15569);
IkReal x15573=((1.0)*cj5*x15568);
evalcond[0]=((-1.0)*r02*x15568);
evalcond[1]=((((-1.0)*r02*x15572))+(((-1.0)*x15571)));
evalcond[2]=((((-1.0)*r20*x15573))+((r21*sj5*x15568)));
evalcond[3]=(((x15568*x15570))+(((-1.0)*r10*x15573)));
evalcond[4]=(((cj5*r10*x15569))+(((-1.0)*cj1*sj2*x15571))+(((-1.0)*x15570*x15572))+(((-1.0)*cj2*sj1*x15571)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15574=IKPowWithIntegerCheck(r02,-1);
if(!x15574.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15574.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15575=IKsin(j4);
IkReal x15576=IKcos(j4);
IkReal x15577=((1.0)*sj0);
IkReal x15578=(cj5*x15576);
IkReal x15579=(sj5*x15575);
IkReal x15580=((1.0)*sj5*x15576);
IkReal x15581=((1.0)*cj5*x15575);
evalcond[0]=((-1.0)*r02*x15575);
evalcond[1]=(((r21*x15579))+(((-1.0)*r20*x15581)));
evalcond[2]=((((-1.0)*r10*x15581))+((r11*x15579)));
evalcond[3]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*r21*x15580))+((r20*x15578)));
evalcond[4]=(((r10*x15578))+(((-1.0)*cj1*sj2*x15577))+(((-1.0)*cj2*sj1*x15577))+(((-1.0)*r11*x15580)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j3)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[1];
IkReal x15582=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15582);
rxp1_1=(px*r21);
rxp1_2=(r11*x15582);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15583=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15583);
rxp1_1=(px*r21);
rxp1_2=(r11*x15583);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=(((r21*sj5))+(((-1.0)*cj5*r20)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
{
IkReal j4eval[1];
IkReal x15584=((-1.0)*px);
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(r10*x15584);
rxp1_1=(px*r21);
rxp1_2=(r11*x15584);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj3=-1.0;
cj3=0;
j3=-1.5707963267949;
j4eval[0]=((((-1.0)*cj5*r10))+((r11*sj5)));
if( IKabs(j4eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15587=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15587.valid){
continue;
}
IkReal x15585=x15587.value;
IkReal x15586=(sj0*x15585);
cj4array[0]=(((cj1*sj2*x15586))+((cj2*sj1*x15586)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15588=IKsin(j4);
IkReal x15589=IKcos(j4);
IkReal x15590=(r21*sj5);
IkReal x15591=((1.0)*cj5*r20);
evalcond[0]=(r02*x15588);
evalcond[1]=((((-1.0)*sj0))+(((-1.0)*r02*x15589)));
evalcond[2]=((((-1.0)*x15588*x15591))+((x15588*x15590)));
evalcond[3]=((((-1.0)*cj5*r10*x15588))+((r11*sj5*x15588)));
evalcond[4]=((((-1.0)*cj1*cj2))+((sj1*sj2))+(((-1.0)*x15589*x15591))+((x15589*x15590)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15593=IKPowWithIntegerCheck((((r21*sj5))+(((-1.0)*cj5*r20))),-1);
if(!x15593.valid){
continue;
}
IkReal x15592=x15593.value;
cj4array[0]=((((-1.0)*sj1*sj2*x15592))+((cj1*cj2*x15592)));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15594=IKsin(j4);
IkReal x15595=IKcos(j4);
IkReal x15596=((1.0)*sj0);
IkReal x15597=((1.0)*cj5);
IkReal x15598=(sj5*x15594);
evalcond[0]=(r02*x15594);
evalcond[1]=((((-1.0)*r02*x15595))+(((-1.0)*x15596)));
evalcond[2]=(((r21*x15598))+(((-1.0)*r20*x15594*x15597)));
evalcond[3]=(((r11*x15598))+(((-1.0)*r10*x15594*x15597)));
evalcond[4]=((((-1.0)*r10*x15595*x15597))+((r11*sj5*x15595))+(((-1.0)*cj1*sj2*x15596))+(((-1.0)*cj2*sj1*x15596)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
CheckValue<IkReal> x15599=IKPowWithIntegerCheck(r02,-1);
if(!x15599.valid){
continue;
}
cj4array[0]=((-1.0)*sj0*(x15599.value));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x15600=IKsin(j4);
IkReal x15601=IKcos(j4);
IkReal x15602=((1.0)*cj1);
IkReal x15603=(r21*sj5);
IkReal x15604=((1.0)*cj5);
IkReal x15605=(r11*sj5);
evalcond[0]=(r02*x15600);
evalcond[1]=((((-1.0)*r20*x15600*x15604))+((x15600*x15603)));
evalcond[2]=((((-1.0)*r10*x15600*x15604))+((x15600*x15605)));
evalcond[3]=((((-1.0)*cj2*x15602))+((sj1*sj2))+(((-1.0)*r20*x15601*x15604))+((x15601*x15603)));
evalcond[4]=((((-1.0)*sj0*sj2*x15602))+(((-1.0)*cj2*sj0*sj1))+(((-1.0)*r10*x15601*x15604))+((x15601*x15605)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
CheckValue<IkReal> x15606 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15606.valid){
continue;
}
IkReal gconst66=((-1.0)*(x15606.value));
IkReal gconst67=r10;
IkReal gconst68=r11;
CheckValue<IkReal> x15607 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15607.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x15607.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15608=((-1.0)*r10);
CheckValue<IkReal> x15610 = IKatan2WithCheck(IkReal(x15608),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15610.valid){
continue;
}
IkReal x15609=((-1.0)*(x15610.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15608);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15609;
IkReal gconst66=x15609;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15611=((-1.0)*r10);
CheckValue<IkReal> x15613 = IKatan2WithCheck(IkReal(x15611),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15613.valid){
continue;
}
IkReal x15612=((-1.0)*(x15613.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15611);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15612;
IkReal gconst66=x15612;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15614=((-1.0)*r10);
CheckValue<IkReal> x15616 = IKatan2WithCheck(IkReal(x15614),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15616.valid){
continue;
}
IkReal x15615=((-1.0)*(x15616.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15614);
rxp1_1=(px*r21);
rxp1_2=((-1.0)*px*r11);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst67;
cj5=gconst68;
j5=x15615;
IkReal gconst66=x15615;
IkReal gconst67=r10;
IkReal gconst68=r11;
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r10*r21*sj3))+((r11*r20*sj3)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15617=((1.0)*gconst67);
IkReal x15618=(cj1*cj2);
IkReal x15619=((1.0)*sj1*sj2);
CheckValue<IkReal> x15620=IKPowWithIntegerCheck(cj3,-1);
if(!x15620.valid){
continue;
}
CheckValue<IkReal> x15621=IKPowWithIntegerCheck(r02,-1);
if(!x15621.valid){
continue;
}
CheckValue<IkReal> x15622=IKPowWithIntegerCheck(((((-1.0)*r21*sj3*x15617))+((gconst68*r20*sj3))),-1);
if(!x15622.valid){
continue;
}
if( IKabs(((x15620.value)*(x15621.value)*((((cj0*x15618))+(((-1.0)*cj0*x15619)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15622.value)*(((((-1.0)*x15619))+(((-1.0)*cj3*r20*x15617))+x15618+(((-1.0)*cj3*gconst68*r21)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15620.value)*(x15621.value)*((((cj0*x15618))+(((-1.0)*cj0*x15619))))))+IKsqr(((x15622.value)*(((((-1.0)*x15619))+(((-1.0)*cj3*r20*x15617))+x15618+(((-1.0)*cj3*gconst68*r21))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15620.value)*(x15621.value)*((((cj0*x15618))+(((-1.0)*cj0*x15619))))), ((x15622.value)*(((((-1.0)*x15619))+(((-1.0)*cj3*r20*x15617))+x15618+(((-1.0)*cj3*gconst68*r21))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15623=IKsin(j4);
IkReal x15624=IKcos(j4);
IkReal x15625=(sj1*sj2);
IkReal x15626=(gconst68*sj3);
IkReal x15627=(gconst67*r11);
IkReal x15628=(gconst67*sj3);
IkReal x15629=((1.0)*gconst68);
IkReal x15630=(cj2*sj1);
IkReal x15631=((1.0)*cj0);
IkReal x15632=((1.0)*sj0);
IkReal x15633=(cj3*gconst67);
IkReal x15634=(cj3*gconst68);
IkReal x15635=(cj1*sj2);
IkReal x15636=(gconst67*r21);
IkReal x15637=((1.0)*cj1*cj2);
IkReal x15638=(cj3*x15624);
IkReal x15639=((1.0)*x15624);
IkReal x15640=(r02*x15623);
evalcond[0]=((((-1.0)*r02*x15639))+(((-1.0)*x15632)));
evalcond[1]=(((x15623*x15636))+(((-1.0)*r20*x15623*x15629)));
evalcond[2]=(cj0+(((-1.0)*r10*x15623*x15629))+((x15623*x15627)));
evalcond[3]=((((-1.0)*cj1*cj2*x15631))+((cj0*x15625))+((cj3*x15640)));
evalcond[4]=((((-1.0)*x15630*x15631))+(((-1.0)*sj3*x15640))+(((-1.0)*x15631*x15635)));
evalcond[5]=(((r21*x15626))+((r21*x15624*x15633))+(((-1.0)*r20*x15629*x15638))+x15630+x15635+((r20*x15628)));
evalcond[6]=(((r20*x15633))+(((-1.0)*r21*x15628*x15639))+((r20*x15624*x15626))+x15625+((r21*x15634))+(((-1.0)*x15637)));
evalcond[7]=((((-1.0)*cj1*cj2*x15632))+((sj0*x15625))+(((-1.0)*r10*x15629*x15638))+((x15627*x15638))+((r11*x15626))+((r10*x15628)));
evalcond[8]=((((-1.0)*x15632*x15635))+(((-1.0)*x15630*x15632))+(((-1.0)*sj3*x15627*x15639))+((r10*x15624*x15626))+((r11*x15634))+((r10*x15633)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15643=IKPowWithIntegerCheck(r02,-1);
if(!x15643.valid){
continue;
}
IkReal x15641=x15643.value;
IkReal x15642=((1.0)*cj0);
CheckValue<IkReal> x15644=IKPowWithIntegerCheck(sj3,-1);
if(!x15644.valid){
continue;
}
if( IKabs((x15641*(x15644.value)*(((((-1.0)*cj2*sj1*x15642))+(((-1.0)*cj1*sj2*x15642)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15641)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15641*(x15644.value)*(((((-1.0)*cj2*sj1*x15642))+(((-1.0)*cj1*sj2*x15642))))))+IKsqr(((-1.0)*sj0*x15641))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15641*(x15644.value)*(((((-1.0)*cj2*sj1*x15642))+(((-1.0)*cj1*sj2*x15642))))), ((-1.0)*sj0*x15641));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15645=IKsin(j4);
IkReal x15646=IKcos(j4);
IkReal x15647=(sj1*sj2);
IkReal x15648=(gconst68*sj3);
IkReal x15649=(gconst67*r11);
IkReal x15650=(gconst67*sj3);
IkReal x15651=((1.0)*gconst68);
IkReal x15652=(cj2*sj1);
IkReal x15653=((1.0)*cj0);
IkReal x15654=((1.0)*sj0);
IkReal x15655=(cj3*gconst67);
IkReal x15656=(cj3*gconst68);
IkReal x15657=(cj1*sj2);
IkReal x15658=(gconst67*r21);
IkReal x15659=((1.0)*cj1*cj2);
IkReal x15660=(cj3*x15646);
IkReal x15661=((1.0)*x15646);
IkReal x15662=(r02*x15645);
evalcond[0]=((((-1.0)*x15654))+(((-1.0)*r02*x15661)));
evalcond[1]=((((-1.0)*r20*x15645*x15651))+((x15645*x15658)));
evalcond[2]=(((x15645*x15649))+cj0+(((-1.0)*r10*x15645*x15651)));
evalcond[3]=((((-1.0)*cj1*cj2*x15653))+((cj3*x15662))+((cj0*x15647)));
evalcond[4]=((((-1.0)*x15652*x15653))+(((-1.0)*sj3*x15662))+(((-1.0)*x15653*x15657)));
evalcond[5]=(((r21*x15646*x15655))+(((-1.0)*r20*x15651*x15660))+x15657+x15652+((r21*x15648))+((r20*x15650)));
evalcond[6]=(x15647+((r20*x15646*x15648))+(((-1.0)*x15659))+(((-1.0)*r21*x15650*x15661))+((r21*x15656))+((r20*x15655)));
evalcond[7]=(((r10*x15650))+(((-1.0)*cj1*cj2*x15654))+(((-1.0)*r10*x15651*x15660))+((r11*x15648))+((sj0*x15647))+((x15649*x15660)));
evalcond[8]=(((r10*x15655))+(((-1.0)*sj3*x15649*x15661))+((r10*x15646*x15648))+((r11*x15656))+(((-1.0)*x15652*x15654))+(((-1.0)*x15654*x15657)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15664=IKPowWithIntegerCheck(r02,-1);
if(!x15664.valid){
continue;
}
IkReal x15663=x15664.value;
CheckValue<IkReal> x15665=IKPowWithIntegerCheck(cj3,-1);
if(!x15665.valid){
continue;
}
if( IKabs((x15663*(x15665.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15663)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15663*(x15665.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15663))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15663*(x15665.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15663));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15666=IKsin(j4);
IkReal x15667=IKcos(j4);
IkReal x15668=(sj1*sj2);
IkReal x15669=(gconst68*sj3);
IkReal x15670=(gconst67*r11);
IkReal x15671=(gconst67*sj3);
IkReal x15672=((1.0)*gconst68);
IkReal x15673=(cj2*sj1);
IkReal x15674=((1.0)*cj0);
IkReal x15675=((1.0)*sj0);
IkReal x15676=(cj3*gconst67);
IkReal x15677=(cj3*gconst68);
IkReal x15678=(cj1*sj2);
IkReal x15679=(gconst67*r21);
IkReal x15680=((1.0)*cj1*cj2);
IkReal x15681=(cj3*x15667);
IkReal x15682=((1.0)*x15667);
IkReal x15683=(r02*x15666);
evalcond[0]=((((-1.0)*x15675))+(((-1.0)*r02*x15682)));
evalcond[1]=((((-1.0)*r20*x15666*x15672))+((x15666*x15679)));
evalcond[2]=(cj0+(((-1.0)*r10*x15666*x15672))+((x15666*x15670)));
evalcond[3]=(((cj3*x15683))+(((-1.0)*cj1*cj2*x15674))+((cj0*x15668)));
evalcond[4]=((((-1.0)*sj3*x15683))+(((-1.0)*x15673*x15674))+(((-1.0)*x15674*x15678)));
evalcond[5]=(((r21*x15667*x15676))+((r20*x15671))+(((-1.0)*r20*x15672*x15681))+x15673+x15678+((r21*x15669)));
evalcond[6]=((((-1.0)*r21*x15671*x15682))+((r20*x15676))+((r20*x15667*x15669))+x15668+((r21*x15677))+(((-1.0)*x15680)));
evalcond[7]=(((r10*x15671))+((r11*x15669))+(((-1.0)*r10*x15672*x15681))+(((-1.0)*cj1*cj2*x15675))+((sj0*x15668))+((x15670*x15681)));
evalcond[8]=((((-1.0)*x15675*x15678))+((r10*x15676))+(((-1.0)*x15673*x15675))+((r11*x15677))+(((-1.0)*sj3*x15670*x15682))+((r10*x15667*x15669)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x15684=((-1.0)*r10);
CheckValue<IkReal> x15685 = IKatan2WithCheck(IkReal(x15684),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15685.valid){
continue;
}
IkReal gconst69=((3.14159265358979)+(((-1.0)*(x15685.value))));
IkReal gconst70=x15684;
IkReal gconst71=((-1.0)*r11);
CheckValue<IkReal> x15686 = IKatan2WithCheck(IkReal(((-1.0)*r10)),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15686.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x15686.value)+j5)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j4eval[2];
IkReal x15687=((-1.0)*r10);
IkReal x15688=((-1.0)*r11);
CheckValue<IkReal> x15690 = IKatan2WithCheck(IkReal(x15687),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15690.valid){
continue;
}
IkReal x15689=((1.0)*(x15690.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15687);
rxp1_1=(px*r21);
rxp1_2=(px*x15688);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15689)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15689)));
IkReal gconst70=x15687;
IkReal gconst71=x15688;
j4eval[0]=cj3;
j4eval[1]=r02;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[2];
IkReal x15691=((-1.0)*r10);
IkReal x15692=((-1.0)*r11);
CheckValue<IkReal> x15694 = IKatan2WithCheck(IkReal(x15691),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15694.valid){
continue;
}
IkReal x15693=((1.0)*(x15694.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15691);
rxp1_1=(px*r21);
rxp1_2=(px*x15692);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15693)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15693)));
IkReal gconst70=x15691;
IkReal gconst71=x15692;
j4eval[0]=r02;
j4eval[1]=sj3;
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  )
{
{
IkReal j4eval[3];
IkReal x15695=((-1.0)*r10);
IkReal x15696=((-1.0)*r11);
CheckValue<IkReal> x15698 = IKatan2WithCheck(IkReal(x15695),IkReal(r11),IKFAST_ATAN2_MAGTHRESH);
if(!x15698.valid){
continue;
}
IkReal x15697=((1.0)*(x15698.value));
r00=0;
r01=0;
r12=0;
r22=0;
npx=(((py*r10))+((pz*r20)));
npy=(((py*r11))+((pz*r21)));
npz=(px*r02);
rxp0_1=(px*r20);
rxp0_2=(px*x15695);
rxp1_1=(px*r21);
rxp1_2=(px*x15696);
rxp2_0=0;
rxp2_1=((-1.0)*pz*r02);
rxp2_2=(py*r02);
sj5=gconst70;
cj5=gconst71;
j5=((3.14159265)+(((-1.0)*x15697)));
IkReal gconst69=((3.14159265358979)+(((-1.0)*x15697)));
IkReal gconst70=x15695;
IkReal gconst71=x15696;
IkReal x15699=((1.0)*sj3);
j4eval[0]=cj3;
j4eval[1]=r02;
j4eval[2]=((((-1.0)*r11*r20*x15699))+((r10*r21*x15699)));
if( IKabs(j4eval[0]) < 0.0000010000000000  || IKabs(j4eval[1]) < 0.0000010000000000  || IKabs(j4eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15700=((1.0)*r21);
IkReal x15701=(cj1*cj2);
IkReal x15702=((1.0)*sj1*sj2);
CheckValue<IkReal> x15703=IKPowWithIntegerCheck(cj3,-1);
if(!x15703.valid){
continue;
}
CheckValue<IkReal> x15704=IKPowWithIntegerCheck(r02,-1);
if(!x15704.valid){
continue;
}
CheckValue<IkReal> x15705=IKPowWithIntegerCheck(((((-1.0)*gconst70*sj3*x15700))+((gconst71*r20*sj3))),-1);
if(!x15705.valid){
continue;
}
if( IKabs(((x15703.value)*(x15704.value)*((((cj0*x15701))+(((-1.0)*cj0*x15702)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15705.value)*(((((-1.0)*x15702))+(((-1.0)*cj3*gconst71*x15700))+x15701+(((-1.0)*cj3*gconst70*r20)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x15703.value)*(x15704.value)*((((cj0*x15701))+(((-1.0)*cj0*x15702))))))+IKsqr(((x15705.value)*(((((-1.0)*x15702))+(((-1.0)*cj3*gconst71*x15700))+x15701+(((-1.0)*cj3*gconst70*r20))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x15703.value)*(x15704.value)*((((cj0*x15701))+(((-1.0)*cj0*x15702))))), ((x15705.value)*(((((-1.0)*x15702))+(((-1.0)*cj3*gconst71*x15700))+x15701+(((-1.0)*cj3*gconst70*r20))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15706=IKsin(j4);
IkReal x15707=IKcos(j4);
IkReal x15708=(cj3*gconst70);
IkReal x15709=(sj1*sj2);
IkReal x15710=((1.0)*gconst71);
IkReal x15711=(gconst71*sj3);
IkReal x15712=(cj2*sj1);
IkReal x15713=((1.0)*sj0);
IkReal x15714=(gconst70*r11);
IkReal x15715=(gconst70*sj3);
IkReal x15716=((1.0)*cj0);
IkReal x15717=(cj3*gconst71);
IkReal x15718=(cj1*sj2);
IkReal x15719=((1.0)*cj1*cj2);
IkReal x15720=(r21*x15707);
IkReal x15721=(r10*x15707);
IkReal x15722=((1.0)*x15707);
IkReal x15723=(r02*x15706);
IkReal x15724=(r20*x15707);
evalcond[0]=((((-1.0)*x15713))+(((-1.0)*r02*x15722)));
evalcond[1]=((((-1.0)*r20*x15706*x15710))+((gconst70*r21*x15706)));
evalcond[2]=(cj0+(((-1.0)*r10*x15706*x15710))+((x15706*x15714)));
evalcond[3]=(((cj0*x15709))+(((-1.0)*cj1*cj2*x15716))+((cj3*x15723)));
evalcond[4]=((((-1.0)*x15712*x15716))+(((-1.0)*sj3*x15723))+(((-1.0)*x15716*x15718)));
evalcond[5]=(((r20*x15715))+((x15708*x15720))+((r21*x15711))+x15718+x15712+(((-1.0)*cj3*x15710*x15724)));
evalcond[6]=((((-1.0)*x15719))+((r20*x15708))+(((-1.0)*x15715*x15720))+((r21*x15717))+x15709+((x15711*x15724)));
evalcond[7]=(((sj0*x15709))+(((-1.0)*cj1*cj2*x15713))+(((-1.0)*cj3*x15710*x15721))+((r11*x15707*x15708))+((r11*x15711))+((r10*x15715)));
evalcond[8]=((((-1.0)*x15712*x15713))+(((-1.0)*sj3*x15714*x15722))+(((-1.0)*x15713*x15718))+((x15711*x15721))+((r10*x15708))+((r11*x15717)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15727=IKPowWithIntegerCheck(r02,-1);
if(!x15727.valid){
continue;
}
IkReal x15725=x15727.value;
IkReal x15726=((1.0)*cj0);
CheckValue<IkReal> x15728=IKPowWithIntegerCheck(sj3,-1);
if(!x15728.valid){
continue;
}
if( IKabs((x15725*(x15728.value)*(((((-1.0)*cj2*sj1*x15726))+(((-1.0)*cj1*sj2*x15726)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15725)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15725*(x15728.value)*(((((-1.0)*cj2*sj1*x15726))+(((-1.0)*cj1*sj2*x15726))))))+IKsqr(((-1.0)*sj0*x15725))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15725*(x15728.value)*(((((-1.0)*cj2*sj1*x15726))+(((-1.0)*cj1*sj2*x15726))))), ((-1.0)*sj0*x15725));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15729=IKsin(j4);
IkReal x15730=IKcos(j4);
IkReal x15731=(cj3*gconst70);
IkReal x15732=(sj1*sj2);
IkReal x15733=((1.0)*gconst71);
IkReal x15734=(gconst71*sj3);
IkReal x15735=(cj2*sj1);
IkReal x15736=((1.0)*sj0);
IkReal x15737=(gconst70*r11);
IkReal x15738=(gconst70*sj3);
IkReal x15739=((1.0)*cj0);
IkReal x15740=(cj3*gconst71);
IkReal x15741=(cj1*sj2);
IkReal x15742=((1.0)*cj1*cj2);
IkReal x15743=(r21*x15730);
IkReal x15744=(r10*x15730);
IkReal x15745=((1.0)*x15730);
IkReal x15746=(r02*x15729);
IkReal x15747=(r20*x15730);
evalcond[0]=((((-1.0)*x15736))+(((-1.0)*r02*x15745)));
evalcond[1]=((((-1.0)*r20*x15729*x15733))+((gconst70*r21*x15729)));
evalcond[2]=(cj0+(((-1.0)*r10*x15729*x15733))+((x15729*x15737)));
evalcond[3]=(((cj3*x15746))+(((-1.0)*cj1*cj2*x15739))+((cj0*x15732)));
evalcond[4]=((((-1.0)*x15739*x15741))+(((-1.0)*x15735*x15739))+(((-1.0)*sj3*x15746)));
evalcond[5]=((((-1.0)*cj3*x15733*x15747))+((r20*x15738))+((r21*x15734))+x15741+x15735+((x15731*x15743)));
evalcond[6]=(((x15734*x15747))+((r20*x15731))+(((-1.0)*x15742))+((r21*x15740))+x15732+(((-1.0)*x15738*x15743)));
evalcond[7]=(((r11*x15734))+(((-1.0)*cj3*x15733*x15744))+(((-1.0)*cj1*cj2*x15736))+((sj0*x15732))+((r11*x15730*x15731))+((r10*x15738)));
evalcond[8]=(((x15734*x15744))+(((-1.0)*x15736*x15741))+(((-1.0)*x15735*x15736))+((r11*x15740))+((r10*x15731))+(((-1.0)*sj3*x15737*x15745)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15749=IKPowWithIntegerCheck(r02,-1);
if(!x15749.valid){
continue;
}
IkReal x15748=x15749.value;
CheckValue<IkReal> x15750=IKPowWithIntegerCheck(cj3,-1);
if(!x15750.valid){
continue;
}
if( IKabs((x15748*(x15750.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15748)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15748*(x15750.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15748))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15748*(x15750.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15748));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15751=IKsin(j4);
IkReal x15752=IKcos(j4);
IkReal x15753=(cj3*gconst70);
IkReal x15754=(sj1*sj2);
IkReal x15755=((1.0)*gconst71);
IkReal x15756=(gconst71*sj3);
IkReal x15757=(cj2*sj1);
IkReal x15758=((1.0)*sj0);
IkReal x15759=(gconst70*r11);
IkReal x15760=(gconst70*sj3);
IkReal x15761=((1.0)*cj0);
IkReal x15762=(cj3*gconst71);
IkReal x15763=(cj1*sj2);
IkReal x15764=((1.0)*cj1*cj2);
IkReal x15765=(r21*x15752);
IkReal x15766=(r10*x15752);
IkReal x15767=((1.0)*x15752);
IkReal x15768=(r02*x15751);
IkReal x15769=(r20*x15752);
evalcond[0]=((((-1.0)*x15758))+(((-1.0)*r02*x15767)));
evalcond[1]=((((-1.0)*r20*x15751*x15755))+((gconst70*r21*x15751)));
evalcond[2]=(cj0+(((-1.0)*r10*x15751*x15755))+((x15751*x15759)));
evalcond[3]=(((cj3*x15768))+(((-1.0)*cj1*cj2*x15761))+((cj0*x15754)));
evalcond[4]=((((-1.0)*x15757*x15761))+(((-1.0)*sj3*x15768))+(((-1.0)*x15761*x15763)));
evalcond[5]=(((x15753*x15765))+((r21*x15756))+((r20*x15760))+x15763+x15757+(((-1.0)*cj3*x15755*x15769)));
evalcond[6]=(((r21*x15762))+(((-1.0)*x15760*x15765))+(((-1.0)*x15764))+((r20*x15753))+((x15756*x15769))+x15754);
evalcond[7]=(((r10*x15760))+((sj0*x15754))+((r11*x15752*x15753))+(((-1.0)*cj3*x15755*x15766))+((r11*x15756))+(((-1.0)*cj1*cj2*x15758)));
evalcond[8]=((((-1.0)*x15757*x15758))+((r10*x15753))+(((-1.0)*sj3*x15759*x15767))+((x15756*x15766))+((r11*x15762))+(((-1.0)*x15758*x15763)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15771=IKPowWithIntegerCheck(r02,-1);
if(!x15771.valid){
continue;
}
IkReal x15770=x15771.value;
CheckValue<IkReal> x15772=IKPowWithIntegerCheck(cj3,-1);
if(!x15772.valid){
continue;
}
if( IKabs((x15770*(x15772.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*x15770)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x15770*(x15772.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))))+IKsqr(((-1.0)*sj0*x15770))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2((x15770*(x15772.value)*(((((-1.0)*cj0*sj1*sj2))+((cj0*cj1*cj2))))), ((-1.0)*sj0*x15770));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15773=IKsin(j4);
IkReal x15774=IKcos(j4);
IkReal x15775=(cj5*r10);
IkReal x15776=(sj1*sj2);
IkReal x15777=(cj5*sj3);
IkReal x15778=(r11*sj5);
IkReal x15779=(cj3*cj5);
IkReal x15780=(cj3*sj5);
IkReal x15781=(r21*sj5);
IkReal x15782=(cj2*sj1);
IkReal x15783=((1.0)*sj0);
IkReal x15784=((1.0)*cj0);
IkReal x15785=(sj3*sj5);
IkReal x15786=(cj1*sj2);
IkReal x15787=((1.0)*cj1*cj2);
IkReal x15788=((1.0)*x15773);
IkReal x15789=(r20*x15774);
IkReal x15790=(cj3*x15774);
IkReal x15791=(sj3*x15774);
evalcond[0]=((((-1.0)*r02*x15774))+(((-1.0)*x15783)));
evalcond[1]=((((-1.0)*cj5*r20*x15788))+((x15773*x15781)));
evalcond[2]=(cj0+(((-1.0)*x15775*x15788))+((x15773*x15778)));
evalcond[3]=((((-1.0)*cj1*cj2*x15784))+((cj0*x15776))+((cj3*r02*x15773)));
evalcond[4]=((((-1.0)*x15782*x15784))+(((-1.0)*r02*sj3*x15788))+(((-1.0)*x15784*x15786)));
evalcond[5]=(((r21*x15777))+((r21*x15774*x15780))+x15782+x15786+(((-1.0)*x15779*x15789))+((r20*x15785)));
evalcond[6]=(((x15777*x15789))+((r21*x15779))+x15776+(((-1.0)*x15781*x15791))+(((-1.0)*x15787))+((r20*x15780)));
evalcond[7]=((((-1.0)*cj1*cj2*x15783))+((r10*x15785))+((x15778*x15790))+((sj0*x15776))+(((-1.0)*x15775*x15790))+((r11*x15777)));
evalcond[8]=(((r10*x15780))+(((-1.0)*x15778*x15791))+(((-1.0)*x15782*x15783))+(((-1.0)*x15783*x15786))+((r11*x15779))+((x15775*x15791)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15792=((1.0)*sj3);
IkReal x15793=((1.0)*cj5);
CheckValue<IkReal> x15794=IKPowWithIntegerCheck((((r11*sj5))+(((-1.0)*r10*x15793))),-1);
if(!x15794.valid){
continue;
}
CheckValue<IkReal> x15795=IKPowWithIntegerCheck((((cj3*r21*sj5))+(((-1.0)*cj3*r20*x15793))),-1);
if(!x15795.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15794.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x15795.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15792))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15792)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15794.value)))+IKsqr(((x15795.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15792))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15792))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15794.value)), ((x15795.value)*(((((-1.0)*cj2*sj1))+(((-1.0)*cj5*r21*x15792))+(((-1.0)*cj1*sj2))+(((-1.0)*r20*sj5*x15792))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15796=IKsin(j4);
IkReal x15797=IKcos(j4);
IkReal x15798=(cj5*r10);
IkReal x15799=(sj1*sj2);
IkReal x15800=(cj5*sj3);
IkReal x15801=(r11*sj5);
IkReal x15802=(cj3*cj5);
IkReal x15803=(cj3*sj5);
IkReal x15804=(r21*sj5);
IkReal x15805=(cj2*sj1);
IkReal x15806=((1.0)*sj0);
IkReal x15807=((1.0)*cj0);
IkReal x15808=(sj3*sj5);
IkReal x15809=(cj1*sj2);
IkReal x15810=((1.0)*cj1*cj2);
IkReal x15811=((1.0)*x15796);
IkReal x15812=(r20*x15797);
IkReal x15813=(cj3*x15797);
IkReal x15814=(sj3*x15797);
evalcond[0]=((((-1.0)*r02*x15797))+(((-1.0)*x15806)));
evalcond[1]=(((x15796*x15804))+(((-1.0)*cj5*r20*x15811)));
evalcond[2]=(cj0+((x15796*x15801))+(((-1.0)*x15798*x15811)));
evalcond[3]=(((cj0*x15799))+((cj3*r02*x15796))+(((-1.0)*cj1*cj2*x15807)));
evalcond[4]=((((-1.0)*x15807*x15809))+(((-1.0)*x15805*x15807))+(((-1.0)*r02*sj3*x15811)));
evalcond[5]=((((-1.0)*x15802*x15812))+((r21*x15800))+((r21*x15797*x15803))+x15809+x15805+((r20*x15808)));
evalcond[6]=((((-1.0)*x15804*x15814))+(((-1.0)*x15810))+((x15800*x15812))+((r21*x15802))+x15799+((r20*x15803)));
evalcond[7]=(((r10*x15808))+((r11*x15800))+(((-1.0)*x15798*x15813))+((x15801*x15813))+((sj0*x15799))+(((-1.0)*cj1*cj2*x15806)));
evalcond[8]=(((r10*x15803))+((x15798*x15814))+((r11*x15802))+(((-1.0)*x15801*x15814))+(((-1.0)*x15805*x15806))+(((-1.0)*x15806*x15809)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
CheckValue<IkReal> x15815=IKPowWithIntegerCheck(((((-1.0)*cj5*r10))+((r11*sj5))),-1);
if(!x15815.valid){
continue;
}
CheckValue<IkReal> x15816=IKPowWithIntegerCheck(r02,-1);
if(!x15816.valid){
continue;
}
if( IKabs(((-1.0)*cj0*(x15815.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj0*(x15816.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*cj0*(x15815.value)))+IKsqr(((-1.0)*sj0*(x15816.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((-1.0)*cj0*(x15815.value)), ((-1.0)*sj0*(x15816.value)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15817=IKsin(j4);
IkReal x15818=IKcos(j4);
IkReal x15819=(cj5*r10);
IkReal x15820=(sj1*sj2);
IkReal x15821=(cj5*sj3);
IkReal x15822=(r11*sj5);
IkReal x15823=(cj3*cj5);
IkReal x15824=(cj3*sj5);
IkReal x15825=(r21*sj5);
IkReal x15826=(cj2*sj1);
IkReal x15827=((1.0)*sj0);
IkReal x15828=((1.0)*cj0);
IkReal x15829=(sj3*sj5);
IkReal x15830=(cj1*sj2);
IkReal x15831=((1.0)*cj1*cj2);
IkReal x15832=((1.0)*x15817);
IkReal x15833=(r20*x15818);
IkReal x15834=(cj3*x15818);
IkReal x15835=(sj3*x15818);
evalcond[0]=((((-1.0)*r02*x15818))+(((-1.0)*x15827)));
evalcond[1]=(((x15817*x15825))+(((-1.0)*cj5*r20*x15832)));
evalcond[2]=(cj0+(((-1.0)*x15819*x15832))+((x15817*x15822)));
evalcond[3]=((((-1.0)*cj1*cj2*x15828))+((cj3*r02*x15817))+((cj0*x15820)));
evalcond[4]=((((-1.0)*r02*sj3*x15832))+(((-1.0)*x15826*x15828))+(((-1.0)*x15828*x15830)));
evalcond[5]=(((r20*x15829))+((r21*x15818*x15824))+((r21*x15821))+(((-1.0)*x15823*x15833))+x15830+x15826);
evalcond[6]=(((x15821*x15833))+((r20*x15824))+(((-1.0)*x15825*x15835))+((r21*x15823))+(((-1.0)*x15831))+x15820);
evalcond[7]=(((x15822*x15834))+(((-1.0)*x15819*x15834))+(((-1.0)*cj1*cj2*x15827))+((r10*x15829))+((r11*x15821))+((sj0*x15820)));
evalcond[8]=(((x15819*x15835))+(((-1.0)*x15827*x15830))+(((-1.0)*x15826*x15827))+((r10*x15824))+(((-1.0)*x15822*x15835))+((r11*x15823)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j4]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15836=((1.0)*sj0);
IkReal x15837=((1.0)*cj0);
CheckValue<IkReal> x15838=IKPowWithIntegerCheck(IKsign(((((-1.0)*cj5*r21))+(((-1.0)*r20*sj5)))),-1);
if(!x15838.valid){
continue;
}
CheckValue<IkReal> x15839 = IKatan2WithCheck(IkReal(((((-1.0)*r02*x15837))+(((-1.0)*r12*x15836)))),IkReal(((((-1.0)*r01*sj5*x15837))+((cj0*cj5*r00))+(((-1.0)*r11*sj5*x15836))+((cj5*r10*sj0)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15839.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15838.value)))+(x15839.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15840=IKsin(j4);
IkReal x15841=IKcos(j4);
IkReal x15842=(r11*sj5);
IkReal x15843=(cj5*r10);
IkReal x15844=(sj1*sj2);
IkReal x15845=(cj5*sj3);
IkReal x15846=((1.0)*sj0);
IkReal x15847=(cj3*cj5);
IkReal x15848=(cj3*sj5);
IkReal x15849=(r21*sj5);
IkReal x15850=(cj2*sj1);
IkReal x15851=(sj3*sj5);
IkReal x15852=(r01*sj5);
IkReal x15853=((1.0)*cj0);
IkReal x15854=(cj1*sj2);
IkReal x15855=((1.0)*x15841);
IkReal x15856=((1.0)*x15840);
IkReal x15857=(cj3*x15841);
IkReal x15858=((1.0)*cj1*cj2);
IkReal x15859=(cj3*x15840);
evalcond[0]=((((-1.0)*cj5*r20*x15856))+(((-1.0)*r22*x15855))+((x15840*x15849)));
evalcond[1]=(cj0+(((-1.0)*r12*x15855))+(((-1.0)*x15843*x15856))+((x15840*x15842)));
evalcond[2]=(((x15840*x15852))+(((-1.0)*r02*x15855))+(((-1.0)*x15846))+(((-1.0)*cj5*r00*x15856)));
evalcond[3]=((((-1.0)*r20*x15847*x15855))+((r20*x15851))+((r21*x15845))+((r22*x15859))+((r21*x15841*x15848))+x15854+x15850);
evalcond[4]=(((r20*x15841*x15845))+(((-1.0)*sj3*x15849*x15855))+((r20*x15848))+((r21*x15847))+(((-1.0)*x15858))+(((-1.0)*r22*sj3*x15856))+x15844);
evalcond[5]=(((r01*x15845))+(((-1.0)*r00*x15847*x15855))+((r00*x15851))+((r02*x15859))+((r01*x15841*x15848))+(((-1.0)*cj1*cj2*x15853))+((cj0*x15844)));
evalcond[6]=(((r11*x15845))+((r12*x15859))+(((-1.0)*cj1*cj2*x15846))+((r10*x15851))+((sj0*x15844))+((x15842*x15857))+(((-1.0)*cj3*x15843*x15855)));
evalcond[7]=(((r01*x15847))+((r00*x15841*x15845))+((r00*x15848))+(((-1.0)*r01*x15851*x15855))+(((-1.0)*r02*sj3*x15856))+(((-1.0)*x15850*x15853))+(((-1.0)*x15853*x15854)));
evalcond[8]=(((r11*x15847))+((sj3*x15841*x15843))+(((-1.0)*sj3*x15842*x15855))+(((-1.0)*x15846*x15850))+(((-1.0)*x15846*x15854))+((r10*x15848))+(((-1.0)*r12*sj3*x15856)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15860=((1.0)*cj5);
CheckValue<IkReal> x15861 = IKatan2WithCheck(IkReal((r22*sj0)),IkReal(((((-1.0)*r20*sj0*x15860))+((r21*sj0*sj5)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15861.valid){
continue;
}
CheckValue<IkReal> x15862=IKPowWithIntegerCheck(IKsign(((((-1.0)*r10*sj5))+(((-1.0)*r11*x15860)))),-1);
if(!x15862.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15861.value)+(((1.5707963267949)*(x15862.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15863=IKsin(j4);
IkReal x15864=IKcos(j4);
IkReal x15865=(r11*sj5);
IkReal x15866=(cj5*r10);
IkReal x15867=(sj1*sj2);
IkReal x15868=(cj5*sj3);
IkReal x15869=((1.0)*sj0);
IkReal x15870=(cj3*cj5);
IkReal x15871=(cj3*sj5);
IkReal x15872=(r21*sj5);
IkReal x15873=(cj2*sj1);
IkReal x15874=(sj3*sj5);
IkReal x15875=(r01*sj5);
IkReal x15876=((1.0)*cj0);
IkReal x15877=(cj1*sj2);
IkReal x15878=((1.0)*x15864);
IkReal x15879=((1.0)*x15863);
IkReal x15880=(cj3*x15864);
IkReal x15881=((1.0)*cj1*cj2);
IkReal x15882=(cj3*x15863);
evalcond[0]=((((-1.0)*cj5*r20*x15879))+((x15863*x15872))+(((-1.0)*r22*x15878)));
evalcond[1]=(cj0+(((-1.0)*r12*x15878))+((x15863*x15865))+(((-1.0)*x15866*x15879)));
evalcond[2]=((((-1.0)*x15869))+((x15863*x15875))+(((-1.0)*cj5*r00*x15879))+(((-1.0)*r02*x15878)));
evalcond[3]=(((r21*x15868))+(((-1.0)*r20*x15870*x15878))+((r21*x15864*x15871))+((r20*x15874))+((r22*x15882))+x15877+x15873);
evalcond[4]=(((r20*x15871))+((r21*x15870))+(((-1.0)*r22*sj3*x15879))+(((-1.0)*x15881))+(((-1.0)*sj3*x15872*x15878))+((r20*x15864*x15868))+x15867);
evalcond[5]=(((r01*x15864*x15871))+((r00*x15874))+((cj0*x15867))+(((-1.0)*cj1*cj2*x15876))+(((-1.0)*r00*x15870*x15878))+((r01*x15868))+((r02*x15882)));
evalcond[6]=(((x15865*x15880))+((r11*x15868))+((sj0*x15867))+((r10*x15874))+((r12*x15882))+(((-1.0)*cj3*x15866*x15878))+(((-1.0)*cj1*cj2*x15869)));
evalcond[7]=((((-1.0)*r01*x15874*x15878))+((r01*x15870))+((r00*x15871))+(((-1.0)*r02*sj3*x15879))+(((-1.0)*x15873*x15876))+(((-1.0)*x15876*x15877))+((r00*x15864*x15868)));
evalcond[8]=(((r11*x15870))+(((-1.0)*x15869*x15873))+(((-1.0)*x15869*x15877))+((r10*x15871))+(((-1.0)*r12*sj3*x15879))+(((-1.0)*sj3*x15865*x15878))+((sj3*x15864*x15866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15883=((1.0)*cj5);
CheckValue<IkReal> x15884=IKPowWithIntegerCheck(IKsign(((((-1.0)*r00*sj5))+(((-1.0)*r01*x15883)))),-1);
if(!x15884.valid){
continue;
}
CheckValue<IkReal> x15885 = IKatan2WithCheck(IkReal((cj0*r22)),IkReal((((cj0*r21*sj5))+(((-1.0)*cj0*r20*x15883)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15885.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15884.value)))+(x15885.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[9];
IkReal x15886=IKsin(j4);
IkReal x15887=IKcos(j4);
IkReal x15888=(r11*sj5);
IkReal x15889=(cj5*r10);
IkReal x15890=(sj1*sj2);
IkReal x15891=(cj5*sj3);
IkReal x15892=((1.0)*sj0);
IkReal x15893=(cj3*cj5);
IkReal x15894=(cj3*sj5);
IkReal x15895=(r21*sj5);
IkReal x15896=(cj2*sj1);
IkReal x15897=(sj3*sj5);
IkReal x15898=(r01*sj5);
IkReal x15899=((1.0)*cj0);
IkReal x15900=(cj1*sj2);
IkReal x15901=((1.0)*x15887);
IkReal x15902=((1.0)*x15886);
IkReal x15903=(cj3*x15887);
IkReal x15904=((1.0)*cj1*cj2);
IkReal x15905=(cj3*x15886);
evalcond[0]=((((-1.0)*cj5*r20*x15902))+((x15886*x15895))+(((-1.0)*r22*x15901)));
evalcond[1]=(cj0+(((-1.0)*r12*x15901))+((x15886*x15888))+(((-1.0)*x15889*x15902)));
evalcond[2]=((((-1.0)*cj5*r00*x15902))+(((-1.0)*r02*x15901))+((x15886*x15898))+(((-1.0)*x15892)));
evalcond[3]=(((r22*x15905))+((r20*x15897))+(((-1.0)*r20*x15893*x15901))+((r21*x15887*x15894))+((r21*x15891))+x15896+x15900);
evalcond[4]=(((r20*x15894))+(((-1.0)*r22*sj3*x15902))+((r20*x15887*x15891))+(((-1.0)*sj3*x15895*x15901))+(((-1.0)*x15904))+((r21*x15893))+x15890);
evalcond[5]=(((r01*x15891))+((r00*x15897))+((cj0*x15890))+((r01*x15887*x15894))+(((-1.0)*cj1*cj2*x15899))+(((-1.0)*r00*x15893*x15901))+((r02*x15905)));
evalcond[6]=((((-1.0)*cj3*x15889*x15901))+((r10*x15897))+((r12*x15905))+((sj0*x15890))+(((-1.0)*cj1*cj2*x15892))+((x15888*x15903))+((r11*x15891)));
evalcond[7]=(((r01*x15893))+((r00*x15894))+(((-1.0)*r02*sj3*x15902))+((r00*x15887*x15891))+(((-1.0)*x15896*x15899))+(((-1.0)*x15899*x15900))+(((-1.0)*r01*x15897*x15901)));
evalcond[8]=(((r10*x15894))+(((-1.0)*x15892*x15896))+(((-1.0)*x15892*x15900))+(((-1.0)*sj3*x15888*x15901))+(((-1.0)*r12*sj3*x15902))+((r11*x15893))+((sj3*x15887*x15889)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15906=cj5*cj5;
IkReal x15907=r21*r21;
IkReal x15908=r20*r20;
IkReal x15909=(r20*r21);
IkReal x15910=((1.0)*cj3);
IkReal x15911=((1.0)*cj5);
IkReal x15912=(cj1*sj2);
IkReal x15913=(cj5*sj5);
IkReal x15914=(sj3*sj5);
IkReal x15915=(cj2*sj1);
IkReal x15916=(r21*sj5);
CheckValue<IkReal> x15917=IKPowWithIntegerCheck(IKsign(((((-1.0)*x15907*x15910))+(((2.0)*cj3*x15909*x15913))+((cj3*x15906*x15907))+(((-1.0)*x15910*(r22*r22)))+(((-1.0)*x15906*x15908*x15910)))),-1);
if(!x15917.valid){
continue;
}
CheckValue<IkReal> x15918 = IKatan2WithCheck(IkReal((((r22*x15915))+((r22*x15912))+((cj5*r21*r22*sj3))+((r20*r22*x15914)))),IkReal((((sj3*x15909))+((x15912*x15916))+((x15915*x15916))+((sj3*x15907*x15913))+(((-2.0)*sj3*x15906*x15909))+(((-1.0)*x15908*x15911*x15914))+(((-1.0)*r20*x15911*x15915))+(((-1.0)*r20*x15911*x15912)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15918.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(((1.5707963267949)*(x15917.value)))+(x15918.value));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15919=IKsin(j4);
IkReal x15920=IKcos(j4);
IkReal x15921=(cj3*r21);
IkReal x15922=(r21*sj5);
IkReal x15923=(r20*sj5);
IkReal x15924=(cj5*r20);
IkReal x15925=((1.0)*x15920);
IkReal x15926=((1.0)*x15919);
evalcond[0]=((((-1.0)*x15924*x15926))+(((-1.0)*r22*x15925))+((x15919*x15922)));
evalcond[1]=(((cj2*sj1))+(((-1.0)*cj3*x15924*x15925))+((cj5*r21*sj3))+((cj3*r22*x15919))+((cj1*sj2))+((sj3*x15923))+((sj5*x15920*x15921)));
evalcond[2]=((((-1.0)*cj1*cj2))+((cj3*x15923))+((sj1*sj2))+(((-1.0)*sj3*x15922*x15925))+(((-1.0)*r22*sj3*x15926))+((cj5*x15921))+((sj3*x15920*x15924)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15927=(cj5*sj4);
IkReal x15928=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927))))+IKsqr((((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15928))+(((-1.0)*r00*x15927))), (((r10*x15927))+(((-1.0)*r11*x15928))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15929=IKcos(j0);
IkReal x15930=IKsin(j0);
IkReal x15931=(r02*sj4);
IkReal x15932=((1.0)*sj3);
IkReal x15933=(r12*sj4);
IkReal x15934=(cj3*cj4);
IkReal x15935=((1.0)*cj5);
IkReal x15936=(r11*sj5);
IkReal x15937=((1.0)*cj1);
IkReal x15938=((0.39225)*sj1);
IkReal x15939=(cj5*r01);
IkReal x15940=(r01*sj5);
IkReal x15941=(r00*sj5);
IkReal x15942=((1.0)*sj1);
IkReal x15943=((0.39225)*cj2);
IkReal x15944=(cj5*r11);
IkReal x15945=(r10*sj5);
IkReal x15946=((1.0)*cj4);
IkReal x15947=(sj2*x15929);
IkReal x15948=(sj2*x15930);
IkReal x15949=(cj4*cj5*sj3);
IkReal x15950=(cj1*x15929);
IkReal x15951=(cj2*x15929);
IkReal x15952=(cj1*x15930);
IkReal x15953=(cj2*x15930);
evalcond[0]=((((-1.0)*r12*x15946))+((sj4*x15936))+(((-1.0)*r10*sj4*x15935))+x15929);
evalcond[1]=((((-1.0)*r02*x15946))+(((-1.0)*r00*sj4*x15935))+((sj4*x15940))+(((-1.0)*x15930)));
evalcond[2]=(((x15943*x15950))+(((-1.0)*x15938*x15947))+(((-0.09465)*x15939))+(((-1.0)*px))+(((0.425)*x15950))+(((-0.10915)*x15930))+(((-0.09465)*x15941)));
evalcond[3]=(((x15943*x15952))+(((-1.0)*x15938*x15948))+(((-1.0)*py))+(((0.10915)*x15929))+(((0.425)*x15952))+(((-0.09465)*x15944))+(((-0.09465)*x15945)));
evalcond[4]=(((x15934*x15940))+((sj1*x15947))+((cj3*x15931))+(((-1.0)*r00*x15934*x15935))+(((-1.0)*x15937*x15951))+((sj3*x15941))+((sj3*x15939)));
evalcond[5]=(((sj1*x15948))+((cj3*x15933))+(((-1.0)*x15937*x15953))+(((-1.0)*r10*x15934*x15935))+((sj3*x15945))+((sj3*x15944))+((x15934*x15936)));
evalcond[6]=(((cj3*x15941))+((r00*x15949))+(((-1.0)*x15931*x15932))+(((-1.0)*cj4*x15932*x15940))+(((-1.0)*x15937*x15947))+((cj3*x15939))+(((-1.0)*x15942*x15951)));
evalcond[7]=(((cj3*x15945))+((cj3*x15944))+(((-1.0)*x15932*x15933))+(((-1.0)*x15937*x15948))+((r10*x15949))+(((-1.0)*cj4*x15932*x15936))+(((-1.0)*x15942*x15953)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x15954=cj5*cj5;
IkReal x15955=r21*r21;
IkReal x15956=r20*r20;
IkReal x15957=(r20*r21);
IkReal x15958=(sj1*sj2);
IkReal x15959=(r21*sj5);
IkReal x15960=(cj1*cj2);
IkReal x15961=(cj5*r20);
IkReal x15962=(cj5*sj5);
IkReal x15963=(cj3*r22);
IkReal x15964=(sj3*x15955);
CheckValue<IkReal> x15965 = IKatan2WithCheck(IkReal(((((-1.0)*r22*x15960))+((r20*sj5*x15963))+((cj5*r21*x15963))+((r22*x15958)))),IkReal((((cj3*x15955*x15962))+(((-2.0)*cj3*x15954*x15957))+((x15958*x15959))+(((-1.0)*x15959*x15960))+(((-1.0)*cj3*x15956*x15962))+(((-1.0)*x15958*x15961))+((x15960*x15961))+((cj3*x15957)))),IKFAST_ATAN2_MAGTHRESH);
if(!x15965.valid){
continue;
}
CheckValue<IkReal> x15966=IKPowWithIntegerCheck(IKsign((((sj3*(r22*r22)))+((sj3*x15954*x15956))+(((-1.0)*x15954*x15964))+(((-2.0)*sj3*x15957*x15962))+x15964)),-1);
if(!x15966.valid){
continue;
}
j4array[0]=((-1.5707963267949)+(x15965.value)+(((1.5707963267949)*(x15966.value))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x15967=IKsin(j4);
IkReal x15968=IKcos(j4);
IkReal x15969=(cj3*r21);
IkReal x15970=(r21*sj5);
IkReal x15971=(r20*sj5);
IkReal x15972=(cj5*r20);
IkReal x15973=((1.0)*x15968);
IkReal x15974=((1.0)*x15967);
evalcond[0]=((((-1.0)*x15972*x15974))+((x15967*x15970))+(((-1.0)*r22*x15973)));
evalcond[1]=(((cj2*sj1))+((cj5*r21*sj3))+((cj1*sj2))+((cj3*r22*x15967))+((sj3*x15971))+(((-1.0)*cj3*x15972*x15973))+((sj5*x15968*x15969)));
evalcond[2]=(((cj5*x15969))+(((-1.0)*r22*sj3*x15974))+(((-1.0)*cj1*cj2))+((sj1*sj2))+((sj3*x15968*x15972))+(((-1.0)*sj3*x15970*x15973))+((cj3*x15971)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x15975=(cj5*sj4);
IkReal x15976=(sj4*sj5);
if( IKabs(((((-1.0)*cj4*r02))+((r01*x15976))+(((-1.0)*r00*x15975)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*r11*x15976))+((r10*x15975))+((cj4*r12)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj4*r02))+((r01*x15976))+(((-1.0)*r00*x15975))))+IKsqr(((((-1.0)*r11*x15976))+((r10*x15975))+((cj4*r12))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j0array[0]=IKatan2(((((-1.0)*cj4*r02))+((r01*x15976))+(((-1.0)*r00*x15975))), ((((-1.0)*r11*x15976))+((r10*x15975))+((cj4*r12))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[8];
IkReal x15977=IKcos(j0);
IkReal x15978=IKsin(j0);
IkReal x15979=(r02*sj4);
IkReal x15980=((1.0)*sj3);
IkReal x15981=(r12*sj4);
IkReal x15982=(cj3*cj4);
IkReal x15983=((1.0)*cj5);
IkReal x15984=(r11*sj5);
IkReal x15985=((1.0)*cj1);
IkReal x15986=((0.39225)*sj1);
IkReal x15987=(cj5*r01);
IkReal x15988=(r01*sj5);
IkReal x15989=(r00*sj5);
IkReal x15990=((1.0)*sj1);
IkReal x15991=((0.39225)*cj2);
IkReal x15992=(cj5*r11);
IkReal x15993=(r10*sj5);
IkReal x15994=((1.0)*cj4);
IkReal x15995=(sj2*x15977);
IkReal x15996=(sj2*x15978);
IkReal x15997=(cj4*cj5*sj3);
IkReal x15998=(cj1*x15977);
IkReal x15999=(cj2*x15977);
IkReal x16000=(cj1*x15978);
IkReal x16001=(cj2*x15978);
evalcond[0]=(((sj4*x15984))+(((-1.0)*r10*sj4*x15983))+(((-1.0)*r12*x15994))+x15977);
evalcond[1]=(((sj4*x15988))+(((-1.0)*r02*x15994))+(((-1.0)*x15978))+(((-1.0)*r00*sj4*x15983)));
evalcond[2]=((((-1.0)*x15986*x15995))+(((-0.10915)*x15978))+(((0.425)*x15998))+(((-1.0)*px))+((x15991*x15998))+(((-0.09465)*x15989))+(((-0.09465)*x15987)));
evalcond[3]=((((-1.0)*x15986*x15996))+(((0.425)*x16000))+(((0.10915)*x15977))+((x15991*x16000))+(((-1.0)*py))+(((-0.09465)*x15993))+(((-0.09465)*x15992)));
evalcond[4]=((((-1.0)*x15985*x15999))+((sj1*x15995))+(((-1.0)*r00*x15982*x15983))+((x15982*x15988))+((sj3*x15989))+((sj3*x15987))+((cj3*x15979)));
evalcond[5]=((((-1.0)*x15985*x16001))+((cj3*x15981))+((sj1*x15996))+((x15982*x15984))+((sj3*x15992))+((sj3*x15993))+(((-1.0)*r10*x15982*x15983)));
evalcond[6]=(((cj3*x15989))+((cj3*x15987))+(((-1.0)*x15985*x15995))+(((-1.0)*cj4*x15980*x15988))+(((-1.0)*x15990*x15999))+(((-1.0)*x15979*x15980))+((r00*x15997)));
evalcond[7]=((((-1.0)*x15985*x15996))+(((-1.0)*x15990*x16001))+(((-1.0)*cj4*x15980*x15984))+((r10*x15997))+(((-1.0)*x15980*x15981))+((cj3*x15993))+((cj3*x15992)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

}

}
}
}

}

}
}
}
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    // HACK should be 1e-5*norm
    IkReal tol = 1e-2*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
template<int D>
static inline bool matrixinverse(IkReal* A)
{
    int n = D;
    int info;
    IkReal IKFAST_ALIGNED16(work[D*D*(D-1)]);
    int ipiv[D];
    dgetrf_(&n, &n, A, &n, &ipiv[0], &info);
    if( info != 0 ) {
        return false;
    }
    int worksize=D*D*(D-1);
    dgetri_(&n, A, &n, &ipiv[0], &work[0], &worksize, &info);
    return info==0;
}

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        // HACK should be tol*100
        if( IKabs(wi[i]) < 5e-5 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - weldingrobot (38d211c17005d08adf0686cd120aff36)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
